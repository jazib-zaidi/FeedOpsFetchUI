var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) =>
  typeof require !== 'undefined'
    ? require
    : typeof Proxy !== 'undefined'
    ? new Proxy(x, {
        get: (a, b) => (typeof require !== 'undefined' ? require : a)[b],
      })
    : x)(function (x) {
  if (typeof require !== 'undefined') return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) =>
  function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])((fn = 0))), res;
  };
var __commonJS = (cb2, mod) =>
  function __require2() {
    return (
      mod ||
        (0, cb2[__getOwnPropNames(cb2)[0]])(
          (mod = { exports: {} }).exports,
          mod
        ),
      mod.exports
    );
  };
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === 'object') || typeof from === 'function') {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, 'default', { value: mod, enumerable: true })
      : target,
    mod
  )
);
var __toCommonJS = (mod) =>
  __copyProps(__defProp({}, '__esModule', { value: true }), mod);

// node_modules/snakecase-keys/node_modules/map-obj/index.js
var require_map_obj = __commonJS({
  'node_modules/snakecase-keys/node_modules/map-obj/index.js'(exports, module) {
    'use strict';
    var isObject4 = (x) =>
      typeof x === 'object' &&
      x !== null &&
      !(x instanceof RegExp) &&
      !(x instanceof Error) &&
      !(x instanceof Date);
    module.exports = function mapObj(obj, fn, opts, seen) {
      opts = Object.assign(
        {
          deep: false,
          target: {},
        },
        opts
      );
      seen = seen || /* @__PURE__ */ new WeakMap();
      if (seen.has(obj)) {
        return seen.get(obj);
      }
      seen.set(obj, opts.target);
      const target = opts.target;
      delete opts.target;
      for (const key of Object.keys(obj)) {
        const val = obj[key];
        const res = fn(key, val, obj);
        let newVal = res[1];
        if (opts.deep && isObject4(newVal)) {
          if (Array.isArray(newVal)) {
            newVal = newVal.map((x) =>
              isObject4(x) ? mapObj(x, fn, opts, seen) : x
            );
          } else {
            newVal = mapObj(newVal, fn, opts, seen);
          }
        }
        target[res[0]] = newVal;
      }
      return target;
    };
  },
});

// node_modules/to-no-case/index.js
var require_to_no_case = __commonJS({
  'node_modules/to-no-case/index.js'(exports, module) {
    module.exports = toNoCase;
    var hasSpace = /\s/;
    var hasCamel = /[a-z][A-Z]/;
    var hasSeparator = /[\W_]/;
    function toNoCase(string) {
      if (hasSpace.test(string)) return string.toLowerCase();
      if (hasSeparator.test(string)) string = unseparate(string);
      if (hasCamel.test(string)) string = uncamelize(string);
      return string.toLowerCase();
    }
    var separatorSplitter = /[\W_]+(.|$)/g;
    function unseparate(string) {
      return string.replace(separatorSplitter, function (m, next) {
        return next ? ' ' + next : '';
      });
    }
    var camelSplitter = /(.)([A-Z]+)/g;
    function uncamelize(string) {
      return string.replace(camelSplitter, function (m, previous, uppers) {
        return previous + ' ' + uppers.toLowerCase().split('').join(' ');
      });
    }
  },
});

// node_modules/to-space-case/index.js
var require_to_space_case = __commonJS({
  'node_modules/to-space-case/index.js'(exports, module) {
    var clean = require_to_no_case();
    module.exports = toSpaceCase;
    function toSpaceCase(string) {
      return clean(string).replace(/[\W_]+(.|$)/g, function (matches2, match) {
        return match ? ' ' + match : '';
      });
    }
  },
});

// node_modules/to-snake-case/index.js
var require_to_snake_case = __commonJS({
  'node_modules/to-snake-case/index.js'(exports, module) {
    var toSpace = require_to_space_case();
    module.exports = toSnakeCase;
    function toSnakeCase(string) {
      return toSpace(string).replace(/\s/g, '_');
    }
  },
});

// node_modules/snakecase-keys/index.js
var require_snakecase_keys = __commonJS({
  'node_modules/snakecase-keys/index.js'(exports, module) {
    'use strict';
    var map2 = require_map_obj();
    var snakeCase2 = require_to_snake_case();
    module.exports = function (obj, options) {
      options = Object.assign({ deep: true }, options);
      return map2(
        obj,
        function (key, val) {
          return [snakeCase2(key), val];
        },
        options
      );
    };
  },
});

// node_modules/reselect/lib/index.js
var require_lib = __commonJS({
  'node_modules/reselect/lib/index.js'(exports) {
    'use strict';
    exports.__esModule = true;
    exports.defaultMemoize = defaultMemoize;
    exports.createSelectorCreator = createSelectorCreator;
    exports.createStructuredSelector = createStructuredSelector;
    function defaultEqualityCheck(a, b) {
      return a === b;
    }
    function areArgumentsShallowlyEqual(equalityCheck, prev, next) {
      if (prev === null || next === null || prev.length !== next.length) {
        return false;
      }
      var length = prev.length;
      for (var i = 0; i < length; i++) {
        if (!equalityCheck(prev[i], next[i])) {
          return false;
        }
      }
      return true;
    }
    function defaultMemoize(func) {
      var equalityCheck =
        arguments.length > 1 && arguments[1] !== void 0
          ? arguments[1]
          : defaultEqualityCheck;
      var lastArgs = null;
      var lastResult = null;
      return function () {
        if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {
          lastResult = func.apply(null, arguments);
        }
        lastArgs = arguments;
        return lastResult;
      };
    }
    function getDependencies(funcs) {
      var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
      if (
        !dependencies.every(function (dep) {
          return typeof dep === 'function';
        })
      ) {
        var dependencyTypes = dependencies
          .map(function (dep) {
            return typeof dep;
          })
          .join(', ');
        throw new Error(
          'Selector creators expect all input-selectors to be functions, ' +
            ('instead received the following types: [' + dependencyTypes + ']')
        );
      }
      return dependencies;
    }
    function createSelectorCreator(memoize2) {
      for (
        var _len = arguments.length,
          memoizeOptions = Array(_len > 1 ? _len - 1 : 0),
          _key = 1;
        _key < _len;
        _key++
      ) {
        memoizeOptions[_key - 1] = arguments[_key];
      }
      return function () {
        for (
          var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0;
          _key2 < _len2;
          _key2++
        ) {
          funcs[_key2] = arguments[_key2];
        }
        var recomputations = 0;
        var resultFunc = funcs.pop();
        var dependencies = getDependencies(funcs);
        var memoizedResultFunc = memoize2.apply(
          void 0,
          [
            function () {
              recomputations++;
              return resultFunc.apply(null, arguments);
            },
          ].concat(memoizeOptions)
        );
        var selector = defaultMemoize(function () {
          var params = [];
          var length = dependencies.length;
          for (var i = 0; i < length; i++) {
            params.push(dependencies[i].apply(null, arguments));
          }
          return memoizedResultFunc.apply(null, params);
        });
        selector.resultFunc = resultFunc;
        selector.recomputations = function () {
          return recomputations;
        };
        selector.resetRecomputations = function () {
          return (recomputations = 0);
        };
        return selector;
      };
    }
    var createSelector53 = (exports.createSelector =
      createSelectorCreator(defaultMemoize));
    function createStructuredSelector(selectors) {
      var selectorCreator =
        arguments.length > 1 && arguments[1] !== void 0
          ? arguments[1]
          : createSelector53;
      if (typeof selectors !== 'object') {
        throw new Error(
          'createStructuredSelector expects first argument to be an object ' +
            ('where each property is a selector, instead received a ' +
              typeof selectors)
        );
      }
      var objectKeys = Object.keys(selectors);
      return selectorCreator(
        objectKeys.map(function (key) {
          return selectors[key];
        }),
        function () {
          for (
            var _len3 = arguments.length, values2 = Array(_len3), _key3 = 0;
            _key3 < _len3;
            _key3++
          ) {
            values2[_key3] = arguments[_key3];
          }
          return values2.reduce(function (composition, value, index) {
            composition[objectKeys[index]] = value;
            return composition;
          }, {});
        }
      );
    }
  },
});

// node_modules/lodash/lodash.js
var require_lodash = __commonJS({
  'node_modules/lodash/lodash.js'(exports, module) {
    (function () {
      var undefined2;
      var VERSION2 = '4.17.21';
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT =
          'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function',
        INVALID_TEMPL_VAR_ERROR_TEXT =
          'Invalid `variable` option passed into `_.template`';
      var HASH_UNDEFINED = '__lodash_hash_undefined__';
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = '__lodash_placeholder__';
      var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';
      var HOT_COUNT = 800,
        HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 17976931348623157e292,
        NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX2 = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ['ary', WRAP_ARY_FLAG],
        ['bind', WRAP_BIND_FLAG],
        ['bindKey', WRAP_BIND_KEY_FLAG],
        ['curry', WRAP_CURRY_FLAG],
        ['curryRight', WRAP_CURRY_RIGHT_FLAG],
        ['flip', WRAP_FLIP_FLAG],
        ['partial', WRAP_PARTIAL_FLAG],
        ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
        ['rearg', WRAP_REARG_FLAG],
      ];
      var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';
      var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';
      var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName =
          /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange =
          rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange =
          ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = '\\ufe0e\\ufe0f',
        rsBreakRange =
          rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc =
          '[^' +
          rsAstralRange +
          rsBreakRange +
          rsDigits +
          rsDingbatRange +
          rsLowerRange +
          rsUpperRange +
          ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = '\\u200d';
      var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin =
          '(?:' +
          rsZWJ +
          '(?:' +
          [rsNonAstral, rsRegional, rsSurrPair].join('|') +
          ')' +
          rsOptVar +
          reOptMod +
          ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji =
          '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol =
          '(?:' +
          [
            rsNonAstral + rsCombo + '?',
            rsCombo,
            rsRegional,
            rsSurrPair,
            rsAstral,
          ].join('|') +
          ')';
      var reApos = RegExp(rsApos, 'g');
      var reComboMark = RegExp(rsCombo, 'g');
      var reUnicode = RegExp(
        rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq,
        'g'
      );
      var reUnicodeWord = RegExp(
        [
          rsUpper +
            '?' +
            rsLower +
            '+' +
            rsOptContrLower +
            '(?=' +
            [rsBreak, rsUpper, '$'].join('|') +
            ')',
          rsMiscUpper +
            '+' +
            rsOptContrUpper +
            '(?=' +
            [rsBreak, rsUpper + rsMiscLower, '$'].join('|') +
            ')',
          rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
          rsUpper + '+' + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji,
        ].join('|'),
        'g'
      );
      var reHasUnicode = RegExp(
        '[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']'
      );
      var reHasUnicodeWord =
        /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        'Array',
        'Buffer',
        'DataView',
        'Date',
        'Error',
        'Float32Array',
        'Float64Array',
        'Function',
        'Int8Array',
        'Int16Array',
        'Int32Array',
        'Map',
        'Math',
        'Object',
        'Promise',
        'RegExp',
        'Set',
        'String',
        'Symbol',
        'TypeError',
        'Uint8Array',
        'Uint8ClampedArray',
        'Uint16Array',
        'Uint32Array',
        'WeakMap',
        '_',
        'clearTimeout',
        'isFinite',
        'parseInt',
        'setTimeout',
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] =
        typedArrayTags[float64Tag] =
        typedArrayTags[int8Tag] =
        typedArrayTags[int16Tag] =
        typedArrayTags[int32Tag] =
        typedArrayTags[uint8Tag] =
        typedArrayTags[uint8ClampedTag] =
        typedArrayTags[uint16Tag] =
        typedArrayTags[uint32Tag] =
          true;
      typedArrayTags[argsTag] =
        typedArrayTags[arrayTag] =
        typedArrayTags[arrayBufferTag] =
        typedArrayTags[boolTag] =
        typedArrayTags[dataViewTag] =
        typedArrayTags[dateTag] =
        typedArrayTags[errorTag] =
        typedArrayTags[funcTag] =
        typedArrayTags[mapTag] =
        typedArrayTags[numberTag] =
        typedArrayTags[objectTag] =
        typedArrayTags[regexpTag] =
        typedArrayTags[setTag] =
        typedArrayTags[stringTag] =
        typedArrayTags[weakMapTag] =
          false;
      var cloneableTags = {};
      cloneableTags[argsTag] =
        cloneableTags[arrayTag] =
        cloneableTags[arrayBufferTag] =
        cloneableTags[dataViewTag] =
        cloneableTags[boolTag] =
        cloneableTags[dateTag] =
        cloneableTags[float32Tag] =
        cloneableTags[float64Tag] =
        cloneableTags[int8Tag] =
        cloneableTags[int16Tag] =
        cloneableTags[int32Tag] =
        cloneableTags[mapTag] =
        cloneableTags[numberTag] =
        cloneableTags[objectTag] =
        cloneableTags[regexpTag] =
        cloneableTags[setTag] =
        cloneableTags[stringTag] =
        cloneableTags[symbolTag] =
        cloneableTags[uint8Tag] =
        cloneableTags[uint8ClampedTag] =
        cloneableTags[uint16Tag] =
        cloneableTags[uint32Tag] =
          true;
      cloneableTags[errorTag] =
        cloneableTags[funcTag] =
        cloneableTags[weakMapTag] =
          false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        '\xC0': 'A',
        '\xC1': 'A',
        '\xC2': 'A',
        '\xC3': 'A',
        '\xC4': 'A',
        '\xC5': 'A',
        '\xE0': 'a',
        '\xE1': 'a',
        '\xE2': 'a',
        '\xE3': 'a',
        '\xE4': 'a',
        '\xE5': 'a',
        '\xC7': 'C',
        '\xE7': 'c',
        '\xD0': 'D',
        '\xF0': 'd',
        '\xC8': 'E',
        '\xC9': 'E',
        '\xCA': 'E',
        '\xCB': 'E',
        '\xE8': 'e',
        '\xE9': 'e',
        '\xEA': 'e',
        '\xEB': 'e',
        '\xCC': 'I',
        '\xCD': 'I',
        '\xCE': 'I',
        '\xCF': 'I',
        '\xEC': 'i',
        '\xED': 'i',
        '\xEE': 'i',
        '\xEF': 'i',
        '\xD1': 'N',
        '\xF1': 'n',
        '\xD2': 'O',
        '\xD3': 'O',
        '\xD4': 'O',
        '\xD5': 'O',
        '\xD6': 'O',
        '\xD8': 'O',
        '\xF2': 'o',
        '\xF3': 'o',
        '\xF4': 'o',
        '\xF5': 'o',
        '\xF6': 'o',
        '\xF8': 'o',
        '\xD9': 'U',
        '\xDA': 'U',
        '\xDB': 'U',
        '\xDC': 'U',
        '\xF9': 'u',
        '\xFA': 'u',
        '\xFB': 'u',
        '\xFC': 'u',
        '\xDD': 'Y',
        '\xFD': 'y',
        '\xFF': 'y',
        '\xC6': 'Ae',
        '\xE6': 'ae',
        '\xDE': 'Th',
        '\xFE': 'th',
        '\xDF': 'ss',
        // Latin Extended-A block.
        '\u0100': 'A',
        '\u0102': 'A',
        '\u0104': 'A',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u0105': 'a',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010A': 'C',
        '\u010C': 'C',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010B': 'c',
        '\u010D': 'c',
        '\u010E': 'D',
        '\u0110': 'D',
        '\u010F': 'd',
        '\u0111': 'd',
        '\u0112': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u0118': 'E',
        '\u011A': 'E',
        '\u0113': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u0119': 'e',
        '\u011B': 'e',
        '\u011C': 'G',
        '\u011E': 'G',
        '\u0120': 'G',
        '\u0122': 'G',
        '\u011D': 'g',
        '\u011F': 'g',
        '\u0121': 'g',
        '\u0123': 'g',
        '\u0124': 'H',
        '\u0126': 'H',
        '\u0125': 'h',
        '\u0127': 'h',
        '\u0128': 'I',
        '\u012A': 'I',
        '\u012C': 'I',
        '\u012E': 'I',
        '\u0130': 'I',
        '\u0129': 'i',
        '\u012B': 'i',
        '\u012D': 'i',
        '\u012F': 'i',
        '\u0131': 'i',
        '\u0134': 'J',
        '\u0135': 'j',
        '\u0136': 'K',
        '\u0137': 'k',
        '\u0138': 'k',
        '\u0139': 'L',
        '\u013B': 'L',
        '\u013D': 'L',
        '\u013F': 'L',
        '\u0141': 'L',
        '\u013A': 'l',
        '\u013C': 'l',
        '\u013E': 'l',
        '\u0140': 'l',
        '\u0142': 'l',
        '\u0143': 'N',
        '\u0145': 'N',
        '\u0147': 'N',
        '\u014A': 'N',
        '\u0144': 'n',
        '\u0146': 'n',
        '\u0148': 'n',
        '\u014B': 'n',
        '\u014C': 'O',
        '\u014E': 'O',
        '\u0150': 'O',
        '\u014D': 'o',
        '\u014F': 'o',
        '\u0151': 'o',
        '\u0154': 'R',
        '\u0156': 'R',
        '\u0158': 'R',
        '\u0155': 'r',
        '\u0157': 'r',
        '\u0159': 'r',
        '\u015A': 'S',
        '\u015C': 'S',
        '\u015E': 'S',
        '\u0160': 'S',
        '\u015B': 's',
        '\u015D': 's',
        '\u015F': 's',
        '\u0161': 's',
        '\u0162': 'T',
        '\u0164': 'T',
        '\u0166': 'T',
        '\u0163': 't',
        '\u0165': 't',
        '\u0167': 't',
        '\u0168': 'U',
        '\u016A': 'U',
        '\u016C': 'U',
        '\u016E': 'U',
        '\u0170': 'U',
        '\u0172': 'U',
        '\u0169': 'u',
        '\u016B': 'u',
        '\u016D': 'u',
        '\u016F': 'u',
        '\u0171': 'u',
        '\u0173': 'u',
        '\u0174': 'W',
        '\u0175': 'w',
        '\u0176': 'Y',
        '\u0177': 'y',
        '\u0178': 'Y',
        '\u0179': 'Z',
        '\u017B': 'Z',
        '\u017D': 'Z',
        '\u017A': 'z',
        '\u017C': 'z',
        '\u017E': 'z',
        '\u0132': 'IJ',
        '\u0133': 'ij',
        '\u0152': 'Oe',
        '\u0153': 'oe',
        '\u0149': "'n",
        '\u017F': 's',
      };
      var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;',
      };
      var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'",
      };
      var stringEscapes = {
        '\\': '\\',
        "'": "'",
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029',
      };
      var freeParseFloat = parseFloat,
        freeParseInt = parseInt;
      var freeGlobal =
        typeof global == 'object' &&
        global &&
        global.Object === Object &&
        global;
      var freeSelf =
        typeof self == 'object' && self && self.Object === Object && self;
      var root2 = freeGlobal || freeSelf || Function('return this')();
      var freeExports =
        typeof exports == 'object' && exports && !exports.nodeType && exports;
      var freeModule =
        freeExports &&
        typeof module == 'object' &&
        module &&
        !module.nodeType &&
        module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = (function () {
        try {
          var types =
            freeModule &&
            freeModule.require &&
            freeModule.require('util').types;
          if (types) {
            return types;
          }
          return (
            freeProcess && freeProcess.binding && freeProcess.binding('util')
          );
        } catch (e) {}
      })();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee2, accumulator) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee2(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee2) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee2(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee2) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee2(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result2 = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result2[resIndex++] = value;
          }
        }
        return result2;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee2) {
        var index = -1,
          length = array == null ? 0 : array.length,
          result2 = Array(length);
        while (++index < length) {
          result2[index] = iteratee2(array[index], index, array);
        }
        return result2;
      }
      function arrayPush(array, values2) {
        var index = -1,
          length = values2.length,
          offset = array.length;
        while (++index < length) {
          array[offset + index] = values2[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee2, accumulator, initAccum) {
        var index = -1,
          length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee2(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee2, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee2(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1,
          length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty('length');
      function asciiToArray(string) {
        return string.split('');
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result2;
        eachFunc(collection, function (value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result2 = key;
            return false;
          }
        });
        return result2;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value
          ? strictIndexOf(array, value, fromIndex)
          : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1,
          length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee2) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee2) / length : NAN;
      }
      function baseProperty(key) {
        return function (object2) {
          return object2 == null ? undefined2 : object2[key];
        };
      }
      function basePropertyOf(object2) {
        return function (key) {
          return object2 == null ? undefined2 : object2[key];
        };
      }
      function baseReduce(
        collection,
        iteratee2,
        accumulator,
        initAccum,
        eachFunc
      ) {
        eachFunc(collection, function (value, index, collection2) {
          accumulator = initAccum
            ? ((initAccum = false), value)
            : iteratee2(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee2) {
        var result2,
          index = -1,
          length = array.length;
        while (++index < length) {
          var current = iteratee2(array[index]);
          if (current !== undefined2) {
            result2 = result2 === undefined2 ? current : result2 + current;
          }
        }
        return result2;
      }
      function baseTimes(n, iteratee2) {
        var index = -1,
          result2 = Array(n);
        while (++index < n) {
          result2[index] = iteratee2(index);
        }
        return result2;
      }
      function baseToPairs(object2, props) {
        return arrayMap(props, function (key) {
          return [key, object2[key]];
        });
      }
      function baseTrim(string) {
        return string
          ? string
              .slice(0, trimmedEndIndex(string) + 1)
              .replace(reTrimStart, '')
          : string;
      }
      function baseUnary(func) {
        return function (value) {
          return func(value);
        };
      }
      function baseValues(object2, props) {
        return arrayMap(props, function (key) {
          return object2[key];
        });
      }
      function cacheHas(cache2, key) {
        return cache2.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1,
          length = strSymbols.length;
        while (
          ++index < length &&
          baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
        ) {}
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length,
          result2 = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result2;
          }
        }
        return result2;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
      }
      function getValue(object2, key) {
        return object2 == null ? undefined2 : object2[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data,
          result2 = [];
        while (!(data = iterator.next()).done) {
          result2.push(data.value);
        }
        return result2;
      }
      function mapToArray(map2) {
        var index = -1,
          result2 = Array(map2.size);
        map2.forEach(function (value, key) {
          result2[++index] = [key, value];
        });
        return result2;
      }
      function overArg(func, transform2) {
        return function (arg) {
          return func(transform2(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1,
          length = array.length,
          resIndex = 0,
          result2 = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result2[resIndex++] = index;
          }
        }
        return result2;
      }
      function setToArray(set) {
        var index = -1,
          result2 = Array(set.size);
        set.forEach(function (value) {
          result2[++index] = value;
        });
        return result2;
      }
      function setToPairs(set) {
        var index = -1,
          result2 = Array(set.size);
        set.forEach(function (value) {
          result2[++index] = [value, value];
        });
        return result2;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1,
          length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string)
          ? unicodeToArray(string)
          : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {}
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result2 = (reUnicode.lastIndex = 0);
        while (reUnicode.test(string)) {
          ++result2;
        }
        return result2;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context =
          context == null
            ? root2
            : _15.defaults(
                root2.Object(),
                context,
                _15.pick(root2, contextProps)
              );
        var Array2 = context.Array,
          Date2 = context.Date,
          Error2 = context.Error,
          Function2 = context.Function,
          Math2 = context.Math,
          Object2 = context.Object,
          RegExp2 = context.RegExp,
          String2 = context.String,
          TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype,
          funcProto = Function2.prototype,
          objectProto = Object2.prototype;
        var coreJsData = context['__core-js_shared__'];
        var funcToString = funcProto.toString;
        var hasOwnProperty2 = objectProto.hasOwnProperty;
        var idCounter2 = 0;
        var maskSrcKey = (function () {
          var uid = /[^.]+$/.exec(
            (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ''
          );
          return uid ? 'Symbol(src)_1.' + uid : '';
        })();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root2._;
        var reIsNative = RegExp2(
          '^' +
            funcToString
              .call(hasOwnProperty2)
              .replace(reRegExpChar, '\\$&')
              .replace(
                /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                '$1.*?'
              ) +
            '$'
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined2,
          Symbol2 = context.Symbol,
          Uint8Array2 = context.Uint8Array,
          allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2,
          getPrototype = overArg(Object2.getPrototypeOf, Object2),
          objectCreate = Object2.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2,
          symIterator = Symbol2 ? Symbol2.iterator : undefined2,
          symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
        var defineProperty = (function () {
          try {
            var func = getNative(Object2, 'defineProperty');
            func({}, '', {});
            return func;
          } catch (e) {}
        })();
        var ctxClearTimeout =
            context.clearTimeout !== root2.clearTimeout && context.clearTimeout,
          ctxNow = Date2 && Date2.now !== root2.Date.now && Date2.now,
          ctxSetTimeout =
            context.setTimeout !== root2.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil,
          nativeFloor = Math2.floor,
          nativeGetSymbols = Object2.getOwnPropertySymbols,
          nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys2 = overArg(Object2.keys, Object2),
          nativeMax = Math2.max,
          nativeMin = Math2.min,
          nativeNow = Date2.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math2.random,
          nativeReverse = arrayProto.reverse;
        var DataView2 = getNative(context, 'DataView'),
          Map2 = getNative(context, 'Map'),
          Promise2 = getNative(context, 'Promise'),
          Set2 = getNative(context, 'Set'),
          WeakMap2 = getNative(context, 'WeakMap'),
          nativeCreate2 = getNative(Object2, 'create');
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView2),
          mapCtorString = toSource(Map2),
          promiseCtorString = toSource(Promise2),
          setCtorString = toSource(Set2),
          weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined2,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2,
          symbolToString = symbolProto ? symbolProto.toString : undefined2;
        function lodash(value) {
          if (
            isObjectLike(value) &&
            !isArray(value) &&
            !(value instanceof LazyWrapper)
          ) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty2.call(value, '__wrapped__')) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate2 = /* @__PURE__ */ (function () {
          function object2() {}
          return function (proto) {
            if (!isObject4(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object2.prototype = proto;
            var result3 = new object2();
            object2.prototype = undefined2;
            return result3;
          };
        })();
        function baseLodash() {}
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined2;
        }
        lodash.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          escape: reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          evaluate: reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          interpolate: reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          variable: '',
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          imports: {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            _: lodash,
          },
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate2(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result3 = new LazyWrapper(this.__wrapped__);
          result3.__actions__ = copyArray(this.__actions__);
          result3.__dir__ = this.__dir__;
          result3.__filtered__ = this.__filtered__;
          result3.__iteratees__ = copyArray(this.__iteratees__);
          result3.__takeCount__ = this.__takeCount__;
          result3.__views__ = copyArray(this.__views__);
          return result3;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result3 = new LazyWrapper(this);
            result3.__dir__ = -1;
            result3.__filtered__ = true;
          } else {
            result3 = this.clone();
            result3.__dir__ *= -1;
          }
          return result3;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : start - 1,
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);
          if (
            !isArr ||
            (!isRight && arrLength == length && takeCount == length)
          ) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result3 = [];
          outer: while (length-- && resIndex < takeCount) {
            index += dir;
            var iterIndex = -1,
              value = array[index];
            while (++iterIndex < iterLength) {
              var data = iteratees[iterIndex],
                iteratee3 = data.iteratee,
                type = data.type,
                computed = iteratee3(value);
              if (type == LAZY_MAP_FLAG) {
                value = computed;
              } else if (!computed) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result3[resIndex++] = value;
          }
          return result3;
        }
        LazyWrapper.prototype = baseCreate2(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result3 = this.has(key) && delete this.__data__[key];
          this.size -= result3 ? 1 : 0;
          return result3;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate2) {
            var result3 = data[key];
            return result3 === HASH_UNDEFINED ? undefined2 : result3;
          }
          return hasOwnProperty2.call(data, key) ? data[key] : undefined2;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate2
            ? data[key] !== undefined2
            : hasOwnProperty2.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] =
            nativeCreate2 && value === undefined2 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__,
            index = assocIndexOf(data, key);
          return index < 0 ? undefined2 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__,
            index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1,
            length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            hash: new Hash(),
            map: new (Map2 || ListCache)(),
            string: new Hash(),
          };
        }
        function mapCacheDelete(key) {
          var result3 = getMapData(this, key)['delete'](key);
          this.size -= result3 ? 1 : 0;
          return result3;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key),
            size3 = data.size;
          data.set(key, value);
          this.size += data.size == size3 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values3) {
          var index = -1,
            length = values3 == null ? 0 : values3.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values3[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = (this.__data__ = new ListCache(entries));
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__,
            result3 = data['delete'](key);
          this.size = data.size;
          return result3;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs2 = data.__data__;
            if (!Map2 || pairs2.length < LARGE_ARRAY_SIZE - 1) {
              pairs2.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs2);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value),
            isArg = !isArr && isArguments2(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray2(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result3 = skipIndexes ? baseTimes(value.length, String2) : [],
            length = result3.length;
          for (var key in value) {
            if (
              (inherited || hasOwnProperty2.call(value, key)) &&
              !(
                skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
                (key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
                  (isBuff && (key == 'offset' || key == 'parent')) || // PhantomJS 2 has enumerable non-index properties on typed arrays.
                  (isType &&
                    (key == 'buffer' ||
                      key == 'byteLength' ||
                      key == 'byteOffset')) || // Skip index properties.
                  isIndex(key, length))
              )
            ) {
              result3.push(key);
            }
          }
          return result3;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined2;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object2, key, value) {
          if (
            (value !== undefined2 && !eq2(object2[key], value)) ||
            (value === undefined2 && !(key in object2))
          ) {
            baseAssignValue(object2, key, value);
          }
        }
        function assignValue(object2, key, value) {
          var objValue = object2[key];
          if (
            !(hasOwnProperty2.call(object2, key) && eq2(objValue, value)) ||
            (value === undefined2 && !(key in object2))
          ) {
            baseAssignValue(object2, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq2(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee3, accumulator) {
          baseEach(collection, function (value, key, collection2) {
            setter(accumulator, value, iteratee3(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object2, source) {
          return object2 && copyObject(source, keys2(source), object2);
        }
        function baseAssignIn(object2, source) {
          return object2 && copyObject(source, keysIn(source), object2);
        }
        function baseAssignValue(object2, key, value) {
          if (key == '__proto__' && defineProperty) {
            defineProperty(object2, key, {
              configurable: true,
              enumerable: true,
              value: value,
              writable: true,
            });
          } else {
            object2[key] = value;
          }
        }
        function baseAt(object2, paths) {
          var index = -1,
            length = paths.length,
            result3 = Array2(length),
            skip = object2 == null;
          while (++index < length) {
            result3[index] = skip ? undefined2 : get2(object2, paths[index]);
          }
          return result3;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined2) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined2) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object2, stack) {
          var result3,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result3 = object2
              ? customizer(value, key, object2, stack)
              : customizer(value);
          }
          if (result3 !== undefined2) {
            return result3;
          }
          if (!isObject4(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result3 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result3);
            }
          } else {
            var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || (isFunc && !object2)) {
              result3 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat
                  ? copySymbolsIn(value, baseAssignIn(result3, value))
                  : copySymbols(value, baseAssign(result3, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object2 ? value : {};
              }
              result3 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result3);
          if (isSet(value)) {
            value.forEach(function (subValue) {
              result3.add(
                baseClone(subValue, bitmask, customizer, subValue, value, stack)
              );
            });
          } else if (isMap(value)) {
            value.forEach(function (subValue, key2) {
              result3.set(
                key2,
                baseClone(subValue, bitmask, customizer, key2, value, stack)
              );
            });
          }
          var keysFunc = isFull
            ? isFlat
              ? getAllKeysIn
              : getAllKeys
            : isFlat
            ? keysIn
            : keys2;
          var props = isArr ? undefined2 : keysFunc(value);
          arrayEach(props || value, function (subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(
              result3,
              key2,
              baseClone(subValue, bitmask, customizer, key2, value, stack)
            );
          });
          return result3;
        }
        function baseConforms(source) {
          var props = keys2(source);
          return function (object2) {
            return baseConformsTo(object2, source, props);
          };
        }
        function baseConformsTo(object2, source, props) {
          var length = props.length;
          if (object2 == null) {
            return !length;
          }
          object2 = Object2(object2);
          while (length--) {
            var key = props[length],
              predicate = source[key],
              value = object2[key];
            if (
              (value === undefined2 && !(key in object2)) ||
              !predicate(value)
            ) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function () {
            func.apply(undefined2, args);
          }, wait);
        }
        function baseDifference(array, values3, iteratee3, comparator) {
          var index = -1,
            includes2 = arrayIncludes,
            isCommon = true,
            length = array.length,
            result3 = [],
            valuesLength = values3.length;
          if (!length) {
            return result3;
          }
          if (iteratee3) {
            values3 = arrayMap(values3, baseUnary(iteratee3));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values3.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values3 = new SetCache(values3);
          }
          outer: while (++index < length) {
            var value = array[index],
              computed = iteratee3 == null ? value : iteratee3(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values3[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result3.push(value);
            } else if (!includes2(values3, computed, comparator)) {
              result3.push(value);
            }
          }
          return result3;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result3 = true;
          baseEach(collection, function (value, index, collection2) {
            result3 = !!predicate(value, index, collection2);
            return result3;
          });
          return result3;
        }
        function baseExtremum(array, iteratee3, comparator) {
          var index = -1,
            length = array.length;
          while (++index < length) {
            var value = array[index],
              current = iteratee3(value);
            if (
              current != null &&
              (computed === undefined2
                ? current === current && !isSymbol(current)
                : comparator(current, computed))
            ) {
              var computed = current,
                result3 = value;
            }
          }
          return result3;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined2 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result3 = [];
          baseEach(collection, function (value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result3.push(value);
            }
          });
          return result3;
        }
        function baseFlatten(array, depth, predicate, isStrict, result3) {
          var index = -1,
            length = array.length;
          predicate || (predicate = isFlattenable);
          result3 || (result3 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result3);
              } else {
                arrayPush(result3, value);
              }
            } else if (!isStrict) {
              result3[result3.length] = value;
            }
          }
          return result3;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object2, iteratee3) {
          return object2 && baseFor(object2, iteratee3, keys2);
        }
        function baseForOwnRight(object2, iteratee3) {
          return object2 && baseForRight(object2, iteratee3, keys2);
        }
        function baseFunctions(object2, props) {
          return arrayFilter(props, function (key) {
            return isFunction2(object2[key]);
          });
        }
        function baseGet(object2, path) {
          path = castPath(path, object2);
          var index = 0,
            length = path.length;
          while (object2 != null && index < length) {
            object2 = object2[toKey(path[index++])];
          }
          return index && index == length ? object2 : undefined2;
        }
        function baseGetAllKeys(object2, keysFunc, symbolsFunc) {
          var result3 = keysFunc(object2);
          return isArray(object2)
            ? result3
            : arrayPush(result3, symbolsFunc(object2));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined2 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value)
            ? getRawTag(value)
            : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object2, key) {
          return object2 != null && hasOwnProperty2.call(object2, key);
        }
        function baseHasIn(object2, key) {
          return object2 != null && key in Object2(object2);
        }
        function baseInRange(number, start, end) {
          return (
            number >= nativeMin(start, end) && number < nativeMax(start, end)
          );
        }
        function baseIntersection(arrays, iteratee3, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array2(othLength),
            maxLength = Infinity,
            result3 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee3) {
              array = arrayMap(array, baseUnary(iteratee3));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] =
              !comparator &&
              (iteratee3 || (length >= 120 && array.length >= 120))
                ? new SetCache(othIndex && array)
                : undefined2;
          }
          array = arrays[0];
          var index = -1,
            seen = caches[0];
          outer: while (++index < length && result3.length < maxLength) {
            var value = array[index],
              computed = iteratee3 ? iteratee3(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (
              !(seen
                ? cacheHas(seen, computed)
                : includes2(result3, computed, comparator))
            ) {
              othIndex = othLength;
              while (--othIndex) {
                var cache2 = caches[othIndex];
                if (
                  !(cache2
                    ? cacheHas(cache2, computed)
                    : includes2(arrays[othIndex], computed, comparator))
                ) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed);
              }
              result3.push(value);
            }
          }
          return result3;
        }
        function baseInverter(object2, setter, iteratee3, accumulator) {
          baseForOwn(object2, function (value, key, object3) {
            setter(accumulator, iteratee3(value), key, object3);
          });
          return accumulator;
        }
        function baseInvoke(object2, path, args) {
          path = castPath(path, object2);
          object2 = parent(object2, path);
          var func = object2 == null ? object2 : object2[toKey(last2(path))];
          return func == null ? undefined2 : apply(func, object2, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (
            value == null ||
            other == null ||
            (!isObjectLike(value) && !isObjectLike(other))
          ) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(
            value,
            other,
            bitmask,
            customizer,
            baseIsEqual,
            stack
          );
        }
        function baseIsEqualDeep(
          object2,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var objIsArr = isArray(object2),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object2),
            othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object2)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray2(object2)
              ? equalArrays(
                  object2,
                  other,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                )
              : equalByTag(
                  object2,
                  other,
                  objTag,
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                );
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped =
                objIsObj && hasOwnProperty2.call(object2, '__wrapped__'),
              othIsWrapped =
                othIsObj && hasOwnProperty2.call(other, '__wrapped__');
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object2.value() : object2,
                othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(
                objUnwrapped,
                othUnwrapped,
                bitmask,
                customizer,
                stack
              );
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(
            object2,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          );
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object2, source, matchData, customizer) {
          var index = matchData.length,
            length = index,
            noCustomizer = !customizer;
          if (object2 == null) {
            return !length;
          }
          object2 = Object2(object2);
          while (index--) {
            var data = matchData[index];
            if (
              noCustomizer && data[2]
                ? data[1] !== object2[data[0]]
                : !(data[0] in object2)
            ) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0],
              objValue = object2[key],
              srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined2 && !(key in object2)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result3 = customizer(
                  objValue,
                  srcValue,
                  key,
                  object2,
                  source,
                  stack
                );
              }
              if (
                !(result3 === undefined2
                  ? baseIsEqual(
                      srcValue,
                      objValue,
                      COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                      customizer,
                      stack
                    )
                  : result3)
              ) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject4(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return (
            isObjectLike(value) &&
            isLength(value.length) &&
            !!typedArrayTags[baseGetTag(value)]
          );
        }
        function baseIteratee2(value) {
          if (typeof value == 'function') {
            return value;
          }
          if (value == null) {
            return identity2;
          }
          if (typeof value == 'object') {
            return isArray(value)
              ? baseMatchesProperty(value[0], value[1])
              : baseMatches(value);
          }
          return property2(value);
        }
        function baseKeys(object2) {
          if (!isPrototype(object2)) {
            return nativeKeys2(object2);
          }
          var result3 = [];
          for (var key in Object2(object2)) {
            if (hasOwnProperty2.call(object2, key) && key != 'constructor') {
              result3.push(key);
            }
          }
          return result3;
        }
        function baseKeysIn(object2) {
          if (!isObject4(object2)) {
            return nativeKeysIn(object2);
          }
          var isProto = isPrototype(object2),
            result3 = [];
          for (var key in object2) {
            if (
              !(
                key == 'constructor' &&
                (isProto || !hasOwnProperty2.call(object2, key))
              )
            ) {
              result3.push(key);
            }
          }
          return result3;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee3) {
          var index = -1,
            result3 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function (value, key, collection2) {
            result3[++index] = iteratee3(value, key, collection2);
          });
          return result3;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function (object2) {
            return (
              object2 === source || baseIsMatch(object2, source, matchData)
            );
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function (object2) {
            var objValue = get2(object2, path);
            return objValue === undefined2 && objValue === srcValue
              ? hasIn(object2, path)
              : baseIsEqual(
                  srcValue,
                  objValue,
                  COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                );
          };
        }
        function baseMerge(object2, source, srcIndex, customizer, stack) {
          if (object2 === source) {
            return;
          }
          baseFor(
            source,
            function (srcValue, key) {
              stack || (stack = new Stack());
              if (isObject4(srcValue)) {
                baseMergeDeep(
                  object2,
                  source,
                  key,
                  srcIndex,
                  baseMerge,
                  customizer,
                  stack
                );
              } else {
                var newValue = customizer
                  ? customizer(
                      safeGet(object2, key),
                      srcValue,
                      key + '',
                      object2,
                      source,
                      stack
                    )
                  : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object2, key, newValue);
              }
            },
            keysIn
          );
        }
        function baseMergeDeep(
          object2,
          source,
          key,
          srcIndex,
          mergeFunc,
          customizer,
          stack
        ) {
          var objValue = safeGet(object2, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object2, key, stacked);
            return;
          }
          var newValue = customizer
            ? customizer(objValue, srcValue, key + '', object2, source, stack)
            : undefined2;
          var isCommon = newValue === undefined2;
          if (isCommon) {
            var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray2(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject3(srcValue) || isArguments2(srcValue)) {
              newValue = objValue;
              if (isArguments2(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject4(objValue) || isFunction2(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack['delete'](srcValue);
          }
          assignMergeValue(object2, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined2;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function (iteratee3) {
              if (isArray(iteratee3)) {
                return function (value) {
                  return baseGet(
                    value,
                    iteratee3.length === 1 ? iteratee3[0] : iteratee3
                  );
                };
              }
              return iteratee3;
            });
          } else {
            iteratees = [identity2];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result3 = baseMap(collection, function (value, key, collection2) {
            var criteria = arrayMap(iteratees, function (iteratee3) {
              return iteratee3(value);
            });
            return { criteria: criteria, index: ++index, value: value };
          });
          return baseSortBy(result3, function (object2, other) {
            return compareMultiple(object2, other, orders);
          });
        }
        function basePick(object2, paths) {
          return basePickBy(object2, paths, function (value, path) {
            return hasIn(object2, path);
          });
        }
        function basePickBy(object2, paths, predicate) {
          var index = -1,
            length = paths.length,
            result3 = {};
          while (++index < length) {
            var path = paths[index],
              value = baseGet(object2, path);
            if (predicate(value, path)) {
              baseSet(result3, castPath(path, object2), value);
            }
          }
          return result3;
        }
        function basePropertyDeep(path) {
          return function (object2) {
            return baseGet(object2, path);
          };
        }
        function basePullAll(array, values3, iteratee3, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values3.length,
            seen = array;
          if (array === values3) {
            values3 = copyArray(values3);
          }
          if (iteratee3) {
            seen = arrayMap(array, baseUnary(iteratee3));
          }
          while (++index < length) {
            var fromIndex = 0,
              value = values3[index],
              computed = iteratee3 ? iteratee3(value) : value;
            while (
              (fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1
            ) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0,
            lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result3 = Array2(length);
          while (length--) {
            result3[fromRight ? length : ++index] = start;
            start += step;
          }
          return result3;
        }
        function baseRepeat(string, n) {
          var result3 = '';
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result3;
          }
          do {
            if (n % 2) {
              result3 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result3;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity2), func + '');
        }
        function baseSample(collection) {
          return arraySample(values2(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values2(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object2, path, value, customizer) {
          if (!isObject4(object2)) {
            return object2;
          }
          path = castPath(path, object2);
          var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object2;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]),
              newValue = value;
            if (
              key === '__proto__' ||
              key === 'constructor' ||
              key === 'prototype'
            ) {
              return object2;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer
                ? customizer(objValue, key, nested)
                : undefined2;
              if (newValue === undefined2) {
                newValue = isObject4(objValue)
                  ? objValue
                  : isIndex(path[index + 1])
                  ? []
                  : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object2;
        }
        var baseSetData = !metaMap
          ? identity2
          : function (func, data) {
              metaMap.set(func, data);
              return func;
            };
        var baseSetToString = !defineProperty
          ? identity2
          : function (func, string) {
              return defineProperty(func, 'toString', {
                configurable: true,
                enumerable: false,
                value: constant2(string),
                writable: true,
              });
            };
        function baseShuffle(collection) {
          return shuffleSelf(values2(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1,
            length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : (end - start) >>> 0;
          start >>>= 0;
          var result3 = Array2(length);
          while (++index < length) {
            result3[index] = array[index + start];
          }
          return result3;
        }
        function baseSome(collection, predicate) {
          var result3;
          baseEach(collection, function (value, index, collection2) {
            result3 = predicate(value, index, collection2);
            return !result3;
          });
          return !!result3;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0,
            high = array == null ? low : array.length;
          if (
            typeof value == 'number' &&
            value === value &&
            high <= HALF_MAX_ARRAY_LENGTH
          ) {
            while (low < high) {
              var mid = (low + high) >>> 1,
                computed = array[mid];
              if (
                computed !== null &&
                !isSymbol(computed) &&
                (retHighest ? computed <= value : computed < value)
              ) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity2, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee3, retHighest) {
          var low = 0,
            high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee3(value);
          var valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined2;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2),
              computed = iteratee3(array[mid]),
              othIsDefined = computed !== undefined2,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow =
                othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow =
                othIsReflexive &&
                othIsDefined &&
                !othIsNull &&
                (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX2);
        }
        function baseSortedUniq(array, iteratee3) {
          var index = -1,
            length = array.length,
            resIndex = 0,
            result3 = [];
          while (++index < length) {
            var value = array[index],
              computed = iteratee3 ? iteratee3(value) : value;
            if (!index || !eq2(computed, seen)) {
              var seen = computed;
              result3[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result3;
        }
        function baseToNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == 'string') {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + '';
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : '';
          }
          var result3 = value + '';
          return result3 == '0' && 1 / value == -INFINITY ? '-0' : result3;
        }
        function baseUniq(array, iteratee3, comparator) {
          var index = -1,
            includes2 = arrayIncludes,
            length = array.length,
            isCommon = true,
            result3 = [],
            seen = result3;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee3 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee3 ? [] : result3;
          }
          outer: while (++index < length) {
            var value = array[index],
              computed = iteratee3 ? iteratee3(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee3) {
                seen.push(computed);
              }
              result3.push(value);
            } else if (!includes2(seen, computed, comparator)) {
              if (seen !== result3) {
                seen.push(computed);
              }
              result3.push(value);
            }
          }
          return result3;
        }
        function baseUnset(object2, path) {
          path = castPath(path, object2);
          object2 = parent(object2, path);
          return object2 == null || delete object2[toKey(last2(path))];
        }
        function baseUpdate(object2, path, updater, customizer) {
          return baseSet(
            object2,
            path,
            updater(baseGet(object2, path)),
            customizer
          );
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length,
            index = fromRight ? length : -1;
          while (
            (fromRight ? index-- : ++index < length) &&
            predicate(array[index], index, array)
          ) {}
          return isDrop
            ? baseSlice(
                array,
                fromRight ? 0 : index,
                fromRight ? index + 1 : length
              )
            : baseSlice(
                array,
                fromRight ? index + 1 : 0,
                fromRight ? length : index
              );
        }
        function baseWrapperValue(value, actions) {
          var result3 = value;
          if (result3 instanceof LazyWrapper) {
            result3 = result3.value();
          }
          return arrayReduce(
            actions,
            function (result4, action) {
              return action.func.apply(
                action.thisArg,
                arrayPush([result4], action.args)
              );
            },
            result3
          );
        }
        function baseXor(arrays, iteratee3, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1,
            result3 = Array2(length);
          while (++index < length) {
            var array = arrays[index],
              othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result3[index] = baseDifference(
                  result3[index] || array,
                  arrays[othIndex],
                  iteratee3,
                  comparator
                );
              }
            }
          }
          return baseUniq(baseFlatten(result3, 1), iteratee3, comparator);
        }
        function baseZipObject(props, values3, assignFunc) {
          var index = -1,
            length = props.length,
            valsLength = values3.length,
            result3 = {};
          while (++index < length) {
            var value = index < valsLength ? values3[index] : undefined2;
            assignFunc(result3, props[index], value);
          }
          return result3;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == 'function' ? value : identity2;
        }
        function castPath(value, object2) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object2)
            ? [value]
            : stringToPath(toString2(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined2 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 =
          ctxClearTimeout ||
          function (id) {
            return root2.clearTimeout(id);
          };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length,
            result3 = allocUnsafe
              ? allocUnsafe(length)
              : new buffer.constructor(length);
          buffer.copy(result3);
          return result3;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result3 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result3).set(new Uint8Array2(arrayBuffer));
          return result3;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep
            ? cloneArrayBuffer(dataView.buffer)
            : dataView.buffer;
          return new dataView.constructor(
            buffer,
            dataView.byteOffset,
            dataView.byteLength
          );
        }
        function cloneRegExp(regexp) {
          var result3 = new regexp.constructor(
            regexp.source,
            reFlags.exec(regexp)
          );
          result3.lastIndex = regexp.lastIndex;
          return result3;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep
            ? cloneArrayBuffer(typedArray.buffer)
            : typedArray.buffer;
          return new typedArray.constructor(
            buffer,
            typedArray.byteOffset,
            typedArray.length
          );
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined2,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);
            var othIsDefined = other !== undefined2,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);
            if (
              (!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
              (valIsSymbol &&
                othIsDefined &&
                othIsReflexive &&
                !othIsNull &&
                !othIsSymbol) ||
              (valIsNull && othIsDefined && othIsReflexive) ||
              (!valIsDefined && othIsReflexive) ||
              !valIsReflexive
            ) {
              return 1;
            }
            if (
              (!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
              (othIsSymbol &&
                valIsDefined &&
                valIsReflexive &&
                !valIsNull &&
                !valIsSymbol) ||
              (othIsNull && valIsDefined && valIsReflexive) ||
              (!othIsDefined && valIsReflexive) ||
              !othIsReflexive
            ) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object2, other, orders) {
          var index = -1,
            objCriteria = object2.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;
          while (++index < length) {
            var result3 = compareAscending(
              objCriteria[index],
              othCriteria[index]
            );
            if (result3) {
              if (index >= ordersLength) {
                return result3;
              }
              var order = orders[index];
              return result3 * (order == 'desc' ? -1 : 1);
            }
          }
          return object2.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result3 = Array2(leftLength + rangeLength),
            isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result3[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result3[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result3[leftIndex++] = args[argsIndex++];
          }
          return result3;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result3 = Array2(rangeLength + rightLength),
            isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result3[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result3[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result3[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result3;
        }
        function copyArray(source, array) {
          var index = -1,
            length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object2, customizer) {
          var isNew = !object2;
          object2 || (object2 = {});
          var index = -1,
            length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer
              ? customizer(object2[key], source[key], key, object2, source)
              : undefined2;
            if (newValue === undefined2) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object2, key, newValue);
            } else {
              assignValue(object2, key, newValue);
            }
          }
          return object2;
        }
        function copySymbols(source, object2) {
          return copyObject(source, getSymbols(source), object2);
        }
        function copySymbolsIn(source, object2) {
          return copyObject(source, getSymbolsIn(source), object2);
        }
        function createAggregator(setter, initializer) {
          return function (collection, iteratee3) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};
            return func(
              collection,
              setter,
              getIteratee(iteratee3, 2),
              accumulator
            );
          };
        }
        function createAssigner2(assigner) {
          return baseRest(function (object2, sources) {
            var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined2,
              guard = length > 2 ? sources[2] : undefined2;
            customizer =
              assigner.length > 3 && typeof customizer == 'function'
                ? (length--, customizer)
                : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined2 : customizer;
              length = 1;
            }
            object2 = Object2(object2);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object2, source, index, customizer);
              }
            }
            return object2;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function (collection, iteratee3) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee3);
            }
            var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee3(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function (object2, iteratee3, keysFunc) {
            var index = -1,
              iterable = Object2(object2),
              props = keysFunc(object2),
              length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee3(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object2;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);
          function wrapper() {
            var fn =
              this && this !== root2 && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function (string) {
            string = toString2(string);
            var strSymbols = hasUnicode(string)
              ? stringToArray(string)
              : undefined2;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols
              ? castSlice(strSymbols, 1).join('')
              : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function (string) {
            return arrayReduce(
              words(deburr(string).replace(reApos, '')),
              callback,
              ''
            );
          };
        }
        function createCtor(Ctor) {
          return function () {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(
                  args[0],
                  args[1],
                  args[2],
                  args[3],
                  args[4],
                  args[5]
                );
              case 7:
                return new Ctor(
                  args[0],
                  args[1],
                  args[2],
                  args[3],
                  args[4],
                  args[5],
                  args[6]
                );
            }
            var thisBinding = baseCreate2(Ctor.prototype),
              result3 = Ctor.apply(thisBinding, args);
            return isObject4(result3) ? result3 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length,
              args = Array2(length),
              index = length,
              placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders =
              length < 3 &&
              args[0] !== placeholder &&
              args[length - 1] !== placeholder
                ? []
                : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined2,
                args,
                holders,
                undefined2,
                undefined2,
                arity - length
              );
            }
            var fn =
              this && this !== root2 && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function (collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee3 = getIteratee(predicate, 3);
              collection = keys2(collection);
              predicate = function (key) {
                return iteratee3(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1
              ? iterable[iteratee3 ? collection[index] : index]
              : undefined2;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function (funcs) {
            var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != 'function') {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined2;
              if (
                data &&
                isLaziable(data[0]) &&
                data[1] ==
                  (WRAP_ARY_FLAG |
                    WRAP_CURRY_FLAG |
                    WRAP_PARTIAL_FLAG |
                    WRAP_REARG_FLAG) &&
                !data[4].length &&
                data[9] == 1
              ) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper =
                  func.length == 1 && isLaziable(func)
                    ? wrapper[funcName]()
                    : wrapper.thru(func);
              }
            }
            return function () {
              var args = arguments,
                value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0,
                result3 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result3 = funcs[index2].call(this, result3);
              }
              return result3;
            };
          });
        }
        function createHybrid(
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          partialsRight,
          holdersRight,
          argPos,
          ary2,
          arity
        ) {
          var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined2 : createCtor(func);
          function wrapper() {
            var length = arguments.length,
              args = Array2(length),
              index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(
                args,
                partialsRight,
                holdersRight,
                isCurried
              );
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root2 && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function (object2, iteratee3) {
            return baseInverter(object2, setter, toIteratee(iteratee3), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function (value, other) {
            var result3;
            if (value === undefined2 && other === undefined2) {
              return defaultValue;
            }
            if (value !== undefined2) {
              result3 = value;
            }
            if (other !== undefined2) {
              if (result3 === undefined2) {
                return other;
              }
              if (typeof value == 'string' || typeof other == 'string') {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result3 = operator(value, other);
            }
            return result3;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function (iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function (args) {
              var thisArg = this;
              return arrayFunc(iteratees, function (iteratee3) {
                return apply(iteratee3, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined2 ? ' ' : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result3 = baseRepeat(
            chars,
            nativeCeil(length / stringSize(chars))
          );
          return hasUnicode(chars)
            ? castSlice(stringToArray(result3), 0, length).join('')
            : result3.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array2(leftLength + argsLength),
              fn =
                this && this !== root2 && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function (start, end, step) {
            if (
              step &&
              typeof step != 'number' &&
              isIterateeCall(start, end, step)
            ) {
              end = step = undefined2;
            }
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step =
              step === undefined2 ? (start < end ? 1 : -1) : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function (value, other) {
            if (!(typeof value == 'string' && typeof other == 'string')) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(
          func,
          bitmask,
          wrapFunc,
          placeholder,
          thisArg,
          partials,
          holders,
          argPos,
          ary2,
          arity
        ) {
          var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined2,
            newHoldersRight = isCurry ? undefined2 : holders,
            newPartials = isCurry ? partials : undefined2,
            newPartialsRight = isCurry ? undefined2 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity,
          ];
          var result3 = wrapFunc.apply(undefined2, newData);
          if (isLaziable(func)) {
            setData(result3, newData);
          }
          result3.placeholder = placeholder;
          return setWrapToString(result3, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function (number, precision) {
            number = toNumber(number);
            precision =
              precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString2(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));
              pair = (toString2(value) + 'e').split('e');
              return +(pair[0] + 'e' + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(
          Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY
        )
          ? noop2
          : function (values3) {
              return new Set2(values3);
            };
        function createToPairs(keysFunc) {
          return function (object2) {
            var tag = getTag(object2);
            if (tag == mapTag) {
              return mapToArray(object2);
            }
            if (tag == setTag) {
              return setToPairs(object2);
            }
            return baseToPairs(object2, keysFunc(object2));
          };
        }
        function createWrap(
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          argPos,
          ary2,
          arity
        ) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined2;
          }
          ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined2 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials,
              holdersRight = holders;
            partials = holders = undefined2;
          }
          var data = isBindKey ? undefined2 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity,
          ];
          if (data) {
            mergeData2(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] =
            newData[9] === undefined2
              ? isBindKey
                ? 0
                : func.length
              : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result3 = createBind(func, bitmask, thisArg);
          } else if (
            bitmask == WRAP_CURRY_FLAG ||
            bitmask == WRAP_CURRY_RIGHT_FLAG
          ) {
            result3 = createCurry(func, bitmask, arity);
          } else if (
            (bitmask == WRAP_PARTIAL_FLAG ||
              bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
            !holders.length
          ) {
            result3 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result3 = createHybrid.apply(undefined2, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result3, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object2) {
          if (
            objValue === undefined2 ||
            (eq2(objValue, objectProto[key]) &&
              !hasOwnProperty2.call(object2, key))
          ) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(
          objValue,
          srcValue,
          key,
          object2,
          source,
          stack
        ) {
          if (isObject4(objValue) && isObject4(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(
              objValue,
              srcValue,
              undefined2,
              customDefaultsMerge,
              stack
            );
            stack['delete'](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject3(value) ? undefined2 : value;
        }
        function equalArrays(
          array,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1,
            result3 = true,
            seen =
              bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index],
              othValue = other[index];
            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, arrValue, index, other, array, stack)
                : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined2) {
              if (compared) {
                continue;
              }
              result3 = false;
              break;
            }
            if (seen) {
              if (
                !arraySome(other, function (othValue2, othIndex) {
                  if (
                    !cacheHas(seen, othIndex) &&
                    (arrValue === othValue2 ||
                      equalFunc(
                        arrValue,
                        othValue2,
                        bitmask,
                        customizer,
                        stack
                      ))
                  ) {
                    return seen.push(othIndex);
                  }
                })
              ) {
                result3 = false;
                break;
              }
            } else if (
              !(
                arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
              )
            ) {
              result3 = false;
              break;
            }
          }
          stack['delete'](array);
          stack['delete'](other);
          return result3;
        }
        function equalByTag(
          object2,
          other,
          tag,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          switch (tag) {
            case dataViewTag:
              if (
                object2.byteLength != other.byteLength ||
                object2.byteOffset != other.byteOffset
              ) {
                return false;
              }
              object2 = object2.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (
                object2.byteLength != other.byteLength ||
                !equalFunc(new Uint8Array2(object2), new Uint8Array2(other))
              ) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq2(+object2, +other);
            case errorTag:
              return (
                object2.name == other.name && object2.message == other.message
              );
            case regexpTag:
            case stringTag:
              return object2 == other + '';
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object2.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object2);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object2, other);
              var result3 = equalArrays(
                convert(object2),
                convert(other),
                bitmask,
                customizer,
                equalFunc,
                stack
              );
              stack['delete'](object2);
              return result3;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object2) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(
          object2,
          other,
          bitmask,
          customizer,
          equalFunc,
          stack
        ) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object2),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (
              !(isPartial ? key in other : hasOwnProperty2.call(other, key))
            ) {
              return false;
            }
          }
          var objStacked = stack.get(object2);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object2;
          }
          var result3 = true;
          stack.set(object2, other);
          stack.set(other, object2);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object2[key],
              othValue = other[key];
            if (customizer) {
              var compared = isPartial
                ? customizer(othValue, objValue, key, other, object2, stack)
                : customizer(objValue, othValue, key, object2, other, stack);
            }
            if (
              !(compared === undefined2
                ? objValue === othValue ||
                  equalFunc(objValue, othValue, bitmask, customizer, stack)
                : compared)
            ) {
              result3 = false;
              break;
            }
            skipCtor || (skipCtor = key == 'constructor');
          }
          if (result3 && !skipCtor) {
            var objCtor = object2.constructor,
              othCtor = other.constructor;
            if (
              objCtor != othCtor &&
              'constructor' in object2 &&
              'constructor' in other &&
              !(
                typeof objCtor == 'function' &&
                objCtor instanceof objCtor &&
                typeof othCtor == 'function' &&
                othCtor instanceof othCtor
              )
            ) {
              result3 = false;
            }
          }
          stack['delete'](object2);
          stack['delete'](other);
          return result3;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined2, flatten3), func + '');
        }
        function getAllKeys(object2) {
          return baseGetAllKeys(object2, keys2, getSymbols);
        }
        function getAllKeysIn(object2) {
          return baseGetAllKeys(object2, keysIn, getSymbolsIn);
        }
        var getData = !metaMap
          ? noop2
          : function (func) {
              return metaMap.get(func);
            };
        function getFuncName(func) {
          var result3 = func.name + '',
            array = realNames[result3],
            length = hasOwnProperty2.call(realNames, result3)
              ? array.length
              : 0;
          while (length--) {
            var data = array[length],
              otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result3;
        }
        function getHolder(func) {
          var object2 = hasOwnProperty2.call(lodash, 'placeholder')
            ? lodash
            : func;
          return object2.placeholder;
        }
        function getIteratee() {
          var result3 = lodash.iteratee || iteratee2;
          result3 = result3 === iteratee2 ? baseIteratee2 : result3;
          return arguments.length
            ? result3(arguments[0], arguments[1])
            : result3;
        }
        function getMapData(map3, key) {
          var data = map3.__data__;
          return isKeyable(key)
            ? data[typeof key == 'string' ? 'string' : 'hash']
            : data.map;
        }
        function getMatchData(object2) {
          var result3 = keys2(object2),
            length = result3.length;
          while (length--) {
            var key = result3[length],
              value = object2[key];
            result3[length] = [key, value, isStrictComparable(value)];
          }
          return result3;
        }
        function getNative(object2, key) {
          var value = getValue(object2, key);
          return baseIsNative(value) ? value : undefined2;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty2.call(value, symToStringTag),
            tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined2;
            var unmasked = true;
          } catch (e) {}
          var result3 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result3;
        }
        var getSymbols = !nativeGetSymbols
          ? stubArray
          : function (object2) {
              if (object2 == null) {
                return [];
              }
              object2 = Object2(object2);
              return arrayFilter(nativeGetSymbols(object2), function (symbol) {
                return propertyIsEnumerable.call(object2, symbol);
              });
            };
        var getSymbolsIn = !nativeGetSymbols
          ? stubArray
          : function (object2) {
              var result3 = [];
              while (object2) {
                arrayPush(result3, getSymbols(object2));
                object2 = getPrototype(object2);
              }
              return result3;
            };
        var getTag = baseGetTag;
        if (
          (DataView2 &&
            getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag) ||
          (Map2 && getTag(new Map2()) != mapTag) ||
          (Promise2 && getTag(Promise2.resolve()) != promiseTag) ||
          (Set2 && getTag(new Set2()) != setTag) ||
          (WeakMap2 && getTag(new WeakMap2()) != weakMapTag)
        ) {
          getTag = function (value) {
            var result3 = baseGetTag(value),
              Ctor = result3 == objectTag ? value.constructor : undefined2,
              ctorString = Ctor ? toSource(Ctor) : '';
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result3;
          };
        }
        function getView(start, end, transforms) {
          var index = -1,
            length = transforms.length;
          while (++index < length) {
            var data = transforms[index],
              size3 = data.size;
            switch (data.type) {
              case 'drop':
                start += size3;
                break;
              case 'dropRight':
                end -= size3;
                break;
              case 'take':
                end = nativeMin(end, start + size3);
                break;
              case 'takeRight':
                start = nativeMax(start, end - size3);
                break;
            }
          }
          return { start: start, end: end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object2, path, hasFunc) {
          path = castPath(path, object2);
          var index = -1,
            length = path.length,
            result3 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result3 = object2 != null && hasFunc(object2, key))) {
              break;
            }
            object2 = object2[key];
          }
          if (result3 || ++index != length) {
            return result3;
          }
          length = object2 == null ? 0 : object2.length;
          return (
            !!length &&
            isLength(length) &&
            isIndex(key, length) &&
            (isArray(object2) || isArguments2(object2))
          );
        }
        function initCloneArray(array) {
          var length = array.length,
            result3 = new array.constructor(length);
          if (
            length &&
            typeof array[0] == 'string' &&
            hasOwnProperty2.call(array, 'index')
          ) {
            result3.index = array.index;
            result3.input = array.input;
          }
          return result3;
        }
        function initCloneObject(object2) {
          return typeof object2.constructor == 'function' &&
            !isPrototype(object2)
            ? baseCreate2(getPrototype(object2))
            : {};
        }
        function initCloneByTag(object2, tag, isDeep) {
          var Ctor = object2.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object2);
            case boolTag:
            case dateTag:
              return new Ctor(+object2);
            case dataViewTag:
              return cloneDataView(object2, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object2, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object2);
            case regexpTag:
              return cloneRegExp(object2);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object2);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
          details = details.join(length > 2 ? ', ' : ' ');
          return source.replace(
            reWrapComment,
            '{\n/* [wrapped with ' + details + '] */\n'
          );
        }
        function isFlattenable(value) {
          return (
            isArray(value) ||
            isArguments2(value) ||
            !!(spreadableSymbol && value && value[spreadableSymbol])
          );
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return (
            !!length &&
            (type == 'number' || (type != 'symbol' && reIsUint.test(value))) &&
            value > -1 &&
            value % 1 == 0 &&
            value < length
          );
        }
        function isIterateeCall(value, index, object2) {
          if (!isObject4(object2)) {
            return false;
          }
          var type = typeof index;
          if (
            type == 'number'
              ? isArrayLike(object2) && isIndex(index, object2.length)
              : type == 'string' && index in object2
          ) {
            return eq2(object2[index], value);
          }
          return false;
        }
        function isKey(value, object2) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (
            type == 'number' ||
            type == 'symbol' ||
            type == 'boolean' ||
            value == null ||
            isSymbol(value)
          ) {
            return true;
          }
          return (
            reIsPlainProp.test(value) ||
            !reIsDeepProp.test(value) ||
            (object2 != null && value in Object2(object2))
          );
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == 'string' ||
            type == 'number' ||
            type == 'symbol' ||
            type == 'boolean'
            ? value !== '__proto__'
            : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func),
            other = lodash[funcName];
          if (
            typeof other != 'function' ||
            !(funcName in LazyWrapper.prototype)
          ) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction2 : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor,
            proto =
              (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject4(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function (object2) {
            if (object2 == null) {
              return false;
            }
            return (
              object2[key] === srcValue &&
              (srcValue !== undefined2 || key in Object2(object2))
            );
          };
        }
        function memoizeCapped(func) {
          var result3 = memoize2(func, function (key) {
            if (cache2.size === MAX_MEMOIZE_SIZE) {
              cache2.clear();
            }
            return key;
          });
          var cache2 = result3.cache;
          return result3;
        }
        function mergeData2(data, source) {
          var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon =
              newBitmask <
              (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo =
            (srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG) ||
            (srcBitmask == WRAP_ARY_FLAG &&
              bitmask == WRAP_REARG_FLAG &&
              data[7].length <= source[8]) ||
            (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
              source[7].length <= source[8] &&
              bitmask == WRAP_CURRY_FLAG);
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials
              ? composeArgs(partials, value, source[4])
              : value;
            data[4] = partials
              ? replaceHolders(data[3], PLACEHOLDER)
              : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials
              ? composeArgsRight(partials, value, source[6])
              : value;
            data[6] = partials
              ? replaceHolders(data[5], PLACEHOLDER)
              : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] =
              data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object2) {
          var result3 = [];
          if (object2 != null) {
            for (var key in Object2(object2)) {
              result3.push(key);
            }
          }
          return result3;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform3) {
          start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
          return function () {
            var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform3(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object2, path) {
          return path.length < 2
            ? object2
            : baseGet(object2, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength)
              ? oldArray[index]
              : undefined2;
          }
          return array;
        }
        function safeGet(object2, key) {
          if (key === 'constructor' && typeof object2[key] === 'function') {
            return;
          }
          if (key == '__proto__') {
            return;
          }
          return object2[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 =
          ctxSetTimeout ||
          function (func, wait) {
            return root2.setTimeout(func, wait);
          };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + '';
          return setToString(
            wrapper,
            insertWrapDetails(
              source,
              updateWrapDetails(getWrapDetails(source), bitmask)
            )
          );
        }
        function shortOut(func) {
          var count = 0,
            lastCalled = 0;
          return function () {
            var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined2, arguments);
          };
        }
        function shuffleSelf(array, size3) {
          var index = -1,
            length = array.length,
            lastIndex = length - 1;
          size3 = size3 === undefined2 ? length : size3;
          while (++index < size3) {
            var rand = baseRandom(index, lastIndex),
              value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size3;
          return array;
        }
        var stringToPath = memoizeCapped(function (string) {
          var result3 = [];
          if (string.charCodeAt(0) === 46) {
            result3.push('');
          }
          string.replace(
            rePropName,
            function (match, number, quote, subString) {
              result3.push(
                quote ? subString.replace(reEscapeChar, '$1') : number || match
              );
            }
          );
          return result3;
        });
        function toKey(value) {
          if (typeof value == 'string' || isSymbol(value)) {
            return value;
          }
          var result3 = value + '';
          return result3 == '0' && 1 / value == -INFINITY ? '-0' : result3;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {}
            try {
              return func + '';
            } catch (e) {}
          }
          return '';
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function (pair) {
            var value = '_.' + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result3 = new LodashWrapper(
            wrapper.__wrapped__,
            wrapper.__chain__
          );
          result3.__actions__ = copyArray(wrapper.__actions__);
          result3.__index__ = wrapper.__index__;
          result3.__values__ = wrapper.__values__;
          return result3;
        }
        function chunk2(array, size3, guard) {
          if (
            guard ? isIterateeCall(array, size3, guard) : size3 === undefined2
          ) {
            size3 = 1;
          } else {
            size3 = nativeMax(toInteger(size3), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size3 < 1) {
            return [];
          }
          var index = 0,
            resIndex = 0,
            result3 = Array2(nativeCeil(length / size3));
          while (index < length) {
            result3[resIndex++] = baseSlice(array, index, (index += size3));
          }
          return result3;
        }
        function compact2(array) {
          var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result3 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result3[resIndex++] = value;
            }
          }
          return result3;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1),
            array = arguments[0],
            index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(
            isArray(array) ? copyArray(array) : [array],
            baseFlatten(args, 1)
          );
        }
        var difference = baseRest(function (array, values3) {
          return isArrayLikeObject(array)
            ? baseDifference(
                array,
                baseFlatten(values3, 1, isArrayLikeObject, true)
              )
            : [];
        });
        var differenceBy = baseRest(function (array, values3) {
          var iteratee3 = last2(values3);
          if (isArrayLikeObject(iteratee3)) {
            iteratee3 = undefined2;
          }
          return isArrayLikeObject(array)
            ? baseDifference(
                array,
                baseFlatten(values3, 1, isArrayLikeObject, true),
                getIteratee(iteratee3, 2)
              )
            : [];
        });
        var differenceWith = baseRest(function (array, values3) {
          var comparator = last2(values3);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined2;
          }
          return isArrayLikeObject(array)
            ? baseDifference(
                array,
                baseFlatten(values3, 1, isArrayLikeObject, true),
                undefined2,
                comparator
              )
            : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length
            ? baseWhile(array, getIteratee(predicate, 3), true, true)
            : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length
            ? baseWhile(array, getIteratee(predicate, 3), true)
            : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (
            start &&
            typeof start != 'number' &&
            isIterateeCall(array, value, start)
          ) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index =
              fromIndex < 0
                ? nativeMax(length + index, 0)
                : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten3(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs2) {
          var index = -1,
            length = pairs2 == null ? 0 : pairs2.length,
            result3 = {};
          while (++index < length) {
            var pair = pairs2[index];
            result3[pair[0]] = pair[1];
          }
          return result3;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined2;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial2(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection2 = baseRest(function (arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0]
            ? baseIntersection(mapped)
            : [];
        });
        var intersectionBy = baseRest(function (arrays) {
          var iteratee3 = last2(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee3 === last2(mapped)) {
            iteratee3 = undefined2;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0]
            ? baseIntersection(mapped, getIteratee(iteratee3, 2))
            : [];
        });
        var intersectionWith = baseRest(function (arrays) {
          var comparator = last2(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);
          comparator =
            typeof comparator == 'function' ? comparator : undefined2;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0]
            ? baseIntersection(mapped, undefined2, comparator)
            : [];
        });
        function join(array, separator) {
          return array == null ? '' : nativeJoin.call(array, separator);
        }
        function last2(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined2;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined2) {
            index = toInteger(fromIndex);
            index =
              index < 0
                ? nativeMax(length + index, 0)
                : nativeMin(index, length - 1);
          }
          return value === value
            ? strictLastIndexOf(array, value, index)
            : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length
            ? baseNth(array, toInteger(n))
            : undefined2;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values3) {
          return array && array.length && values3 && values3.length
            ? basePullAll(array, values3)
            : array;
        }
        function pullAllBy(array, values3, iteratee3) {
          return array && array.length && values3 && values3.length
            ? basePullAll(array, values3, getIteratee(iteratee3, 2))
            : array;
        }
        function pullAllWith(array, values3, comparator) {
          return array && array.length && values3 && values3.length
            ? basePullAll(array, values3, undefined2, comparator)
            : array;
        }
        var pullAt = flatRest(function (array, indexes) {
          var length = array == null ? 0 : array.length,
            result3 = baseAt(array, indexes);
          basePullAt(
            array,
            arrayMap(indexes, function (index) {
              return isIndex(index, length) ? +index : index;
            }).sort(compareAscending)
          );
          return result3;
        });
        function remove(array, predicate) {
          var result3 = [];
          if (!(array && array.length)) {
            return result3;
          }
          var index = -1,
            indexes = [],
            length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result3.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result3;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice2(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (
            end &&
            typeof end != 'number' &&
            isIterateeCall(array, start, end)
          ) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined2 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex2(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee3) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee3, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq2(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee3) {
          return baseSortedIndexBy(
            array,
            value,
            getIteratee(iteratee3, 2),
            true
          );
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq2(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee3) {
          return array && array.length
            ? baseSortedUniq(array, getIteratee(iteratee3, 2))
            : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined2 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length
            ? baseWhile(array, getIteratee(predicate, 3), false, true)
            : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length
            ? baseWhile(array, getIteratee(predicate, 3))
            : [];
        }
        var union = baseRest(function (arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function (arrays) {
          var iteratee3 = last2(arrays);
          if (isArrayLikeObject(iteratee3)) {
            iteratee3 = undefined2;
          }
          return baseUniq(
            baseFlatten(arrays, 1, isArrayLikeObject, true),
            getIteratee(iteratee3, 2)
          );
        });
        var unionWith = baseRest(function (arrays) {
          var comparator = last2(arrays);
          comparator =
            typeof comparator == 'function' ? comparator : undefined2;
          return baseUniq(
            baseFlatten(arrays, 1, isArrayLikeObject, true),
            undefined2,
            comparator
          );
        });
        function uniq2(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee3) {
          return array && array.length
            ? baseUniq(array, getIteratee(iteratee3, 2))
            : [];
        }
        function uniqWith(array, comparator) {
          comparator =
            typeof comparator == 'function' ? comparator : undefined2;
          return array && array.length
            ? baseUniq(array, undefined2, comparator)
            : [];
        }
        function unzip2(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function (group2) {
            if (isArrayLikeObject(group2)) {
              length = nativeMax(group2.length, length);
              return true;
            }
          });
          return baseTimes(length, function (index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee3) {
          if (!(array && array.length)) {
            return [];
          }
          var result3 = unzip2(array);
          if (iteratee3 == null) {
            return result3;
          }
          return arrayMap(result3, function (group2) {
            return apply(iteratee3, undefined2, group2);
          });
        }
        var without = baseRest(function (array, values3) {
          return isArrayLikeObject(array) ? baseDifference(array, values3) : [];
        });
        var xor = baseRest(function (arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function (arrays) {
          var iteratee3 = last2(arrays);
          if (isArrayLikeObject(iteratee3)) {
            iteratee3 = undefined2;
          }
          return baseXor(
            arrayFilter(arrays, isArrayLikeObject),
            getIteratee(iteratee3, 2)
          );
        });
        var xorWith = baseRest(function (arrays) {
          var comparator = last2(arrays);
          comparator =
            typeof comparator == 'function' ? comparator : undefined2;
          return baseXor(
            arrayFilter(arrays, isArrayLikeObject),
            undefined2,
            comparator
          );
        });
        var zip = baseRest(unzip2);
        function zipObject(props, values3) {
          return baseZipObject(props || [], values3 || [], assignValue);
        }
        function zipObjectDeep(props, values3) {
          return baseZipObject(props || [], values3 || [], baseSet);
        }
        var zipWith = baseRest(function (arrays) {
          var length = arrays.length,
            iteratee3 = length > 1 ? arrays[length - 1] : undefined2;
          iteratee3 =
            typeof iteratee3 == 'function'
              ? (arrays.pop(), iteratee3)
              : undefined2;
          return unzipWith(arrays, iteratee3);
        });
        function chain2(value) {
          var result3 = lodash(value);
          result3.__chain__ = true;
          return result3;
        }
        function tap2(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function (paths) {
          var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function (object2) {
              return baseAt(object2, paths);
            };
          if (
            length > 1 ||
            this.__actions__.length ||
            !(value instanceof LazyWrapper) ||
            !isIndex(start)
          ) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            func: thru,
            args: [interceptor],
            thisArg: undefined2,
          });
          return new LodashWrapper(value, this.__chain__).thru(function (
            array
          ) {
            if (length && !array.length) {
              array.push(undefined2);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain2(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined2) {
            this.__values__ = toArray2(this.value());
          }
          var done = this.__index__ >= this.__values__.length,
            value = done ? undefined2 : this.__values__[this.__index__++];
          return { done: done, value: value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result3,
            parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone3 = wrapperClone(parent2);
            clone3.__index__ = 0;
            clone3.__values__ = undefined2;
            if (result3) {
              previous.__wrapped__ = clone3;
            } else {
              result3 = clone3;
            }
            var previous = clone3;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result3;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              func: thru,
              args: [reverse],
              thisArg: undefined2,
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function (result3, value, key) {
          if (hasOwnProperty2.call(result3, key)) {
            ++result3[key];
          } else {
            baseAssignValue(result3, key, 1);
          }
        });
        function every2(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter2(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find2 = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee3) {
          return baseFlatten(map2(collection, iteratee3), 1);
        }
        function flatMapDeep(collection, iteratee3) {
          return baseFlatten(map2(collection, iteratee3), INFINITY);
        }
        function flatMapDepth(collection, iteratee3, depth) {
          depth = depth === undefined2 ? 1 : toInteger(depth);
          return baseFlatten(map2(collection, iteratee3), depth);
        }
        function forEach(collection, iteratee3) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee3, 3));
        }
        function forEachRight(collection, iteratee3) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee3, 3));
        }
        var groupBy = createAggregator(function (result3, value, key) {
          if (hasOwnProperty2.call(result3, key)) {
            result3[key].push(value);
          } else {
            baseAssignValue(result3, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection)
            ? collection
            : values2(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString(collection)
            ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1
            : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function (collection, path, args) {
          var index = -1,
            isFunc = typeof path == 'function',
            result3 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function (value) {
            result3[++index] = isFunc
              ? apply(path, value, args)
              : baseInvoke(value, path, args);
          });
          return result3;
        });
        var keyBy = createAggregator(function (result3, value, key) {
          baseAssignValue(result3, key, value);
        });
        function map2(collection, iteratee3) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee3, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined2 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(
          function (result3, value, key) {
            result3[key ? 0 : 1].push(value);
          },
          function () {
            return [[], []];
          }
        );
        function reduce(collection, iteratee3, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;
          return func(
            collection,
            getIteratee(iteratee3, 4),
            accumulator,
            initAccum,
            baseEach
          );
        }
        function reduceRight(collection, iteratee3, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;
          return func(
            collection,
            getIteratee(iteratee3, 4),
            accumulator,
            initAccum,
            baseEachRight
          );
        }
        function reject2(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate2(getIteratee(predicate, 3)));
        }
        function sample2(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle2(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size2(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection)
              ? stringSize(collection)
              : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some2(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined2;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy3 = baseRest(function (collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (
            length > 1 &&
            isIterateeCall(collection, iteratees[0], iteratees[1])
          ) {
            iteratees = [];
          } else if (
            length > 2 &&
            isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
          ) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now =
          ctxNow ||
          function () {
            return root2.Date.now();
          };
        function after2(n, func) {
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function () {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined2 : n;
          n = func && n == null ? func.length : n;
          return createWrap(
            func,
            WRAP_ARY_FLAG,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            n
          );
        }
        function before2(n, func) {
          var result3;
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function () {
            if (--n > 0) {
              result3 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined2;
            }
            return result3;
          };
        }
        var bind = baseRest(function (func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function (object2, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object2, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result3 = createWrap(
            func,
            WRAP_CURRY_FLAG,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            arity
          );
          result3.placeholder = curry.placeholder;
          return result3;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined2 : arity;
          var result3 = createWrap(
            func,
            WRAP_CURRY_RIGHT_FLAG,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            undefined2,
            arity
          );
          result3.placeholder = curryRight.placeholder;
          return result3;
        }
        function debounce2(func, wait, options) {
          var lastArgs,
            lastThis,
            maxWait,
            result3,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject4(options)) {
            leading = !!options.leading;
            maxing = 'maxWait' in options;
            maxWait = maxing
              ? nativeMax(toNumber(options.maxWait) || 0, wait)
              : maxWait;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs,
              thisArg = lastThis;
            lastArgs = lastThis = undefined2;
            lastInvokeTime = time;
            result3 = func.apply(thisArg, args);
            return result3;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result3;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;
            return maxing
              ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
              : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;
            return (
              lastCallTime === undefined2 ||
              timeSinceLastCall >= wait ||
              timeSinceLastCall < 0 ||
              (maxing && timeSinceLastInvoke >= maxWait)
            );
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined2;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined2;
            return result3;
          }
          function cancel() {
            if (timerId !== undefined2) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined2;
          }
          function flush() {
            return timerId === undefined2 ? result3 : trailingEdge(now());
          }
          function debounced() {
            var time = now(),
              isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined2) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined2) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result3;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function (func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function (func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize2(func, resolver) {
          if (
            typeof func != 'function' ||
            (resolver != null && typeof resolver != 'function')
          ) {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function () {
            var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache2 = memoized.cache;
            if (cache2.has(key)) {
              return cache2.get(key);
            }
            var result3 = func.apply(this, args);
            memoized.cache = cache2.set(key, result3) || cache2;
            return result3;
          };
          memoized.cache = new (memoize2.Cache || MapCache)();
          return memoized;
        }
        memoize2.Cache = MapCache;
        function negate2(predicate) {
          if (typeof predicate != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function () {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before2(2, func);
        }
        var overArgs = castRest(function (func, transforms) {
          transforms =
            transforms.length == 1 && isArray(transforms[0])
              ? arrayMap(transforms[0], baseUnary(getIteratee()))
              : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function (args) {
            var index = -1,
              length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial2 = baseRest(function (func, partials) {
          var holders = replaceHolders(partials, getHolder(partial2));
          return createWrap(
            func,
            WRAP_PARTIAL_FLAG,
            undefined2,
            partials,
            holders
          );
        });
        var partialRight = baseRest(function (func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(
            func,
            WRAP_PARTIAL_RIGHT_FLAG,
            undefined2,
            partials,
            holders
          );
        });
        var rearg = flatRest(function (func, indexes) {
          return createWrap(
            func,
            WRAP_REARG_FLAG,
            undefined2,
            undefined2,
            undefined2,
            indexes
          );
        });
        function rest2(func, start) {
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined2 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function (args) {
            var array = args[start],
              otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle2(func, wait, options) {
          var leading = true,
            trailing = true;
          if (typeof func != 'function') {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject4(options)) {
            leading = 'leading' in options ? !!options.leading : leading;
            trailing = 'trailing' in options ? !!options.trailing : trailing;
          }
          return debounce2(func, wait, {
            leading: leading,
            maxWait: wait,
            trailing: trailing,
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap2(value, wrapper) {
          return partial2(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone2(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return baseClone(
            value,
            CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG,
            customizer
          );
        }
        function conformsTo(object2, source) {
          return (
            source == null || baseConformsTo(object2, source, keys2(source))
          );
        }
        function eq2(value, other) {
          return value === other || (value !== value && other !== other);
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function (value, other) {
          return value >= other;
        });
        var isArguments2 = baseIsArguments(
          /* @__PURE__ */ (function () {
            return arguments;
          })()
        )
          ? baseIsArguments
          : function (value) {
              return (
                isObjectLike(value) &&
                hasOwnProperty2.call(value, 'callee') &&
                !propertyIsEnumerable.call(value, 'callee')
              );
            };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer
          ? baseUnary(nodeIsArrayBuffer)
          : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction2(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean3(value) {
          return (
            value === true ||
            value === false ||
            (isObjectLike(value) && baseGetTag(value) == boolTag)
          );
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate2 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement2(value) {
          return (
            isObjectLike(value) &&
            value.nodeType === 1 &&
            !isPlainObject3(value)
          );
        }
        function isEmpty2(value) {
          if (value == null) {
            return true;
          }
          if (
            isArrayLike(value) &&
            (isArray(value) ||
              typeof value == 'string' ||
              typeof value.splice == 'function' ||
              isBuffer(value) ||
              isTypedArray2(value) ||
              isArguments2(value))
          ) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty2.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual2(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          var result3 = customizer ? customizer(value, other) : undefined2;
          return result3 === undefined2
            ? baseIsEqual(value, other, undefined2, customizer)
            : !!result3;
        }
        function isError2(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return (
            tag == errorTag ||
            tag == domExcTag ||
            (typeof value.message == 'string' &&
              typeof value.name == 'string' &&
              !isPlainObject3(value))
          );
        }
        function isFinite3(value) {
          return typeof value == 'number' && nativeIsFinite(value);
        }
        function isFunction2(value) {
          if (!isObject4(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return (
            tag == funcTag ||
            tag == genTag ||
            tag == asyncTag ||
            tag == proxyTag
          );
        }
        function isInteger(value) {
          return typeof value == 'number' && value == toInteger(value);
        }
        function isLength(value) {
          return (
            typeof value == 'number' &&
            value > -1 &&
            value % 1 == 0 &&
            value <= MAX_SAFE_INTEGER
          );
        }
        function isObject4(value) {
          var type = typeof value;
          return value != null && (type == 'object' || type == 'function');
        }
        function isObjectLike(value) {
          return value != null && typeof value == 'object';
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch2(object2, source) {
          return (
            object2 === source ||
            baseIsMatch(object2, source, getMatchData(source))
          );
        }
        function isMatchWith(object2, source, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return baseIsMatch(object2, source, getMatchData(source), customizer);
        }
        function isNaN3(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull2(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return (
            typeof value == 'number' ||
            (isObjectLike(value) && baseGetTag(value) == numberTag)
          );
        }
        function isPlainObject3(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor =
            hasOwnProperty2.call(proto, 'constructor') && proto.constructor;
          return (
            typeof Ctor == 'function' &&
            Ctor instanceof Ctor &&
            funcToString.call(Ctor) == objectCtorString
          );
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return (
            isInteger(value) &&
            value >= -MAX_SAFE_INTEGER &&
            value <= MAX_SAFE_INTEGER
          );
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return (
            typeof value == 'string' ||
            (!isArray(value) &&
              isObjectLike(value) &&
              baseGetTag(value) == stringTag)
          );
        }
        function isSymbol(value) {
          return (
            typeof value == 'symbol' ||
            (isObjectLike(value) && baseGetTag(value) == symbolTag)
          );
        }
        var isTypedArray2 = nodeIsTypedArray
          ? baseUnary(nodeIsTypedArray)
          : baseIsTypedArray;
        function isUndefined2(value) {
          return value === undefined2;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function (value, other) {
          return value <= other;
        });
        function toArray2(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value),
            func =
              tag == mapTag ? mapToArray : tag == setTag ? setToArray : values2;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result3 = toFinite(value),
            remainder = result3 % 1;
          return result3 === result3
            ? remainder
              ? result3 - remainder
              : result3
            : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == 'number') {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject4(value)) {
            var other =
              typeof value.valueOf == 'function' ? value.valueOf() : value;
            value = isObject4(other) ? other + '' : other;
          }
          if (typeof value != 'string') {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value)
            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
            : reIsBadHex.test(value)
            ? NAN
            : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value
            ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
            : value === 0
            ? value
            : 0;
        }
        function toString2(value) {
          return value == null ? '' : baseToString(value);
        }
        var assign2 = createAssigner2(function (object2, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys2(source), object2);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty2.call(source, key)) {
              assignValue(object2, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner2(function (object2, source) {
          copyObject(source, keysIn(source), object2);
        });
        var assignInWith = createAssigner2(function (
          object2,
          source,
          srcIndex,
          customizer
        ) {
          copyObject(source, keysIn(source), object2, customizer);
        });
        var assignWith = createAssigner2(function (
          object2,
          source,
          srcIndex,
          customizer
        ) {
          copyObject(source, keys2(source), object2, customizer);
        });
        var at = flatRest(baseAt);
        function create2(prototype, properties) {
          var result3 = baseCreate2(prototype);
          return properties == null ? result3 : baseAssign(result3, properties);
        }
        var defaults = baseRest(function (object2, sources) {
          object2 = Object2(object2);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined2;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object2[key];
              if (
                value === undefined2 ||
                (eq2(value, objectProto[key]) &&
                  !hasOwnProperty2.call(object2, key))
              ) {
                object2[key] = source[key];
              }
            }
          }
          return object2;
        });
        var defaultsDeep = baseRest(function (args) {
          args.push(undefined2, customDefaultsMerge);
          return apply(mergeWith, undefined2, args);
        });
        function findKey2(object2, predicate) {
          return baseFindKey(object2, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object2, predicate) {
          return baseFindKey(
            object2,
            getIteratee(predicate, 3),
            baseForOwnRight
          );
        }
        function forIn(object2, iteratee3) {
          return object2 == null
            ? object2
            : baseFor(object2, getIteratee(iteratee3, 3), keysIn);
        }
        function forInRight(object2, iteratee3) {
          return object2 == null
            ? object2
            : baseForRight(object2, getIteratee(iteratee3, 3), keysIn);
        }
        function forOwn(object2, iteratee3) {
          return object2 && baseForOwn(object2, getIteratee(iteratee3, 3));
        }
        function forOwnRight(object2, iteratee3) {
          return object2 && baseForOwnRight(object2, getIteratee(iteratee3, 3));
        }
        function functions2(object2) {
          return object2 == null ? [] : baseFunctions(object2, keys2(object2));
        }
        function functionsIn(object2) {
          return object2 == null ? [] : baseFunctions(object2, keysIn(object2));
        }
        function get2(object2, path, defaultValue) {
          var result3 = object2 == null ? undefined2 : baseGet(object2, path);
          return result3 === undefined2 ? defaultValue : result3;
        }
        function has4(object2, path) {
          return object2 != null && hasPath(object2, path, baseHas);
        }
        function hasIn(object2, path) {
          return object2 != null && hasPath(object2, path, baseHasIn);
        }
        var invert2 = createInverter(function (result3, value, key) {
          if (value != null && typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }
          result3[value] = key;
        }, constant2(identity2));
        var invertBy = createInverter(function (result3, value, key) {
          if (value != null && typeof value.toString != 'function') {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty2.call(result3, value)) {
            result3[value].push(key);
          } else {
            result3[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys2(object2) {
          return isArrayLike(object2)
            ? arrayLikeKeys(object2)
            : baseKeys(object2);
        }
        function keysIn(object2) {
          return isArrayLike(object2)
            ? arrayLikeKeys(object2, true)
            : baseKeysIn(object2);
        }
        function mapKeys(object2, iteratee3) {
          var result3 = {};
          iteratee3 = getIteratee(iteratee3, 3);
          baseForOwn(object2, function (value, key, object3) {
            baseAssignValue(result3, iteratee3(value, key, object3), value);
          });
          return result3;
        }
        function mapValues(object2, iteratee3) {
          var result3 = {};
          iteratee3 = getIteratee(iteratee3, 3);
          baseForOwn(object2, function (value, key, object3) {
            baseAssignValue(result3, key, iteratee3(value, key, object3));
          });
          return result3;
        }
        var merge = createAssigner2(function (object2, source, srcIndex) {
          baseMerge(object2, source, srcIndex);
        });
        var mergeWith = createAssigner2(function (
          object2,
          source,
          srcIndex,
          customizer
        ) {
          baseMerge(object2, source, srcIndex, customizer);
        });
        var omit = flatRest(function (object2, paths) {
          var result3 = {};
          if (object2 == null) {
            return result3;
          }
          var isDeep = false;
          paths = arrayMap(paths, function (path) {
            path = castPath(path, object2);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object2, getAllKeysIn(object2), result3);
          if (isDeep) {
            result3 = baseClone(
              result3,
              CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
              customOmitClone
            );
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result3, paths[length]);
          }
          return result3;
        });
        function omitBy(object2, predicate) {
          return pickBy(object2, negate2(getIteratee(predicate)));
        }
        var pick2 = flatRest(function (object2, paths) {
          return object2 == null ? {} : basePick(object2, paths);
        });
        function pickBy(object2, predicate) {
          if (object2 == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object2), function (prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object2, props, function (value, path) {
            return predicate(value, path[0]);
          });
        }
        function result2(object2, path, defaultValue) {
          path = castPath(path, object2);
          var index = -1,
            length = path.length;
          if (!length) {
            length = 1;
            object2 = undefined2;
          }
          while (++index < length) {
            var value =
              object2 == null ? undefined2 : object2[toKey(path[index])];
            if (value === undefined2) {
              index = length;
              value = defaultValue;
            }
            object2 = isFunction2(value) ? value.call(object2) : value;
          }
          return object2;
        }
        function set(object2, path, value) {
          return object2 == null ? object2 : baseSet(object2, path, value);
        }
        function setWith(object2, path, value, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return object2 == null
            ? object2
            : baseSet(object2, path, value, customizer);
        }
        var toPairs = createToPairs(keys2);
        var toPairsIn = createToPairs(keysIn);
        function transform2(object2, iteratee3, accumulator) {
          var isArr = isArray(object2),
            isArrLike = isArr || isBuffer(object2) || isTypedArray2(object2);
          iteratee3 = getIteratee(iteratee3, 4);
          if (accumulator == null) {
            var Ctor = object2 && object2.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject4(object2)) {
              accumulator = isFunction2(Ctor)
                ? baseCreate2(getPrototype(object2))
                : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(
            object2,
            function (value, index, object3) {
              return iteratee3(accumulator, value, index, object3);
            }
          );
          return accumulator;
        }
        function unset(object2, path) {
          return object2 == null ? true : baseUnset(object2, path);
        }
        function update(object2, path, updater) {
          return object2 == null
            ? object2
            : baseUpdate(object2, path, castFunction(updater));
        }
        function updateWith(object2, path, updater, customizer) {
          customizer =
            typeof customizer == 'function' ? customizer : undefined2;
          return object2 == null
            ? object2
            : baseUpdate(object2, path, castFunction(updater), customizer);
        }
        function values2(object2) {
          return object2 == null ? [] : baseValues(object2, keys2(object2));
        }
        function valuesIn(object2) {
          return object2 == null ? [] : baseValues(object2, keysIn(object2));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined2) {
            upper = lower;
            lower = undefined2;
          }
          if (upper !== undefined2) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined2) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined2) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random2(lower, upper, floating) {
          if (
            floating &&
            typeof floating != 'boolean' &&
            isIterateeCall(lower, upper, floating)
          ) {
            upper = floating = undefined2;
          }
          if (floating === undefined2) {
            if (typeof upper == 'boolean') {
              floating = upper;
              upper = undefined2;
            } else if (typeof lower == 'boolean') {
              floating = lower;
              lower = undefined2;
            }
          }
          if (lower === undefined2 && upper === undefined2) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined2) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(
              lower +
                rand *
                  (upper -
                    lower +
                    freeParseFloat('1e-' + ((rand + '').length - 1))),
              upper
            );
          }
          return baseRandom(lower, upper);
        }
        var camelCase3 = createCompounder(function (result3, word, index) {
          word = word.toLowerCase();
          return result3 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString2(string).toLowerCase());
        }
        function deburr(string) {
          string = toString2(string);
          return (
            string &&
            string.replace(reLatin, deburrLetter).replace(reComboMark, '')
          );
        }
        function endsWith(string, target, position) {
          string = toString2(string);
          target = baseToString(target);
          var length = string.length;
          position =
            position === undefined2
              ? length
              : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape2(string) {
          string = toString2(string);
          return string && reHasUnescapedHtml.test(string)
            ? string.replace(reUnescapedHtml, escapeHtmlChar)
            : string;
        }
        function escapeRegExp2(string) {
          string = toString2(string);
          return string && reHasRegExpChar.test(string)
            ? string.replace(reRegExpChar, '\\$&')
            : string;
        }
        var kebabCase = createCompounder(function (result3, word, index) {
          return result3 + (index ? '-' : '') + word.toLowerCase();
        });
        var lowerCase = createCompounder(function (result3, word, index) {
          return result3 + (index ? ' ' : '') + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst('toLowerCase');
        function pad(string, length, chars) {
          string = toString2(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return (
            createPadding(nativeFloor(mid), chars) +
            string +
            createPadding(nativeCeil(mid), chars)
          );
        }
        function padEnd(string, length, chars) {
          string = toString2(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length
            ? string + createPadding(length - strLength, chars)
            : string;
        }
        function padStart(string, length, chars) {
          string = toString2(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length
            ? createPadding(length - strLength, chars) + string
            : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(
            toString2(string).replace(reTrimStart, ''),
            radix || 0
          );
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString2(string), n);
        }
        function replace() {
          var args = arguments,
            string = toString2(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase2 = createCompounder(function (result3, word, index) {
          return result3 + (index ? '_' : '') + word.toLowerCase();
        });
        function split3(string, separator, limit) {
          if (
            limit &&
            typeof limit != 'number' &&
            isIterateeCall(string, separator, limit)
          ) {
            separator = limit = undefined2;
          }
          limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString2(string);
          if (
            string &&
            (typeof separator == 'string' ||
              (separator != null && !isRegExp(separator)))
          ) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function (result3, word, index) {
          return result3 + (index ? ' ' : '') + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString2(string);
          position =
            position == null
              ? 0
              : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template2(string, options, guard) {
          var settings = lodash.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined2;
          }
          string = toString2(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith(
              {},
              options.imports,
              settings.imports,
              customDefaultsAssignIn
            ),
            importsKeys = keys2(imports),
            importsValues = baseValues(imports, importsKeys);
          var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source +
              '|' +
              interpolate.source +
              '|' +
              (interpolate === reInterpolate ? reEsTemplate : reNoMatch)
                .source +
              '|' +
              (options.evaluate || reNoMatch).source +
              '|$',
            'g'
          );
          var sourceURL =
            '//# sourceURL=' +
            (hasOwnProperty2.call(options, 'sourceURL')
              ? (options.sourceURL + '').replace(/\s/g, ' ')
              : 'lodash.templateSources[' + ++templateCounter + ']') +
            '\n';
          string.replace(
            reDelimiters,
            function (
              match,
              escapeValue,
              interpolateValue,
              esTemplateValue,
              evaluateValue,
              offset
            ) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string
                .slice(index, offset)
                .replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source +=
                  "' +\n((__t = (" +
                  interpolateValue +
                  ")) == null ? '' : __t) +\n'";
              }
              index = offset + match.length;
              return match;
            }
          );
          source += "';\n";
          var variable =
            hasOwnProperty2.call(options, 'variable') && options.variable;
          if (!variable) {
            source = 'with (obj) {\n' + source + '\n}\n';
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (
            isEvaluating ? source.replace(reEmptyStringLeading, '') : source
          )
            .replace(reEmptyStringMiddle, '$1')
            .replace(reEmptyStringTrailing, '$1;');
          source =
            'function(' +
            (variable || 'obj') +
            ') {\n' +
            (variable ? '' : 'obj || (obj = {});\n') +
            "var __t, __p = ''" +
            (isEscaping ? ', __e = _.escape' : '') +
            (isEvaluating
              ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n"
              : ';\n') +
            source +
            'return __p\n}';
          var result3 = attempt(function () {
            return Function2(importsKeys, sourceURL + 'return ' + source).apply(
              undefined2,
              importsValues
            );
          });
          result3.source = source;
          if (isError2(result3)) {
            throw result3;
          }
          return result3;
        }
        function toLower2(value) {
          return toString2(value).toLowerCase();
        }
        function toUpper(value) {
          return toString2(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString2(string);
          if (string && (guard || chars === undefined2)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join('');
        }
        function trimEnd(string, chars, guard) {
          string = toString2(string);
          if (string && (guard || chars === undefined2)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join('');
        }
        function trimStart(string, chars, guard) {
          string = toString2(string);
          if (string && (guard || chars === undefined2)) {
            return string.replace(reTrimStart, '');
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join('');
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;
          if (isObject4(options)) {
            var separator =
              'separator' in options ? options.separator : separator;
            length = 'length' in options ? toInteger(options.length) : length;
            omission =
              'omission' in options ? baseToString(options.omission) : omission;
          }
          string = toString2(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result3 = strSymbols
            ? castSlice(strSymbols, 0, end).join('')
            : string.slice(0, end);
          if (separator === undefined2) {
            return result3 + omission;
          }
          if (strSymbols) {
            end += result3.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match,
                substring = result3;
              if (!separator.global) {
                separator = RegExp2(
                  separator.source,
                  toString2(reFlags.exec(separator)) + 'g'
                );
              }
              separator.lastIndex = 0;
              while ((match = separator.exec(substring))) {
                var newEnd = match.index;
              }
              result3 = result3.slice(0, newEnd === undefined2 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result3.lastIndexOf(separator);
            if (index > -1) {
              result3 = result3.slice(0, index);
            }
          }
          return result3 + omission;
        }
        function unescape2(string) {
          string = toString2(string);
          return string && reHasEscapedHtml.test(string)
            ? string.replace(reEscapedHtml, unescapeHtmlChar)
            : string;
        }
        var upperCase = createCompounder(function (result3, word, index) {
          return result3 + (index ? ' ' : '') + word.toUpperCase();
        });
        var upperFirst = createCaseFirst('toUpperCase');
        function words(string, pattern, guard) {
          string = toString2(string);
          pattern = guard ? undefined2 : pattern;
          if (pattern === undefined2) {
            return hasUnicodeWord(string)
              ? unicodeWords(string)
              : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function (func, args) {
          try {
            return apply(func, undefined2, args);
          } catch (e) {
            return isError2(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function (object2, methodNames) {
          arrayEach(methodNames, function (key) {
            key = toKey(key);
            baseAssignValue(object2, key, bind(object2[key], object2));
          });
          return object2;
        });
        function cond(pairs2) {
          var length = pairs2 == null ? 0 : pairs2.length,
            toIteratee = getIteratee();
          pairs2 = !length
            ? []
            : arrayMap(pairs2, function (pair) {
                if (typeof pair[1] != 'function') {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                return [toIteratee(pair[0]), pair[1]];
              });
          return baseRest(function (args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs2[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant2(value) {
          return function () {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity2(value) {
          return value;
        }
        function iteratee2(func) {
          return baseIteratee2(
            typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG)
          );
        }
        function matches2(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(
            path,
            baseClone(srcValue, CLONE_DEEP_FLAG)
          );
        }
        var method = baseRest(function (path, args) {
          return function (object2) {
            return baseInvoke(object2, path, args);
          };
        });
        var methodOf = baseRest(function (object2, args) {
          return function (path) {
            return baseInvoke(object2, path, args);
          };
        });
        function mixin2(object2, source, options) {
          var props = keys2(source),
            methodNames = baseFunctions(source, props);
          if (
            options == null &&
            !(isObject4(source) && (methodNames.length || !props.length))
          ) {
            options = source;
            source = object2;
            object2 = this;
            methodNames = baseFunctions(source, keys2(source));
          }
          var chain3 =
              !(isObject4(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction2(object2);
          arrayEach(methodNames, function (methodName) {
            var func = source[methodName];
            object2[methodName] = func;
            if (isFunc) {
              object2.prototype[methodName] = function () {
                var chainAll = this.__chain__;
                if (chain3 || chainAll) {
                  var result3 = object2(this.__wrapped__),
                    actions = (result3.__actions__ = copyArray(
                      this.__actions__
                    ));
                  actions.push({
                    func: func,
                    args: arguments,
                    thisArg: object2,
                  });
                  result3.__chain__ = chainAll;
                  return result3;
                }
                return func.apply(
                  object2,
                  arrayPush([this.value()], arguments)
                );
              };
            }
          });
          return object2;
        }
        function noConflict() {
          if (root2._ === this) {
            root2._ = oldDash;
          }
          return this;
        }
        function noop2() {}
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function (args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property2(path) {
          return isKey(path)
            ? baseProperty(toKey(path))
            : basePropertyDeep(path);
        }
        function propertyOf2(object2) {
          return function (path) {
            return object2 == null ? undefined2 : baseGet(object2, path);
          };
        }
        var range2 = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return '';
        }
        function stubTrue() {
          return true;
        }
        function times2(n, iteratee3) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee3 = getIteratee(iteratee3);
          n -= MAX_ARRAY_LENGTH;
          var result3 = baseTimes(length, iteratee3);
          while (++index < n) {
            iteratee3(index);
          }
          return result3;
        }
        function toPath3(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value)
            ? [value]
            : copyArray(stringToPath(toString2(value)));
        }
        function uniqueId2(prefix) {
          var id = ++idCounter2;
          return toString2(prefix) + id;
        }
        var add = createMathOperation(function (augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound('ceil');
        var divide = createMathOperation(function (dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound('floor');
        function max2(array) {
          return array && array.length
            ? baseExtremum(array, identity2, baseGt)
            : undefined2;
        }
        function maxBy(array, iteratee3) {
          return array && array.length
            ? baseExtremum(array, getIteratee(iteratee3, 2), baseGt)
            : undefined2;
        }
        function mean(array) {
          return baseMean(array, identity2);
        }
        function meanBy(array, iteratee3) {
          return baseMean(array, getIteratee(iteratee3, 2));
        }
        function min2(array) {
          return array && array.length
            ? baseExtremum(array, identity2, baseLt)
            : undefined2;
        }
        function minBy(array, iteratee3) {
          return array && array.length
            ? baseExtremum(array, getIteratee(iteratee3, 2), baseLt)
            : undefined2;
        }
        var multiply = createMathOperation(function (multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound('round');
        var subtract = createMathOperation(function (minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity2) : 0;
        }
        function sumBy(array, iteratee3) {
          return array && array.length
            ? baseSum(array, getIteratee(iteratee3, 2))
            : 0;
        }
        lodash.after = after2;
        lodash.ary = ary;
        lodash.assign = assign2;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before2;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain2;
        lodash.chunk = chunk2;
        lodash.compact = compact2;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant2;
        lodash.countBy = countBy;
        lodash.create = create2;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce2;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter2;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten3;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions2;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial2;
        lodash.intersection = intersection2;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert2;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee2;
        lodash.keyBy = keyBy;
        lodash.keys = keys2;
        lodash.keysIn = keysIn;
        lodash.map = map2;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches2;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize2;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin2;
        lodash.negate = negate2;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial2;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick2;
        lodash.pickBy = pickBy;
        lodash.property = property2;
        lodash.propertyOf = propertyOf2;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range2;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject2;
        lodash.remove = remove;
        lodash.rest = rest2;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle2;
        lodash.slice = slice2;
        lodash.sortBy = sortBy3;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split3;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap2;
        lodash.throttle = throttle2;
        lodash.thru = thru;
        lodash.toArray = toArray2;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath3;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform2;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq2;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip2;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values2;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap2;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin2(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase3;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone2;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq2;
        lodash.escape = escape2;
        lodash.escapeRegExp = escapeRegExp2;
        lodash.every = every2;
        lodash.find = find2;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey2;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get2;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has4;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity2;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments2;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean3;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate2;
        lodash.isElement = isElement2;
        lodash.isEmpty = isEmpty2;
        lodash.isEqual = isEqual2;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError2;
        lodash.isFinite = isFinite3;
        lodash.isFunction = isFunction2;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch2;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN3;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull2;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject4;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject3;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray2;
        lodash.isUndefined = isUndefined2;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last2;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max2;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min2;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop2;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt2;
        lodash.random = random2;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result2;
        lodash.round = round;
        lodash.runInContext = runInContext2;
        lodash.sample = sample2;
        lodash.size = size2;
        lodash.snakeCase = snakeCase2;
        lodash.some = some2;
        lodash.sortedIndex = sortedIndex2;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template2;
        lodash.times = times2;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower2;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString2;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape2;
        lodash.uniqueId = uniqueId2;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin2(
          lodash,
          (function () {
            var source = {};
            baseForOwn(lodash, function (func, methodName) {
              if (!hasOwnProperty2.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          })(),
          { chain: false }
        );
        lodash.VERSION = VERSION2;
        arrayEach(
          ['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'],
          function (methodName) {
            lodash[methodName].placeholder = lodash;
          }
        );
        arrayEach(['drop', 'take'], function (methodName, index) {
          LazyWrapper.prototype[methodName] = function (n) {
            n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
            var result3 =
              this.__filtered__ && !index
                ? new LazyWrapper(this)
                : this.clone();
            if (result3.__filtered__) {
              result3.__takeCount__ = nativeMin(n, result3.__takeCount__);
            } else {
              result3.__views__.push({
                size: nativeMin(n, MAX_ARRAY_LENGTH),
                type: methodName + (result3.__dir__ < 0 ? 'Right' : ''),
              });
            }
            return result3;
          };
          LazyWrapper.prototype[methodName + 'Right'] = function (n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
          var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function (iteratee3) {
            var result3 = this.clone();
            result3.__iteratees__.push({
              iteratee: getIteratee(iteratee3, 3),
              type: type,
            });
            result3.__filtered__ = result3.__filtered__ || isFilter;
            return result3;
          };
        });
        arrayEach(['head', 'last'], function (methodName, index) {
          var takeName = 'take' + (index ? 'Right' : '');
          LazyWrapper.prototype[methodName] = function () {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(['initial', 'tail'], function (methodName, index) {
          var dropName = 'drop' + (index ? '' : 'Right');
          LazyWrapper.prototype[methodName] = function () {
            return this.__filtered__
              ? new LazyWrapper(this)
              : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function () {
          return this.filter(identity2);
        };
        LazyWrapper.prototype.find = function (predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function (predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
          if (typeof path == 'function') {
            return new LazyWrapper(this);
          }
          return this.map(function (value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function (predicate) {
          return this.filter(negate2(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function (start, end) {
          start = toInteger(start);
          var result3 = this;
          if (result3.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result3);
          }
          if (start < 0) {
            result3 = result3.takeRight(-start);
          } else if (start) {
            result3 = result3.drop(start);
          }
          if (end !== undefined2) {
            end = toInteger(end);
            result3 =
              end < 0 ? result3.dropRight(-end) : result3.take(end - start);
          }
          return result3;
        };
        LazyWrapper.prototype.takeRightWhile = function (predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function () {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(
              methodName
            ),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc =
              lodash[
                isTaker
                  ? 'take' + (methodName == 'last' ? 'Right' : '')
                  : methodName
              ],
            retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash.prototype[methodName] = function () {
            var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee3 = args[0],
              useLazy = isLazy || isArray(value);
            var interceptor = function (value2) {
              var result4 = lodashFunc.apply(lodash, arrayPush([value2], args));
              return isTaker && chainAll ? result4[0] : result4;
            };
            if (
              useLazy &&
              checkIteratee &&
              typeof iteratee3 == 'function' &&
              iteratee3.length != 1
            ) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result3 = func.apply(value, args);
              result3.__actions__.push({
                func: thru,
                args: [interceptor],
                thisArg: undefined2,
              });
              return new LodashWrapper(result3, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result3 = this.thru(interceptor);
            return isUnwrapped
              ? isTaker
                ? result3.value()[0]
                : result3.value()
              : result3;
          };
        });
        arrayEach(
          ['pop', 'push', 'shift', 'sort', 'splice', 'unshift'],
          function (methodName) {
            var func = arrayProto[methodName],
              chainName = /^(?:push|sort|unshift)$/.test(methodName)
                ? 'tap'
                : 'thru',
              retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function () {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
              }
              return this[chainName](function (value2) {
                return func.apply(isArray(value2) ? value2 : [], args);
              });
            };
          }
        );
        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
          var lodashFunc = lodash[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + '';
            if (!hasOwnProperty2.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ name: methodName, func: lodashFunc });
          }
        });
        realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [
          {
            name: 'wrapper',
            func: undefined2,
          },
        ];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON =
          lodash.prototype.valueOf =
          lodash.prototype.value =
            wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
          lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
      };
      var _15 = runInContext();
      if (
        typeof define == 'function' &&
        typeof define.amd == 'object' &&
        define.amd
      ) {
        root2._ = _15;
        define(function () {
          return _15;
        });
      } else if (freeModule) {
        (freeModule.exports = _15)._ = _15;
        freeExports._ = _15;
      } else {
        root2._ = _15;
      }
    }).call(exports);
  },
});

// node_modules/punycode/punycode.js
var require_punycode = __commonJS({
  'node_modules/punycode/punycode.js'(exports, module) {
    (function (root2) {
      var freeExports =
        typeof exports == 'object' && exports && !exports.nodeType && exports;
      var freeModule =
        typeof module == 'object' && module && !module.nodeType && module;
      var freeGlobal = typeof global == 'object' && global;
      if (
        freeGlobal.global === freeGlobal ||
        freeGlobal.window === freeGlobal ||
        freeGlobal.self === freeGlobal
      ) {
        root2 = freeGlobal;
      }
      var punycode,
        maxInt = 2147483647,
        base = 36,
        tMin = 1,
        tMax = 26,
        skew = 38,
        damp = 700,
        initialBias = 72,
        initialN = 128,
        delimiter = '-',
        regexPunycode = /^xn--/,
        regexNonASCII = /[^\x20-\x7E]/,
        regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
        errors = {
          'overflow': 'Overflow: input needs wider integers to process',
          'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
          'invalid-input': 'Invalid input',
        },
        baseMinusTMin = base - tMin,
        floor = Math.floor,
        stringFromCharCode = String.fromCharCode,
        key;
      function error(type) {
        throw new RangeError(errors[type]);
      }
      function map2(array, fn) {
        var length = array.length;
        var result2 = [];
        while (length--) {
          result2[length] = fn(array[length]);
        }
        return result2;
      }
      function mapDomain(string, fn) {
        var parts = string.split('@');
        var result2 = '';
        if (parts.length > 1) {
          result2 = parts[0] + '@';
          string = parts[1];
        }
        string = string.replace(regexSeparators, '.');
        var labels = string.split('.');
        var encoded = map2(labels, fn).join('.');
        return result2 + encoded;
      }
      function ucs2decode(string) {
        var output = [],
          counter = 0,
          length = string.length,
          value,
          extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        return map2(array, function (value) {
          var output = '';
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(((value >>> 10) & 1023) | 55296);
            value = 56320 | (value & 1023);
          }
          output += stringFromCharCode(value);
          return output;
        }).join('');
      }
      function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base;
      }
      function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      }
      function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > (baseMinusTMin * tMax) >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + ((baseMinusTMin + 1) * delta) / (delta + skew));
      }
      function decode3(input) {
        var output = [],
          inputLength = input.length,
          out,
          i = 0,
          n = initialN,
          bias = initialBias,
          basic,
          j,
          index,
          oldi,
          w,
          k,
          digit,
          t,
          baseMinusT;
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error('not-basic');
          }
          output.push(input.charCodeAt(j));
        }
        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          for (oldi = i, w = 1, k = base; ; k += base) {
            if (index >= inputLength) {
              error('invalid-input');
            }
            digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base || digit > floor((maxInt - i) / w)) {
              error('overflow');
            }
            i += digit * w;
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            baseMinusT = base - t;
            if (w > floor(maxInt / baseMinusT)) {
              error('overflow');
            }
            w *= baseMinusT;
          }
          out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error('overflow');
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return ucs2encode(output);
      }
      function encode2(input) {
        var n,
          delta,
          handledCPCount,
          basicLength,
          bias,
          j,
          m,
          q,
          k,
          t,
          currentValue,
          output = [],
          inputLength,
          handledCPCountPlusOne,
          baseMinusT,
          qMinusT;
        input = ucs2decode(input);
        inputLength = input.length;
        n = initialN;
        delta = 0;
        bias = initialBias;
        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue < 128) {
            output.push(stringFromCharCode(currentValue));
          }
        }
        handledCPCount = basicLength = output.length;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          for (m = maxInt, j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error('overflow');
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < n && ++delta > maxInt) {
              error('overflow');
            }
            if (currentValue == n) {
              for (q = delta, k = base; ; k += base) {
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) {
                  break;
                }
                qMinusT = q - t;
                baseMinusT = base - t;
                output.push(
                  stringFromCharCode(
                    digitToBasic(t + (qMinusT % baseMinusT), 0)
                  )
                );
                q = floor(qMinusT / baseMinusT);
              }
              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(
                delta,
                handledCPCountPlusOne,
                handledCPCount == basicLength
              );
              delta = 0;
              ++handledCPCount;
            }
          }
          ++delta;
          ++n;
        }
        return output.join('');
      }
      function toUnicode(input) {
        return mapDomain(input, function (string) {
          return regexPunycode.test(string)
            ? decode3(string.slice(4).toLowerCase())
            : string;
        });
      }
      function toASCII(input) {
        return mapDomain(input, function (string) {
          return regexNonASCII.test(string) ? 'xn--' + encode2(string) : string;
        });
      }
      punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        version: '1.4.1',
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        ucs2: {
          decode: ucs2decode,
          encode: ucs2encode,
        },
        decode: decode3,
        encode: encode2,
        toASCII: toASCII,
        toUnicode: toUnicode,
      };
      if (
        typeof define == 'function' &&
        typeof define.amd == 'object' &&
        define.amd
      ) {
        define('punycode', function () {
          return punycode;
        });
      } else if (freeExports && freeModule) {
        if (module.exports == freeExports) {
          freeModule.exports = punycode;
        } else {
          for (key in punycode) {
            punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
          }
        }
      } else {
        root2.punycode = punycode;
      }
    })(exports);
  },
});

// node_modules/es-errors/type.js
var require_type = __commonJS({
  'node_modules/es-errors/type.js'(exports, module) {
    'use strict';
    module.exports = TypeError;
  },
});

// (disabled):node_modules/object-inspect/util.inspect
var require_util = __commonJS({
  '(disabled):node_modules/object-inspect/util.inspect'() {},
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  'node_modules/object-inspect/index.js'(exports, module) {
    var hasMap = typeof Map === 'function' && Map.prototype;
    var mapSizeDescriptor =
      Object.getOwnPropertyDescriptor && hasMap
        ? Object.getOwnPropertyDescriptor(Map.prototype, 'size')
        : null;
    var mapSize =
      hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function'
        ? mapSizeDescriptor.get
        : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === 'function' && Set.prototype;
    var setSizeDescriptor =
      Object.getOwnPropertyDescriptor && hasSet
        ? Object.getOwnPropertyDescriptor(Set.prototype, 'size')
        : null;
    var setSize =
      hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function'
        ? setSizeDescriptor.get
        : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf =
      typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString =
      typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
        ? Symbol.prototype.toString
        : null;
    var hasShammedSymbols =
      typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
    var toStringTag =
      typeof Symbol === 'function' &&
      Symbol.toStringTag &&
      (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
        ? Symbol.toStringTag
        : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO =
      (typeof Reflect === 'function'
        ? Reflect.getPrototypeOf
        : Object.getPrototypeOf) ||
      ([].__proto__ === Array.prototype
        ? function (O) {
            return O.__proto__;
          }
        : null);
    function addNumericSeparator(num, str) {
      if (
        num === Infinity ||
        num === -Infinity ||
        num !== num ||
        (num && num > -1e3 && num < 1e3) ||
        $test.call(/e/, str)
      ) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === 'number') {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return (
            $replace.call(intStr, sepRegex, '$&_') +
            '.' +
            $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '')
          );
        }
      }
      return $replace.call(str, sepRegex, '$&_');
    }
    var utilInspect = require_util();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
    var quotes = {
      __proto__: null,
      double: '"',
      single: "'",
    };
    var quoteREs = {
      __proto__: null,
      double: /(["\\])/g,
      single: /(['\\])/g,
    };
    module.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has4(opts, 'quoteStyle') && !has4(quotes, opts.quoteStyle)) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (
        has4(opts, 'maxStringLength') &&
        (typeof opts.maxStringLength === 'number'
          ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
          : opts.maxStringLength !== null)
      ) {
        throw new TypeError(
          'option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`'
        );
      }
      var customInspect = has4(opts, 'customInspect')
        ? opts.customInspect
        : true;
      if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
        throw new TypeError(
          'option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`'
        );
      }
      if (
        has4(opts, 'indent') &&
        opts.indent !== null &&
        opts.indent !== '	' &&
        !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
      ) {
        throw new TypeError(
          'option "indent" must be "\\t", an integer > 0, or `null`'
        );
      }
      if (
        has4(opts, 'numericSeparator') &&
        typeof opts.numericSeparator !== 'boolean'
      ) {
        throw new TypeError(
          'option "numericSeparator", if provided, must be `true` or `false`'
        );
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === 'undefined') {
        return 'undefined';
      }
      if (obj === null) {
        return 'null';
      }
      if (typeof obj === 'boolean') {
        return obj ? 'true' : 'false';
      }
      if (typeof obj === 'string') {
        return inspectString(obj, opts);
      }
      if (typeof obj === 'number') {
        if (obj === 0) {
          return Infinity / obj > 0 ? '0' : '-0';
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === 'bigint') {
        var bigIntStr = String(obj) + 'n';
        return numericSeparator
          ? addNumericSeparator(obj, bigIntStr)
          : bigIntStr;
      }
      var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
      if (typeof depth === 'undefined') {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
        return isArray(obj) ? '[Array]' : '[Object]';
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === 'undefined') {
        seen = [];
      } else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
      }
      function inspect(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth,
          };
          if (has4(opts, 'quoteStyle')) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === 'function' && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys2 = arrObjKeys(obj, inspect);
        return (
          '[Function' +
          (name ? ': ' + name : ' (anonymous)') +
          ']' +
          (keys2.length > 0 ? ' { ' + $join.call(keys2, ', ') + ' }' : '')
        );
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols
          ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1')
          : symToString.call(obj);
        return typeof obj === 'object' && !hasShammedSymbols
          ? markBoxed(symString)
          : symString;
      }
      if (isElement2(obj)) {
        var s = '<' + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
          s +=
            ' ' +
            attrs[i].name +
            '=' +
            wrapQuotes(quote(attrs[i].value), 'double', opts);
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) {
          s += '...';
        }
        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
        return s;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return '[]';
        }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
          return '[' + indentedJoin(xs, indent) + ']';
        }
        return '[ ' + $join.call(xs, ', ') + ' ]';
      }
      if (isError2(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (
          !('cause' in Error.prototype) &&
          'cause' in obj &&
          !isEnumerable.call(obj, 'cause')
        ) {
          return (
            '{ [' +
            String(obj) +
            '] ' +
            $join.call(
              $concat.call('[cause]: ' + inspect(obj.cause), parts),
              ', '
            ) +
            ' }'
          );
        }
        if (parts.length === 0) {
          return '[' + String(obj) + ']';
        }
        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
      }
      if (typeof obj === 'object' && customInspect) {
        if (
          inspectSymbol &&
          typeof obj[inspectSymbol] === 'function' &&
          utilInspect
        ) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (
          customInspect !== 'symbol' &&
          typeof obj.inspect === 'function'
        ) {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function (value, key) {
            mapParts.push(
              inspect(key, obj, true) + ' => ' + inspect(value, obj)
            );
          });
        }
        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function (value) {
            setParts.push(inspect(value, obj));
          });
        }
        return collectionOf('Set', setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf('WeakMap');
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf('WeakSet');
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf('WeakRef');
      }
      if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean3(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
      }
      if (typeof window !== 'undefined' && obj === window) {
        return '{ [object Window] }';
      }
      if (
        (typeof globalThis !== 'undefined' && obj === globalThis) ||
        (typeof global !== 'undefined' && obj === global)
      ) {
        return '{ [object globalThis] }';
      }
      if (!isDate2(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject3 = gPO
          ? gPO(obj) === Object.prototype
          : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? '' : 'null prototype';
        var stringTag =
          !isPlainObject3 &&
          toStringTag &&
          Object(obj) === obj &&
          toStringTag in obj
            ? $slice.call(toStr(obj), 8, -1)
            : protoTag
            ? 'Object'
            : '';
        var constructorTag =
          isPlainObject3 || typeof obj.constructor !== 'function'
            ? ''
            : obj.constructor.name
            ? obj.constructor.name + ' '
            : '';
        var tag =
          constructorTag +
          (stringTag || protoTag
            ? '[' +
              $join.call(
                $concat.call([], stringTag || [], protoTag || []),
                ': '
              ) +
              '] '
            : '');
        if (ys.length === 0) {
          return tag + '{}';
        }
        if (indent) {
          return tag + '{' + indentedJoin(ys, indent) + '}';
        }
        return tag + '{ ' + $join.call(ys, ', ') + ' }';
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var style = opts.quoteStyle || defaultStyle;
      var quoteChar = quotes[style];
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return $replace.call(String(s), /"/g, '&quot;');
    }
    function canTrustToString(obj) {
      return (
        !toStringTag ||
        !(
          typeof obj === 'object' &&
          (toStringTag in obj || typeof obj[toStringTag] !== 'undefined')
        )
      );
    }
    function isArray(obj) {
      return toStr(obj) === '[object Array]' && canTrustToString(obj);
    }
    function isDate2(obj) {
      return toStr(obj) === '[object Date]' && canTrustToString(obj);
    }
    function isRegExp(obj) {
      return toStr(obj) === '[object RegExp]' && canTrustToString(obj);
    }
    function isError2(obj) {
      return toStr(obj) === '[object Error]' && canTrustToString(obj);
    }
    function isString(obj) {
      return toStr(obj) === '[object String]' && canTrustToString(obj);
    }
    function isNumber(obj) {
      return toStr(obj) === '[object Number]' && canTrustToString(obj);
    }
    function isBoolean3(obj) {
      return toStr(obj) === '[object Boolean]' && canTrustToString(obj);
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === 'object' && obj instanceof Symbol;
      }
      if (typeof obj === 'symbol') {
        return true;
      }
      if (!obj || typeof obj !== 'object' || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {}
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {}
      return false;
    }
    var hasOwn =
      Object.prototype.hasOwnProperty ||
      function (key) {
        return key in this;
      };
    function has4(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f) {
      if (f.name) {
        return f.name;
      }
      var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) {
        return m[1];
      }
      return null;
    }
    function indexOf(xs, x) {
      if (xs.indexOf) {
        return xs.indexOf(x);
      }
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) {
          return i;
        }
      }
      return -1;
    }
    function isMap(x) {
      if (!mapSize || !x || typeof x !== 'object') {
        return false;
      }
      try {
        mapSize.call(x);
        try {
          setSize.call(x);
        } catch (s) {
          return true;
        }
        return x instanceof Map;
      } catch (e) {}
      return false;
    }
    function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== 'object') {
        return false;
      }
      try {
        weakMapHas.call(x, weakMapHas);
        try {
          weakSetHas.call(x, weakSetHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakMap;
      } catch (e) {}
      return false;
    }
    function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== 'object') {
        return false;
      }
      try {
        weakRefDeref.call(x);
        return true;
      } catch (e) {}
      return false;
    }
    function isSet(x) {
      if (!setSize || !x || typeof x !== 'object') {
        return false;
      }
      try {
        setSize.call(x);
        try {
          mapSize.call(x);
        } catch (m) {
          return true;
        }
        return x instanceof Set;
      } catch (e) {}
      return false;
    }
    function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== 'object') {
        return false;
      }
      try {
        weakSetHas.call(x, weakSetHas);
        try {
          weakMapHas.call(x, weakMapHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakSet;
      } catch (e) {}
      return false;
    }
    function isElement2(x) {
      if (!x || typeof x !== 'object') {
        return false;
      }
      if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
      }
      return (
        typeof x.nodeName === 'string' && typeof x.getAttribute === 'function'
      );
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer =
          '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
        return (
          inspectString($slice.call(str, 0, opts.maxStringLength), opts) +
          trailer
        );
      }
      var quoteRE = quoteREs[opts.quoteStyle || 'single'];
      quoteRE.lastIndex = 0;
      var s = $replace.call(
        $replace.call(str, quoteRE, '\\$1'),
        /[\x00-\x1f]/g,
        lowbyte
      );
      return wrapQuotes(s, 'single', opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
        8: 'b',
        9: 't',
        10: 'n',
        12: 'f',
        13: 'r',
      }[n];
      if (x) {
        return '\\' + x;
      }
      return '\\x' + (n < 16 ? '0' : '') + $toUpperCase.call(n.toString(16));
    }
    function markBoxed(str) {
      return 'Object(' + str + ')';
    }
    function weakCollectionOf(type) {
      return type + ' { ? }';
    }
    function collectionOf(type, size2, entries, indent) {
      var joinedEntries = indent
        ? indentedJoin(entries, indent)
        : $join.call(entries, ', ');
      return type + ' (' + size2 + ') {' + joinedEntries + '}';
    }
    function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], '\n') >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === '	') {
        baseIndent = '	';
      } else if (typeof opts.indent === 'number' && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), ' ');
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent),
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return '';
      }
      var lineJoiner = '\n' + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
    }
    function arrObjKeys(obj, inspect) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
          xs[i] = has4(obj, i) ? inspect(obj[i], obj) : '';
        }
      }
      var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap['$' + syms[k]] = syms[k];
        }
      }
      for (var key in obj) {
        if (!has4(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
        } else {
          xs.push(key + ': ' + inspect(obj[key], obj));
        }
      }
      if (typeof gOPS === 'function') {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs.push(
              '[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj)
            );
          }
        }
      }
      return xs;
    }
  },
});

// node_modules/side-channel-list/index.js
var require_side_channel_list = __commonJS({
  'node_modules/side-channel-list/index.js'(exports, module) {
    'use strict';
    var inspect = require_object_inspect();
    var $TypeError = require_type();
    var listGetNode = function (list, key, isDelete) {
      var prev = list;
      var curr;
      for (; (curr = prev.next) != null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          if (!isDelete) {
            curr.next = /** @type {NonNullable<typeof list.next>} */ list.next;
            list.next = curr;
          }
          return curr;
        }
      }
    };
    var listGet = function (objects, key) {
      if (!objects) {
        return void 0;
      }
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function (objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next =
          /** @type {import('./list.d.ts').ListNode<typeof value, typeof key>} */
          {
            // eslint-disable-line no-param-reassign, no-extra-parens
            key,
            next: objects.next,
            value,
          };
      }
    };
    var listHas = function (objects, key) {
      if (!objects) {
        return false;
      }
      return !!listGetNode(objects, key);
    };
    var listDelete = function (objects, key) {
      if (objects) {
        return listGetNode(objects, key, true);
      }
    };
    module.exports = function getSideChannelList() {
      var $o;
      var channel = {
        assert: function (key) {
          if (!channel.has(key)) {
            throw new $TypeError(
              'Side channel does not contain ' + inspect(key)
            );
          }
        },
        delete: function (key) {
          var root2 = $o && $o.next;
          var deletedNode = listDelete($o, key);
          if (deletedNode && root2 && root2 === deletedNode) {
            $o = void 0;
          }
          return !!deletedNode;
        },
        get: function (key) {
          return listGet($o, key);
        },
        has: function (key) {
          return listHas($o, key);
        },
        set: function (key, value) {
          if (!$o) {
            $o = {
              next: void 0,
            };
          }
          listSet(
            /** @type {NonNullable<typeof $o>} */
            $o,
            key,
            value
          );
        },
      };
      return channel;
    };
  },
});

// node_modules/es-object-atoms/index.js
var require_es_object_atoms = __commonJS({
  'node_modules/es-object-atoms/index.js'(exports, module) {
    'use strict';
    module.exports = Object;
  },
});

// node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  'node_modules/es-errors/index.js'(exports, module) {
    'use strict';
    module.exports = Error;
  },
});

// node_modules/es-errors/eval.js
var require_eval = __commonJS({
  'node_modules/es-errors/eval.js'(exports, module) {
    'use strict';
    module.exports = EvalError;
  },
});

// node_modules/es-errors/range.js
var require_range = __commonJS({
  'node_modules/es-errors/range.js'(exports, module) {
    'use strict';
    module.exports = RangeError;
  },
});

// node_modules/es-errors/ref.js
var require_ref = __commonJS({
  'node_modules/es-errors/ref.js'(exports, module) {
    'use strict';
    module.exports = ReferenceError;
  },
});

// node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  'node_modules/es-errors/syntax.js'(exports, module) {
    'use strict';
    module.exports = SyntaxError;
  },
});

// node_modules/es-errors/uri.js
var require_uri = __commonJS({
  'node_modules/es-errors/uri.js'(exports, module) {
    'use strict';
    module.exports = URIError;
  },
});

// node_modules/math-intrinsics/abs.js
var require_abs = __commonJS({
  'node_modules/math-intrinsics/abs.js'(exports, module) {
    'use strict';
    module.exports = Math.abs;
  },
});

// node_modules/math-intrinsics/floor.js
var require_floor = __commonJS({
  'node_modules/math-intrinsics/floor.js'(exports, module) {
    'use strict';
    module.exports = Math.floor;
  },
});

// node_modules/math-intrinsics/max.js
var require_max = __commonJS({
  'node_modules/math-intrinsics/max.js'(exports, module) {
    'use strict';
    module.exports = Math.max;
  },
});

// node_modules/math-intrinsics/min.js
var require_min = __commonJS({
  'node_modules/math-intrinsics/min.js'(exports, module) {
    'use strict';
    module.exports = Math.min;
  },
});

// node_modules/math-intrinsics/pow.js
var require_pow = __commonJS({
  'node_modules/math-intrinsics/pow.js'(exports, module) {
    'use strict';
    module.exports = Math.pow;
  },
});

// node_modules/math-intrinsics/round.js
var require_round = __commonJS({
  'node_modules/math-intrinsics/round.js'(exports, module) {
    'use strict';
    module.exports = Math.round;
  },
});

// node_modules/math-intrinsics/isNaN.js
var require_isNaN = __commonJS({
  'node_modules/math-intrinsics/isNaN.js'(exports, module) {
    'use strict';
    module.exports =
      Number.isNaN ||
      function isNaN3(a) {
        return a !== a;
      };
  },
});

// node_modules/math-intrinsics/sign.js
var require_sign = __commonJS({
  'node_modules/math-intrinsics/sign.js'(exports, module) {
    'use strict';
    var $isNaN = require_isNaN();
    module.exports = function sign(number) {
      if ($isNaN(number) || number === 0) {
        return number;
      }
      return number < 0 ? -1 : 1;
    };
  },
});

// node_modules/gopd/gOPD.js
var require_gOPD = __commonJS({
  'node_modules/gopd/gOPD.js'(exports, module) {
    'use strict';
    module.exports = Object.getOwnPropertyDescriptor;
  },
});

// node_modules/gopd/index.js
var require_gopd = __commonJS({
  'node_modules/gopd/index.js'(exports, module) {
    'use strict';
    var $gOPD = require_gOPD();
    if ($gOPD) {
      try {
        $gOPD([], 'length');
      } catch (e) {
        $gOPD = null;
      }
    }
    module.exports = $gOPD;
  },
});

// node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  'node_modules/es-define-property/index.js'(exports, module) {
    'use strict';
    var $defineProperty = Object.defineProperty || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, 'a', { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    module.exports = $defineProperty;
  },
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  'node_modules/has-symbols/shams.js'(exports, module) {
    'use strict';
    module.exports = function hasSymbols() {
      if (
        typeof Symbol !== 'function' ||
        typeof Object.getOwnPropertySymbols !== 'function'
      ) {
        return false;
      }
      if (typeof Symbol.iterator === 'symbol') {
        return true;
      }
      var obj = {};
      var sym = Symbol('test');
      var symObj = Object(sym);
      if (typeof sym === 'string') {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (var _15 in obj) {
        return false;
      }
      if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
        return false;
      }
      if (
        typeof Object.getOwnPropertyNames === 'function' &&
        Object.getOwnPropertyNames(obj).length !== 0
      ) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === 'function') {
        var descriptor =
          /** @type {PropertyDescriptor} */
          Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  },
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  'node_modules/has-symbols/index.js'(exports, module) {
    'use strict';
    var origSymbol = typeof Symbol !== 'undefined' && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== 'function') {
        return false;
      }
      if (typeof Symbol !== 'function') {
        return false;
      }
      if (typeof origSymbol('foo') !== 'symbol') {
        return false;
      }
      if (typeof Symbol('bar') !== 'symbol') {
        return false;
      }
      return hasSymbolSham();
    };
  },
});

// node_modules/get-proto/Reflect.getPrototypeOf.js
var require_Reflect_getPrototypeOf = __commonJS({
  'node_modules/get-proto/Reflect.getPrototypeOf.js'(exports, module) {
    'use strict';
    module.exports =
      (typeof Reflect !== 'undefined' && Reflect.getPrototypeOf) || null;
  },
});

// node_modules/get-proto/Object.getPrototypeOf.js
var require_Object_getPrototypeOf = __commonJS({
  'node_modules/get-proto/Object.getPrototypeOf.js'(exports, module) {
    'use strict';
    var $Object = require_es_object_atoms();
    module.exports = $Object.getPrototypeOf || null;
  },
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  'node_modules/function-bind/implementation.js'(exports, module) {
    'use strict';
    var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
    var toStr = Object.prototype.toString;
    var max2 = Math.max;
    var funcType = '[object Function]';
    var concatty = function concatty2(a, b) {
      var arr = [];
      for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
      }
      for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
      }
      return arr;
    };
    var joiny = function (arr, joiner) {
      var str = '';
      for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module.exports = function bind(that) {
      var target = this;
      if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function () {
        if (this instanceof bound) {
          var result2 = target.apply(this, concatty(args, arguments));
          if (Object(result2) === result2) {
            return result2;
          }
          return this;
        }
        return target.apply(that, concatty(args, arguments));
      };
      var boundLength = max2(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
      }
      bound = Function(
        'binder',
        'return function (' +
          joiny(boundArgs, ',') +
          '){ return binder.apply(this,arguments); }'
      )(binder);
      if (target.prototype) {
        var Empty = function Empty2() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  },
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  'node_modules/function-bind/index.js'(exports, module) {
    'use strict';
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  },
});

// node_modules/call-bind-apply-helpers/functionCall.js
var require_functionCall = __commonJS({
  'node_modules/call-bind-apply-helpers/functionCall.js'(exports, module) {
    'use strict';
    module.exports = Function.prototype.call;
  },
});

// node_modules/call-bind-apply-helpers/functionApply.js
var require_functionApply = __commonJS({
  'node_modules/call-bind-apply-helpers/functionApply.js'(exports, module) {
    'use strict';
    module.exports = Function.prototype.apply;
  },
});

// node_modules/call-bind-apply-helpers/reflectApply.js
var require_reflectApply = __commonJS({
  'node_modules/call-bind-apply-helpers/reflectApply.js'(exports, module) {
    'use strict';
    module.exports = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;
  },
});

// node_modules/call-bind-apply-helpers/actualApply.js
var require_actualApply = __commonJS({
  'node_modules/call-bind-apply-helpers/actualApply.js'(exports, module) {
    'use strict';
    var bind = require_function_bind();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var $reflectApply = require_reflectApply();
    module.exports = $reflectApply || bind.call($call, $apply);
  },
});

// node_modules/call-bind-apply-helpers/index.js
var require_call_bind_apply_helpers = __commonJS({
  'node_modules/call-bind-apply-helpers/index.js'(exports, module) {
    'use strict';
    var bind = require_function_bind();
    var $TypeError = require_type();
    var $call = require_functionCall();
    var $actualApply = require_actualApply();
    module.exports = function callBindBasic(args) {
      if (args.length < 1 || typeof args[0] !== 'function') {
        throw new $TypeError('a function is required');
      }
      return $actualApply(bind, $call, args);
    };
  },
});

// node_modules/dunder-proto/get.js
var require_get = __commonJS({
  'node_modules/dunder-proto/get.js'(exports, module) {
    'use strict';
    var callBind = require_call_bind_apply_helpers();
    var gOPD = require_gopd();
    var hasProtoAccessor;
    try {
      hasProtoAccessor =
        /** @type {{ __proto__?: typeof Array.prototype }} */
        [].__proto__ === Array.prototype;
    } catch (e) {
      if (
        !e ||
        typeof e !== 'object' ||
        !('code' in e) ||
        e.code !== 'ERR_PROTO_ACCESS'
      ) {
        throw e;
      }
    }
    var desc =
      !!hasProtoAccessor &&
      gOPD &&
      gOPD(
        Object.prototype,
        /** @type {keyof typeof Object.prototype} */
        '__proto__'
      );
    var $Object = Object;
    var $getPrototypeOf = $Object.getPrototypeOf;
    module.exports =
      desc && typeof desc.get === 'function'
        ? callBind([desc.get])
        : typeof $getPrototypeOf === 'function'
        ? /** @type {import('./get')} */
          function getDunder(value) {
            return $getPrototypeOf(value == null ? value : $Object(value));
          }
        : false;
  },
});

// node_modules/get-proto/index.js
var require_get_proto = __commonJS({
  'node_modules/get-proto/index.js'(exports, module) {
    'use strict';
    var reflectGetProto = require_Reflect_getPrototypeOf();
    var originalGetProto = require_Object_getPrototypeOf();
    var getDunderProto = require_get();
    module.exports = reflectGetProto
      ? function getProto(O) {
          return reflectGetProto(O);
        }
      : originalGetProto
      ? function getProto(O) {
          if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
            throw new TypeError('getProto: not an object');
          }
          return originalGetProto(O);
        }
      : getDunderProto
      ? function getProto(O) {
          return getDunderProto(O);
        }
      : null;
  },
});

// node_modules/hasown/index.js
var require_hasown = __commonJS({
  'node_modules/hasown/index.js'(exports, module) {
    'use strict';
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module.exports = bind.call(call, $hasOwn);
  },
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  'node_modules/get-intrinsic/index.js'(exports, module) {
    'use strict';
    var undefined2;
    var $Object = require_es_object_atoms();
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var abs = require_abs();
    var floor = require_floor();
    var max2 = require_max();
    var min2 = require_min();
    var pow = require_pow();
    var round = require_round();
    var sign = require_sign();
    var $Function = Function;
    var getEvalledConstructor = function (expressionSyntax) {
      try {
        return $Function(
          '"use strict"; return (' + expressionSyntax + ').constructor;'
        )();
      } catch (e) {}
    };
    var $gOPD = require_gopd();
    var $defineProperty = require_es_define_property();
    var throwTypeError = function () {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD
      ? (function () {
          try {
            arguments.callee;
            return throwTypeError;
          } catch (calleeThrows) {
            try {
              return $gOPD(arguments, 'callee').get;
            } catch (gOPDthrows) {
              return throwTypeError;
            }
          }
        })()
      : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getProto = require_get_proto();
    var $ObjectGPO = require_Object_getPrototypeOf();
    var $ReflectGPO = require_Reflect_getPrototypeOf();
    var $apply = require_functionApply();
    var $call = require_functionCall();
    var needsEval = {};
    var TypedArray =
      typeof Uint8Array === 'undefined' || !getProto
        ? undefined2
        : getProto(Uint8Array);
    var INTRINSICS = {
      '__proto__': null,
      '%AggregateError%':
        typeof AggregateError === 'undefined' ? undefined2 : AggregateError,
      '%Array%': Array,
      '%ArrayBuffer%':
        typeof ArrayBuffer === 'undefined' ? undefined2 : ArrayBuffer,
      '%ArrayIteratorPrototype%':
        hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      '%AsyncFromSyncIteratorPrototype%': undefined2,
      '%AsyncFunction%': needsEval,
      '%AsyncGenerator%': needsEval,
      '%AsyncGeneratorFunction%': needsEval,
      '%AsyncIteratorPrototype%': needsEval,
      '%Atomics%': typeof Atomics === 'undefined' ? undefined2 : Atomics,
      '%BigInt%': typeof BigInt === 'undefined' ? undefined2 : BigInt,
      '%BigInt64Array%':
        typeof BigInt64Array === 'undefined' ? undefined2 : BigInt64Array,
      '%BigUint64Array%':
        typeof BigUint64Array === 'undefined' ? undefined2 : BigUint64Array,
      '%Boolean%': Boolean,
      '%DataView%': typeof DataView === 'undefined' ? undefined2 : DataView,
      '%Date%': Date,
      '%decodeURI%': decodeURI,
      '%decodeURIComponent%': decodeURIComponent,
      '%encodeURI%': encodeURI,
      '%encodeURIComponent%': encodeURIComponent,
      '%Error%': $Error,
      '%eval%': eval,
      // eslint-disable-line no-eval
      '%EvalError%': $EvalError,
      '%Float16Array%':
        typeof Float16Array === 'undefined' ? undefined2 : Float16Array,
      '%Float32Array%':
        typeof Float32Array === 'undefined' ? undefined2 : Float32Array,
      '%Float64Array%':
        typeof Float64Array === 'undefined' ? undefined2 : Float64Array,
      '%FinalizationRegistry%':
        typeof FinalizationRegistry === 'undefined'
          ? undefined2
          : FinalizationRegistry,
      '%Function%': $Function,
      '%GeneratorFunction%': needsEval,
      '%Int8Array%': typeof Int8Array === 'undefined' ? undefined2 : Int8Array,
      '%Int16Array%':
        typeof Int16Array === 'undefined' ? undefined2 : Int16Array,
      '%Int32Array%':
        typeof Int32Array === 'undefined' ? undefined2 : Int32Array,
      '%isFinite%': isFinite,
      '%isNaN%': isNaN,
      '%IteratorPrototype%':
        hasSymbols && getProto
          ? getProto(getProto([][Symbol.iterator]()))
          : undefined2,
      '%JSON%': typeof JSON === 'object' ? JSON : undefined2,
      '%Map%': typeof Map === 'undefined' ? undefined2 : Map,
      '%MapIteratorPrototype%':
        typeof Map === 'undefined' || !hasSymbols || !getProto
          ? undefined2
          : getProto(/* @__PURE__ */ new Map()[Symbol.iterator]()),
      '%Math%': Math,
      '%Number%': Number,
      '%Object%': $Object,
      '%Object.getOwnPropertyDescriptor%': $gOPD,
      '%parseFloat%': parseFloat,
      '%parseInt%': parseInt,
      '%Promise%': typeof Promise === 'undefined' ? undefined2 : Promise,
      '%Proxy%': typeof Proxy === 'undefined' ? undefined2 : Proxy,
      '%RangeError%': $RangeError,
      '%ReferenceError%': $ReferenceError,
      '%Reflect%': typeof Reflect === 'undefined' ? undefined2 : Reflect,
      '%RegExp%': RegExp,
      '%Set%': typeof Set === 'undefined' ? undefined2 : Set,
      '%SetIteratorPrototype%':
        typeof Set === 'undefined' || !hasSymbols || !getProto
          ? undefined2
          : getProto(/* @__PURE__ */ new Set()[Symbol.iterator]()),
      '%SharedArrayBuffer%':
        typeof SharedArrayBuffer === 'undefined'
          ? undefined2
          : SharedArrayBuffer,
      '%String%': String,
      '%StringIteratorPrototype%':
        hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined2,
      '%Symbol%': hasSymbols ? Symbol : undefined2,
      '%SyntaxError%': $SyntaxError,
      '%ThrowTypeError%': ThrowTypeError,
      '%TypedArray%': TypedArray,
      '%TypeError%': $TypeError,
      '%Uint8Array%':
        typeof Uint8Array === 'undefined' ? undefined2 : Uint8Array,
      '%Uint8ClampedArray%':
        typeof Uint8ClampedArray === 'undefined'
          ? undefined2
          : Uint8ClampedArray,
      '%Uint16Array%':
        typeof Uint16Array === 'undefined' ? undefined2 : Uint16Array,
      '%Uint32Array%':
        typeof Uint32Array === 'undefined' ? undefined2 : Uint32Array,
      '%URIError%': $URIError,
      '%WeakMap%': typeof WeakMap === 'undefined' ? undefined2 : WeakMap,
      '%WeakRef%': typeof WeakRef === 'undefined' ? undefined2 : WeakRef,
      '%WeakSet%': typeof WeakSet === 'undefined' ? undefined2 : WeakSet,
      '%Function.prototype.call%': $call,
      '%Function.prototype.apply%': $apply,
      '%Object.defineProperty%': $defineProperty,
      '%Object.getPrototypeOf%': $ObjectGPO,
      '%Math.abs%': abs,
      '%Math.floor%': floor,
      '%Math.max%': max2,
      '%Math.min%': min2,
      '%Math.pow%': pow,
      '%Math.round%': round,
      '%Math.sign%': sign,
      '%Reflect.getPrototypeOf%': $ReflectGPO,
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS['%Error.prototype%'] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === '%AsyncFunction%') {
        value = getEvalledConstructor('async function () {}');
      } else if (name === '%GeneratorFunction%') {
        value = getEvalledConstructor('function* () {}');
      } else if (name === '%AsyncGeneratorFunction%') {
        value = getEvalledConstructor('async function* () {}');
      } else if (name === '%AsyncGenerator%') {
        var fn = doEval2('%AsyncGeneratorFunction%');
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === '%AsyncIteratorPrototype%') {
        var gen = doEval2('%AsyncGenerator%');
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      '__proto__': null,
      '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
      '%ArrayPrototype%': ['Array', 'prototype'],
      '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
      '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
      '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
      '%ArrayProto_values%': ['Array', 'prototype', 'values'],
      '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
      '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
      '%AsyncGeneratorPrototype%': [
        'AsyncGeneratorFunction',
        'prototype',
        'prototype',
      ],
      '%BooleanPrototype%': ['Boolean', 'prototype'],
      '%DataViewPrototype%': ['DataView', 'prototype'],
      '%DatePrototype%': ['Date', 'prototype'],
      '%ErrorPrototype%': ['Error', 'prototype'],
      '%EvalErrorPrototype%': ['EvalError', 'prototype'],
      '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
      '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
      '%FunctionPrototype%': ['Function', 'prototype'],
      '%Generator%': ['GeneratorFunction', 'prototype'],
      '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
      '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
      '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
      '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
      '%JSONParse%': ['JSON', 'parse'],
      '%JSONStringify%': ['JSON', 'stringify'],
      '%MapPrototype%': ['Map', 'prototype'],
      '%NumberPrototype%': ['Number', 'prototype'],
      '%ObjectPrototype%': ['Object', 'prototype'],
      '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
      '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
      '%PromisePrototype%': ['Promise', 'prototype'],
      '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
      '%Promise_all%': ['Promise', 'all'],
      '%Promise_reject%': ['Promise', 'reject'],
      '%Promise_resolve%': ['Promise', 'resolve'],
      '%RangeErrorPrototype%': ['RangeError', 'prototype'],
      '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
      '%RegExpPrototype%': ['RegExp', 'prototype'],
      '%SetPrototype%': ['Set', 'prototype'],
      '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
      '%StringPrototype%': ['String', 'prototype'],
      '%SymbolPrototype%': ['Symbol', 'prototype'],
      '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
      '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
      '%TypeErrorPrototype%': ['TypeError', 'prototype'],
      '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
      '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
      '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
      '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
      '%URIErrorPrototype%': ['URIError', 'prototype'],
      '%WeakMapPrototype%': ['WeakMap', 'prototype'],
      '%WeakSetPrototype%': ['WeakSet', 'prototype'],
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call($call, Array.prototype.concat);
    var $spliceApply = bind.call($apply, Array.prototype.splice);
    var $replace = bind.call($call, String.prototype.replace);
    var $strSlice = bind.call($call, String.prototype.slice);
    var $exec = bind.call($call, RegExp.prototype.exec);
    var rePropName =
      /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first2 = $strSlice(string, 0, 1);
      var last2 = $strSlice(string, -1);
      if (first2 === '%' && last2 !== '%') {
        throw new $SyntaxError(
          'invalid intrinsic syntax, expected closing `%`'
        );
      } else if (last2 === '%' && first2 !== '%') {
        throw new $SyntaxError(
          'invalid intrinsic syntax, expected opening `%`'
        );
      }
      var result2 = [];
      $replace(string, rePropName, function (match, number, quote, subString) {
        result2[result2.length] = quote
          ? $replace(subString, reEscapeChar, '$1')
          : number || match;
      });
      return result2;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = '%' + alias[0] + '%';
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === 'undefined' && !allowMissing) {
          throw new $TypeError(
            'intrinsic ' +
              name +
              ' exists, but is not available. Please file an issue!'
          );
        }
        return {
          alias,
          name: intrinsicName,
          value,
        };
      }
      throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
    };
    module.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== 'string' || name.length === 0) {
        throw new $TypeError('intrinsic name must be a non-empty string');
      }
      if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError(
          '`%` may not be present anywhere but at the beginning and end of the intrinsic name'
        );
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
      var intrinsic = getBaseIntrinsic(
        '%' + intrinsicBaseName + '%',
        allowMissing
      );
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first2 = $strSlice(part, 0, 1);
        var last2 = $strSlice(part, -1);
        if (
          (first2 === '"' ||
            first2 === "'" ||
            first2 === '`' ||
            last2 === '"' ||
            last2 === "'" ||
            last2 === '`') &&
          first2 !== last2
        ) {
          throw new $SyntaxError(
            'property names with quotes must have matching quotes'
          );
        }
        if (part === 'constructor' || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += '.' + part;
        intrinsicRealName = '%' + intrinsicBaseName + '%';
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError(
                'base intrinsic for ' +
                  name +
                  ' exists, but the property is not available.'
              );
            }
            return void undefined2;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  },
});

// node_modules/call-bound/index.js
var require_call_bound = __commonJS({
  'node_modules/call-bound/index.js'(exports, module) {
    'use strict';
    var GetIntrinsic = require_get_intrinsic();
    var callBindBasic = require_call_bind_apply_helpers();
    var $indexOf = callBindBasic([GetIntrinsic('%String.prototype.indexOf%')]);
    module.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic =
        /** @type {(this: unknown, ...args: unknown[]) => unknown} */
        GetIntrinsic(name, !!allowMissing);
      if (
        typeof intrinsic === 'function' &&
        $indexOf(name, '.prototype.') > -1
      ) {
        return callBindBasic(
          /** @type {const} */
          [intrinsic]
        );
      }
      return intrinsic;
    };
  },
});

// node_modules/side-channel-map/index.js
var require_side_channel_map = __commonJS({
  'node_modules/side-channel-map/index.js'(exports, module) {
    'use strict';
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_call_bound();
    var inspect = require_object_inspect();
    var $TypeError = require_type();
    var $Map = GetIntrinsic('%Map%', true);
    var $mapGet = callBound('Map.prototype.get', true);
    var $mapSet = callBound('Map.prototype.set', true);
    var $mapHas = callBound('Map.prototype.has', true);
    var $mapDelete = callBound('Map.prototype.delete', true);
    var $mapSize = callBound('Map.prototype.size', true);
    module.exports =
      !!$Map &&
      /** @type {Exclude<import('.'), false>} */
      function getSideChannelMap() {
        var $m;
        var channel = {
          assert: function (key) {
            if (!channel.has(key)) {
              throw new $TypeError(
                'Side channel does not contain ' + inspect(key)
              );
            }
          },
          delete: function (key) {
            if ($m) {
              var result2 = $mapDelete($m, key);
              if ($mapSize($m) === 0) {
                $m = void 0;
              }
              return result2;
            }
            return false;
          },
          get: function (key) {
            if ($m) {
              return $mapGet($m, key);
            }
          },
          has: function (key) {
            if ($m) {
              return $mapHas($m, key);
            }
            return false;
          },
          set: function (key, value) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key, value);
          },
        };
        return channel;
      };
  },
});

// node_modules/side-channel-weakmap/index.js
var require_side_channel_weakmap = __commonJS({
  'node_modules/side-channel-weakmap/index.js'(exports, module) {
    'use strict';
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_call_bound();
    var inspect = require_object_inspect();
    var getSideChannelMap = require_side_channel_map();
    var $TypeError = require_type();
    var $WeakMap = GetIntrinsic('%WeakMap%', true);
    var $weakMapGet = callBound('WeakMap.prototype.get', true);
    var $weakMapSet = callBound('WeakMap.prototype.set', true);
    var $weakMapHas = callBound('WeakMap.prototype.has', true);
    var $weakMapDelete = callBound('WeakMap.prototype.delete', true);
    module.exports = $WeakMap
      ? /** @type {Exclude<import('.'), false>} */
        function getSideChannelWeakMap() {
          var $wm;
          var $m;
          var channel = {
            assert: function (key) {
              if (!channel.has(key)) {
                throw new $TypeError(
                  'Side channel does not contain ' + inspect(key)
                );
              }
            },
            delete: function (key) {
              if (
                $WeakMap &&
                key &&
                (typeof key === 'object' || typeof key === 'function')
              ) {
                if ($wm) {
                  return $weakMapDelete($wm, key);
                }
              } else if (getSideChannelMap) {
                if ($m) {
                  return $m['delete'](key);
                }
              }
              return false;
            },
            get: function (key) {
              if (
                $WeakMap &&
                key &&
                (typeof key === 'object' || typeof key === 'function')
              ) {
                if ($wm) {
                  return $weakMapGet($wm, key);
                }
              }
              return $m && $m.get(key);
            },
            has: function (key) {
              if (
                $WeakMap &&
                key &&
                (typeof key === 'object' || typeof key === 'function')
              ) {
                if ($wm) {
                  return $weakMapHas($wm, key);
                }
              }
              return !!$m && $m.has(key);
            },
            set: function (key, value) {
              if (
                $WeakMap &&
                key &&
                (typeof key === 'object' || typeof key === 'function')
              ) {
                if (!$wm) {
                  $wm = new $WeakMap();
                }
                $weakMapSet($wm, key, value);
              } else if (getSideChannelMap) {
                if (!$m) {
                  $m = getSideChannelMap();
                }
                $m.set(key, value);
              }
            },
          };
          return channel;
        }
      : getSideChannelMap;
  },
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  'node_modules/side-channel/index.js'(exports, module) {
    'use strict';
    var $TypeError = require_type();
    var inspect = require_object_inspect();
    var getSideChannelList = require_side_channel_list();
    var getSideChannelMap = require_side_channel_map();
    var getSideChannelWeakMap = require_side_channel_weakmap();
    var makeChannel =
      getSideChannelWeakMap || getSideChannelMap || getSideChannelList;
    module.exports = function getSideChannel() {
      var $channelData;
      var channel = {
        assert: function (key) {
          if (!channel.has(key)) {
            throw new $TypeError(
              'Side channel does not contain ' + inspect(key)
            );
          }
        },
        delete: function (key) {
          return !!$channelData && $channelData['delete'](key);
        },
        get: function (key) {
          return $channelData && $channelData.get(key);
        },
        has: function (key) {
          return !!$channelData && $channelData.has(key);
        },
        set: function (key, value) {
          if (!$channelData) {
            $channelData = makeChannel();
          }
          $channelData.set(key, value);
        },
      };
      return channel;
    };
  },
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  'node_modules/qs/lib/formats.js'(exports, module) {
    'use strict';
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: 'RFC1738',
      RFC3986: 'RFC3986',
    };
    module.exports = {
      default: Format.RFC3986,
      formatters: {
        RFC1738: function (value) {
          return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
          return String(value);
        },
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986,
    };
  },
});

// node_modules/qs/lib/utils.js
var require_utils = __commonJS({
  'node_modules/qs/lib/utils.js'(exports, module) {
    'use strict';
    var formats = require_formats();
    var has4 = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var hexTable = (function () {
      var array = [];
      for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
      }
      return array;
    })();
    var compactQueue = function compactQueue2(queue) {
      while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
          var compacted = [];
          for (var j = 0; j < obj.length; ++j) {
            if (typeof obj[j] !== 'undefined') {
              compacted.push(obj[j]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject2 = function arrayToObject3(source, options) {
      var obj =
        options && options.plainObjects
          ? /* @__PURE__ */ Object.create(null)
          : {};
      for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
          obj[i] = source[i];
        }
      }
      return obj;
    };
    var merge = function merge2(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== 'object') {
        if (isArray(target)) {
          target.push(source);
        } else if (target && typeof target === 'object') {
          if (
            (options && (options.plainObjects || options.allowPrototypes)) ||
            !has4.call(Object.prototype, source)
          ) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== 'object') {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject2(target, options);
      }
      if (isArray(target) && isArray(source)) {
        source.forEach(function (item, i) {
          if (has4.call(target, i)) {
            var targetItem = target[i];
            if (
              targetItem &&
              typeof targetItem === 'object' &&
              item &&
              typeof item === 'object'
            ) {
              target[i] = merge2(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];
        if (has4.call(acc, key)) {
          acc[key] = merge2(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign2 = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode3 = function (str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, ' ');
      if (charset === 'iso-8859-1') {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e) {
        return strWithoutPlus;
      }
    };
    var limit = 1024;
    var encode2 = function encode3(str, defaultEncoder, charset, kind, format) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === 'symbol') {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== 'string') {
        string = String(str);
      }
      if (charset === 'iso-8859-1') {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
          return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
        });
      }
      var out = '';
      for (var j = 0; j < string.length; j += limit) {
        var segment =
          string.length >= limit ? string.slice(j, j + limit) : string;
        var arr = [];
        for (var i = 0; i < segment.length; ++i) {
          var c = segment.charCodeAt(i);
          if (
            c === 45 ||
            c === 46 ||
            c === 95 ||
            c === 126 ||
            (c >= 48 && c <= 57) ||
            (c >= 65 && c <= 90) ||
            (c >= 97 && c <= 122) ||
            (format === formats.RFC1738 && (c === 40 || c === 41))
          ) {
            arr[arr.length] = segment.charAt(i);
            continue;
          }
          if (c < 128) {
            arr[arr.length] = hexTable[c];
            continue;
          }
          if (c < 2048) {
            arr[arr.length] =
              hexTable[192 | (c >> 6)] + hexTable[128 | (c & 63)];
            continue;
          }
          if (c < 55296 || c >= 57344) {
            arr[arr.length] =
              hexTable[224 | (c >> 12)] +
              hexTable[128 | ((c >> 6) & 63)] +
              hexTable[128 | (c & 63)];
            continue;
          }
          i += 1;
          c = 65536 + (((c & 1023) << 10) | (segment.charCodeAt(i) & 1023));
          arr[arr.length] =
            hexTable[240 | (c >> 18)] +
            hexTable[128 | ((c >> 12) & 63)] +
            hexTable[128 | ((c >> 6) & 63)] +
            hexTable[128 | (c & 63)];
        }
        out += arr.join('');
      }
      return out;
    };
    var compact2 = function compact3(value) {
      var queue = [{ obj: { o: value }, prop: 'o' }];
      var refs = [];
      for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys2 = Object.keys(obj);
        for (var j = 0; j < keys2.length; ++j) {
          var key = keys2[j];
          var val = obj[key];
          if (
            typeof val === 'object' &&
            val !== null &&
            refs.indexOf(val) === -1
          ) {
            queue.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue);
      return value;
    };
    var isRegExp = function isRegExp2(obj) {
      return Object.prototype.toString.call(obj) === '[object RegExp]';
    };
    var isBuffer = function isBuffer2(obj) {
      if (!obj || typeof obj !== 'object') {
        return false;
      }
      return !!(
        obj.constructor &&
        obj.constructor.isBuffer &&
        obj.constructor.isBuffer(obj)
      );
    };
    var combine = function combine2(a, b) {
      return [].concat(a, b);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
          mapped.push(fn(val[i]));
        }
        return mapped;
      }
      return fn(val);
    };
    module.exports = {
      arrayToObject: arrayToObject2,
      assign: assign2,
      combine,
      compact: compact2,
      decode: decode3,
      encode: encode2,
      isBuffer,
      isRegExp,
      maybeMap,
      merge,
    };
  },
});

// node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  'node_modules/qs/lib/stringify.js'(exports, module) {
    'use strict';
    var getSideChannel = require_side_channel();
    var utils = require_utils();
    var formats = require_formats();
    var has4 = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + '[]';
      },
      comma: 'comma',
      indices: function indices(prefix, key) {
        return prefix + '[' + key + ']';
      },
      repeat: function repeat(prefix) {
        return prefix;
      },
    };
    var isArray = Array.isArray;
    var push2 = Array.prototype.push;
    var pushToArray = function (arr, valueOrArray) {
      push2.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats['default'];
    var defaults = {
      addQueryPrefix: false,
      allowDots: false,
      allowEmptyArrays: false,
      arrayFormat: 'indices',
      charset: 'utf-8',
      charsetSentinel: false,
      delimiter: '&',
      encode: true,
      encodeDotInKeys: false,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      // deprecated
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false,
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v) {
      return (
        typeof v === 'string' ||
        typeof v === 'number' ||
        typeof v === 'boolean' ||
        typeof v === 'symbol' ||
        typeof v === 'bigint'
      );
    };
    var sentinel = {};
    var stringify2 = function stringify3(
      object2,
      prefix,
      generateArrayPrefix,
      commaRoundTrip,
      allowEmptyArrays,
      strictNullHandling,
      skipNulls,
      encodeDotInKeys,
      encoder,
      filter2,
      sort,
      allowDots,
      serializeDate,
      format,
      formatter,
      encodeValuesOnly,
      charset,
      sideChannel
    ) {
      var obj = object2;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object2);
        step += 1;
        if (typeof pos !== 'undefined') {
          if (pos === step) {
            throw new RangeError('Cyclic object value');
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === 'undefined') {
          step = 0;
        }
      }
      if (typeof filter2 === 'function') {
        obj = filter2(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === 'comma' && isArray(obj)) {
        obj = utils.maybeMap(obj, function (value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly
            ? encoder(prefix, defaults.encoder, charset, 'key', format)
            : prefix;
        }
        obj = '';
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly
            ? prefix
            : encoder(prefix, defaults.encoder, charset, 'key', format);
          return [
            formatter(keyValue) +
              '=' +
              formatter(
                encoder(obj, defaults.encoder, charset, 'value', format)
              ),
          ];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
      }
      var values2 = [];
      if (typeof obj === 'undefined') {
        return values2;
      }
      var objKeys;
      if (generateArrayPrefix === 'comma' && isArray(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void 0 }];
      } else if (isArray(filter2)) {
        objKeys = filter2;
      } else {
        var keys2 = Object.keys(obj);
        objKeys = sort ? keys2.sort(sort) : keys2;
      }
      var encodedPrefix = encodeDotInKeys
        ? prefix.replace(/\./g, '%2E')
        : prefix;
      var adjustedPrefix =
        commaRoundTrip && isArray(obj) && obj.length === 1
          ? encodedPrefix + '[]'
          : encodedPrefix;
      if (allowEmptyArrays && isArray(obj) && obj.length === 0) {
        return adjustedPrefix + '[]';
      }
      for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value =
          typeof key === 'object' && typeof key.value !== 'undefined'
            ? key.value
            : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var encodedKey =
          allowDots && encodeDotInKeys ? key.replace(/\./g, '%2E') : key;
        var keyPrefix = isArray(obj)
          ? typeof generateArrayPrefix === 'function'
            ? generateArrayPrefix(adjustedPrefix, encodedKey)
            : adjustedPrefix
          : adjustedPrefix +
            (allowDots ? '.' + encodedKey : '[' + encodedKey + ']');
        sideChannel.set(object2, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(
          values2,
          stringify3(
            value,
            keyPrefix,
            generateArrayPrefix,
            commaRoundTrip,
            allowEmptyArrays,
            strictNullHandling,
            skipNulls,
            encodeDotInKeys,
            generateArrayPrefix === 'comma' && encodeValuesOnly && isArray(obj)
              ? null
              : encoder,
            filter2,
            sort,
            allowDots,
            serializeDate,
            format,
            formatter,
            encodeValuesOnly,
            charset,
            valueSideChannel
          )
        );
      }
      return values2;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (
        typeof opts.allowEmptyArrays !== 'undefined' &&
        typeof opts.allowEmptyArrays !== 'boolean'
      ) {
        throw new TypeError(
          '`allowEmptyArrays` option can only be `true` or `false`, when provided'
        );
      }
      if (
        typeof opts.encodeDotInKeys !== 'undefined' &&
        typeof opts.encodeDotInKeys !== 'boolean'
      ) {
        throw new TypeError(
          '`encodeDotInKeys` option can only be `true` or `false`, when provided'
        );
      }
      if (
        opts.encoder !== null &&
        typeof opts.encoder !== 'undefined' &&
        typeof opts.encoder !== 'function'
      ) {
        throw new TypeError('Encoder has to be a function.');
      }
      var charset = opts.charset || defaults.charset;
      if (
        typeof opts.charset !== 'undefined' &&
        opts.charset !== 'utf-8' &&
        opts.charset !== 'iso-8859-1'
      ) {
        throw new TypeError(
          'The charset option must be either utf-8, iso-8859-1, or undefined'
        );
      }
      var format = formats['default'];
      if (typeof opts.format !== 'undefined') {
        if (!has4.call(formats.formatters, opts.format)) {
          throw new TypeError('Unknown format option provided.');
        }
        format = opts.format;
      }
      var formatter = formats.formatters[format];
      var filter2 = defaults.filter;
      if (typeof opts.filter === 'function' || isArray(opts.filter)) {
        filter2 = opts.filter;
      }
      var arrayFormat;
      if (opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if ('indices' in opts) {
        arrayFormat = opts.indices ? 'indices' : 'repeat';
      } else {
        arrayFormat = defaults.arrayFormat;
      }
      if (
        'commaRoundTrip' in opts &&
        typeof opts.commaRoundTrip !== 'boolean'
      ) {
        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');
      }
      var allowDots =
        typeof opts.allowDots === 'undefined'
          ? opts.encodeDotInKeys === true
            ? true
            : defaults.allowDots
          : !!opts.allowDots;
      return {
        addQueryPrefix:
          typeof opts.addQueryPrefix === 'boolean'
            ? opts.addQueryPrefix
            : defaults.addQueryPrefix,
        allowDots,
        allowEmptyArrays:
          typeof opts.allowEmptyArrays === 'boolean'
            ? !!opts.allowEmptyArrays
            : defaults.allowEmptyArrays,
        arrayFormat,
        charset,
        charsetSentinel:
          typeof opts.charsetSentinel === 'boolean'
            ? opts.charsetSentinel
            : defaults.charsetSentinel,
        commaRoundTrip: opts.commaRoundTrip,
        delimiter:
          typeof opts.delimiter === 'undefined'
            ? defaults.delimiter
            : opts.delimiter,
        encode:
          typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
        encodeDotInKeys:
          typeof opts.encodeDotInKeys === 'boolean'
            ? opts.encodeDotInKeys
            : defaults.encodeDotInKeys,
        encoder:
          typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
        encodeValuesOnly:
          typeof opts.encodeValuesOnly === 'boolean'
            ? opts.encodeValuesOnly
            : defaults.encodeValuesOnly,
        filter: filter2,
        format,
        formatter,
        serializeDate:
          typeof opts.serializeDate === 'function'
            ? opts.serializeDate
            : defaults.serializeDate,
        skipNulls:
          typeof opts.skipNulls === 'boolean'
            ? opts.skipNulls
            : defaults.skipNulls,
        sort: typeof opts.sort === 'function' ? opts.sort : null,
        strictNullHandling:
          typeof opts.strictNullHandling === 'boolean'
            ? opts.strictNullHandling
            : defaults.strictNullHandling,
      };
    };
    module.exports = function (object2, opts) {
      var obj = object2;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter2;
      if (typeof options.filter === 'function') {
        filter2 = options.filter;
        obj = filter2('', obj);
      } else if (isArray(options.filter)) {
        filter2 = options.filter;
        objKeys = filter2;
      }
      var keys2 = [];
      if (typeof obj !== 'object' || obj === null) {
        return '';
      }
      var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
      var commaRoundTrip =
        generateArrayPrefix === 'comma' && options.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(
          keys2,
          stringify2(
            obj[key],
            key,
            generateArrayPrefix,
            commaRoundTrip,
            options.allowEmptyArrays,
            options.strictNullHandling,
            options.skipNulls,
            options.encodeDotInKeys,
            options.encode ? options.encoder : null,
            options.filter,
            options.sort,
            options.allowDots,
            options.serializeDate,
            options.format,
            options.formatter,
            options.encodeValuesOnly,
            options.charset,
            sideChannel
          )
        );
      }
      var joined = keys2.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? '?' : '';
      if (options.charsetSentinel) {
        if (options.charset === 'iso-8859-1') {
          prefix += 'utf8=%26%2310003%3B&';
        } else {
          prefix += 'utf8=%E2%9C%93&';
        }
      }
      return joined.length > 0 ? prefix + joined : '';
    };
  },
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  'node_modules/qs/lib/parse.js'(exports, module) {
    'use strict';
    var utils = require_utils();
    var has4 = Object.prototype.hasOwnProperty;
    var isArray = Array.isArray;
    var defaults = {
      allowDots: false,
      allowEmptyArrays: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: 'utf-8',
      charsetSentinel: false,
      comma: false,
      decodeDotInKeys: false,
      decoder: utils.decode,
      delimiter: '&',
      depth: 5,
      duplicates: 'combine',
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictDepth: false,
      strictNullHandling: false,
    };
    var interpretNumericEntities = function (str) {
      return str.replace(/&#(\d+);/g, function ($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function (val, options) {
      if (
        val &&
        typeof val === 'string' &&
        options.comma &&
        val.indexOf(',') > -1
      ) {
        return val.split(',');
      }
      return val;
    };
    var isoSentinel = 'utf8=%26%2310003%3B';
    var charsetSentinel = 'utf8=%E2%9C%93';
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
      cleanStr = cleanStr.replace(/%5B/gi, '[').replace(/%5D/gi, ']');
      var limit =
        options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
          if (parts[i].indexOf('utf8=') === 0) {
            if (parts[i] === charsetSentinel) {
              charset = 'utf-8';
            } else if (parts[i] === isoSentinel) {
              charset = 'iso-8859-1';
            }
            skipIndex = i;
            i = parts.length;
          }
        }
      }
      for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
          continue;
        }
        var part = parts[i];
        var bracketEqualsPos = part.indexOf(']=');
        var pos =
          bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults.decoder, charset, 'key');
          val = options.strictNullHandling ? null : '';
        } else {
          key = options.decoder(
            part.slice(0, pos),
            defaults.decoder,
            charset,
            'key'
          );
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function (encodedVal) {
              return options.decoder(
                encodedVal,
                defaults.decoder,
                charset,
                'value'
              );
            }
          );
        }
        if (
          val &&
          options.interpretNumericEntities &&
          charset === 'iso-8859-1'
        ) {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf('[]=') > -1) {
          val = isArray(val) ? [val] : val;
        }
        var existing = has4.call(obj, key);
        if (existing && options.duplicates === 'combine') {
          obj[key] = utils.combine(obj[key], val);
        } else if (!existing || options.duplicates === 'last') {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function (chain2, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i = chain2.length - 1; i >= 0; --i) {
        var obj;
        var root2 = chain2[i];
        if (root2 === '[]' && options.parseArrays) {
          obj =
            options.allowEmptyArrays &&
            (leaf === '' || (options.strictNullHandling && leaf === null))
              ? []
              : [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot =
            root2.charAt(0) === '[' && root2.charAt(root2.length - 1) === ']'
              ? root2.slice(1, -1)
              : root2;
          var decodedRoot = options.decodeDotInKeys
            ? cleanRoot.replace(/%2E/g, '.')
            : cleanRoot;
          var index = parseInt(decodedRoot, 10);
          if (!options.parseArrays && decodedRoot === '') {
            obj = { 0: leaf };
          } else if (
            !isNaN(index) &&
            root2 !== decodedRoot &&
            String(index) === decodedRoot &&
            index >= 0 &&
            options.parseArrays &&
            index <= options.arrayLimit
          ) {
            obj = [];
            obj[index] = leaf;
          } else if (decodedRoot !== '__proto__') {
            obj[decodedRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(
      givenKey,
      val,
      options,
      valuesParsed
    ) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots
        ? givenKey.replace(/\.([^.[]+)/g, '[$1]')
        : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys2 = [];
      if (parent) {
        if (!options.plainObjects && has4.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys2.push(parent);
      }
      var i = 0;
      while (
        options.depth > 0 &&
        (segment = child.exec(key)) !== null &&
        i < options.depth
      ) {
        i += 1;
        if (
          !options.plainObjects &&
          has4.call(Object.prototype, segment[1].slice(1, -1))
        ) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys2.push(segment[1]);
      }
      if (segment) {
        if (options.strictDepth === true) {
          throw new RangeError(
            'Input depth exceeded depth option of ' +
              options.depth +
              ' and strictDepth is true'
          );
        }
        keys2.push('[' + key.slice(segment.index) + ']');
      }
      return parseObject(keys2, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults;
      }
      if (
        typeof opts.allowEmptyArrays !== 'undefined' &&
        typeof opts.allowEmptyArrays !== 'boolean'
      ) {
        throw new TypeError(
          '`allowEmptyArrays` option can only be `true` or `false`, when provided'
        );
      }
      if (
        typeof opts.decodeDotInKeys !== 'undefined' &&
        typeof opts.decodeDotInKeys !== 'boolean'
      ) {
        throw new TypeError(
          '`decodeDotInKeys` option can only be `true` or `false`, when provided'
        );
      }
      if (
        opts.decoder !== null &&
        typeof opts.decoder !== 'undefined' &&
        typeof opts.decoder !== 'function'
      ) {
        throw new TypeError('Decoder has to be a function.');
      }
      if (
        typeof opts.charset !== 'undefined' &&
        opts.charset !== 'utf-8' &&
        opts.charset !== 'iso-8859-1'
      ) {
        throw new TypeError(
          'The charset option must be either utf-8, iso-8859-1, or undefined'
        );
      }
      var charset =
        typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;
      var duplicates =
        typeof opts.duplicates === 'undefined'
          ? defaults.duplicates
          : opts.duplicates;
      if (
        duplicates !== 'combine' &&
        duplicates !== 'first' &&
        duplicates !== 'last'
      ) {
        throw new TypeError(
          'The duplicates option must be either combine, first, or last'
        );
      }
      var allowDots =
        typeof opts.allowDots === 'undefined'
          ? opts.decodeDotInKeys === true
            ? true
            : defaults.allowDots
          : !!opts.allowDots;
      return {
        allowDots,
        allowEmptyArrays:
          typeof opts.allowEmptyArrays === 'boolean'
            ? !!opts.allowEmptyArrays
            : defaults.allowEmptyArrays,
        allowPrototypes:
          typeof opts.allowPrototypes === 'boolean'
            ? opts.allowPrototypes
            : defaults.allowPrototypes,
        allowSparse:
          typeof opts.allowSparse === 'boolean'
            ? opts.allowSparse
            : defaults.allowSparse,
        arrayLimit:
          typeof opts.arrayLimit === 'number'
            ? opts.arrayLimit
            : defaults.arrayLimit,
        charset,
        charsetSentinel:
          typeof opts.charsetSentinel === 'boolean'
            ? opts.charsetSentinel
            : defaults.charsetSentinel,
        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
        decodeDotInKeys:
          typeof opts.decodeDotInKeys === 'boolean'
            ? opts.decodeDotInKeys
            : defaults.decodeDotInKeys,
        decoder:
          typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
        delimiter:
          typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter)
            ? opts.delimiter
            : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth:
          typeof opts.depth === 'number' || opts.depth === false
            ? +opts.depth
            : defaults.depth,
        duplicates,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities:
          typeof opts.interpretNumericEntities === 'boolean'
            ? opts.interpretNumericEntities
            : defaults.interpretNumericEntities,
        parameterLimit:
          typeof opts.parameterLimit === 'number'
            ? opts.parameterLimit
            : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects:
          typeof opts.plainObjects === 'boolean'
            ? opts.plainObjects
            : defaults.plainObjects,
        strictDepth:
          typeof opts.strictDepth === 'boolean'
            ? !!opts.strictDepth
            : defaults.strictDepth,
        strictNullHandling:
          typeof opts.strictNullHandling === 'boolean'
            ? opts.strictNullHandling
            : defaults.strictNullHandling,
      };
    };
    module.exports = function (str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys2 = Object.keys(tempObj);
      for (var i = 0; i < keys2.length; ++i) {
        var key = keys2[i];
        var newObj = parseKeys(
          key,
          tempObj[key],
          options,
          typeof str === 'string'
        );
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  },
});

// node_modules/qs/lib/index.js
var require_lib2 = __commonJS({
  'node_modules/qs/lib/index.js'(exports, module) {
    'use strict';
    var stringify2 = require_stringify();
    var parse2 = require_parse();
    var formats = require_formats();
    module.exports = {
      formats,
      parse: parse2,
      stringify: stringify2,
    };
  },
});

// node_modules/url/url.js
var require_url = __commonJS({
  'node_modules/url/url.js'(exports) {
    'use strict';
    var punycode = require_punycode();
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }
    var protocolPattern = /^([a-z0-9.+-]+:)/i;
    var portPattern = /:[0-9]*$/;
    var simplePathPattern = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/;
    var delims = ['<', '>', '"', '`', ' ', '\r', '\n', '	'];
    var unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims);
    var autoEscape = ["'"].concat(unwise);
    var nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape);
    var hostEndingChars = ['/', '?', '#'];
    var hostnameMaxLen = 255;
    var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    var unsafeProtocol = {
      'javascript': true,
      'javascript:': true,
    };
    var hostlessProtocol = {
      'javascript': true,
      'javascript:': true,
    };
    var slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true,
    };
    var querystring = require_lib2();
    function urlParse(url2, parseQueryString, slashesDenoteHost) {
      if (url2 && typeof url2 === 'object' && url2 instanceof Url) {
        return url2;
      }
      var u = new Url();
      u.parse(url2, parseQueryString, slashesDenoteHost);
      return u;
    }
    Url.prototype.parse = function (url2, parseQueryString, slashesDenoteHost) {
      if (typeof url2 !== 'string') {
        throw new TypeError(
          "Parameter 'url' must be a string, not " + typeof url2
        );
      }
      var queryIndex = url2.indexOf('?'),
        splitter =
          queryIndex !== -1 && queryIndex < url2.indexOf('#') ? '?' : '#',
        uSplit = url2.split(splitter),
        slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, '/');
      url2 = uSplit.join(splitter);
      var rest2 = url2;
      rest2 = rest2.trim();
      if (!slashesDenoteHost && url2.split('#').length === 1) {
        var simplePath = simplePathPattern.exec(rest2);
        if (simplePath) {
          this.path = rest2;
          this.href = rest2;
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
            if (parseQueryString) {
              this.query = querystring.parse(this.search.substr(1));
            } else {
              this.query = this.search.substr(1);
            }
          } else if (parseQueryString) {
            this.search = '';
            this.query = {};
          }
          return this;
        }
      }
      var proto = protocolPattern.exec(rest2);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest2 = rest2.substr(proto.length);
      }
      if (slashesDenoteHost || proto || rest2.match(/^\/\/[^@/]+@[^@/]+/)) {
        var slashes = rest2.substr(0, 2) === '//';
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest2 = rest2.substr(2);
          this.slashes = true;
        }
      }
      if (
        !hostlessProtocol[proto] &&
        (slashes || (proto && !slashedProtocol[proto]))
      ) {
        var hostEnd = -1;
        for (var i = 0; i < hostEndingChars.length; i++) {
          var hec = rest2.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        var auth, atSign;
        if (hostEnd === -1) {
          atSign = rest2.lastIndexOf('@');
        } else {
          atSign = rest2.lastIndexOf('@', hostEnd);
        }
        if (atSign !== -1) {
          auth = rest2.slice(0, atSign);
          rest2 = rest2.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        }
        hostEnd = -1;
        for (var i = 0; i < nonHostChars.length; i++) {
          var hec = rest2.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        if (hostEnd === -1) {
          hostEnd = rest2.length;
        }
        this.host = rest2.slice(0, hostEnd);
        rest2 = rest2.slice(hostEnd);
        this.parseHost();
        this.hostname = this.hostname || '';
        var ipv6Hostname =
          this.hostname[0] === '[' &&
          this.hostname[this.hostname.length - 1] === ']';
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (var i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) {
              continue;
            }
            if (!part.match(hostnamePartPattern)) {
              var newpart = '';
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  newpart += 'x';
                } else {
                  newpart += part[j];
                }
              }
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest2 = '/' + notHost.join('.') + rest2;
                }
                this.hostname = validParts.join('.');
                break;
              }
            }
          }
        }
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = '';
        } else {
          this.hostname = this.hostname.toLowerCase();
        }
        if (!ipv6Hostname) {
          this.hostname = punycode.toASCII(this.hostname);
        }
        var p = this.port ? ':' + this.port : '';
        var h = this.hostname || '';
        this.host = h + p;
        this.href += this.host;
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
          if (rest2[0] !== '/') {
            rest2 = '/' + rest2;
          }
        }
      }
      if (!unsafeProtocol[lowerProto]) {
        for (var i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest2.indexOf(ae) === -1) {
            continue;
          }
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest2 = rest2.split(ae).join(esc);
        }
      }
      var hash = rest2.indexOf('#');
      if (hash !== -1) {
        this.hash = rest2.substr(hash);
        rest2 = rest2.slice(0, hash);
      }
      var qm = rest2.indexOf('?');
      if (qm !== -1) {
        this.search = rest2.substr(qm);
        this.query = rest2.substr(qm + 1);
        if (parseQueryString) {
          this.query = querystring.parse(this.query);
        }
        rest2 = rest2.slice(0, qm);
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      if (rest2) {
        this.pathname = rest2;
      }
      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = '/';
      }
      if (this.pathname || this.search) {
        var p = this.pathname || '';
        var s = this.search || '';
        this.path = p + s;
      }
      this.href = this.format();
      return this;
    };
    function urlFormat(obj) {
      if (typeof obj === 'string') {
        obj = urlParse(obj);
      }
      if (!(obj instanceof Url)) {
        return Url.prototype.format.call(obj);
      }
      return obj.format();
    }
    Url.prototype.format = function () {
      var auth = this.auth || '';
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ':');
        auth += '@';
      }
      var protocol = this.protocol || '',
        pathname = this.pathname || '',
        hash = this.hash || '',
        host = false,
        query = '';
      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host =
          auth +
          (this.hostname.indexOf(':') === -1
            ? this.hostname
            : '[' + this.hostname + ']');
        if (this.port) {
          host += ':' + this.port;
        }
      }
      if (
        this.query &&
        typeof this.query === 'object' &&
        Object.keys(this.query).length
      ) {
        query = querystring.stringify(this.query, {
          arrayFormat: 'repeat',
          addQueryPrefix: false,
        });
      }
      var search = this.search || (query && '?' + query) || '';
      if (protocol && protocol.substr(-1) !== ':') {
        protocol += ':';
      }
      if (
        this.slashes ||
        ((!protocol || slashedProtocol[protocol]) && host !== false)
      ) {
        host = '//' + (host || '');
        if (pathname && pathname.charAt(0) !== '/') {
          pathname = '/' + pathname;
        }
      } else if (!host) {
        host = '';
      }
      if (hash && hash.charAt(0) !== '#') {
        hash = '#' + hash;
      }
      if (search && search.charAt(0) !== '?') {
        search = '?' + search;
      }
      pathname = pathname.replace(/[?#]/g, function (match) {
        return encodeURIComponent(match);
      });
      search = search.replace('#', '%23');
      return protocol + host + pathname + search + hash;
    };
    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }
    Url.prototype.resolve = function (relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };
    function urlResolveObject(source, relative) {
      if (!source) {
        return relative;
      }
      return urlParse(source, false, true).resolveObject(relative);
    }
    Url.prototype.resolveObject = function (relative) {
      if (typeof relative === 'string') {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }
      var result2 = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result2[tkey] = this[tkey];
      }
      result2.hash = relative.hash;
      if (relative.href === '') {
        result2.href = result2.format();
        return result2;
      }
      if (relative.slashes && !relative.protocol) {
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== 'protocol') {
            result2[rkey] = relative[rkey];
          }
        }
        if (
          slashedProtocol[result2.protocol] &&
          result2.hostname &&
          !result2.pathname
        ) {
          result2.pathname = '/';
          result2.path = result2.pathname;
        }
        result2.href = result2.format();
        return result2;
      }
      if (relative.protocol && relative.protocol !== result2.protocol) {
        if (!slashedProtocol[relative.protocol]) {
          var keys2 = Object.keys(relative);
          for (var v = 0; v < keys2.length; v++) {
            var k = keys2[v];
            result2[k] = relative[k];
          }
          result2.href = result2.format();
          return result2;
        }
        result2.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || '').split('/');
          while (relPath.length && !(relative.host = relPath.shift())) {}
          if (!relative.host) {
            relative.host = '';
          }
          if (!relative.hostname) {
            relative.hostname = '';
          }
          if (relPath[0] !== '') {
            relPath.unshift('');
          }
          if (relPath.length < 2) {
            relPath.unshift('');
          }
          result2.pathname = relPath.join('/');
        } else {
          result2.pathname = relative.pathname;
        }
        result2.search = relative.search;
        result2.query = relative.query;
        result2.host = relative.host || '';
        result2.auth = relative.auth;
        result2.hostname = relative.hostname || relative.host;
        result2.port = relative.port;
        if (result2.pathname || result2.search) {
          var p = result2.pathname || '';
          var s = result2.search || '';
          result2.path = p + s;
        }
        result2.slashes = result2.slashes || relative.slashes;
        result2.href = result2.format();
        return result2;
      }
      var isSourceAbs = result2.pathname && result2.pathname.charAt(0) === '/',
        isRelAbs =
          relative.host ||
          (relative.pathname && relative.pathname.charAt(0) === '/'),
        mustEndAbs =
          isRelAbs || isSourceAbs || (result2.host && relative.pathname),
        removeAllDots = mustEndAbs,
        srcPath = (result2.pathname && result2.pathname.split('/')) || [],
        relPath = (relative.pathname && relative.pathname.split('/')) || [],
        psychotic = result2.protocol && !slashedProtocol[result2.protocol];
      if (psychotic) {
        result2.hostname = '';
        result2.port = null;
        if (result2.host) {
          if (srcPath[0] === '') {
            srcPath[0] = result2.host;
          } else {
            srcPath.unshift(result2.host);
          }
        }
        result2.host = '';
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === '') {
              relPath[0] = relative.host;
            } else {
              relPath.unshift(relative.host);
            }
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
      }
      if (isRelAbs) {
        result2.host =
          relative.host || relative.host === '' ? relative.host : result2.host;
        result2.hostname =
          relative.hostname || relative.hostname === ''
            ? relative.hostname
            : result2.hostname;
        result2.search = relative.search;
        result2.query = relative.query;
        srcPath = relPath;
      } else if (relPath.length) {
        if (!srcPath) {
          srcPath = [];
        }
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result2.search = relative.search;
        result2.query = relative.query;
      } else if (relative.search != null) {
        if (psychotic) {
          result2.host = srcPath.shift();
          result2.hostname = result2.host;
          var authInHost =
            result2.host && result2.host.indexOf('@') > 0
              ? result2.host.split('@')
              : false;
          if (authInHost) {
            result2.auth = authInHost.shift();
            result2.hostname = authInHost.shift();
            result2.host = result2.hostname;
          }
        }
        result2.search = relative.search;
        result2.query = relative.query;
        if (result2.pathname !== null || result2.search !== null) {
          result2.path =
            (result2.pathname ? result2.pathname : '') +
            (result2.search ? result2.search : '');
        }
        result2.href = result2.format();
        return result2;
      }
      if (!srcPath.length) {
        result2.pathname = null;
        if (result2.search) {
          result2.path = '/' + result2.search;
        } else {
          result2.path = null;
        }
        result2.href = result2.format();
        return result2;
      }
      var last2 = srcPath.slice(-1)[0];
      var hasTrailingSlash =
        ((result2.host || relative.host || srcPath.length > 1) &&
          (last2 === '.' || last2 === '..')) ||
        last2 === '';
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last2 = srcPath[i];
        if (last2 === '.') {
          srcPath.splice(i, 1);
        } else if (last2 === '..') {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift('..');
        }
      }
      if (
        mustEndAbs &&
        srcPath[0] !== '' &&
        (!srcPath[0] || srcPath[0].charAt(0) !== '/')
      ) {
        srcPath.unshift('');
      }
      if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
        srcPath.push('');
      }
      var isAbsolute =
        srcPath[0] === '' || (srcPath[0] && srcPath[0].charAt(0) === '/');
      if (psychotic) {
        result2.hostname = isAbsolute
          ? ''
          : srcPath.length
          ? srcPath.shift()
          : '';
        result2.host = result2.hostname;
        var authInHost =
          result2.host && result2.host.indexOf('@') > 0
            ? result2.host.split('@')
            : false;
        if (authInHost) {
          result2.auth = authInHost.shift();
          result2.hostname = authInHost.shift();
          result2.host = result2.hostname;
        }
      }
      mustEndAbs = mustEndAbs || (result2.host && srcPath.length);
      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift('');
      }
      if (srcPath.length > 0) {
        result2.pathname = srcPath.join('/');
      } else {
        result2.pathname = null;
        result2.path = null;
      }
      if (result2.pathname !== null || result2.search !== null) {
        result2.path =
          (result2.pathname ? result2.pathname : '') +
          (result2.search ? result2.search : '');
      }
      result2.auth = relative.auth || result2.auth;
      result2.slashes = result2.slashes || relative.slashes;
      result2.href = result2.format();
      return result2;
    };
    Url.prototype.parseHost = function () {
      var host = this.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ':') {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) {
        this.hostname = host;
      }
    };
    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;
    exports.Url = Url;
  },
});

// node_modules/underscore/modules/_setup.js
var VERSION,
  root,
  ArrayProto,
  ObjProto,
  SymbolProto,
  push,
  slice,
  toString,
  hasOwnProperty,
  supportsArrayBuffer,
  supportsDataView,
  nativeIsArray,
  nativeKeys,
  nativeCreate,
  nativeIsView,
  _isNaN,
  _isFinite,
  hasEnumBug,
  nonEnumerableProps,
  MAX_ARRAY_INDEX;
var init_setup = __esm({
  'node_modules/underscore/modules/_setup.js'() {
    VERSION = '1.13.7';
    root =
      (typeof self == 'object' && self.self === self && self) ||
      (typeof global == 'object' && global.global === global && global) ||
      Function('return this')() ||
      {};
    ArrayProto = Array.prototype;
    ObjProto = Object.prototype;
    SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;
    push = ArrayProto.push;
    slice = ArrayProto.slice;
    toString = ObjProto.toString;
    hasOwnProperty = ObjProto.hasOwnProperty;
    supportsArrayBuffer = typeof ArrayBuffer !== 'undefined';
    supportsDataView = typeof DataView !== 'undefined';
    nativeIsArray = Array.isArray;
    nativeKeys = Object.keys;
    nativeCreate = Object.create;
    nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;
    _isNaN = isNaN;
    _isFinite = isFinite;
    hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');
    nonEnumerableProps = [
      'valueOf',
      'isPrototypeOf',
      'toString',
      'propertyIsEnumerable',
      'hasOwnProperty',
      'toLocaleString',
    ];
    MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  },
});

// node_modules/underscore/modules/restArguments.js
function restArguments(func, startIndex) {
  startIndex = startIndex == null ? func.length - 1 : +startIndex;
  return function () {
    var length = Math.max(arguments.length - startIndex, 0),
      rest2 = Array(length),
      index = 0;
    for (; index < length; index++) {
      rest2[index] = arguments[index + startIndex];
    }
    switch (startIndex) {
      case 0:
        return func.call(this, rest2);
      case 1:
        return func.call(this, arguments[0], rest2);
      case 2:
        return func.call(this, arguments[0], arguments[1], rest2);
    }
    var args = Array(startIndex + 1);
    for (index = 0; index < startIndex; index++) {
      args[index] = arguments[index];
    }
    args[startIndex] = rest2;
    return func.apply(this, args);
  };
}
var init_restArguments = __esm({
  'node_modules/underscore/modules/restArguments.js'() {},
});

// node_modules/underscore/modules/isObject.js
function isObject3(obj) {
  var type = typeof obj;
  return type === 'function' || (type === 'object' && !!obj);
}
var init_isObject = __esm({
  'node_modules/underscore/modules/isObject.js'() {},
});

// node_modules/underscore/modules/isNull.js
function isNull(obj) {
  return obj === null;
}
var init_isNull = __esm({
  'node_modules/underscore/modules/isNull.js'() {},
});

// node_modules/underscore/modules/isUndefined.js
function isUndefined(obj) {
  return obj === void 0;
}
var init_isUndefined = __esm({
  'node_modules/underscore/modules/isUndefined.js'() {},
});

// node_modules/underscore/modules/isBoolean.js
function isBoolean(obj) {
  return (
    obj === true || obj === false || toString.call(obj) === '[object Boolean]'
  );
}
var init_isBoolean = __esm({
  'node_modules/underscore/modules/isBoolean.js'() {
    init_setup();
  },
});

// node_modules/underscore/modules/isElement.js
function isElement(obj) {
  return !!(obj && obj.nodeType === 1);
}
var init_isElement = __esm({
  'node_modules/underscore/modules/isElement.js'() {},
});

// node_modules/underscore/modules/_tagTester.js
function tagTester(name) {
  var tag = '[object ' + name + ']';
  return function (obj) {
    return toString.call(obj) === tag;
  };
}
var init_tagTester = __esm({
  'node_modules/underscore/modules/_tagTester.js'() {
    init_setup();
  },
});

// node_modules/underscore/modules/isString.js
var isString_default;
var init_isString = __esm({
  'node_modules/underscore/modules/isString.js'() {
    init_tagTester();
    isString_default = tagTester('String');
  },
});

// node_modules/underscore/modules/isNumber.js
var isNumber_default;
var init_isNumber = __esm({
  'node_modules/underscore/modules/isNumber.js'() {
    init_tagTester();
    isNumber_default = tagTester('Number');
  },
});

// node_modules/underscore/modules/isDate.js
var isDate_default;
var init_isDate = __esm({
  'node_modules/underscore/modules/isDate.js'() {
    init_tagTester();
    isDate_default = tagTester('Date');
  },
});

// node_modules/underscore/modules/isRegExp.js
var isRegExp_default;
var init_isRegExp = __esm({
  'node_modules/underscore/modules/isRegExp.js'() {
    init_tagTester();
    isRegExp_default = tagTester('RegExp');
  },
});

// node_modules/underscore/modules/isError.js
var isError_default;
var init_isError = __esm({
  'node_modules/underscore/modules/isError.js'() {
    init_tagTester();
    isError_default = tagTester('Error');
  },
});

// node_modules/underscore/modules/isSymbol.js
var isSymbol_default;
var init_isSymbol = __esm({
  'node_modules/underscore/modules/isSymbol.js'() {
    init_tagTester();
    isSymbol_default = tagTester('Symbol');
  },
});

// node_modules/underscore/modules/isArrayBuffer.js
var isArrayBuffer_default;
var init_isArrayBuffer = __esm({
  'node_modules/underscore/modules/isArrayBuffer.js'() {
    init_tagTester();
    isArrayBuffer_default = tagTester('ArrayBuffer');
  },
});

// node_modules/underscore/modules/isFunction.js
var isFunction, nodelist, isFunction_default;
var init_isFunction = __esm({
  'node_modules/underscore/modules/isFunction.js'() {
    init_tagTester();
    init_setup();
    isFunction = tagTester('Function');
    nodelist = root.document && root.document.childNodes;
    if (
      typeof /./ != 'function' &&
      typeof Int8Array != 'object' &&
      typeof nodelist != 'function'
    ) {
      isFunction = function (obj) {
        return typeof obj == 'function' || false;
      };
    }
    isFunction_default = isFunction;
  },
});

// node_modules/underscore/modules/_hasObjectTag.js
var hasObjectTag_default;
var init_hasObjectTag = __esm({
  'node_modules/underscore/modules/_hasObjectTag.js'() {
    init_tagTester();
    hasObjectTag_default = tagTester('Object');
  },
});

// node_modules/underscore/modules/_stringTagBug.js
var hasDataViewBug, isIE11;
var init_stringTagBug = __esm({
  'node_modules/underscore/modules/_stringTagBug.js'() {
    init_setup();
    init_hasObjectTag();
    hasDataViewBug =
      supportsDataView &&
      (!/\[native code\]/.test(String(DataView)) ||
        hasObjectTag_default(new DataView(new ArrayBuffer(8))));
    isIE11 =
      typeof Map !== 'undefined' &&
      hasObjectTag_default(/* @__PURE__ */ new Map());
  },
});

// node_modules/underscore/modules/isDataView.js
function alternateIsDataView(obj) {
  return (
    obj != null &&
    isFunction_default(obj.getInt8) &&
    isArrayBuffer_default(obj.buffer)
  );
}
var isDataView, isDataView_default;
var init_isDataView = __esm({
  'node_modules/underscore/modules/isDataView.js'() {
    init_tagTester();
    init_isFunction();
    init_isArrayBuffer();
    init_stringTagBug();
    isDataView = tagTester('DataView');
    isDataView_default = hasDataViewBug ? alternateIsDataView : isDataView;
  },
});

// node_modules/underscore/modules/isArray.js
var isArray_default;
var init_isArray = __esm({
  'node_modules/underscore/modules/isArray.js'() {
    init_setup();
    init_tagTester();
    isArray_default = nativeIsArray || tagTester('Array');
  },
});

// node_modules/underscore/modules/_has.js
function has2(obj, key) {
  return obj != null && hasOwnProperty.call(obj, key);
}
var init_has = __esm({
  'node_modules/underscore/modules/_has.js'() {
    init_setup();
  },
});

// node_modules/underscore/modules/isArguments.js
var isArguments, isArguments_default;
var init_isArguments = __esm({
  'node_modules/underscore/modules/isArguments.js'() {
    init_tagTester();
    init_has();
    isArguments = tagTester('Arguments');
    (function () {
      if (!isArguments(arguments)) {
        isArguments = function (obj) {
          return has2(obj, 'callee');
        };
      }
    })();
    isArguments_default = isArguments;
  },
});

// node_modules/underscore/modules/isFinite.js
function isFinite2(obj) {
  return !isSymbol_default(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));
}
var init_isFinite = __esm({
  'node_modules/underscore/modules/isFinite.js'() {
    init_setup();
    init_isSymbol();
  },
});

// node_modules/underscore/modules/isNaN.js
function isNaN2(obj) {
  return isNumber_default(obj) && _isNaN(obj);
}
var init_isNaN = __esm({
  'node_modules/underscore/modules/isNaN.js'() {
    init_setup();
    init_isNumber();
  },
});

// node_modules/underscore/modules/constant.js
function constant(value) {
  return function () {
    return value;
  };
}
var init_constant = __esm({
  'node_modules/underscore/modules/constant.js'() {},
});

// node_modules/underscore/modules/_createSizePropertyCheck.js
function createSizePropertyCheck(getSizeProperty) {
  return function (collection) {
    var sizeProperty = getSizeProperty(collection);
    return (
      typeof sizeProperty == 'number' &&
      sizeProperty >= 0 &&
      sizeProperty <= MAX_ARRAY_INDEX
    );
  };
}
var init_createSizePropertyCheck = __esm({
  'node_modules/underscore/modules/_createSizePropertyCheck.js'() {
    init_setup();
  },
});

// node_modules/underscore/modules/_shallowProperty.js
function shallowProperty(key) {
  return function (obj) {
    return obj == null ? void 0 : obj[key];
  };
}
var init_shallowProperty = __esm({
  'node_modules/underscore/modules/_shallowProperty.js'() {},
});

// node_modules/underscore/modules/_getByteLength.js
var getByteLength_default;
var init_getByteLength = __esm({
  'node_modules/underscore/modules/_getByteLength.js'() {
    init_shallowProperty();
    getByteLength_default = shallowProperty('byteLength');
  },
});

// node_modules/underscore/modules/_isBufferLike.js
var isBufferLike_default;
var init_isBufferLike = __esm({
  'node_modules/underscore/modules/_isBufferLike.js'() {
    init_createSizePropertyCheck();
    init_getByteLength();
    isBufferLike_default = createSizePropertyCheck(getByteLength_default);
  },
});

// node_modules/underscore/modules/isTypedArray.js
function isTypedArray(obj) {
  return nativeIsView
    ? nativeIsView(obj) && !isDataView_default(obj)
    : isBufferLike_default(obj) && typedArrayPattern.test(toString.call(obj));
}
var typedArrayPattern, isTypedArray_default;
var init_isTypedArray = __esm({
  'node_modules/underscore/modules/isTypedArray.js'() {
    init_setup();
    init_isDataView();
    init_constant();
    init_isBufferLike();
    typedArrayPattern =
      /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
    isTypedArray_default = supportsArrayBuffer ? isTypedArray : constant(false);
  },
});

// node_modules/underscore/modules/_getLength.js
var getLength_default;
var init_getLength = __esm({
  'node_modules/underscore/modules/_getLength.js'() {
    init_shallowProperty();
    getLength_default = shallowProperty('length');
  },
});

// node_modules/underscore/modules/_collectNonEnumProps.js
function emulatedSet(keys2) {
  var hash = {};
  for (var l = keys2.length, i = 0; i < l; ++i) hash[keys2[i]] = true;
  return {
    contains: function (key) {
      return hash[key] === true;
    },
    push: function (key) {
      hash[key] = true;
      return keys2.push(key);
    },
  };
}
function collectNonEnumProps(obj, keys2) {
  keys2 = emulatedSet(keys2);
  var nonEnumIdx = nonEnumerableProps.length;
  var constructor = obj.constructor;
  var proto =
    (isFunction_default(constructor) && constructor.prototype) || ObjProto;
  var prop = 'constructor';
  if (has2(obj, prop) && !keys2.contains(prop)) keys2.push(prop);
  while (nonEnumIdx--) {
    prop = nonEnumerableProps[nonEnumIdx];
    if (prop in obj && obj[prop] !== proto[prop] && !keys2.contains(prop)) {
      keys2.push(prop);
    }
  }
}
var init_collectNonEnumProps = __esm({
  'node_modules/underscore/modules/_collectNonEnumProps.js'() {
    init_setup();
    init_isFunction();
    init_has();
  },
});

// node_modules/underscore/modules/keys.js
function keys(obj) {
  if (!isObject3(obj)) return [];
  if (nativeKeys) return nativeKeys(obj);
  var keys2 = [];
  for (var key in obj) if (has2(obj, key)) keys2.push(key);
  if (hasEnumBug) collectNonEnumProps(obj, keys2);
  return keys2;
}
var init_keys = __esm({
  'node_modules/underscore/modules/keys.js'() {
    init_isObject();
    init_setup();
    init_has();
    init_collectNonEnumProps();
  },
});

// node_modules/underscore/modules/isEmpty.js
function isEmpty(obj) {
  if (obj == null) return true;
  var length = getLength_default(obj);
  if (
    typeof length == 'number' &&
    (isArray_default(obj) || isString_default(obj) || isArguments_default(obj))
  )
    return length === 0;
  return getLength_default(keys(obj)) === 0;
}
var init_isEmpty = __esm({
  'node_modules/underscore/modules/isEmpty.js'() {
    init_getLength();
    init_isArray();
    init_isString();
    init_isArguments();
    init_keys();
  },
});

// node_modules/underscore/modules/isMatch.js
function isMatch(object2, attrs) {
  var _keys = keys(attrs),
    length = _keys.length;
  if (object2 == null) return !length;
  var obj = Object(object2);
  for (var i = 0; i < length; i++) {
    var key = _keys[i];
    if (attrs[key] !== obj[key] || !(key in obj)) return false;
  }
  return true;
}
var init_isMatch = __esm({
  'node_modules/underscore/modules/isMatch.js'() {
    init_keys();
  },
});

// node_modules/underscore/modules/underscore.js
function _7(obj) {
  if (obj instanceof _7) return obj;
  if (!(this instanceof _7)) return new _7(obj);
  this._wrapped = obj;
}
var init_underscore = __esm({
  'node_modules/underscore/modules/underscore.js'() {
    init_setup();
    _7.VERSION = VERSION;
    _7.prototype.value = function () {
      return this._wrapped;
    };
    _7.prototype.valueOf = _7.prototype.toJSON = _7.prototype.value;
    _7.prototype.toString = function () {
      return String(this._wrapped);
    };
  },
});

// node_modules/underscore/modules/_toBufferView.js
function toBufferView(bufferSource) {
  return new Uint8Array(
    bufferSource.buffer || bufferSource,
    bufferSource.byteOffset || 0,
    getByteLength_default(bufferSource)
  );
}
var init_toBufferView = __esm({
  'node_modules/underscore/modules/_toBufferView.js'() {
    init_getByteLength();
  },
});

// node_modules/underscore/modules/isEqual.js
function eq(a, b, aStack, bStack) {
  if (a === b) return a !== 0 || 1 / a === 1 / b;
  if (a == null || b == null) return false;
  if (a !== a) return b !== b;
  var type = typeof a;
  if (type !== 'function' && type !== 'object' && typeof b != 'object')
    return false;
  return deepEq(a, b, aStack, bStack);
}
function deepEq(a, b, aStack, bStack) {
  if (a instanceof _7) a = a._wrapped;
  if (b instanceof _7) b = b._wrapped;
  var className = toString.call(a);
  if (className !== toString.call(b)) return false;
  if (
    hasDataViewBug &&
    className == '[object Object]' &&
    isDataView_default(a)
  ) {
    if (!isDataView_default(b)) return false;
    className = tagDataView;
  }
  switch (className) {
    // These types are compared by value.
    case '[object RegExp]':
    // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
    case '[object String]':
      return '' + a === '' + b;
    case '[object Number]':
      if (+a !== +a) return +b !== +b;
      return +a === 0 ? 1 / +a === 1 / b : +a === +b;
    case '[object Date]':
    case '[object Boolean]':
      return +a === +b;
    case '[object Symbol]':
      return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    case '[object ArrayBuffer]':
    case tagDataView:
      return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
  }
  var areArrays = className === '[object Array]';
  if (!areArrays && isTypedArray_default(a)) {
    var byteLength = getByteLength_default(a);
    if (byteLength !== getByteLength_default(b)) return false;
    if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;
    areArrays = true;
  }
  if (!areArrays) {
    if (typeof a != 'object' || typeof b != 'object') return false;
    var aCtor = a.constructor,
      bCtor = b.constructor;
    if (
      aCtor !== bCtor &&
      !(
        isFunction_default(aCtor) &&
        aCtor instanceof aCtor &&
        isFunction_default(bCtor) &&
        bCtor instanceof bCtor
      ) &&
      'constructor' in a &&
      'constructor' in b
    ) {
      return false;
    }
  }
  aStack = aStack || [];
  bStack = bStack || [];
  var length = aStack.length;
  while (length--) {
    if (aStack[length] === a) return bStack[length] === b;
  }
  aStack.push(a);
  bStack.push(b);
  if (areArrays) {
    length = a.length;
    if (length !== b.length) return false;
    while (length--) {
      if (!eq(a[length], b[length], aStack, bStack)) return false;
    }
  } else {
    var _keys = keys(a),
      key;
    length = _keys.length;
    if (keys(b).length !== length) return false;
    while (length--) {
      key = _keys[length];
      if (!(has2(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
    }
  }
  aStack.pop();
  bStack.pop();
  return true;
}
function isEqual(a, b) {
  return eq(a, b);
}
var tagDataView;
var init_isEqual = __esm({
  'node_modules/underscore/modules/isEqual.js'() {
    init_underscore();
    init_setup();
    init_getByteLength();
    init_isTypedArray();
    init_isFunction();
    init_stringTagBug();
    init_isDataView();
    init_keys();
    init_has();
    init_toBufferView();
    tagDataView = '[object DataView]';
  },
});

// node_modules/underscore/modules/allKeys.js
function allKeys(obj) {
  if (!isObject3(obj)) return [];
  var keys2 = [];
  for (var key in obj) keys2.push(key);
  if (hasEnumBug) collectNonEnumProps(obj, keys2);
  return keys2;
}
var init_allKeys = __esm({
  'node_modules/underscore/modules/allKeys.js'() {
    init_isObject();
    init_setup();
    init_collectNonEnumProps();
  },
});

// node_modules/underscore/modules/_methodFingerprint.js
function ie11fingerprint(methods) {
  var length = getLength_default(methods);
  return function (obj) {
    if (obj == null) return false;
    var keys2 = allKeys(obj);
    if (getLength_default(keys2)) return false;
    for (var i = 0; i < length; i++) {
      if (!isFunction_default(obj[methods[i]])) return false;
    }
    return methods !== weakMapMethods || !isFunction_default(obj[forEachName]);
  };
}
var forEachName,
  hasName,
  commonInit,
  mapTail,
  mapMethods,
  weakMapMethods,
  setMethods;
var init_methodFingerprint = __esm({
  'node_modules/underscore/modules/_methodFingerprint.js'() {
    init_getLength();
    init_isFunction();
    init_allKeys();
    forEachName = 'forEach';
    hasName = 'has';
    commonInit = ['clear', 'delete'];
    mapTail = ['get', hasName, 'set'];
    mapMethods = commonInit.concat(forEachName, mapTail);
    weakMapMethods = commonInit.concat(mapTail);
    setMethods = ['add'].concat(commonInit, forEachName, hasName);
  },
});

// node_modules/underscore/modules/isMap.js
var isMap_default;
var init_isMap = __esm({
  'node_modules/underscore/modules/isMap.js'() {
    init_tagTester();
    init_stringTagBug();
    init_methodFingerprint();
    isMap_default = isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');
  },
});

// node_modules/underscore/modules/isWeakMap.js
var isWeakMap_default;
var init_isWeakMap = __esm({
  'node_modules/underscore/modules/isWeakMap.js'() {
    init_tagTester();
    init_stringTagBug();
    init_methodFingerprint();
    isWeakMap_default = isIE11
      ? ie11fingerprint(weakMapMethods)
      : tagTester('WeakMap');
  },
});

// node_modules/underscore/modules/isSet.js
var isSet_default;
var init_isSet = __esm({
  'node_modules/underscore/modules/isSet.js'() {
    init_tagTester();
    init_stringTagBug();
    init_methodFingerprint();
    isSet_default = isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');
  },
});

// node_modules/underscore/modules/isWeakSet.js
var isWeakSet_default;
var init_isWeakSet = __esm({
  'node_modules/underscore/modules/isWeakSet.js'() {
    init_tagTester();
    isWeakSet_default = tagTester('WeakSet');
  },
});

// node_modules/underscore/modules/values.js
function values(obj) {
  var _keys = keys(obj);
  var length = _keys.length;
  var values2 = Array(length);
  for (var i = 0; i < length; i++) {
    values2[i] = obj[_keys[i]];
  }
  return values2;
}
var init_values = __esm({
  'node_modules/underscore/modules/values.js'() {
    init_keys();
  },
});

// node_modules/underscore/modules/pairs.js
function pairs(obj) {
  var _keys = keys(obj);
  var length = _keys.length;
  var pairs2 = Array(length);
  for (var i = 0; i < length; i++) {
    pairs2[i] = [_keys[i], obj[_keys[i]]];
  }
  return pairs2;
}
var init_pairs = __esm({
  'node_modules/underscore/modules/pairs.js'() {
    init_keys();
  },
});

// node_modules/underscore/modules/invert.js
function invert(obj) {
  var result2 = {};
  var _keys = keys(obj);
  for (var i = 0, length = _keys.length; i < length; i++) {
    result2[obj[_keys[i]]] = _keys[i];
  }
  return result2;
}
var init_invert = __esm({
  'node_modules/underscore/modules/invert.js'() {
    init_keys();
  },
});

// node_modules/underscore/modules/functions.js
function functions(obj) {
  var names = [];
  for (var key in obj) {
    if (isFunction_default(obj[key])) names.push(key);
  }
  return names.sort();
}
var init_functions = __esm({
  'node_modules/underscore/modules/functions.js'() {
    init_isFunction();
  },
});

// node_modules/underscore/modules/_createAssigner.js
function createAssigner(keysFunc, defaults) {
  return function (obj) {
    var length = arguments.length;
    if (defaults) obj = Object(obj);
    if (length < 2 || obj == null) return obj;
    for (var index = 1; index < length; index++) {
      var source = arguments[index],
        keys2 = keysFunc(source),
        l = keys2.length;
      for (var i = 0; i < l; i++) {
        var key = keys2[i];
        if (!defaults || obj[key] === void 0) obj[key] = source[key];
      }
    }
    return obj;
  };
}
var init_createAssigner = __esm({
  'node_modules/underscore/modules/_createAssigner.js'() {},
});

// node_modules/underscore/modules/extend.js
var extend_default;
var init_extend = __esm({
  'node_modules/underscore/modules/extend.js'() {
    init_createAssigner();
    init_allKeys();
    extend_default = createAssigner(allKeys);
  },
});

// node_modules/underscore/modules/extendOwn.js
var extendOwn_default;
var init_extendOwn = __esm({
  'node_modules/underscore/modules/extendOwn.js'() {
    init_createAssigner();
    init_keys();
    extendOwn_default = createAssigner(keys);
  },
});

// node_modules/underscore/modules/defaults.js
var defaults_default;
var init_defaults = __esm({
  'node_modules/underscore/modules/defaults.js'() {
    init_createAssigner();
    init_allKeys();
    defaults_default = createAssigner(allKeys, true);
  },
});

// node_modules/underscore/modules/_baseCreate.js
function ctor() {
  return function () {};
}
function baseCreate(prototype) {
  if (!isObject3(prototype)) return {};
  if (nativeCreate) return nativeCreate(prototype);
  var Ctor = ctor();
  Ctor.prototype = prototype;
  var result2 = new Ctor();
  Ctor.prototype = null;
  return result2;
}
var init_baseCreate = __esm({
  'node_modules/underscore/modules/_baseCreate.js'() {
    init_isObject();
    init_setup();
  },
});

// node_modules/underscore/modules/create.js
function create(prototype, props) {
  var result2 = baseCreate(prototype);
  if (props) extendOwn_default(result2, props);
  return result2;
}
var init_create = __esm({
  'node_modules/underscore/modules/create.js'() {
    init_baseCreate();
    init_extendOwn();
  },
});

// node_modules/underscore/modules/clone.js
function clone(obj) {
  if (!isObject3(obj)) return obj;
  return isArray_default(obj) ? obj.slice() : extend_default({}, obj);
}
var init_clone = __esm({
  'node_modules/underscore/modules/clone.js'() {
    init_isObject();
    init_isArray();
    init_extend();
  },
});

// node_modules/underscore/modules/tap.js
function tap(obj, interceptor) {
  interceptor(obj);
  return obj;
}
var init_tap = __esm({
  'node_modules/underscore/modules/tap.js'() {},
});

// node_modules/underscore/modules/toPath.js
function toPath(path) {
  return isArray_default(path) ? path : [path];
}
var init_toPath = __esm({
  'node_modules/underscore/modules/toPath.js'() {
    init_underscore();
    init_isArray();
    _7.toPath = toPath;
  },
});

// node_modules/underscore/modules/_toPath.js
function toPath2(path) {
  return _7.toPath(path);
}
var init_toPath2 = __esm({
  'node_modules/underscore/modules/_toPath.js'() {
    init_underscore();
    init_toPath();
  },
});

// node_modules/underscore/modules/_deepGet.js
function deepGet(obj, path) {
  var length = path.length;
  for (var i = 0; i < length; i++) {
    if (obj == null) return void 0;
    obj = obj[path[i]];
  }
  return length ? obj : void 0;
}
var init_deepGet = __esm({
  'node_modules/underscore/modules/_deepGet.js'() {},
});

// node_modules/underscore/modules/get.js
function get(object2, path, defaultValue) {
  var value = deepGet(object2, toPath2(path));
  return isUndefined(value) ? defaultValue : value;
}
var init_get = __esm({
  'node_modules/underscore/modules/get.js'() {
    init_toPath2();
    init_deepGet();
    init_isUndefined();
  },
});

// node_modules/underscore/modules/has.js
function has3(obj, path) {
  path = toPath2(path);
  var length = path.length;
  for (var i = 0; i < length; i++) {
    var key = path[i];
    if (!has2(obj, key)) return false;
    obj = obj[key];
  }
  return !!length;
}
var init_has2 = __esm({
  'node_modules/underscore/modules/has.js'() {
    init_has();
    init_toPath2();
  },
});

// node_modules/underscore/modules/identity.js
function identity(value) {
  return value;
}
var init_identity = __esm({
  'node_modules/underscore/modules/identity.js'() {},
});

// node_modules/underscore/modules/matcher.js
function matcher(attrs) {
  attrs = extendOwn_default({}, attrs);
  return function (obj) {
    return isMatch(obj, attrs);
  };
}
var init_matcher = __esm({
  'node_modules/underscore/modules/matcher.js'() {
    init_extendOwn();
    init_isMatch();
  },
});

// node_modules/underscore/modules/property.js
function property(path) {
  path = toPath2(path);
  return function (obj) {
    return deepGet(obj, path);
  };
}
var init_property = __esm({
  'node_modules/underscore/modules/property.js'() {
    init_deepGet();
    init_toPath2();
  },
});

// node_modules/underscore/modules/_optimizeCb.js
function optimizeCb(func, context, argCount) {
  if (context === void 0) return func;
  switch (argCount == null ? 3 : argCount) {
    case 1:
      return function (value) {
        return func.call(context, value);
      };
    // The 2-argument case is omitted because we’re not using it.
    case 3:
      return function (value, index, collection) {
        return func.call(context, value, index, collection);
      };
    case 4:
      return function (accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
  }
  return function () {
    return func.apply(context, arguments);
  };
}
var init_optimizeCb = __esm({
  'node_modules/underscore/modules/_optimizeCb.js'() {},
});

// node_modules/underscore/modules/_baseIteratee.js
function baseIteratee(value, context, argCount) {
  if (value == null) return identity;
  if (isFunction_default(value)) return optimizeCb(value, context, argCount);
  if (isObject3(value) && !isArray_default(value)) return matcher(value);
  return property(value);
}
var init_baseIteratee = __esm({
  'node_modules/underscore/modules/_baseIteratee.js'() {
    init_identity();
    init_isFunction();
    init_isObject();
    init_isArray();
    init_matcher();
    init_property();
    init_optimizeCb();
  },
});

// node_modules/underscore/modules/iteratee.js
function iteratee(value, context) {
  return baseIteratee(value, context, Infinity);
}
var init_iteratee = __esm({
  'node_modules/underscore/modules/iteratee.js'() {
    init_underscore();
    init_baseIteratee();
    _7.iteratee = iteratee;
  },
});

// node_modules/underscore/modules/_cb.js
function cb(value, context, argCount) {
  if (_7.iteratee !== iteratee) return _7.iteratee(value, context);
  return baseIteratee(value, context, argCount);
}
var init_cb = __esm({
  'node_modules/underscore/modules/_cb.js'() {
    init_underscore();
    init_baseIteratee();
    init_iteratee();
  },
});

// node_modules/underscore/modules/mapObject.js
function mapObject2(obj, iteratee2, context) {
  iteratee2 = cb(iteratee2, context);
  var _keys = keys(obj),
    length = _keys.length,
    results = {};
  for (var index = 0; index < length; index++) {
    var currentKey = _keys[index];
    results[currentKey] = iteratee2(obj[currentKey], currentKey, obj);
  }
  return results;
}
var init_mapObject = __esm({
  'node_modules/underscore/modules/mapObject.js'() {
    init_cb();
    init_keys();
  },
});

// node_modules/underscore/modules/noop.js
function noop() {}
var init_noop = __esm({
  'node_modules/underscore/modules/noop.js'() {},
});

// node_modules/underscore/modules/propertyOf.js
function propertyOf(obj) {
  if (obj == null) return noop;
  return function (path) {
    return get(obj, path);
  };
}
var init_propertyOf = __esm({
  'node_modules/underscore/modules/propertyOf.js'() {
    init_noop();
    init_get();
  },
});

// node_modules/underscore/modules/times.js
function times(n, iteratee2, context) {
  var accum = Array(Math.max(0, n));
  iteratee2 = optimizeCb(iteratee2, context, 1);
  for (var i = 0; i < n; i++) accum[i] = iteratee2(i);
  return accum;
}
var init_times = __esm({
  'node_modules/underscore/modules/times.js'() {
    init_optimizeCb();
  },
});

// node_modules/underscore/modules/random.js
function random(min2, max2) {
  if (max2 == null) {
    max2 = min2;
    min2 = 0;
  }
  return min2 + Math.floor(Math.random() * (max2 - min2 + 1));
}
var init_random = __esm({
  'node_modules/underscore/modules/random.js'() {},
});

// node_modules/underscore/modules/now.js
var now_default;
var init_now = __esm({
  'node_modules/underscore/modules/now.js'() {
    now_default =
      Date.now ||
      function () {
        return /* @__PURE__ */ new Date().getTime();
      };
  },
});

// node_modules/underscore/modules/_createEscaper.js
function createEscaper(map2) {
  var escaper = function (match) {
    return map2[match];
  };
  var source = '(?:' + keys(map2).join('|') + ')';
  var testRegexp = RegExp(source);
  var replaceRegexp = RegExp(source, 'g');
  return function (string) {
    string = string == null ? '' : '' + string;
    return testRegexp.test(string)
      ? string.replace(replaceRegexp, escaper)
      : string;
  };
}
var init_createEscaper = __esm({
  'node_modules/underscore/modules/_createEscaper.js'() {
    init_keys();
  },
});

// node_modules/underscore/modules/_escapeMap.js
var escapeMap_default;
var init_escapeMap = __esm({
  'node_modules/underscore/modules/_escapeMap.js'() {
    escapeMap_default = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '`': '&#x60;',
    };
  },
});

// node_modules/underscore/modules/escape.js
var escape_default;
var init_escape = __esm({
  'node_modules/underscore/modules/escape.js'() {
    init_createEscaper();
    init_escapeMap();
    escape_default = createEscaper(escapeMap_default);
  },
});

// node_modules/underscore/modules/_unescapeMap.js
var unescapeMap_default;
var init_unescapeMap = __esm({
  'node_modules/underscore/modules/_unescapeMap.js'() {
    init_invert();
    init_escapeMap();
    unescapeMap_default = invert(escapeMap_default);
  },
});

// node_modules/underscore/modules/unescape.js
var unescape_default;
var init_unescape = __esm({
  'node_modules/underscore/modules/unescape.js'() {
    init_createEscaper();
    init_unescapeMap();
    unescape_default = createEscaper(unescapeMap_default);
  },
});

// node_modules/underscore/modules/templateSettings.js
var templateSettings_default;
var init_templateSettings = __esm({
  'node_modules/underscore/modules/templateSettings.js'() {
    init_underscore();
    templateSettings_default = _7.templateSettings = {
      evaluate: /<%([\s\S]+?)%>/g,
      interpolate: /<%=([\s\S]+?)%>/g,
      escape: /<%-([\s\S]+?)%>/g,
    };
  },
});

// node_modules/underscore/modules/template.js
function escapeChar(match) {
  return '\\' + escapes[match];
}
function template(text, settings, oldSettings) {
  if (!settings && oldSettings) settings = oldSettings;
  settings = defaults_default({}, settings, _7.templateSettings);
  var matcher2 = RegExp(
    [
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source,
    ].join('|') + '|$',
    'g'
  );
  var index = 0;
  var source = "__p+='";
  text.replace(
    matcher2,
    function (match, escape2, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;
      if (escape2) {
        source += "'+\n((__t=(" + escape2 + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      return match;
    }
  );
  source += "';\n";
  var argument = settings.variable;
  if (argument) {
    if (!bareIdentifier.test(argument))
      throw new Error('variable is not a bare identifier: ' + argument);
  } else {
    source = 'with(obj||{}){\n' + source + '}\n';
    argument = 'obj';
  }
  source =
    "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" +
    source +
    'return __p;\n';
  var render;
  try {
    render = new Function(argument, '_', source);
  } catch (e) {
    e.source = source;
    throw e;
  }
  var template2 = function (data) {
    return render.call(this, data, _7);
  };
  template2.source = 'function(' + argument + '){\n' + source + '}';
  return template2;
}
var noMatch, escapes, escapeRegExp, bareIdentifier;
var init_template = __esm({
  'node_modules/underscore/modules/template.js'() {
    init_defaults();
    init_underscore();
    init_templateSettings();
    noMatch = /(.)^/;
    escapes = {
      "'": "'",
      '\\': '\\',
      '\r': 'r',
      '\n': 'n',
      '\u2028': 'u2028',
      '\u2029': 'u2029',
    };
    escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
    bareIdentifier = /^\s*(\w|\$)+\s*$/;
  },
});

// node_modules/underscore/modules/result.js
function result(obj, path, fallback) {
  path = toPath2(path);
  var length = path.length;
  if (!length) {
    return isFunction_default(fallback) ? fallback.call(obj) : fallback;
  }
  for (var i = 0; i < length; i++) {
    var prop = obj == null ? void 0 : obj[path[i]];
    if (prop === void 0) {
      prop = fallback;
      i = length;
    }
    obj = isFunction_default(prop) ? prop.call(obj) : prop;
  }
  return obj;
}
var init_result = __esm({
  'node_modules/underscore/modules/result.js'() {
    init_isFunction();
    init_toPath2();
  },
});

// node_modules/underscore/modules/uniqueId.js
function uniqueId(prefix) {
  var id = ++idCounter + '';
  return prefix ? prefix + id : id;
}
var idCounter;
var init_uniqueId = __esm({
  'node_modules/underscore/modules/uniqueId.js'() {
    idCounter = 0;
  },
});

// node_modules/underscore/modules/chain.js
function chain(obj) {
  var instance = _7(obj);
  instance._chain = true;
  return instance;
}
var init_chain = __esm({
  'node_modules/underscore/modules/chain.js'() {
    init_underscore();
  },
});

// node_modules/underscore/modules/_executeBound.js
function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
  if (!(callingContext instanceof boundFunc))
    return sourceFunc.apply(context, args);
  var self2 = baseCreate(sourceFunc.prototype);
  var result2 = sourceFunc.apply(self2, args);
  if (isObject3(result2)) return result2;
  return self2;
}
var init_executeBound = __esm({
  'node_modules/underscore/modules/_executeBound.js'() {
    init_baseCreate();
    init_isObject();
  },
});

// node_modules/underscore/modules/partial.js
var partial, partial_default;
var init_partial = __esm({
  'node_modules/underscore/modules/partial.js'() {
    init_restArguments();
    init_executeBound();
    init_underscore();
    partial = restArguments(function (func, boundArgs) {
      var placeholder = partial.placeholder;
      var bound = function () {
        var position = 0,
          length = boundArgs.length;
        var args = Array(length);
        for (var i = 0; i < length; i++) {
          args[i] =
            boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
        }
        while (position < arguments.length) args.push(arguments[position++]);
        return executeBound(func, bound, this, this, args);
      };
      return bound;
    });
    partial.placeholder = _7;
    partial_default = partial;
  },
});

// node_modules/underscore/modules/bind.js
var bind_default;
var init_bind = __esm({
  'node_modules/underscore/modules/bind.js'() {
    init_restArguments();
    init_isFunction();
    init_executeBound();
    bind_default = restArguments(function (func, context, args) {
      if (!isFunction_default(func))
        throw new TypeError('Bind must be called on a function');
      var bound = restArguments(function (callArgs) {
        return executeBound(func, bound, context, this, args.concat(callArgs));
      });
      return bound;
    });
  },
});

// node_modules/underscore/modules/_isArrayLike.js
var isArrayLike_default;
var init_isArrayLike = __esm({
  'node_modules/underscore/modules/_isArrayLike.js'() {
    init_createSizePropertyCheck();
    init_getLength();
    isArrayLike_default = createSizePropertyCheck(getLength_default);
  },
});

// node_modules/underscore/modules/_flatten.js
function flatten(input, depth, strict, output) {
  output = output || [];
  if (!depth && depth !== 0) {
    depth = Infinity;
  } else if (depth <= 0) {
    return output.concat(input);
  }
  var idx = output.length;
  for (var i = 0, length = getLength_default(input); i < length; i++) {
    var value = input[i];
    if (
      isArrayLike_default(value) &&
      (isArray_default(value) || isArguments_default(value))
    ) {
      if (depth > 1) {
        flatten(value, depth - 1, strict, output);
        idx = output.length;
      } else {
        var j = 0,
          len = value.length;
        while (j < len) output[idx++] = value[j++];
      }
    } else if (!strict) {
      output[idx++] = value;
    }
  }
  return output;
}
var init_flatten = __esm({
  'node_modules/underscore/modules/_flatten.js'() {
    init_getLength();
    init_isArrayLike();
    init_isArray();
    init_isArguments();
  },
});

// node_modules/underscore/modules/bindAll.js
var bindAll_default;
var init_bindAll = __esm({
  'node_modules/underscore/modules/bindAll.js'() {
    init_restArguments();
    init_flatten();
    init_bind();
    bindAll_default = restArguments(function (obj, keys2) {
      keys2 = flatten(keys2, false, false);
      var index = keys2.length;
      if (index < 1) throw new Error('bindAll must be passed function names');
      while (index--) {
        var key = keys2[index];
        obj[key] = bind_default(obj[key], obj);
      }
      return obj;
    });
  },
});

// node_modules/underscore/modules/memoize.js
function memoize(func, hasher) {
  var memoize2 = function (key) {
    var cache2 = memoize2.cache;
    var address = '' + (hasher ? hasher.apply(this, arguments) : key);
    if (!has2(cache2, address)) cache2[address] = func.apply(this, arguments);
    return cache2[address];
  };
  memoize2.cache = {};
  return memoize2;
}
var init_memoize = __esm({
  'node_modules/underscore/modules/memoize.js'() {
    init_has();
  },
});

// node_modules/underscore/modules/delay.js
var delay_default;
var init_delay = __esm({
  'node_modules/underscore/modules/delay.js'() {
    init_restArguments();
    delay_default = restArguments(function (func, wait, args) {
      return setTimeout(function () {
        return func.apply(null, args);
      }, wait);
    });
  },
});

// node_modules/underscore/modules/defer.js
var defer_default;
var init_defer = __esm({
  'node_modules/underscore/modules/defer.js'() {
    init_partial();
    init_delay();
    init_underscore();
    defer_default = partial_default(delay_default, _7, 1);
  },
});

// node_modules/underscore/modules/throttle.js
function throttle(func, wait, options) {
  var timeout, context, args, result2;
  var previous = 0;
  if (!options) options = {};
  var later = function () {
    previous = options.leading === false ? 0 : now_default();
    timeout = null;
    result2 = func.apply(context, args);
    if (!timeout) context = args = null;
  };
  var throttled = function () {
    var _now = now_default();
    if (!previous && options.leading === false) previous = _now;
    var remaining = wait - (_now - previous);
    context = this;
    args = arguments;
    if (remaining <= 0 || remaining > wait) {
      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
      previous = _now;
      result2 = func.apply(context, args);
      if (!timeout) context = args = null;
    } else if (!timeout && options.trailing !== false) {
      timeout = setTimeout(later, remaining);
    }
    return result2;
  };
  throttled.cancel = function () {
    clearTimeout(timeout);
    previous = 0;
    timeout = context = args = null;
  };
  return throttled;
}
var init_throttle = __esm({
  'node_modules/underscore/modules/throttle.js'() {
    init_now();
  },
});

// node_modules/underscore/modules/debounce.js
function debounce(func, wait, immediate) {
  var timeout, previous, args, result2, context;
  var later = function () {
    var passed = now_default() - previous;
    if (wait > passed) {
      timeout = setTimeout(later, wait - passed);
    } else {
      timeout = null;
      if (!immediate) result2 = func.apply(context, args);
      if (!timeout) args = context = null;
    }
  };
  var debounced = restArguments(function (_args) {
    context = this;
    args = _args;
    previous = now_default();
    if (!timeout) {
      timeout = setTimeout(later, wait);
      if (immediate) result2 = func.apply(context, args);
    }
    return result2;
  });
  debounced.cancel = function () {
    clearTimeout(timeout);
    timeout = args = context = null;
  };
  return debounced;
}
var init_debounce = __esm({
  'node_modules/underscore/modules/debounce.js'() {
    init_restArguments();
    init_now();
  },
});

// node_modules/underscore/modules/wrap.js
function wrap(func, wrapper) {
  return partial_default(wrapper, func);
}
var init_wrap = __esm({
  'node_modules/underscore/modules/wrap.js'() {
    init_partial();
  },
});

// node_modules/underscore/modules/negate.js
function negate(predicate) {
  return function () {
    return !predicate.apply(this, arguments);
  };
}
var init_negate = __esm({
  'node_modules/underscore/modules/negate.js'() {},
});

// node_modules/underscore/modules/compose.js
function compose() {
  var args = arguments;
  var start = args.length - 1;
  return function () {
    var i = start;
    var result2 = args[start].apply(this, arguments);
    while (i--) result2 = args[i].call(this, result2);
    return result2;
  };
}
var init_compose = __esm({
  'node_modules/underscore/modules/compose.js'() {},
});

// node_modules/underscore/modules/after.js
function after(times2, func) {
  return function () {
    if (--times2 < 1) {
      return func.apply(this, arguments);
    }
  };
}
var init_after = __esm({
  'node_modules/underscore/modules/after.js'() {},
});

// node_modules/underscore/modules/before.js
function before(times2, func) {
  var memo2;
  return function () {
    if (--times2 > 0) {
      memo2 = func.apply(this, arguments);
    }
    if (times2 <= 1) func = null;
    return memo2;
  };
}
var init_before = __esm({
  'node_modules/underscore/modules/before.js'() {},
});

// node_modules/underscore/modules/once.js
var once_default;
var init_once = __esm({
  'node_modules/underscore/modules/once.js'() {
    init_partial();
    init_before();
    once_default = partial_default(before, 2);
  },
});

// node_modules/underscore/modules/findKey.js
function findKey(obj, predicate, context) {
  predicate = cb(predicate, context);
  var _keys = keys(obj),
    key;
  for (var i = 0, length = _keys.length; i < length; i++) {
    key = _keys[i];
    if (predicate(obj[key], key, obj)) return key;
  }
}
var init_findKey = __esm({
  'node_modules/underscore/modules/findKey.js'() {
    init_cb();
    init_keys();
  },
});

// node_modules/underscore/modules/_createPredicateIndexFinder.js
function createPredicateIndexFinder(dir) {
  return function (array, predicate, context) {
    predicate = cb(predicate, context);
    var length = getLength_default(array);
    var index = dir > 0 ? 0 : length - 1;
    for (; index >= 0 && index < length; index += dir) {
      if (predicate(array[index], index, array)) return index;
    }
    return -1;
  };
}
var init_createPredicateIndexFinder = __esm({
  'node_modules/underscore/modules/_createPredicateIndexFinder.js'() {
    init_cb();
    init_getLength();
  },
});

// node_modules/underscore/modules/findIndex.js
var findIndex_default;
var init_findIndex = __esm({
  'node_modules/underscore/modules/findIndex.js'() {
    init_createPredicateIndexFinder();
    findIndex_default = createPredicateIndexFinder(1);
  },
});

// node_modules/underscore/modules/findLastIndex.js
var findLastIndex_default;
var init_findLastIndex = __esm({
  'node_modules/underscore/modules/findLastIndex.js'() {
    init_createPredicateIndexFinder();
    findLastIndex_default = createPredicateIndexFinder(-1);
  },
});

// node_modules/underscore/modules/sortedIndex.js
function sortedIndex(array, obj, iteratee2, context) {
  iteratee2 = cb(iteratee2, context, 1);
  var value = iteratee2(obj);
  var low = 0,
    high = getLength_default(array);
  while (low < high) {
    var mid = Math.floor((low + high) / 2);
    if (iteratee2(array[mid]) < value) low = mid + 1;
    else high = mid;
  }
  return low;
}
var init_sortedIndex = __esm({
  'node_modules/underscore/modules/sortedIndex.js'() {
    init_cb();
    init_getLength();
  },
});

// node_modules/underscore/modules/_createIndexFinder.js
function createIndexFinder(dir, predicateFind, sortedIndex2) {
  return function (array, item, idx) {
    var i = 0,
      length = getLength_default(array);
    if (typeof idx == 'number') {
      if (dir > 0) {
        i = idx >= 0 ? idx : Math.max(idx + length, i);
      } else {
        length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
      }
    } else if (sortedIndex2 && idx && length) {
      idx = sortedIndex2(array, item);
      return array[idx] === item ? idx : -1;
    }
    if (item !== item) {
      idx = predicateFind(slice.call(array, i, length), isNaN2);
      return idx >= 0 ? idx + i : -1;
    }
    for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
      if (array[idx] === item) return idx;
    }
    return -1;
  };
}
var init_createIndexFinder = __esm({
  'node_modules/underscore/modules/_createIndexFinder.js'() {
    init_getLength();
    init_setup();
    init_isNaN();
  },
});

// node_modules/underscore/modules/indexOf.js
var indexOf_default;
var init_indexOf = __esm({
  'node_modules/underscore/modules/indexOf.js'() {
    init_sortedIndex();
    init_findIndex();
    init_createIndexFinder();
    indexOf_default = createIndexFinder(1, findIndex_default, sortedIndex);
  },
});

// node_modules/underscore/modules/lastIndexOf.js
var lastIndexOf_default;
var init_lastIndexOf = __esm({
  'node_modules/underscore/modules/lastIndexOf.js'() {
    init_findLastIndex();
    init_createIndexFinder();
    lastIndexOf_default = createIndexFinder(-1, findLastIndex_default);
  },
});

// node_modules/underscore/modules/find.js
function find(obj, predicate, context) {
  var keyFinder = isArrayLike_default(obj) ? findIndex_default : findKey;
  var key = keyFinder(obj, predicate, context);
  if (key !== void 0 && key !== -1) return obj[key];
}
var init_find = __esm({
  'node_modules/underscore/modules/find.js'() {
    init_isArrayLike();
    init_findIndex();
    init_findKey();
  },
});

// node_modules/underscore/modules/findWhere.js
function findWhere(obj, attrs) {
  return find(obj, matcher(attrs));
}
var init_findWhere = __esm({
  'node_modules/underscore/modules/findWhere.js'() {
    init_find();
    init_matcher();
  },
});

// node_modules/underscore/modules/each.js
function each(obj, iteratee2, context) {
  iteratee2 = optimizeCb(iteratee2, context);
  var i, length;
  if (isArrayLike_default(obj)) {
    for (i = 0, length = obj.length; i < length; i++) {
      iteratee2(obj[i], i, obj);
    }
  } else {
    var _keys = keys(obj);
    for (i = 0, length = _keys.length; i < length; i++) {
      iteratee2(obj[_keys[i]], _keys[i], obj);
    }
  }
  return obj;
}
var init_each = __esm({
  'node_modules/underscore/modules/each.js'() {
    init_optimizeCb();
    init_isArrayLike();
    init_keys();
  },
});

// node_modules/underscore/modules/map.js
function map(obj, iteratee2, context) {
  iteratee2 = cb(iteratee2, context);
  var _keys = !isArrayLike_default(obj) && keys(obj),
    length = (_keys || obj).length,
    results = Array(length);
  for (var index = 0; index < length; index++) {
    var currentKey = _keys ? _keys[index] : index;
    results[index] = iteratee2(obj[currentKey], currentKey, obj);
  }
  return results;
}
var init_map = __esm({
  'node_modules/underscore/modules/map.js'() {
    init_cb();
    init_isArrayLike();
    init_keys();
  },
});

// node_modules/underscore/modules/_createReduce.js
function createReduce(dir) {
  var reducer4 = function (obj, iteratee2, memo2, initial2) {
    var _keys = !isArrayLike_default(obj) && keys(obj),
      length = (_keys || obj).length,
      index = dir > 0 ? 0 : length - 1;
    if (!initial2) {
      memo2 = obj[_keys ? _keys[index] : index];
      index += dir;
    }
    for (; index >= 0 && index < length; index += dir) {
      var currentKey = _keys ? _keys[index] : index;
      memo2 = iteratee2(memo2, obj[currentKey], currentKey, obj);
    }
    return memo2;
  };
  return function (obj, iteratee2, memo2, context) {
    var initial2 = arguments.length >= 3;
    return reducer4(obj, optimizeCb(iteratee2, context, 4), memo2, initial2);
  };
}
var init_createReduce = __esm({
  'node_modules/underscore/modules/_createReduce.js'() {
    init_isArrayLike();
    init_keys();
    init_optimizeCb();
  },
});

// node_modules/underscore/modules/reduce.js
var reduce_default;
var init_reduce = __esm({
  'node_modules/underscore/modules/reduce.js'() {
    init_createReduce();
    reduce_default = createReduce(1);
  },
});

// node_modules/underscore/modules/reduceRight.js
var reduceRight_default;
var init_reduceRight = __esm({
  'node_modules/underscore/modules/reduceRight.js'() {
    init_createReduce();
    reduceRight_default = createReduce(-1);
  },
});

// node_modules/underscore/modules/filter.js
function filter(obj, predicate, context) {
  var results = [];
  predicate = cb(predicate, context);
  each(obj, function (value, index, list) {
    if (predicate(value, index, list)) results.push(value);
  });
  return results;
}
var init_filter = __esm({
  'node_modules/underscore/modules/filter.js'() {
    init_cb();
    init_each();
  },
});

// node_modules/underscore/modules/reject.js
function reject(obj, predicate, context) {
  return filter(obj, negate(cb(predicate)), context);
}
var init_reject = __esm({
  'node_modules/underscore/modules/reject.js'() {
    init_filter();
    init_negate();
    init_cb();
  },
});

// node_modules/underscore/modules/every.js
function every(obj, predicate, context) {
  predicate = cb(predicate, context);
  var _keys = !isArrayLike_default(obj) && keys(obj),
    length = (_keys || obj).length;
  for (var index = 0; index < length; index++) {
    var currentKey = _keys ? _keys[index] : index;
    if (!predicate(obj[currentKey], currentKey, obj)) return false;
  }
  return true;
}
var init_every = __esm({
  'node_modules/underscore/modules/every.js'() {
    init_cb();
    init_isArrayLike();
    init_keys();
  },
});

// node_modules/underscore/modules/some.js
function some(obj, predicate, context) {
  predicate = cb(predicate, context);
  var _keys = !isArrayLike_default(obj) && keys(obj),
    length = (_keys || obj).length;
  for (var index = 0; index < length; index++) {
    var currentKey = _keys ? _keys[index] : index;
    if (predicate(obj[currentKey], currentKey, obj)) return true;
  }
  return false;
}
var init_some = __esm({
  'node_modules/underscore/modules/some.js'() {
    init_cb();
    init_isArrayLike();
    init_keys();
  },
});

// node_modules/underscore/modules/contains.js
function contains(obj, item, fromIndex, guard) {
  if (!isArrayLike_default(obj)) obj = values(obj);
  if (typeof fromIndex != 'number' || guard) fromIndex = 0;
  return indexOf_default(obj, item, fromIndex) >= 0;
}
var init_contains = __esm({
  'node_modules/underscore/modules/contains.js'() {
    init_isArrayLike();
    init_values();
    init_indexOf();
  },
});

// node_modules/underscore/modules/invoke.js
var invoke_default;
var init_invoke = __esm({
  'node_modules/underscore/modules/invoke.js'() {
    init_restArguments();
    init_isFunction();
    init_map();
    init_deepGet();
    init_toPath2();
    invoke_default = restArguments(function (obj, path, args) {
      var contextPath, func;
      if (isFunction_default(path)) {
        func = path;
      } else {
        path = toPath2(path);
        contextPath = path.slice(0, -1);
        path = path[path.length - 1];
      }
      return map(obj, function (context) {
        var method = func;
        if (!method) {
          if (contextPath && contextPath.length) {
            context = deepGet(context, contextPath);
          }
          if (context == null) return void 0;
          method = context[path];
        }
        return method == null ? method : method.apply(context, args);
      });
    });
  },
});

// node_modules/underscore/modules/pluck.js
function pluck(obj, key) {
  return map(obj, property(key));
}
var init_pluck = __esm({
  'node_modules/underscore/modules/pluck.js'() {
    init_map();
    init_property();
  },
});

// node_modules/underscore/modules/where.js
function where(obj, attrs) {
  return filter(obj, matcher(attrs));
}
var init_where = __esm({
  'node_modules/underscore/modules/where.js'() {
    init_filter();
    init_matcher();
  },
});

// node_modules/underscore/modules/max.js
function max(obj, iteratee2, context) {
  var result2 = -Infinity,
    lastComputed = -Infinity,
    value,
    computed;
  if (
    iteratee2 == null ||
    (typeof iteratee2 == 'number' && typeof obj[0] != 'object' && obj != null)
  ) {
    obj = isArrayLike_default(obj) ? obj : values(obj);
    for (var i = 0, length = obj.length; i < length; i++) {
      value = obj[i];
      if (value != null && value > result2) {
        result2 = value;
      }
    }
  } else {
    iteratee2 = cb(iteratee2, context);
    each(obj, function (v, index, list) {
      computed = iteratee2(v, index, list);
      if (
        computed > lastComputed ||
        (computed === -Infinity && result2 === -Infinity)
      ) {
        result2 = v;
        lastComputed = computed;
      }
    });
  }
  return result2;
}
var init_max = __esm({
  'node_modules/underscore/modules/max.js'() {
    init_isArrayLike();
    init_values();
    init_cb();
    init_each();
  },
});

// node_modules/underscore/modules/min.js
function min(obj, iteratee2, context) {
  var result2 = Infinity,
    lastComputed = Infinity,
    value,
    computed;
  if (
    iteratee2 == null ||
    (typeof iteratee2 == 'number' && typeof obj[0] != 'object' && obj != null)
  ) {
    obj = isArrayLike_default(obj) ? obj : values(obj);
    for (var i = 0, length = obj.length; i < length; i++) {
      value = obj[i];
      if (value != null && value < result2) {
        result2 = value;
      }
    }
  } else {
    iteratee2 = cb(iteratee2, context);
    each(obj, function (v, index, list) {
      computed = iteratee2(v, index, list);
      if (
        computed < lastComputed ||
        (computed === Infinity && result2 === Infinity)
      ) {
        result2 = v;
        lastComputed = computed;
      }
    });
  }
  return result2;
}
var init_min = __esm({
  'node_modules/underscore/modules/min.js'() {
    init_isArrayLike();
    init_values();
    init_cb();
    init_each();
  },
});

// node_modules/underscore/modules/toArray.js
function toArray(obj) {
  if (!obj) return [];
  if (isArray_default(obj)) return slice.call(obj);
  if (isString_default(obj)) {
    return obj.match(reStrSymbol);
  }
  if (isArrayLike_default(obj)) return map(obj, identity);
  return values(obj);
}
var reStrSymbol;
var init_toArray = __esm({
  'node_modules/underscore/modules/toArray.js'() {
    init_isArray();
    init_setup();
    init_isString();
    init_isArrayLike();
    init_map();
    init_identity();
    init_values();
    reStrSymbol =
      /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  },
});

// node_modules/underscore/modules/sample.js
function sample(obj, n, guard) {
  if (n == null || guard) {
    if (!isArrayLike_default(obj)) obj = values(obj);
    return obj[random(obj.length - 1)];
  }
  var sample2 = toArray(obj);
  var length = getLength_default(sample2);
  n = Math.max(Math.min(n, length), 0);
  var last2 = length - 1;
  for (var index = 0; index < n; index++) {
    var rand = random(index, last2);
    var temp = sample2[index];
    sample2[index] = sample2[rand];
    sample2[rand] = temp;
  }
  return sample2.slice(0, n);
}
var init_sample = __esm({
  'node_modules/underscore/modules/sample.js'() {
    init_isArrayLike();
    init_values();
    init_getLength();
    init_random();
    init_toArray();
  },
});

// node_modules/underscore/modules/shuffle.js
function shuffle(obj) {
  return sample(obj, Infinity);
}
var init_shuffle = __esm({
  'node_modules/underscore/modules/shuffle.js'() {
    init_sample();
  },
});

// node_modules/underscore/modules/sortBy.js
function sortBy(obj, iteratee2, context) {
  var index = 0;
  iteratee2 = cb(iteratee2, context);
  return pluck(
    map(obj, function (value, key, list) {
      return {
        value,
        index: index++,
        criteria: iteratee2(value, key, list),
      };
    }).sort(function (left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }),
    'value'
  );
}
var init_sortBy = __esm({
  'node_modules/underscore/modules/sortBy.js'() {
    init_cb();
    init_pluck();
    init_map();
  },
});

// node_modules/underscore/modules/_group.js
function group(behavior, partition) {
  return function (obj, iteratee2, context) {
    var result2 = partition ? [[], []] : {};
    iteratee2 = cb(iteratee2, context);
    each(obj, function (value, index) {
      var key = iteratee2(value, index, obj);
      behavior(result2, value, key);
    });
    return result2;
  };
}
var init_group = __esm({
  'node_modules/underscore/modules/_group.js'() {
    init_cb();
    init_each();
  },
});

// node_modules/underscore/modules/groupBy.js
var groupBy_default;
var init_groupBy = __esm({
  'node_modules/underscore/modules/groupBy.js'() {
    init_group();
    init_has();
    groupBy_default = group(function (result2, value, key) {
      if (has2(result2, key)) result2[key].push(value);
      else result2[key] = [value];
    });
  },
});

// node_modules/underscore/modules/indexBy.js
var indexBy_default;
var init_indexBy = __esm({
  'node_modules/underscore/modules/indexBy.js'() {
    init_group();
    indexBy_default = group(function (result2, value, key) {
      result2[key] = value;
    });
  },
});

// node_modules/underscore/modules/countBy.js
var countBy_default;
var init_countBy = __esm({
  'node_modules/underscore/modules/countBy.js'() {
    init_group();
    init_has();
    countBy_default = group(function (result2, value, key) {
      if (has2(result2, key)) result2[key]++;
      else result2[key] = 1;
    });
  },
});

// node_modules/underscore/modules/partition.js
var partition_default;
var init_partition = __esm({
  'node_modules/underscore/modules/partition.js'() {
    init_group();
    partition_default = group(function (result2, value, pass) {
      result2[pass ? 0 : 1].push(value);
    }, true);
  },
});

// node_modules/underscore/modules/size.js
function size(obj) {
  if (obj == null) return 0;
  return isArrayLike_default(obj) ? obj.length : keys(obj).length;
}
var init_size = __esm({
  'node_modules/underscore/modules/size.js'() {
    init_isArrayLike();
    init_keys();
  },
});

// node_modules/underscore/modules/_keyInObj.js
function keyInObj(value, key, obj) {
  return key in obj;
}
var init_keyInObj = __esm({
  'node_modules/underscore/modules/_keyInObj.js'() {},
});

// node_modules/underscore/modules/pick.js
var pick_default;
var init_pick = __esm({
  'node_modules/underscore/modules/pick.js'() {
    init_restArguments();
    init_isFunction();
    init_optimizeCb();
    init_allKeys();
    init_keyInObj();
    init_flatten();
    pick_default = restArguments(function (obj, keys2) {
      var result2 = {},
        iteratee2 = keys2[0];
      if (obj == null) return result2;
      if (isFunction_default(iteratee2)) {
        if (keys2.length > 1) iteratee2 = optimizeCb(iteratee2, keys2[1]);
        keys2 = allKeys(obj);
      } else {
        iteratee2 = keyInObj;
        keys2 = flatten(keys2, false, false);
        obj = Object(obj);
      }
      for (var i = 0, length = keys2.length; i < length; i++) {
        var key = keys2[i];
        var value = obj[key];
        if (iteratee2(value, key, obj)) result2[key] = value;
      }
      return result2;
    });
  },
});

// node_modules/underscore/modules/omit.js
var omit_default;
var init_omit = __esm({
  'node_modules/underscore/modules/omit.js'() {
    init_restArguments();
    init_isFunction();
    init_negate();
    init_map();
    init_flatten();
    init_contains();
    init_pick();
    omit_default = restArguments(function (obj, keys2) {
      var iteratee2 = keys2[0],
        context;
      if (isFunction_default(iteratee2)) {
        iteratee2 = negate(iteratee2);
        if (keys2.length > 1) context = keys2[1];
      } else {
        keys2 = map(flatten(keys2, false, false), String);
        iteratee2 = function (value, key) {
          return !contains(keys2, key);
        };
      }
      return pick_default(obj, iteratee2, context);
    });
  },
});

// node_modules/underscore/modules/initial.js
function initial(array, n, guard) {
  return slice.call(
    array,
    0,
    Math.max(0, array.length - (n == null || guard ? 1 : n))
  );
}
var init_initial = __esm({
  'node_modules/underscore/modules/initial.js'() {
    init_setup();
  },
});

// node_modules/underscore/modules/first.js
function first(array, n, guard) {
  if (array == null || array.length < 1)
    return n == null || guard ? void 0 : [];
  if (n == null || guard) return array[0];
  return initial(array, array.length - n);
}
var init_first = __esm({
  'node_modules/underscore/modules/first.js'() {
    init_initial();
  },
});

// node_modules/underscore/modules/rest.js
function rest(array, n, guard) {
  return slice.call(array, n == null || guard ? 1 : n);
}
var init_rest = __esm({
  'node_modules/underscore/modules/rest.js'() {
    init_setup();
  },
});

// node_modules/underscore/modules/last.js
function last(array, n, guard) {
  if (array == null || array.length < 1)
    return n == null || guard ? void 0 : [];
  if (n == null || guard) return array[array.length - 1];
  return rest(array, Math.max(0, array.length - n));
}
var init_last = __esm({
  'node_modules/underscore/modules/last.js'() {
    init_rest();
  },
});

// node_modules/underscore/modules/compact.js
function compact(array) {
  return filter(array, Boolean);
}
var init_compact = __esm({
  'node_modules/underscore/modules/compact.js'() {
    init_filter();
  },
});

// node_modules/underscore/modules/flatten.js
function flatten2(array, depth) {
  return flatten(array, depth, false);
}
var init_flatten2 = __esm({
  'node_modules/underscore/modules/flatten.js'() {
    init_flatten();
  },
});

// node_modules/underscore/modules/difference.js
var difference_default;
var init_difference = __esm({
  'node_modules/underscore/modules/difference.js'() {
    init_restArguments();
    init_flatten();
    init_filter();
    init_contains();
    difference_default = restArguments(function (array, rest2) {
      rest2 = flatten(rest2, true, true);
      return filter(array, function (value) {
        return !contains(rest2, value);
      });
    });
  },
});

// node_modules/underscore/modules/without.js
var without_default;
var init_without = __esm({
  'node_modules/underscore/modules/without.js'() {
    init_restArguments();
    init_difference();
    without_default = restArguments(function (array, otherArrays) {
      return difference_default(array, otherArrays);
    });
  },
});

// node_modules/underscore/modules/uniq.js
function uniq(array, isSorted, iteratee2, context) {
  if (!isBoolean(isSorted)) {
    context = iteratee2;
    iteratee2 = isSorted;
    isSorted = false;
  }
  if (iteratee2 != null) iteratee2 = cb(iteratee2, context);
  var result2 = [];
  var seen = [];
  for (var i = 0, length = getLength_default(array); i < length; i++) {
    var value = array[i],
      computed = iteratee2 ? iteratee2(value, i, array) : value;
    if (isSorted && !iteratee2) {
      if (!i || seen !== computed) result2.push(value);
      seen = computed;
    } else if (iteratee2) {
      if (!contains(seen, computed)) {
        seen.push(computed);
        result2.push(value);
      }
    } else if (!contains(result2, value)) {
      result2.push(value);
    }
  }
  return result2;
}
var init_uniq = __esm({
  'node_modules/underscore/modules/uniq.js'() {
    init_isBoolean();
    init_cb();
    init_getLength();
    init_contains();
  },
});

// node_modules/underscore/modules/union.js
var union_default;
var init_union = __esm({
  'node_modules/underscore/modules/union.js'() {
    init_restArguments();
    init_uniq();
    init_flatten();
    union_default = restArguments(function (arrays) {
      return uniq(flatten(arrays, true, true));
    });
  },
});

// node_modules/underscore/modules/intersection.js
function intersection(array) {
  var result2 = [];
  var argsLength = arguments.length;
  for (var i = 0, length = getLength_default(array); i < length; i++) {
    var item = array[i];
    if (contains(result2, item)) continue;
    var j;
    for (j = 1; j < argsLength; j++) {
      if (!contains(arguments[j], item)) break;
    }
    if (j === argsLength) result2.push(item);
  }
  return result2;
}
var init_intersection = __esm({
  'node_modules/underscore/modules/intersection.js'() {
    init_getLength();
    init_contains();
  },
});

// node_modules/underscore/modules/unzip.js
function unzip(array) {
  var length = (array && max(array, getLength_default).length) || 0;
  var result2 = Array(length);
  for (var index = 0; index < length; index++) {
    result2[index] = pluck(array, index);
  }
  return result2;
}
var init_unzip = __esm({
  'node_modules/underscore/modules/unzip.js'() {
    init_max();
    init_getLength();
    init_pluck();
  },
});

// node_modules/underscore/modules/zip.js
var zip_default;
var init_zip = __esm({
  'node_modules/underscore/modules/zip.js'() {
    init_restArguments();
    init_unzip();
    zip_default = restArguments(unzip);
  },
});

// node_modules/underscore/modules/object.js
function object(list, values2) {
  var result2 = {};
  for (var i = 0, length = getLength_default(list); i < length; i++) {
    if (values2) {
      result2[list[i]] = values2[i];
    } else {
      result2[list[i][0]] = list[i][1];
    }
  }
  return result2;
}
var init_object = __esm({
  'node_modules/underscore/modules/object.js'() {
    init_getLength();
  },
});

// node_modules/underscore/modules/range.js
function range(start, stop, step) {
  if (stop == null) {
    stop = start || 0;
    start = 0;
  }
  if (!step) {
    step = stop < start ? -1 : 1;
  }
  var length = Math.max(Math.ceil((stop - start) / step), 0);
  var range2 = Array(length);
  for (var idx = 0; idx < length; idx++, start += step) {
    range2[idx] = start;
  }
  return range2;
}
var init_range = __esm({
  'node_modules/underscore/modules/range.js'() {},
});

// node_modules/underscore/modules/chunk.js
function chunk(array, count) {
  if (count == null || count < 1) return [];
  var result2 = [];
  var i = 0,
    length = array.length;
  while (i < length) {
    result2.push(slice.call(array, i, (i += count)));
  }
  return result2;
}
var init_chunk = __esm({
  'node_modules/underscore/modules/chunk.js'() {
    init_setup();
  },
});

// node_modules/underscore/modules/_chainResult.js
function chainResult(instance, obj) {
  return instance._chain ? _7(obj).chain() : obj;
}
var init_chainResult = __esm({
  'node_modules/underscore/modules/_chainResult.js'() {
    init_underscore();
  },
});

// node_modules/underscore/modules/mixin.js
function mixin(obj) {
  each(functions(obj), function (name) {
    var func = (_7[name] = obj[name]);
    _7.prototype[name] = function () {
      var args = [this._wrapped];
      push.apply(args, arguments);
      return chainResult(this, func.apply(_7, args));
    };
  });
  return _7;
}
var init_mixin = __esm({
  'node_modules/underscore/modules/mixin.js'() {
    init_underscore();
    init_each();
    init_functions();
    init_setup();
    init_chainResult();
  },
});

// node_modules/underscore/modules/underscore-array-methods.js
var underscore_array_methods_default;
var init_underscore_array_methods = __esm({
  'node_modules/underscore/modules/underscore-array-methods.js'() {
    init_underscore();
    init_each();
    init_setup();
    init_chainResult();
    each(
      ['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'],
      function (name) {
        var method = ArrayProto[name];
        _7.prototype[name] = function () {
          var obj = this._wrapped;
          if (obj != null) {
            method.apply(obj, arguments);
            if ((name === 'shift' || name === 'splice') && obj.length === 0) {
              delete obj[0];
            }
          }
          return chainResult(this, obj);
        };
      }
    );
    each(['concat', 'join', 'slice'], function (name) {
      var method = ArrayProto[name];
      _7.prototype[name] = function () {
        var obj = this._wrapped;
        if (obj != null) obj = method.apply(obj, arguments);
        return chainResult(this, obj);
      };
    });
    underscore_array_methods_default = _7;
  },
});

// node_modules/underscore/modules/index.js
var modules_exports = {};
__export(modules_exports, {
  VERSION: () => VERSION,
  after: () => after,
  all: () => every,
  allKeys: () => allKeys,
  any: () => some,
  assign: () => extendOwn_default,
  before: () => before,
  bind: () => bind_default,
  bindAll: () => bindAll_default,
  chain: () => chain,
  chunk: () => chunk,
  clone: () => clone,
  collect: () => map,
  compact: () => compact,
  compose: () => compose,
  constant: () => constant,
  contains: () => contains,
  countBy: () => countBy_default,
  create: () => create,
  debounce: () => debounce,
  default: () => underscore_array_methods_default,
  defaults: () => defaults_default,
  defer: () => defer_default,
  delay: () => delay_default,
  detect: () => find,
  difference: () => difference_default,
  drop: () => rest,
  each: () => each,
  escape: () => escape_default,
  every: () => every,
  extend: () => extend_default,
  extendOwn: () => extendOwn_default,
  filter: () => filter,
  find: () => find,
  findIndex: () => findIndex_default,
  findKey: () => findKey,
  findLastIndex: () => findLastIndex_default,
  findWhere: () => findWhere,
  first: () => first,
  flatten: () => flatten2,
  foldl: () => reduce_default,
  foldr: () => reduceRight_default,
  forEach: () => each,
  functions: () => functions,
  get: () => get,
  groupBy: () => groupBy_default,
  has: () => has3,
  head: () => first,
  identity: () => identity,
  include: () => contains,
  includes: () => contains,
  indexBy: () => indexBy_default,
  indexOf: () => indexOf_default,
  initial: () => initial,
  inject: () => reduce_default,
  intersection: () => intersection,
  invert: () => invert,
  invoke: () => invoke_default,
  isArguments: () => isArguments_default,
  isArray: () => isArray_default,
  isArrayBuffer: () => isArrayBuffer_default,
  isBoolean: () => isBoolean,
  isDataView: () => isDataView_default,
  isDate: () => isDate_default,
  isElement: () => isElement,
  isEmpty: () => isEmpty,
  isEqual: () => isEqual,
  isError: () => isError_default,
  isFinite: () => isFinite2,
  isFunction: () => isFunction_default,
  isMap: () => isMap_default,
  isMatch: () => isMatch,
  isNaN: () => isNaN2,
  isNull: () => isNull,
  isNumber: () => isNumber_default,
  isObject: () => isObject3,
  isRegExp: () => isRegExp_default,
  isSet: () => isSet_default,
  isString: () => isString_default,
  isSymbol: () => isSymbol_default,
  isTypedArray: () => isTypedArray_default,
  isUndefined: () => isUndefined,
  isWeakMap: () => isWeakMap_default,
  isWeakSet: () => isWeakSet_default,
  iteratee: () => iteratee,
  keys: () => keys,
  last: () => last,
  lastIndexOf: () => lastIndexOf_default,
  map: () => map,
  mapObject: () => mapObject2,
  matcher: () => matcher,
  matches: () => matcher,
  max: () => max,
  memoize: () => memoize,
  methods: () => functions,
  min: () => min,
  mixin: () => mixin,
  negate: () => negate,
  noop: () => noop,
  now: () => now_default,
  object: () => object,
  omit: () => omit_default,
  once: () => once_default,
  pairs: () => pairs,
  partial: () => partial_default,
  partition: () => partition_default,
  pick: () => pick_default,
  pluck: () => pluck,
  property: () => property,
  propertyOf: () => propertyOf,
  random: () => random,
  range: () => range,
  reduce: () => reduce_default,
  reduceRight: () => reduceRight_default,
  reject: () => reject,
  rest: () => rest,
  restArguments: () => restArguments,
  result: () => result,
  sample: () => sample,
  select: () => filter,
  shuffle: () => shuffle,
  size: () => size,
  some: () => some,
  sortBy: () => sortBy,
  sortedIndex: () => sortedIndex,
  tail: () => rest,
  take: () => first,
  tap: () => tap,
  template: () => template,
  templateSettings: () => templateSettings_default,
  throttle: () => throttle,
  times: () => times,
  toArray: () => toArray,
  toPath: () => toPath,
  transpose: () => unzip,
  unescape: () => unescape_default,
  union: () => union_default,
  uniq: () => uniq,
  unique: () => uniq,
  uniqueId: () => uniqueId,
  unzip: () => unzip,
  values: () => values,
  where: () => where,
  without: () => without_default,
  wrap: () => wrap,
  zip: () => zip_default,
});
var init_modules = __esm({
  'node_modules/underscore/modules/index.js'() {
    init_setup();
    init_restArguments();
    init_isObject();
    init_isNull();
    init_isUndefined();
    init_isBoolean();
    init_isElement();
    init_isString();
    init_isNumber();
    init_isDate();
    init_isRegExp();
    init_isError();
    init_isSymbol();
    init_isArrayBuffer();
    init_isDataView();
    init_isArray();
    init_isFunction();
    init_isArguments();
    init_isFinite();
    init_isNaN();
    init_isTypedArray();
    init_isEmpty();
    init_isMatch();
    init_isEqual();
    init_isMap();
    init_isWeakMap();
    init_isSet();
    init_isWeakSet();
    init_keys();
    init_allKeys();
    init_values();
    init_pairs();
    init_invert();
    init_functions();
    init_extend();
    init_extendOwn();
    init_defaults();
    init_create();
    init_clone();
    init_tap();
    init_get();
    init_has2();
    init_mapObject();
    init_identity();
    init_constant();
    init_noop();
    init_toPath();
    init_property();
    init_propertyOf();
    init_matcher();
    init_times();
    init_random();
    init_now();
    init_escape();
    init_unescape();
    init_templateSettings();
    init_template();
    init_result();
    init_uniqueId();
    init_chain();
    init_iteratee();
    init_partial();
    init_bind();
    init_bindAll();
    init_memoize();
    init_delay();
    init_defer();
    init_throttle();
    init_debounce();
    init_wrap();
    init_negate();
    init_compose();
    init_after();
    init_before();
    init_once();
    init_findKey();
    init_findIndex();
    init_findLastIndex();
    init_sortedIndex();
    init_indexOf();
    init_lastIndexOf();
    init_find();
    init_findWhere();
    init_each();
    init_map();
    init_reduce();
    init_reduceRight();
    init_filter();
    init_reject();
    init_every();
    init_some();
    init_contains();
    init_invoke();
    init_pluck();
    init_where();
    init_max();
    init_min();
    init_shuffle();
    init_sample();
    init_sortBy();
    init_groupBy();
    init_indexBy();
    init_countBy();
    init_partition();
    init_toArray();
    init_size();
    init_pick();
    init_omit();
    init_first();
    init_initial();
    init_last();
    init_rest();
    init_compact();
    init_flatten2();
    init_without();
    init_uniq();
    init_union();
    init_intersection();
    init_difference();
    init_unzip();
    init_zip();
    init_object();
    init_range();
    init_chunk();
    init_mixin();
    init_underscore_array_methods();
  },
});

// node_modules/underscore/modules/index-default.js
var _8, index_default_default;
var init_index_default = __esm({
  'node_modules/underscore/modules/index-default.js'() {
    init_modules();
    init_modules();
    _8 = mixin(modules_exports);
    _8._ = _8;
    index_default_default = _8;
  },
});

// node_modules/underscore/modules/index-all.js
var index_all_exports = {};
__export(index_all_exports, {
  VERSION: () => VERSION,
  after: () => after,
  all: () => every,
  allKeys: () => allKeys,
  any: () => some,
  assign: () => extendOwn_default,
  before: () => before,
  bind: () => bind_default,
  bindAll: () => bindAll_default,
  chain: () => chain,
  chunk: () => chunk,
  clone: () => clone,
  collect: () => map,
  compact: () => compact,
  compose: () => compose,
  constant: () => constant,
  contains: () => contains,
  countBy: () => countBy_default,
  create: () => create,
  debounce: () => debounce,
  default: () => index_default_default,
  defaults: () => defaults_default,
  defer: () => defer_default,
  delay: () => delay_default,
  detect: () => find,
  difference: () => difference_default,
  drop: () => rest,
  each: () => each,
  escape: () => escape_default,
  every: () => every,
  extend: () => extend_default,
  extendOwn: () => extendOwn_default,
  filter: () => filter,
  find: () => find,
  findIndex: () => findIndex_default,
  findKey: () => findKey,
  findLastIndex: () => findLastIndex_default,
  findWhere: () => findWhere,
  first: () => first,
  flatten: () => flatten2,
  foldl: () => reduce_default,
  foldr: () => reduceRight_default,
  forEach: () => each,
  functions: () => functions,
  get: () => get,
  groupBy: () => groupBy_default,
  has: () => has3,
  head: () => first,
  identity: () => identity,
  include: () => contains,
  includes: () => contains,
  indexBy: () => indexBy_default,
  indexOf: () => indexOf_default,
  initial: () => initial,
  inject: () => reduce_default,
  intersection: () => intersection,
  invert: () => invert,
  invoke: () => invoke_default,
  isArguments: () => isArguments_default,
  isArray: () => isArray_default,
  isArrayBuffer: () => isArrayBuffer_default,
  isBoolean: () => isBoolean,
  isDataView: () => isDataView_default,
  isDate: () => isDate_default,
  isElement: () => isElement,
  isEmpty: () => isEmpty,
  isEqual: () => isEqual,
  isError: () => isError_default,
  isFinite: () => isFinite2,
  isFunction: () => isFunction_default,
  isMap: () => isMap_default,
  isMatch: () => isMatch,
  isNaN: () => isNaN2,
  isNull: () => isNull,
  isNumber: () => isNumber_default,
  isObject: () => isObject3,
  isRegExp: () => isRegExp_default,
  isSet: () => isSet_default,
  isString: () => isString_default,
  isSymbol: () => isSymbol_default,
  isTypedArray: () => isTypedArray_default,
  isUndefined: () => isUndefined,
  isWeakMap: () => isWeakMap_default,
  isWeakSet: () => isWeakSet_default,
  iteratee: () => iteratee,
  keys: () => keys,
  last: () => last,
  lastIndexOf: () => lastIndexOf_default,
  map: () => map,
  mapObject: () => mapObject2,
  matcher: () => matcher,
  matches: () => matcher,
  max: () => max,
  memoize: () => memoize,
  methods: () => functions,
  min: () => min,
  mixin: () => mixin,
  negate: () => negate,
  noop: () => noop,
  now: () => now_default,
  object: () => object,
  omit: () => omit_default,
  once: () => once_default,
  pairs: () => pairs,
  partial: () => partial_default,
  partition: () => partition_default,
  pick: () => pick_default,
  pluck: () => pluck,
  property: () => property,
  propertyOf: () => propertyOf,
  random: () => random,
  range: () => range,
  reduce: () => reduce_default,
  reduceRight: () => reduceRight_default,
  reject: () => reject,
  rest: () => rest,
  restArguments: () => restArguments,
  result: () => result,
  sample: () => sample,
  select: () => filter,
  shuffle: () => shuffle,
  size: () => size,
  some: () => some,
  sortBy: () => sortBy,
  sortedIndex: () => sortedIndex,
  tail: () => rest,
  take: () => first,
  tap: () => tap,
  template: () => template,
  templateSettings: () => templateSettings_default,
  throttle: () => throttle,
  times: () => times,
  toArray: () => toArray,
  toPath: () => toPath,
  transpose: () => unzip,
  unescape: () => unescape_default,
  union: () => union_default,
  uniq: () => uniq,
  unique: () => uniq,
  uniqueId: () => uniqueId,
  unzip: () => unzip,
  values: () => values,
  where: () => where,
  without: () => without_default,
  wrap: () => wrap,
  zip: () => zip_default,
});
var init_index_all = __esm({
  'node_modules/underscore/modules/index-all.js'() {
    init_index_default();
    init_modules();
  },
});

// node_modules/country-data/data/regions.js
var require_regions = __commonJS({
  'node_modules/country-data/data/regions.js'(exports, module) {
    'use strict';
    var regions = {};
    regions.centralAsia = {
      name: 'Central Asia',
      countries: [
        // source is http://en.wikipedia.org/wiki/Central_Asia
        'KZ',
        // Kazakhstan
        'KG',
        // Kyrgyzstan
        'TJ',
        // Tajikistan
        'TM',
        // Turkmenistan
        'UZ',
        // Uzbekistan
      ],
    };
    regions.southernAsia = {
      name: 'Southern Asia',
      countries: [
        // source is http://en.wikipedia.org/wiki/South_Asia
        'AF',
        // Afghanistan
        'BD',
        // Bangladesh
        'BT',
        // Bhutan
        'IO',
        // British Indian Ocean Territory
        'IN',
        // India
        'IR',
        // Iran
        'MV',
        // Maldives
        'NP',
        // Nepal
        'PK',
        // Pakistan
        'LK',
        // Sri Lanka
      ],
    };
    regions.southeastAsia = {
      name: 'Southeast Asia',
      countries: [
        // source is http://en.wikipedia.org/wiki/Southeast_Asia
        'BN',
        // Brunei
        'KH',
        // Cambodia
        'CX',
        // Christmas Island
        'CC',
        // Cocos (Keeling) Islands
        'TL',
        // East Timor
        'ID',
        // Indonesia
        'LA',
        // Laos
        'MY',
        // Malaysia
        'MM',
        // Myanmar (Burma)
        'PH',
        // Philippines
        'SG',
        // Singapore
        'TH',
        // Thailand
        'VN',
        // Vietnam
      ],
    };
    regions.eastAsia = {
      name: 'East Asia',
      countries: [
        // source is http://en.wikipedia.org/wiki/East_Asia
        'CN',
        // China
        'HK',
        // Hong Kong
        'JP',
        // Japan
        'KP',
        // North Korea
        'KR',
        // South Korea
        'MO',
        // Macao
        'MN',
        // Mongolia
        'TW',
        // Taiwan
      ],
    };
    regions.westernAsia = {
      name: 'Western Asia',
      countries: [
        // source is http://en.wikipedia.org/wiki/Western_Asia
        'AM',
        // Armenia
        'AZ',
        // Azerbaijan
        'BH',
        // Bahrain
        'IQ',
        // Iraq
        'IL',
        // Israel
        'JO',
        // Jordan
        'KW',
        // Kuwait
        'LB',
        // Lebanon
        'OM',
        // Oman
        'PS',
        // Palestinian territories
        'QA',
        // Qatar
        'SA',
        // Saudi Arabia
        'SY',
        // Syria
        'TR',
        // Turkey
        'AE',
        // United Arab Emirates
        'YE',
        // Yemen
      ],
    };
    regions.centralAfrica = {
      name: 'Central Aftrica',
      countries: [
        // source is http://en.wikipedia.org/wiki/Central_Africa
        'AO',
        // Angola
        'CM',
        // Cameroon
        'CF',
        // Central African Republic
        'TD',
        // Chad
        'CG',
        // Republic of the Congo
        'CD',
        // Democratic Republic of the Congo
        'GQ',
        // Equatorial Guinea
        'GA',
        // Gabon
        'ST',
        // São Tomé and Príncipe
      ],
    };
    regions.northAfrica = {
      name: 'North Africa',
      countries: [
        // source is http://en.wikipedia.org/wiki/North_Africa
        'DZ',
        // Algeria
        'EG',
        // Egypt
        'LY',
        // Libya
        'MA',
        // Morocco
        'SD',
        // Sudan
        'TN',
        // Tunisia
        'EH',
        // Western Sahara
      ],
    };
    regions.southernAfrica = {
      name: 'Southern Africa',
      countries: [
        // source is http://en.wikipedia.org/wiki/Southern_Africa
        'BW',
        // Botswana
        'LS',
        // Lesotho
        'NA',
        // Namibia
        'ZA',
        // South Africa
        'SZ',
        // Swaziland
      ],
    };
    regions.eastAfrica = {
      name: 'East Africa',
      countries: [
        // source is http://en.wikipedia.org/wiki/East_Africa
        'BI',
        // Burundi
        'KM',
        // Comoros
        'DJ',
        // Djibouti
        'ER',
        // Eritrea
        'ET',
        // Ethiopia
        'KE',
        // Kenya
        'MG',
        // Madagascar
        'MW',
        // Malawi
        'MU',
        // Mauritius
        'YT',
        // Mayotte (France)
        'MZ',
        // Mozambique
        'RE',
        // Réunion (France)
        'RW',
        // Rwanda
        'SC',
        // Seychelles
        'SO',
        // Somalia
        'SS',
        // South Sudan
        'TZ',
        // Tanzania
        'UG',
        // Uganda
        'ZM',
        // Zambia
        'ZW',
        // Zimbabwe
      ],
    };
    regions.westAfrica = {
      name: 'West Africa',
      countries: [
        // source is http://en.wikipedia.org/wiki/West_Africa
        'BJ',
        // Benin
        'BF',
        // Burkina Faso
        'CV',
        // Cabo Verde
        'CI',
        // Côte d'Ivoire
        'GM',
        // Gambia
        'GH',
        // Ghana
        'GN',
        // Guinea
        'GW',
        // Guinea-Bissau
        'LR',
        // Liberia
        'ML',
        // Mali
        'MR',
        // Mauritania
        'NE',
        // Niger
        'NG',
        // Nigeria
        'SH',
        // Saint Helena, Ascension and Tristan da Cunha (United Kingdom)
        'SN',
        // Senegal
        'SL',
        // Sierra Leone
        'TG',
        // Togo
      ],
    };
    regions.centralAmerica = {
      name: 'Central America',
      countries: [
        // source is http://en.wikipedia.org/wiki/Central_America
        'BZ',
        // Belize
        'CR',
        // Costa Rica
        'SV',
        // El Salvador
        'GT',
        // Guatemala
        'HN',
        // Honduras
        'NI',
        // Nicaragua
        'PA',
        // Panama
      ],
    };
    regions.northernAmerica = {
      name: 'Northern America',
      countries: [
        // source is http://en.wikipedia.org/wiki/Northern_America
        'BM',
        // Bermuda
        'CA',
        // Canada
        'GL',
        // Greenland
        'MX',
        // Mexico
        'PM',
        // Saint Pierre and Miquelon
        'US',
        // United States
      ],
    };
    regions.caribbean = {
      name: 'Caribbean',
      countries: [
        // source is http://en.wikipedia.org/wiki/Caribbean
        'AI',
        // Anguilla
        'AG',
        // Antigua and Barbuda
        'AW',
        // Aruba
        'BS',
        // Bahamas
        'BB',
        // Barbados
        'BQ',
        // Bonaire, Sint Eustatius & Saba
        'VG',
        // British Virgin Islands
        'KY',
        // Cayman Islands
        'CU',
        // Cuba
        'CW',
        // Curaçao
        'DM',
        // Dominica
        'DO',
        // Dominican Republic
        'GD',
        // Grenada
        'GP',
        // Guadeloupe
        'HT',
        // Haiti
        'JM',
        // Jamaica
        'MQ',
        // Martinique
        'MS',
        // Montserrat
        'PR',
        // Puerto Rico
        'BL',
        // Saint Barthélemy
        'KN',
        // St. Kitts & Nevis
        'LC',
        // Saint Lucia
        'MF',
        // Saint Martin
        'VC',
        // Saint Vincent and the Grenadines
        'SX',
        // Sint Maarten
        'TT',
        // Trinidad and Tobago
        'TC',
        // Turks & Caicos
        'VI',
        // United States Virgin Islands
      ],
    };
    regions.southAmerica = {
      name: 'South America',
      countries: [
        // source is http://en.wikipedia.org/wiki/South_America
        'AR',
        // Argentina
        'BO',
        // Bolivia
        'BR',
        // Brazil
        'CL',
        // Chile
        'CO',
        // Colombia
        'EC',
        // Ecuador
        'FK',
        // Falkland Islands
        'GF',
        // French Guiana
        'GY',
        // Guyana
        'PY',
        // Paraguay
        'PE',
        // Peru
        'SR',
        // Suriname
        'UY',
        // Uruguay
        'VE',
        // Venezuela
      ],
    };
    regions.antartica = {
      name: 'Antartica',
      countries: [
        // source is http://en.wikipedia.org/wiki/Antarctica
        'AQ',
        // Antarctica
        'BV',
        // Bouvet Island
        'TF',
        // French Southern Territories
        'HM',
        // Heard Island and McDonald Islands
        'GS',
        // South Georgia and the South Sandwich Islands
      ],
    };
    regions.northernEurope = {
      name: 'Northern Europe',
      countries: [
        // source is http://en.wikipedia.org/wiki/Northern_Europe
        'AX',
        // Åland
        'DK',
        // Denmark
        'EE',
        // Estonia
        'FO',
        // Faroe Islands
        'FI',
        // Finland
        'GG',
        // Guernsey
        'IS',
        // Iceland
        'IE',
        // Republic of Ireland
        'JE',
        // Jersey (UK)
        'IM',
        // Isle of Man
        'LV',
        // Latvia
        'LT',
        // Lithuania
        'NO',
        // Norway
        'SJ',
        // Svalbard and Jan Mayen
        'SE',
        // Sweden
        'GB',
        // United Kingdom
      ],
    };
    regions.southernEurope = {
      name: 'Southern Europe',
      countries: [
        // source is http://en.wikipedia.org/wiki/Southern_Europe
        'AL',
        // Albania
        'AD',
        // Andorra
        'BA',
        // Bosnia and Herzegovina
        'HR',
        // Croatia
        'CY',
        // Cyprus
        'GI',
        // Gibraltar
        'GR',
        // Greece
        'IT',
        // Italy
        'MK',
        // Republic of Macedonia
        'VA',
        // Vatican City
        'MT',
        // Malta
        'ME',
        // Montenegro
        'PT',
        // Portugal
        'SM',
        // San Marino
        'RS',
        // Serbia
        'SI',
        // Slovenia
        'ES',
        // Spain
      ],
    };
    regions.easternEurope = {
      name: 'Eastern Europe',
      countries: [
        // source is http://en.wikipedia.org/wiki/Eastern_Europe
        'BY',
        // Belarus
        'BG',
        // Bulgaria
        'CZ',
        // Czech Republic
        'GE',
        // Georgia
        'HU',
        // Hungary
        'MD',
        // Moldova
        'PL',
        // Poland
        'RO',
        // Romania
        'RU',
        // Russia
        'SK',
        // Slovakia
        'UA',
        // Ukraine
      ],
    };
    regions.westernEurope = {
      name: 'Western Europe',
      countries: [
        // source is http://en.wikipedia.org/wiki/Western_Europe
        'AT',
        // Austria
        'BE',
        // Belgium
        'FR',
        // France
        'DE',
        // Germany
        'LI',
        // Liechtenstein
        'LU',
        // Luxembourg
        'MC',
        // Monaco
        'NL',
        // Netherlands
        'CH',
        // Switzerland
      ],
    };
    regions.australia = {
      name: 'Australia',
      countries: [
        // source is http://en.wikipedia.org/wiki/Oceania
        'AU',
        // Australia
        'NF',
        // Norfolk Island
        'NZ',
        // New Zealand
      ],
    };
    regions.melanesia = {
      name: 'Melanesia',
      countries: [
        // source is http://en.wikipedia.org/wiki/Oceania
        'FJ',
        // Fiji
        'NC',
        //  New Caledonia
        'PG',
        // Papua New Guinea
        'SB',
        // Solomon Islands
        'VU',
        // Vanuatu
      ],
    };
    regions.micronesia = {
      name: 'Micronesia',
      countries: [
        // source is http://en.wikipedia.org/wiki/Oceania
        'GU',
        // Guam
        'KI',
        // Kiribati
        'MH',
        // Marshall Islands
        'FM',
        // Micronesia, Fed. Sts.
        'NR',
        // Nauru
        'MP',
        // Northern Mariana Islands
        'PW',
        // Palau
        'UM',
        // United States Minor Outlying Islands
      ],
    };
    regions.polynesia = {
      name: 'Polynesia',
      countries: [
        // source is http://en.wikipedia.org/wiki/Oceania
        'AS',
        // American Samoa
        'CK',
        // Cook Islands
        'PF',
        // French Polynesia
        'NU',
        // Niue
        'PN',
        // Pitcairn Islands
        'WS',
        // Samoa
        'TK',
        // Tokelau
        'TO',
        // Tonga
        'TV',
        // Tuvalu
        'WF',
        // Wallis and Futuna
      ],
    };
    module.exports = regions;
  },
});

// node_modules/country-data/data/continents.js
var require_continents = __commonJS({
  'node_modules/country-data/data/continents.js'(exports, module) {
    'use strict';
    var _15 = (init_index_all(), __toCommonJS(index_all_exports));
    var regions = require_regions();
    var continents = {};
    continents.asia = {
      name: 'Asia',
      regions: [
        'centralAsia',
        'southernAsia',
        'southeastAsia',
        'eastAsia',
        'westernAsia',
      ],
      countries: _15
        .flatten([
          regions.centralAsia.countries,
          regions.southernAsia.countries,
          regions.southeastAsia.countries,
          regions.eastAsia.countries,
          regions.westernAsia.countries,
        ])
        .sort(),
    };
    continents.africa = {
      name: 'Africa',
      regions: [
        'centralAfrica',
        'northAfrica',
        'southernAfrica',
        'eastAfrica',
        'westAfrica',
      ],
      countries: _15
        .flatten([
          regions.centralAfrica.countries,
          regions.northAfrica.countries,
          regions.southernAfrica.countries,
          regions.eastAfrica.countries,
          regions.westAfrica.countries,
        ])
        .sort(),
    };
    continents.northAmerica = {
      name: 'North America',
      regions: ['centralAmerica', 'northernAmerica', 'caribbean'],
      countries: _15
        .flatten([
          regions.centralAmerica.countries,
          regions.northernAmerica.countries,
          regions.caribbean.countries,
        ])
        .sort(),
    };
    continents.southAmerica = {
      name: 'South America',
      regions: ['southAmerica'],
      countries: _15.flatten([regions.southAmerica.countries]).sort(),
    };
    continents.antartica = {
      name: 'Antartica',
      regions: ['antartica'],
      countries: _15.flatten([regions.antartica.countries]).sort(),
    };
    continents.europe = {
      name: 'Europe',
      regions: [
        'northernEurope',
        'southernEurope',
        'easternEurope',
        'westernEurope',
      ],
      countries: _15
        .flatten([
          regions.northernEurope.countries,
          regions.southernEurope.countries,
          regions.easternEurope.countries,
          regions.westernEurope.countries,
        ])
        .sort(),
    };
    continents.oceania = {
      name: 'Oceania',
      regions: ['australia', 'melanesia', 'micronesia', 'polynesia'],
      countries: _15
        .flatten([
          regions.australia.countries,
          regions.melanesia.countries,
          regions.micronesia.countries,
          regions.polynesia.countries,
        ])
        .sort(),
    };
    module.exports = continents;
  },
});

// node_modules/country-data/data/countries.json
var require_countries = __commonJS({
  'node_modules/country-data/data/countries.json'(exports, module) {
    module.exports = [
      {
        alpha2: 'AC',
        alpha3: '',
        countryCallingCodes: ['+247'],
        currencies: ['USD'],
        emoji: '',
        ioc: 'SHP',
        languages: ['eng'],
        name: 'Ascension Island',
        status: 'reserved',
      },
      {
        alpha2: 'AD',
        alpha3: 'AND',
        countryCallingCodes: ['+376'],
        currencies: ['EUR'],
        emoji: '\u{1F1E6}\u{1F1E9}',
        ioc: 'AND',
        languages: ['cat'],
        name: 'Andorra',
        status: 'assigned',
      },
      {
        alpha2: 'AE',
        alpha3: 'ARE',
        countryCallingCodes: ['+971'],
        currencies: ['AED'],
        emoji: '\u{1F1E6}\u{1F1EA}',
        ioc: 'UAE',
        languages: ['ara'],
        name: 'United Arab Emirates',
        status: 'assigned',
      },
      {
        alpha2: 'AF',
        alpha3: 'AFG',
        countryCallingCodes: ['+93'],
        currencies: ['AFN'],
        emoji: '\u{1F1E6}\u{1F1EB}',
        ioc: 'AFG',
        languages: ['pus'],
        name: 'Afghanistan',
        status: 'assigned',
      },
      {
        alpha2: 'AG',
        alpha3: 'ATG',
        countryCallingCodes: ['+1 268'],
        currencies: ['XCD'],
        emoji: '\u{1F1E6}\u{1F1EC}',
        ioc: 'ANT',
        languages: ['eng'],
        name: 'Antigua And Barbuda',
        status: 'assigned',
      },
      {
        alpha2: 'AI',
        alpha3: 'AIA',
        countryCallingCodes: ['+1 264'],
        currencies: ['XCD'],
        emoji: '\u{1F1E6}\u{1F1EE}',
        ioc: '',
        languages: ['eng'],
        name: 'Anguilla',
        status: 'assigned',
      },
      {
        alpha2: 'AI',
        alpha3: 'AFI',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'French Afar and Issas',
        status: 'deleted',
      },
      {
        alpha2: 'AL',
        alpha3: 'ALB',
        countryCallingCodes: ['+355'],
        currencies: ['ALL'],
        emoji: '\u{1F1E6}\u{1F1F1}',
        ioc: 'ALB',
        languages: ['sqi'],
        name: 'Albania',
        status: 'assigned',
      },
      {
        alpha2: 'AM',
        alpha3: 'ARM',
        countryCallingCodes: ['+374'],
        currencies: ['AMD'],
        emoji: '\u{1F1E6}\u{1F1F2}',
        ioc: 'ARM',
        languages: ['hye', 'rus'],
        name: 'Armenia',
        status: 'assigned',
      },
      {
        alpha2: 'AN',
        alpha3: 'ANT',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Netherlands Antilles',
        status: 'deleted',
      },
      {
        alpha2: 'AO',
        alpha3: 'AGO',
        countryCallingCodes: ['+244'],
        currencies: ['AOA'],
        emoji: '\u{1F1E6}\u{1F1F4}',
        ioc: 'ANG',
        languages: ['por'],
        name: 'Angola',
        status: 'assigned',
      },
      {
        alpha2: 'AQ',
        alpha3: 'ATA',
        countryCallingCodes: ['+672'],
        currencies: [],
        emoji: '\u{1F1E6}\u{1F1F6}',
        ioc: '',
        languages: [],
        name: 'Antarctica',
        status: 'assigned',
      },
      {
        alpha2: 'AR',
        alpha3: 'ARG',
        countryCallingCodes: ['+54'],
        currencies: ['ARS'],
        emoji: '\u{1F1E6}\u{1F1F7}',
        ioc: 'ARG',
        languages: ['spa'],
        name: 'Argentina',
        status: 'assigned',
      },
      {
        alpha2: 'AS',
        alpha3: 'ASM',
        countryCallingCodes: ['+1 684'],
        currencies: ['USD'],
        emoji: '\u{1F1E6}\u{1F1F8}',
        ioc: 'ASA',
        languages: ['eng', 'smo'],
        name: 'American Samoa',
        status: 'assigned',
      },
      {
        alpha2: 'AT',
        alpha3: 'AUT',
        countryCallingCodes: ['+43'],
        currencies: ['EUR'],
        emoji: '\u{1F1E6}\u{1F1F9}',
        ioc: 'AUT',
        languages: ['deu'],
        name: 'Austria',
        status: 'assigned',
      },
      {
        alpha2: 'AU',
        alpha3: 'AUS',
        countryCallingCodes: ['+61'],
        currencies: ['AUD'],
        emoji: '\u{1F1E6}\u{1F1FA}',
        ioc: 'AUS',
        languages: ['eng'],
        name: 'Australia',
        status: 'assigned',
      },
      {
        alpha2: 'AW',
        alpha3: 'ABW',
        countryCallingCodes: ['+297'],
        currencies: ['AWG'],
        emoji: '\u{1F1E6}\u{1F1FC}',
        ioc: 'ARU',
        languages: ['nld'],
        name: 'Aruba',
        status: 'assigned',
      },
      {
        alpha2: 'AX',
        alpha3: 'ALA',
        countryCallingCodes: ['+358'],
        currencies: ['EUR'],
        emoji: '\u{1F1E6}\u{1F1FD}',
        ioc: '',
        languages: ['swe'],
        name: '\xC5land Islands',
        status: 'assigned',
      },
      {
        alpha2: 'AZ',
        alpha3: 'AZE',
        countryCallingCodes: ['+994'],
        currencies: ['AZN'],
        emoji: '\u{1F1E6}\u{1F1FF}',
        ioc: 'AZE',
        languages: ['aze'],
        name: 'Azerbaijan',
        status: 'assigned',
      },
      {
        alpha2: 'BA',
        alpha3: 'BIH',
        countryCallingCodes: ['+387'],
        currencies: ['BAM'],
        emoji: '\u{1F1E7}\u{1F1E6}',
        ioc: 'BIH',
        languages: ['bos', 'cre', 'srp'],
        name: 'Bosnia & Herzegovina',
        status: 'assigned',
      },
      {
        alpha2: 'BB',
        alpha3: 'BRB',
        countryCallingCodes: ['+1 246'],
        currencies: ['BBD'],
        emoji: '\u{1F1E7}\u{1F1E7}',
        ioc: 'BAR',
        languages: ['eng'],
        name: 'Barbados',
        status: 'assigned',
      },
      {
        alpha2: 'BD',
        alpha3: 'BGD',
        countryCallingCodes: ['+880'],
        currencies: ['BDT'],
        emoji: '\u{1F1E7}\u{1F1E9}',
        ioc: 'BAN',
        languages: ['ben'],
        name: 'Bangladesh',
        status: 'assigned',
      },
      {
        alpha2: 'BE',
        alpha3: 'BEL',
        countryCallingCodes: ['+32'],
        currencies: ['EUR'],
        emoji: '\u{1F1E7}\u{1F1EA}',
        ioc: 'BEL',
        languages: ['nld', 'fra', 'deu'],
        name: 'Belgium',
        status: 'assigned',
      },
      {
        alpha2: 'BF',
        alpha3: 'BFA',
        countryCallingCodes: ['+226'],
        currencies: ['XOF'],
        emoji: '\u{1F1E7}\u{1F1EB}',
        ioc: 'BUR',
        languages: ['fra'],
        name: 'Burkina Faso',
        status: 'assigned',
      },
      {
        alpha2: 'BG',
        alpha3: 'BGR',
        countryCallingCodes: ['+359'],
        currencies: ['BGN'],
        emoji: '\u{1F1E7}\u{1F1EC}',
        ioc: 'BUL',
        languages: ['bul'],
        name: 'Bulgaria',
        status: 'assigned',
      },
      {
        alpha2: 'BH',
        alpha3: 'BHR',
        countryCallingCodes: ['+973'],
        currencies: ['BHD'],
        emoji: '\u{1F1E7}\u{1F1ED}',
        ioc: 'BRN',
        languages: ['ara'],
        name: 'Bahrain',
        status: 'assigned',
      },
      {
        alpha2: 'BI',
        alpha3: 'BDI',
        countryCallingCodes: ['+257'],
        currencies: ['BIF'],
        emoji: '\u{1F1E7}\u{1F1EE}',
        ioc: 'BDI',
        languages: ['fra'],
        name: 'Burundi',
        status: 'assigned',
      },
      {
        alpha2: 'BJ',
        alpha3: 'BEN',
        countryCallingCodes: ['+229'],
        currencies: ['XOF'],
        emoji: '\u{1F1E7}\u{1F1EF}',
        ioc: 'BEN',
        languages: ['fra'],
        name: 'Benin',
        status: 'assigned',
      },
      {
        alpha2: 'BL',
        alpha3: 'BLM',
        countryCallingCodes: ['+590'],
        currencies: ['EUR'],
        emoji: '\u{1F1E7}\u{1F1F1}',
        ioc: '',
        languages: ['fra'],
        name: 'Saint Barth\xE9lemy',
        status: 'assigned',
      },
      {
        alpha2: 'BM',
        alpha3: 'BMU',
        countryCallingCodes: ['+1 441'],
        currencies: ['BMD'],
        emoji: '\u{1F1E7}\u{1F1F2}',
        ioc: 'BER',
        languages: ['eng'],
        name: 'Bermuda',
        status: 'assigned',
      },
      {
        alpha2: 'BN',
        alpha3: 'BRN',
        countryCallingCodes: ['+673'],
        currencies: ['BND'],
        emoji: '\u{1F1E7}\u{1F1F3}',
        ioc: 'BRU',
        languages: ['msa', 'eng'],
        name: 'Brunei Darussalam',
        status: 'assigned',
      },
      {
        alpha2: 'BO',
        alpha3: 'BOL',
        countryCallingCodes: ['+591'],
        currencies: ['BOB', 'BOV'],
        emoji: '\u{1F1E7}\u{1F1F4}',
        ioc: 'BOL',
        languages: ['spa', 'aym', 'que'],
        name: 'Bolivia, Plurinational State Of',
        status: 'assigned',
      },
      {
        alpha2: 'BQ',
        alpha3: 'BES',
        countryCallingCodes: ['+599'],
        currencies: ['USD'],
        emoji: '\u{1F1E7}\u{1F1F6}',
        ioc: '',
        languages: ['nld'],
        name: 'Bonaire, Saint Eustatius And Saba',
        status: 'assigned',
      },
      {
        alpha2: 'BQ',
        alpha3: 'ATB',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'British Antarctic Territory',
        status: 'deleted',
      },
      {
        alpha2: 'BR',
        alpha3: 'BRA',
        countryCallingCodes: ['+55'],
        currencies: ['BRL'],
        emoji: '\u{1F1E7}\u{1F1F7}',
        ioc: 'BRA',
        languages: ['por'],
        name: 'Brazil',
        status: 'assigned',
      },
      {
        alpha2: 'BS',
        alpha3: 'BHS',
        countryCallingCodes: ['+1 242'],
        currencies: ['BSD'],
        emoji: '\u{1F1E7}\u{1F1F8}',
        ioc: 'BAH',
        languages: ['eng'],
        name: 'Bahamas',
        status: 'assigned',
      },
      {
        alpha2: 'BT',
        alpha3: 'BTN',
        countryCallingCodes: ['+975'],
        currencies: ['INR', 'BTN'],
        emoji: '\u{1F1E7}\u{1F1F9}',
        ioc: 'BHU',
        languages: ['dzo'],
        name: 'Bhutan',
        status: 'assigned',
      },
      {
        alpha2: 'BU',
        alpha3: 'BUR',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Burma',
        status: 'deleted',
      },
      {
        alpha2: 'BV',
        alpha3: 'BVT',
        countryCallingCodes: [],
        currencies: ['NOK'],
        emoji: '\u{1F1E7}\u{1F1FB}',
        ioc: '',
        languages: [],
        name: 'Bouvet Island',
        status: 'assigned',
      },
      {
        alpha2: 'BW',
        alpha3: 'BWA',
        countryCallingCodes: ['+267'],
        currencies: ['BWP'],
        emoji: '\u{1F1E7}\u{1F1FC}',
        ioc: 'BOT',
        languages: ['eng', 'tsn'],
        name: 'Botswana',
        status: 'assigned',
      },
      {
        alpha2: 'BY',
        alpha3: 'BLR',
        countryCallingCodes: ['+375'],
        currencies: ['BYR'],
        emoji: '\u{1F1E7}\u{1F1FE}',
        ioc: 'BLR',
        languages: ['bel', 'rus'],
        name: 'Belarus',
        status: 'assigned',
      },
      {
        alpha2: 'BY',
        alpha3: 'BYS',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Byelorussian SSR',
        status: 'deleted',
      },
      {
        alpha2: 'BZ',
        alpha3: 'BLZ',
        countryCallingCodes: ['+501'],
        currencies: ['BZD'],
        emoji: '\u{1F1E7}\u{1F1FF}',
        ioc: 'BIZ',
        languages: ['eng'],
        name: 'Belize',
        status: 'assigned',
      },
      {
        alpha2: 'CA',
        alpha3: 'CAN',
        countryCallingCodes: ['+1'],
        currencies: ['CAD'],
        emoji: '\u{1F1E8}\u{1F1E6}',
        ioc: 'CAN',
        languages: ['eng', 'fra'],
        name: 'Canada',
        status: 'assigned',
      },
      {
        alpha2: 'CC',
        alpha3: 'CCK',
        countryCallingCodes: ['+61'],
        currencies: ['AUD'],
        emoji: '\u{1F1E8}\u{1F1E8}',
        ioc: '',
        languages: ['eng'],
        name: 'Cocos (Keeling) Islands',
        status: 'assigned',
      },
      {
        alpha2: 'CD',
        alpha3: 'COD',
        countryCallingCodes: ['+243'],
        currencies: ['CDF'],
        emoji: '\u{1F1E8}\u{1F1E9}',
        ioc: 'COD',
        languages: ['fra', 'lin', 'kon', 'swa'],
        name: 'Democratic Republic Of Congo',
        status: 'assigned',
      },
      {
        alpha2: 'CF',
        alpha3: 'CAF',
        countryCallingCodes: ['+236'],
        currencies: ['XAF'],
        emoji: '\u{1F1E8}\u{1F1EB}',
        ioc: 'CAF',
        languages: ['fra', 'sag'],
        name: 'Central African Republic',
        status: 'assigned',
      },
      {
        alpha2: 'CG',
        alpha3: 'COG',
        countryCallingCodes: ['+242'],
        currencies: ['XAF'],
        emoji: '\u{1F1E8}\u{1F1EC}',
        ioc: 'CGO',
        languages: ['fra', 'lin'],
        name: 'Republic Of Congo',
        status: 'assigned',
      },
      {
        alpha2: 'CH',
        alpha3: 'CHE',
        countryCallingCodes: ['+41'],
        currencies: ['CHF', 'CHE', 'CHW'],
        emoji: '\u{1F1E8}\u{1F1ED}',
        ioc: 'SUI',
        languages: ['deu', 'fra', 'ita', 'roh'],
        name: 'Switzerland',
        status: 'assigned',
      },
      {
        alpha2: 'CI',
        alpha3: 'CIV',
        countryCallingCodes: ['+225'],
        currencies: ['XOF'],
        emoji: '\u{1F1E8}\u{1F1EE}',
        ioc: 'CIV',
        languages: ['fra'],
        name: "C\xF4te d'Ivoire",
        status: 'assigned',
      },
      {
        alpha2: 'CK',
        alpha3: 'COK',
        countryCallingCodes: ['+682'],
        currencies: ['NZD'],
        emoji: '\u{1F1E8}\u{1F1F0}',
        ioc: 'COK',
        languages: ['eng', 'mri'],
        name: 'Cook Islands',
        status: 'assigned',
      },
      {
        alpha2: 'CL',
        alpha3: 'CHL',
        countryCallingCodes: ['+56'],
        currencies: ['CLP', 'CLF'],
        emoji: '\u{1F1E8}\u{1F1F1}',
        ioc: 'CHI',
        languages: ['spa'],
        name: 'Chile',
        status: 'assigned',
      },
      {
        alpha2: 'CM',
        alpha3: 'CMR',
        countryCallingCodes: ['+237'],
        currencies: ['XAF'],
        emoji: '\u{1F1E8}\u{1F1F2}',
        ioc: 'CMR',
        languages: ['eng', 'fra'],
        name: 'Cameroon',
        status: 'assigned',
      },
      {
        alpha2: 'CN',
        alpha3: 'CHN',
        countryCallingCodes: ['+86'],
        currencies: ['CNY'],
        emoji: '\u{1F1E8}\u{1F1F3}',
        ioc: 'CHN',
        languages: ['zho'],
        name: 'China',
        status: 'assigned',
      },
      {
        alpha2: 'CO',
        alpha3: 'COL',
        countryCallingCodes: ['+57'],
        currencies: ['COP', 'COU'],
        emoji: '\u{1F1E8}\u{1F1F4}',
        ioc: 'COL',
        languages: ['spa'],
        name: 'Colombia',
        status: 'assigned',
      },
      {
        alpha2: 'CP',
        alpha3: '',
        countryCallingCodes: [],
        currencies: ['EUR'],
        emoji: '',
        ioc: '',
        languages: [],
        name: 'Clipperton Island',
        status: 'reserved',
      },
      {
        alpha2: 'CR',
        alpha3: 'CRI',
        countryCallingCodes: ['+506'],
        currencies: ['CRC'],
        emoji: '\u{1F1E8}\u{1F1F7}',
        ioc: 'CRC',
        languages: ['spa'],
        name: 'Costa Rica',
        status: 'assigned',
      },
      {
        alpha2: 'CS',
        alpha3: 'CSK',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Czechoslovakia',
        status: 'deleted',
      },
      {
        alpha2: 'CS',
        alpha3: 'SCG',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Serbia and Montenegro',
        status: 'deleted',
      },
      {
        alpha2: 'CT',
        alpha3: 'CTE',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Canton and Enderbury Islands',
        status: 'deleted',
      },
      {
        alpha2: 'CU',
        alpha3: 'CUB',
        countryCallingCodes: ['+53'],
        currencies: ['CUP', 'CUC'],
        emoji: '\u{1F1E8}\u{1F1FA}',
        ioc: 'CUB',
        languages: ['spa'],
        name: 'Cuba',
        status: 'assigned',
      },
      {
        alpha2: 'CV',
        alpha3: 'CPV',
        countryCallingCodes: ['+238'],
        currencies: ['CVE'],
        emoji: '\u{1F1E8}\u{1F1FB}',
        ioc: 'CPV',
        languages: ['por'],
        name: 'Cabo Verde',
        status: 'assigned',
      },
      {
        alpha2: 'CW',
        alpha3: 'CUW',
        countryCallingCodes: ['+599'],
        currencies: ['ANG'],
        emoji: '\u{1F1E8}\u{1F1FC}',
        ioc: '',
        languages: ['nld'],
        name: 'Curacao',
        status: 'assigned',
      },
      {
        alpha2: 'CX',
        alpha3: 'CXR',
        countryCallingCodes: ['+61'],
        currencies: ['AUD'],
        emoji: '\u{1F1E8}\u{1F1FD}',
        ioc: '',
        languages: ['eng'],
        name: 'Christmas Island',
        status: 'assigned',
      },
      {
        alpha2: 'CY',
        alpha3: 'CYP',
        countryCallingCodes: ['+357'],
        currencies: ['EUR'],
        emoji: '\u{1F1E8}\u{1F1FE}',
        ioc: 'CYP',
        languages: ['ell', 'tur'],
        name: 'Cyprus',
        status: 'assigned',
      },
      {
        alpha2: 'CZ',
        alpha3: 'CZE',
        countryCallingCodes: ['+420'],
        currencies: ['CZK'],
        emoji: '\u{1F1E8}\u{1F1FF}',
        ioc: 'CZE',
        languages: ['ces'],
        name: 'Czech Republic',
        status: 'assigned',
      },
      {
        alpha2: 'DD',
        alpha3: 'DDR',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'German Democratic Republic',
        status: 'deleted',
      },
      {
        alpha2: 'DE',
        alpha3: 'DEU',
        countryCallingCodes: ['+49'],
        currencies: ['EUR'],
        emoji: '\u{1F1E9}\u{1F1EA}',
        ioc: 'GER',
        languages: ['deu'],
        name: 'Germany',
        status: 'assigned',
      },
      {
        alpha2: 'DG',
        alpha3: '',
        countryCallingCodes: [],
        currencies: ['USD'],
        emoji: '',
        ioc: '',
        languages: [],
        name: 'Diego Garcia',
        status: 'reserved',
      },
      {
        alpha2: 'DJ',
        alpha3: 'DJI',
        countryCallingCodes: ['+253'],
        currencies: ['DJF'],
        emoji: '\u{1F1E9}\u{1F1EF}',
        ioc: 'DJI',
        languages: ['ara', 'fra'],
        name: 'Djibouti',
        status: 'assigned',
      },
      {
        alpha2: 'DK',
        alpha3: 'DNK',
        countryCallingCodes: ['+45'],
        currencies: ['DKK'],
        emoji: '\u{1F1E9}\u{1F1F0}',
        ioc: 'DEN',
        languages: ['dan'],
        name: 'Denmark',
        status: 'assigned',
      },
      {
        alpha2: 'DM',
        alpha3: 'DMA',
        countryCallingCodes: ['+1 767'],
        currencies: ['XCD'],
        emoji: '\u{1F1E9}\u{1F1F2}',
        ioc: 'DMA',
        languages: ['eng'],
        name: 'Dominica',
        status: 'assigned',
      },
      {
        alpha2: 'DO',
        alpha3: 'DOM',
        countryCallingCodes: ['+1 809', '+1 829', '+1 849'],
        currencies: ['DOP'],
        emoji: '\u{1F1E9}\u{1F1F4}',
        ioc: 'DOM',
        languages: ['spa'],
        name: 'Dominican Republic',
        status: 'assigned',
      },
      {
        alpha2: 'DY',
        alpha3: 'DHY',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Dahomey',
        status: 'deleted',
      },
      {
        alpha2: 'DZ',
        alpha3: 'DZA',
        countryCallingCodes: ['+213'],
        currencies: ['DZD'],
        emoji: '\u{1F1E9}\u{1F1FF}',
        ioc: 'ALG',
        languages: ['ara'],
        name: 'Algeria',
        status: 'assigned',
      },
      {
        alpha2: 'EA',
        alpha3: '',
        countryCallingCodes: [],
        currencies: ['EUR'],
        emoji: '',
        ioc: '',
        languages: [],
        name: 'Ceuta, Mulilla',
        status: 'reserved',
      },
      {
        alpha2: 'EC',
        alpha3: 'ECU',
        countryCallingCodes: ['+593'],
        currencies: ['USD'],
        emoji: '\u{1F1EA}\u{1F1E8}',
        ioc: 'ECU',
        languages: ['spa', 'que'],
        name: 'Ecuador',
        status: 'assigned',
      },
      {
        alpha2: 'EE',
        alpha3: 'EST',
        countryCallingCodes: ['+372'],
        currencies: ['EUR'],
        emoji: '\u{1F1EA}\u{1F1EA}',
        ioc: 'EST',
        languages: ['est'],
        name: 'Estonia',
        status: 'assigned',
      },
      {
        alpha2: 'EG',
        alpha3: 'EGY',
        countryCallingCodes: ['+20'],
        currencies: ['EGP'],
        emoji: '\u{1F1EA}\u{1F1EC}',
        ioc: 'EGY',
        languages: ['ara'],
        name: 'Egypt',
        status: 'assigned',
      },
      {
        alpha2: 'EH',
        alpha3: 'ESH',
        countryCallingCodes: ['+212'],
        currencies: ['MAD'],
        emoji: '\u{1F1EA}\u{1F1ED}',
        ioc: '',
        languages: [],
        name: 'Western Sahara',
        status: 'assigned',
      },
      {
        alpha2: 'ER',
        alpha3: 'ERI',
        countryCallingCodes: ['+291'],
        currencies: ['ERN'],
        emoji: '\u{1F1EA}\u{1F1F7}',
        ioc: 'ERI',
        languages: ['eng', 'ara', 'tir'],
        name: 'Eritrea',
        status: 'assigned',
      },
      {
        alpha2: 'ES',
        alpha3: 'ESP',
        countryCallingCodes: ['+34'],
        currencies: ['EUR'],
        emoji: '\u{1F1EA}\u{1F1F8}',
        ioc: 'ESP',
        languages: ['spa'],
        name: 'Spain',
        status: 'assigned',
      },
      {
        alpha2: 'ET',
        alpha3: 'ETH',
        countryCallingCodes: ['+251'],
        currencies: ['ETB'],
        emoji: '\u{1F1EA}\u{1F1F9}',
        ioc: 'ETH',
        languages: ['amh'],
        name: 'Ethiopia',
        status: 'assigned',
      },
      {
        alpha2: 'EU',
        alpha3: '',
        countryCallingCodes: ['+388'],
        currencies: ['EUR'],
        emoji: '\u{1F1EA}\u{1F1FA}',
        ioc: '',
        languages: [],
        name: 'European Union',
        status: 'reserved',
      },
      {
        alpha2: 'FI',
        alpha3: 'FIN',
        countryCallingCodes: ['+358'],
        currencies: ['EUR'],
        emoji: '\u{1F1EB}\u{1F1EE}',
        ioc: 'FIN',
        languages: ['fin', 'swe'],
        name: 'Finland',
        status: 'assigned',
      },
      {
        alpha2: 'FJ',
        alpha3: 'FJI',
        countryCallingCodes: ['+679'],
        currencies: ['FJD'],
        emoji: '\u{1F1EB}\u{1F1EF}',
        ioc: 'FIJ',
        languages: ['eng', 'fij'],
        name: 'Fiji',
        status: 'assigned',
      },
      {
        alpha2: 'FK',
        alpha3: 'FLK',
        countryCallingCodes: ['+500'],
        currencies: ['FKP'],
        emoji: '\u{1F1EB}\u{1F1F0}',
        ioc: '',
        languages: ['eng'],
        name: 'Falkland Islands',
        status: 'assigned',
      },
      {
        alpha2: 'FM',
        alpha3: 'FSM',
        countryCallingCodes: ['+691'],
        currencies: ['USD'],
        emoji: '\u{1F1EB}\u{1F1F2}',
        ioc: 'FSM',
        languages: ['eng'],
        name: 'Micronesia, Federated States Of',
        status: 'assigned',
      },
      {
        alpha2: 'FO',
        alpha3: 'FRO',
        countryCallingCodes: ['+298'],
        currencies: ['DKK'],
        emoji: '\u{1F1EB}\u{1F1F4}',
        ioc: 'FAI',
        languages: ['fao', 'dan'],
        name: 'Faroe Islands',
        status: 'assigned',
      },
      {
        alpha2: 'FQ',
        alpha3: 'ATF',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'French Southern and Antarctic Territories',
        status: 'deleted',
      },
      {
        alpha2: 'FR',
        alpha3: 'FRA',
        countryCallingCodes: ['+33'],
        currencies: ['EUR'],
        emoji: '\u{1F1EB}\u{1F1F7}',
        ioc: 'FRA',
        languages: ['fra'],
        name: 'France',
        status: 'assigned',
      },
      {
        alpha2: 'FX',
        alpha3: '',
        countryCallingCodes: ['+241'],
        currencies: ['EUR'],
        emoji: '',
        ioc: '',
        languages: ['fra'],
        name: 'France, Metropolitan',
        status: 'reserved',
      },
      {
        alpha2: 'GA',
        alpha3: 'GAB',
        countryCallingCodes: ['+241'],
        currencies: ['XAF'],
        emoji: '\u{1F1EC}\u{1F1E6}',
        ioc: 'GAB',
        languages: ['fra'],
        name: 'Gabon',
        status: 'assigned',
      },
      {
        alpha2: 'GB',
        alpha3: 'GBR',
        countryCallingCodes: ['+44'],
        currencies: ['GBP'],
        emoji: '\u{1F1EC}\u{1F1E7}',
        ioc: 'GBR',
        languages: ['eng', 'cor', 'gle', 'gla', 'cym'],
        name: 'United Kingdom',
        status: 'assigned',
      },
      {
        alpha2: 'GD',
        alpha3: 'GRD',
        countryCallingCodes: ['+473'],
        currencies: ['XCD'],
        emoji: '\u{1F1EC}\u{1F1E9}',
        ioc: 'GRN',
        languages: ['eng'],
        name: 'Grenada',
        status: 'assigned',
      },
      {
        alpha2: 'GE',
        alpha3: 'GEO',
        countryCallingCodes: ['+995'],
        currencies: ['GEL'],
        emoji: '\u{1F1EC}\u{1F1EA}',
        ioc: 'GEO',
        languages: ['kat'],
        name: 'Georgia',
        status: 'assigned',
      },
      {
        alpha2: 'GE',
        alpha3: 'GEL',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Gilbert and Ellice Islands',
        status: 'deleted',
      },
      {
        alpha2: 'GF',
        alpha3: 'GUF',
        countryCallingCodes: ['+594'],
        currencies: ['EUR'],
        emoji: '\u{1F1EC}\u{1F1EB}',
        ioc: '',
        languages: ['fra'],
        name: 'French Guiana',
        status: 'assigned',
      },
      {
        alpha2: 'GG',
        alpha3: 'GGY',
        countryCallingCodes: ['+44'],
        currencies: ['GBP'],
        emoji: '\u{1F1EC}\u{1F1EC}',
        ioc: 'GCI',
        languages: ['fra'],
        name: 'Guernsey',
        status: 'assigned',
      },
      {
        alpha2: 'GH',
        alpha3: 'GHA',
        countryCallingCodes: ['+233'],
        currencies: ['GHS'],
        emoji: '\u{1F1EC}\u{1F1ED}',
        ioc: 'GHA',
        languages: ['eng'],
        name: 'Ghana',
        status: 'assigned',
      },
      {
        alpha2: 'GI',
        alpha3: 'GIB',
        countryCallingCodes: ['+350'],
        currencies: ['GIP'],
        emoji: '\u{1F1EC}\u{1F1EE}',
        ioc: '',
        languages: ['eng'],
        name: 'Gibraltar',
        status: 'assigned',
      },
      {
        alpha2: 'GL',
        alpha3: 'GRL',
        countryCallingCodes: ['+299'],
        currencies: ['DKK'],
        emoji: '\u{1F1EC}\u{1F1F1}',
        ioc: '',
        languages: ['kal'],
        name: 'Greenland',
        status: 'assigned',
      },
      {
        alpha2: 'GM',
        alpha3: 'GMB',
        countryCallingCodes: ['+220'],
        currencies: ['GMD'],
        emoji: '\u{1F1EC}\u{1F1F2}',
        ioc: 'GAM',
        languages: ['eng'],
        name: 'Gambia',
        status: 'assigned',
      },
      {
        alpha2: 'GN',
        alpha3: 'GIN',
        countryCallingCodes: ['+224'],
        currencies: ['GNF'],
        emoji: '\u{1F1EC}\u{1F1F3}',
        ioc: 'GUI',
        languages: ['fra'],
        name: 'Guinea',
        status: 'assigned',
      },
      {
        alpha2: 'GP',
        alpha3: 'GLP',
        countryCallingCodes: ['+590'],
        currencies: ['EUR'],
        emoji: '\u{1F1EC}\u{1F1F5}',
        ioc: '',
        languages: ['fra'],
        name: 'Guadeloupe',
        status: 'assigned',
      },
      {
        alpha2: 'GQ',
        alpha3: 'GNQ',
        countryCallingCodes: ['+240'],
        currencies: ['XAF'],
        emoji: '\u{1F1EC}\u{1F1F6}',
        ioc: 'GEQ',
        languages: ['spa', 'fra', 'por'],
        name: 'Equatorial Guinea',
        status: 'assigned',
      },
      {
        alpha2: 'GR',
        alpha3: 'GRC',
        countryCallingCodes: ['+30'],
        currencies: ['EUR'],
        emoji: '\u{1F1EC}\u{1F1F7}',
        ioc: 'GRE',
        languages: ['ell'],
        name: 'Greece',
        status: 'assigned',
      },
      {
        alpha2: 'GS',
        alpha3: 'SGS',
        countryCallingCodes: [],
        currencies: ['GBP'],
        emoji: '\u{1F1EC}\u{1F1F8}',
        ioc: '',
        languages: ['eng'],
        name: 'South Georgia And The South Sandwich Islands',
        status: 'assigned',
      },
      {
        alpha2: 'GT',
        alpha3: 'GTM',
        countryCallingCodes: ['+502'],
        currencies: ['GTQ'],
        emoji: '\u{1F1EC}\u{1F1F9}',
        ioc: 'GUA',
        languages: ['spa'],
        name: 'Guatemala',
        status: 'assigned',
      },
      {
        alpha2: 'GU',
        alpha3: 'GUM',
        countryCallingCodes: ['+1 671'],
        currencies: ['USD'],
        emoji: '\u{1F1EC}\u{1F1FA}',
        ioc: 'GUM',
        languages: ['eng'],
        name: 'Guam',
        status: 'assigned',
      },
      {
        alpha2: 'GW',
        alpha3: 'GNB',
        countryCallingCodes: ['+245'],
        currencies: ['XOF'],
        emoji: '\u{1F1EC}\u{1F1FC}',
        ioc: 'GBS',
        languages: ['por'],
        name: 'Guinea-bissau',
        status: 'assigned',
      },
      {
        alpha2: 'GY',
        alpha3: 'GUY',
        countryCallingCodes: ['+592'],
        currencies: ['GYD'],
        emoji: '\u{1F1EC}\u{1F1FE}',
        ioc: 'GUY',
        languages: ['eng'],
        name: 'Guyana',
        status: 'assigned',
      },
      {
        alpha2: 'HK',
        alpha3: 'HKG',
        countryCallingCodes: ['+852'],
        currencies: ['HKD'],
        emoji: '\u{1F1ED}\u{1F1F0}',
        ioc: 'HKG',
        languages: ['zho', 'eng'],
        name: 'Hong Kong',
        status: 'assigned',
      },
      {
        alpha2: 'HM',
        alpha3: 'HMD',
        countryCallingCodes: [],
        currencies: ['AUD'],
        emoji: '\u{1F1ED}\u{1F1F2}',
        ioc: '',
        languages: [],
        name: 'Heard Island And McDonald Islands',
        status: 'assigned',
      },
      {
        alpha2: 'HN',
        alpha3: 'HND',
        countryCallingCodes: ['+504'],
        currencies: ['HNL'],
        emoji: '\u{1F1ED}\u{1F1F3}',
        ioc: 'HON',
        languages: ['spa'],
        name: 'Honduras',
        status: 'assigned',
      },
      {
        alpha2: 'HR',
        alpha3: 'HRV',
        countryCallingCodes: ['+385'],
        currencies: ['HRK'],
        emoji: '\u{1F1ED}\u{1F1F7}',
        ioc: 'CRO',
        languages: ['hrv'],
        name: 'Croatia',
        status: 'assigned',
      },
      {
        alpha2: 'HT',
        alpha3: 'HTI',
        countryCallingCodes: ['+509'],
        currencies: ['HTG', 'USD'],
        emoji: '\u{1F1ED}\u{1F1F9}',
        ioc: 'HAI',
        languages: ['fra', 'hat'],
        name: 'Haiti',
        status: 'assigned',
      },
      {
        alpha2: 'HU',
        alpha3: 'HUN',
        countryCallingCodes: ['+36'],
        currencies: ['HUF'],
        emoji: '\u{1F1ED}\u{1F1FA}',
        ioc: 'HUN',
        languages: ['hun'],
        name: 'Hungary',
        status: 'assigned',
      },
      {
        alpha2: 'HV',
        alpha3: 'HVO',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Upper Volta',
        status: 'deleted',
      },
      {
        alpha2: 'IC',
        alpha3: '',
        countryCallingCodes: [],
        currencies: ['EUR'],
        emoji: '',
        ioc: '',
        languages: [],
        name: 'Canary Islands',
        status: 'reserved',
      },
      {
        alpha2: 'ID',
        alpha3: 'IDN',
        countryCallingCodes: ['+62'],
        currencies: ['IDR'],
        emoji: '\u{1F1EE}\u{1F1E9}',
        ioc: 'INA',
        languages: ['ind'],
        name: 'Indonesia',
        status: 'assigned',
      },
      {
        alpha2: 'IE',
        alpha3: 'IRL',
        countryCallingCodes: ['+353'],
        currencies: ['EUR'],
        emoji: '\u{1F1EE}\u{1F1EA}',
        ioc: 'IRL',
        languages: ['eng', 'gle'],
        name: 'Ireland',
        status: 'assigned',
      },
      {
        alpha2: 'IL',
        alpha3: 'ISR',
        countryCallingCodes: ['+972'],
        currencies: ['ILS'],
        emoji: '\u{1F1EE}\u{1F1F1}',
        ioc: 'ISR',
        languages: ['heb', 'ara', 'eng'],
        name: 'Israel',
        status: 'assigned',
      },
      {
        alpha2: 'IM',
        alpha3: 'IMN',
        countryCallingCodes: ['+44'],
        currencies: ['GBP'],
        emoji: '\u{1F1EE}\u{1F1F2}',
        ioc: '',
        languages: ['eng', 'glv'],
        name: 'Isle Of Man',
        status: 'assigned',
      },
      {
        alpha2: 'IN',
        alpha3: 'IND',
        countryCallingCodes: ['+91'],
        currencies: ['INR'],
        emoji: '\u{1F1EE}\u{1F1F3}',
        ioc: 'IND',
        languages: ['eng', 'hin'],
        name: 'India',
        status: 'assigned',
      },
      {
        alpha2: 'IO',
        alpha3: 'IOT',
        countryCallingCodes: ['+246'],
        currencies: ['USD'],
        emoji: '\u{1F1EE}\u{1F1F4}',
        ioc: '',
        languages: ['eng'],
        name: 'British Indian Ocean Territory',
        status: 'assigned',
      },
      {
        alpha2: 'IQ',
        alpha3: 'IRQ',
        countryCallingCodes: ['+964'],
        currencies: ['IQD'],
        emoji: '\u{1F1EE}\u{1F1F6}',
        ioc: 'IRQ',
        languages: ['ara', 'kur'],
        name: 'Iraq',
        status: 'assigned',
      },
      {
        alpha2: 'IR',
        alpha3: 'IRN',
        countryCallingCodes: ['+98'],
        currencies: ['IRR'],
        emoji: '\u{1F1EE}\u{1F1F7}',
        ioc: 'IRI',
        languages: ['fas'],
        name: 'Iran, Islamic Republic Of',
        status: 'assigned',
      },
      {
        alpha2: 'IS',
        alpha3: 'ISL',
        countryCallingCodes: ['+354'],
        currencies: ['ISK'],
        emoji: '\u{1F1EE}\u{1F1F8}',
        ioc: 'ISL',
        languages: ['isl'],
        name: 'Iceland',
        status: 'assigned',
      },
      {
        alpha2: 'IT',
        alpha3: 'ITA',
        countryCallingCodes: ['+39'],
        currencies: ['EUR'],
        emoji: '\u{1F1EE}\u{1F1F9}',
        ioc: 'ITA',
        languages: ['ita'],
        name: 'Italy',
        status: 'assigned',
      },
      {
        alpha2: 'JE',
        alpha3: 'JEY',
        countryCallingCodes: ['+44'],
        currencies: ['GBP'],
        emoji: '\u{1F1EF}\u{1F1EA}',
        ioc: 'JCI',
        languages: ['eng', 'fra'],
        name: 'Jersey',
        status: 'assigned',
      },
      {
        alpha2: 'JM',
        alpha3: 'JAM',
        countryCallingCodes: ['+1 876'],
        currencies: ['JMD'],
        emoji: '\u{1F1EF}\u{1F1F2}',
        ioc: 'JAM',
        languages: ['eng'],
        name: 'Jamaica',
        status: 'assigned',
      },
      {
        alpha2: 'JO',
        alpha3: 'JOR',
        countryCallingCodes: ['+962'],
        currencies: ['JOD'],
        emoji: '\u{1F1EF}\u{1F1F4}',
        ioc: 'JOR',
        languages: ['ara'],
        name: 'Jordan',
        status: 'assigned',
      },
      {
        alpha2: 'JP',
        alpha3: 'JPN',
        countryCallingCodes: ['+81'],
        currencies: ['JPY'],
        emoji: '\u{1F1EF}\u{1F1F5}',
        ioc: 'JPN',
        languages: ['jpn'],
        name: 'Japan',
        status: 'assigned',
      },
      {
        alpha2: 'JT',
        alpha3: 'JTN',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Johnston Island',
        status: 'deleted',
      },
      {
        alpha2: 'KE',
        alpha3: 'KEN',
        countryCallingCodes: ['+254'],
        currencies: ['KES'],
        emoji: '\u{1F1F0}\u{1F1EA}',
        ioc: 'KEN',
        languages: ['eng', 'swa'],
        name: 'Kenya',
        status: 'assigned',
      },
      {
        alpha2: 'KG',
        alpha3: 'KGZ',
        countryCallingCodes: ['+996'],
        currencies: ['KGS'],
        emoji: '\u{1F1F0}\u{1F1EC}',
        ioc: 'KGZ',
        languages: ['rus'],
        name: 'Kyrgyzstan',
        status: 'assigned',
      },
      {
        alpha2: 'KH',
        alpha3: 'KHM',
        countryCallingCodes: ['+855'],
        currencies: ['KHR'],
        emoji: '\u{1F1F0}\u{1F1ED}',
        ioc: 'CAM',
        languages: ['khm'],
        name: 'Cambodia',
        status: 'assigned',
      },
      {
        alpha2: 'KI',
        alpha3: 'KIR',
        countryCallingCodes: ['+686'],
        currencies: ['AUD'],
        emoji: '\u{1F1F0}\u{1F1EE}',
        ioc: 'KIR',
        languages: ['eng'],
        name: 'Kiribati',
        status: 'assigned',
      },
      {
        alpha2: 'KM',
        alpha3: 'COM',
        countryCallingCodes: ['+269'],
        currencies: ['KMF'],
        emoji: '\u{1F1F0}\u{1F1F2}',
        ioc: 'COM',
        languages: ['ara', 'fra'],
        name: 'Comoros',
        status: 'assigned',
      },
      {
        alpha2: 'KN',
        alpha3: 'KNA',
        countryCallingCodes: ['+1 869'],
        currencies: ['XCD'],
        emoji: '\u{1F1F0}\u{1F1F3}',
        ioc: 'SKN',
        languages: ['eng'],
        name: 'Saint Kitts And Nevis',
        status: 'assigned',
      },
      {
        alpha2: 'KP',
        alpha3: 'PRK',
        countryCallingCodes: ['+850'],
        currencies: ['KPW'],
        emoji: '\u{1F1F0}\u{1F1F5}',
        ioc: 'PRK',
        languages: ['kor'],
        name: "Korea, Democratic People's Republic Of",
        status: 'assigned',
      },
      {
        alpha2: 'KR',
        alpha3: 'KOR',
        countryCallingCodes: ['+82'],
        currencies: ['KRW'],
        emoji: '\u{1F1F0}\u{1F1F7}',
        ioc: 'KOR',
        languages: ['kor'],
        name: 'Korea, Republic Of',
        status: 'assigned',
      },
      {
        alpha2: 'KW',
        alpha3: 'KWT',
        countryCallingCodes: ['+965'],
        currencies: ['KWD'],
        emoji: '\u{1F1F0}\u{1F1FC}',
        ioc: 'KUW',
        languages: ['ara'],
        name: 'Kuwait',
        status: 'assigned',
      },
      {
        alpha2: 'KY',
        alpha3: 'CYM',
        countryCallingCodes: ['+1 345'],
        currencies: ['KYD'],
        emoji: '\u{1F1F0}\u{1F1FE}',
        ioc: 'CAY',
        languages: ['eng'],
        name: 'Cayman Islands',
        status: 'assigned',
      },
      {
        alpha2: 'KZ',
        alpha3: 'KAZ',
        countryCallingCodes: ['+7', '+7 6', '+7 7'],
        currencies: ['KZT'],
        emoji: '\u{1F1F0}\u{1F1FF}',
        ioc: 'KAZ',
        languages: ['kaz', 'rus'],
        name: 'Kazakhstan',
        status: 'assigned',
      },
      {
        alpha2: 'LA',
        alpha3: 'LAO',
        countryCallingCodes: ['+856'],
        currencies: ['LAK'],
        emoji: '\u{1F1F1}\u{1F1E6}',
        ioc: 'LAO',
        languages: ['lao'],
        name: "Lao People's Democratic Republic",
        status: 'assigned',
      },
      {
        alpha2: 'LB',
        alpha3: 'LBN',
        countryCallingCodes: ['+961'],
        currencies: ['LBP'],
        emoji: '\u{1F1F1}\u{1F1E7}',
        ioc: 'LIB',
        languages: ['ara', 'hye'],
        name: 'Lebanon',
        status: 'assigned',
      },
      {
        alpha2: 'LC',
        alpha3: 'LCA',
        countryCallingCodes: ['+1 758'],
        currencies: ['XCD'],
        emoji: '\u{1F1F1}\u{1F1E8}',
        ioc: 'LCA',
        languages: ['eng'],
        name: 'Saint Lucia',
        status: 'assigned',
      },
      {
        alpha2: 'LI',
        alpha3: 'LIE',
        countryCallingCodes: ['+423'],
        currencies: ['CHF'],
        emoji: '\u{1F1F1}\u{1F1EE}',
        ioc: 'LIE',
        languages: ['deu'],
        name: 'Liechtenstein',
        status: 'assigned',
      },
      {
        alpha2: 'LK',
        alpha3: 'LKA',
        countryCallingCodes: ['+94'],
        currencies: ['LKR'],
        emoji: '\u{1F1F1}\u{1F1F0}',
        ioc: 'SRI',
        languages: ['sin', 'tam'],
        name: 'Sri Lanka',
        status: 'assigned',
      },
      {
        alpha2: 'LR',
        alpha3: 'LBR',
        countryCallingCodes: ['+231'],
        currencies: ['LRD'],
        emoji: '\u{1F1F1}\u{1F1F7}',
        ioc: 'LBR',
        languages: ['eng'],
        name: 'Liberia',
        status: 'assigned',
      },
      {
        alpha2: 'LS',
        alpha3: 'LSO',
        countryCallingCodes: ['+266'],
        currencies: ['LSL', 'ZAR'],
        emoji: '\u{1F1F1}\u{1F1F8}',
        ioc: 'LES',
        languages: ['eng', 'sot'],
        name: 'Lesotho',
        status: 'assigned',
      },
      {
        alpha2: 'LT',
        alpha3: 'LTU',
        countryCallingCodes: ['+370'],
        currencies: ['EUR'],
        emoji: '\u{1F1F1}\u{1F1F9}',
        ioc: 'LTU',
        languages: ['lit'],
        name: 'Lithuania',
        status: 'assigned',
      },
      {
        alpha2: 'LU',
        alpha3: 'LUX',
        countryCallingCodes: ['+352'],
        currencies: ['EUR'],
        emoji: '\u{1F1F1}\u{1F1FA}',
        ioc: 'LUX',
        languages: ['fra', 'deu', 'ltz'],
        name: 'Luxembourg',
        status: 'assigned',
      },
      {
        alpha2: 'LV',
        alpha3: 'LVA',
        countryCallingCodes: ['+371'],
        currencies: ['EUR'],
        emoji: '\u{1F1F1}\u{1F1FB}',
        ioc: 'LAT',
        languages: ['lav'],
        name: 'Latvia',
        status: 'assigned',
      },
      {
        alpha2: 'LY',
        alpha3: 'LBY',
        countryCallingCodes: ['+218'],
        currencies: ['LYD'],
        emoji: '\u{1F1F1}\u{1F1FE}',
        ioc: 'LBA',
        languages: ['ara'],
        name: 'Libya',
        status: 'assigned',
      },
      {
        alpha2: 'MA',
        alpha3: 'MAR',
        countryCallingCodes: ['+212'],
        currencies: ['MAD'],
        emoji: '\u{1F1F2}\u{1F1E6}',
        ioc: 'MAR',
        languages: ['ara'],
        name: 'Morocco',
        status: 'assigned',
      },
      {
        alpha2: 'MC',
        alpha3: 'MCO',
        countryCallingCodes: ['+377'],
        currencies: ['EUR'],
        emoji: '\u{1F1F2}\u{1F1E8}',
        ioc: 'MON',
        languages: ['fra'],
        name: 'Monaco',
        status: 'assigned',
      },
      {
        alpha2: 'MD',
        alpha3: 'MDA',
        countryCallingCodes: ['+373'],
        currencies: ['MDL'],
        emoji: '\u{1F1F2}\u{1F1E9}',
        ioc: 'MDA',
        languages: ['ron'],
        name: 'Moldova',
        status: 'assigned',
      },
      {
        alpha2: 'ME',
        alpha3: 'MNE',
        countryCallingCodes: ['+382'],
        currencies: ['EUR'],
        emoji: '\u{1F1F2}\u{1F1EA}',
        ioc: 'MNE',
        languages: ['mot'],
        name: 'Montenegro',
        status: 'assigned',
      },
      {
        alpha2: 'MF',
        alpha3: 'MAF',
        countryCallingCodes: ['+590'],
        currencies: ['EUR'],
        emoji: '\u{1F1F2}\u{1F1EB}',
        ioc: '',
        languages: ['fra'],
        name: 'Saint Martin',
        status: 'assigned',
      },
      {
        alpha2: 'MG',
        alpha3: 'MDG',
        countryCallingCodes: ['+261'],
        currencies: ['MGA'],
        emoji: '\u{1F1F2}\u{1F1EC}',
        ioc: 'MAD',
        languages: ['fra', 'mlg'],
        name: 'Madagascar',
        status: 'assigned',
      },
      {
        alpha2: 'MH',
        alpha3: 'MHL',
        countryCallingCodes: ['+692'],
        currencies: ['USD'],
        emoji: '\u{1F1F2}\u{1F1ED}',
        ioc: 'MHL',
        languages: ['eng', 'mah'],
        name: 'Marshall Islands',
        status: 'assigned',
      },
      {
        alpha2: 'MI',
        alpha3: 'MID',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Midway Islands',
        status: 'deleted',
      },
      {
        alpha2: 'MK',
        alpha3: 'MKD',
        countryCallingCodes: ['+389'],
        currencies: ['MKD'],
        emoji: '\u{1F1F2}\u{1F1F0}',
        ioc: 'MKD',
        languages: ['mkd'],
        name: 'Macedonia, The Former Yugoslav Republic Of',
        status: 'assigned',
      },
      {
        alpha2: 'ML',
        alpha3: 'MLI',
        countryCallingCodes: ['+223'],
        currencies: ['XOF'],
        emoji: '\u{1F1F2}\u{1F1F1}',
        ioc: 'MLI',
        languages: ['fra'],
        name: 'Mali',
        status: 'assigned',
      },
      {
        alpha2: 'MM',
        alpha3: 'MMR',
        countryCallingCodes: ['+95'],
        currencies: ['MMK'],
        emoji: '\u{1F1F2}\u{1F1F2}',
        ioc: 'MYA',
        languages: ['mya'],
        name: 'Myanmar',
        status: 'assigned',
      },
      {
        alpha2: 'MN',
        alpha3: 'MNG',
        countryCallingCodes: ['+976'],
        currencies: ['MNT'],
        emoji: '\u{1F1F2}\u{1F1F3}',
        ioc: 'MGL',
        languages: ['mon'],
        name: 'Mongolia',
        status: 'assigned',
      },
      {
        alpha2: 'MO',
        alpha3: 'MAC',
        countryCallingCodes: ['+853'],
        currencies: ['MOP'],
        emoji: '\u{1F1F2}\u{1F1F4}',
        ioc: 'MAC',
        languages: ['zho', 'por'],
        name: 'Macao',
        status: 'assigned',
      },
      {
        alpha2: 'MP',
        alpha3: 'MNP',
        countryCallingCodes: ['+1 670'],
        currencies: ['USD'],
        emoji: '\u{1F1F2}\u{1F1F5}',
        ioc: '',
        languages: ['eng'],
        name: 'Northern Mariana Islands',
        status: 'assigned',
      },
      {
        alpha2: 'MQ',
        alpha3: 'MTQ',
        countryCallingCodes: ['+596'],
        currencies: ['EUR'],
        emoji: '\u{1F1F2}\u{1F1F6}',
        ioc: '',
        languages: [],
        name: 'Martinique',
        status: 'assigned',
      },
      {
        alpha2: 'MR',
        alpha3: 'MRT',
        countryCallingCodes: ['+222'],
        currencies: ['MRO'],
        emoji: '\u{1F1F2}\u{1F1F7}',
        ioc: 'MTN',
        languages: ['ara', 'fra'],
        name: 'Mauritania',
        status: 'assigned',
      },
      {
        alpha2: 'MS',
        alpha3: 'MSR',
        countryCallingCodes: ['+1 664'],
        currencies: ['XCD'],
        emoji: '\u{1F1F2}\u{1F1F8}',
        ioc: '',
        languages: [],
        name: 'Montserrat',
        status: 'assigned',
      },
      {
        alpha2: 'MT',
        alpha3: 'MLT',
        countryCallingCodes: ['+356'],
        currencies: ['EUR'],
        emoji: '\u{1F1F2}\u{1F1F9}',
        ioc: 'MLT',
        languages: ['mlt', 'eng'],
        name: 'Malta',
        status: 'assigned',
      },
      {
        alpha2: 'MU',
        alpha3: 'MUS',
        countryCallingCodes: ['+230'],
        currencies: ['MUR'],
        emoji: '\u{1F1F2}\u{1F1FA}',
        ioc: 'MRI',
        languages: ['eng', 'fra'],
        name: 'Mauritius',
        status: 'assigned',
      },
      {
        alpha2: 'MV',
        alpha3: 'MDV',
        countryCallingCodes: ['+960'],
        currencies: ['MVR'],
        emoji: '\u{1F1F2}\u{1F1FB}',
        ioc: 'MDV',
        languages: ['div'],
        name: 'Maldives',
        status: 'assigned',
      },
      {
        alpha2: 'MW',
        alpha3: 'MWI',
        countryCallingCodes: ['+265'],
        currencies: ['MWK'],
        emoji: '\u{1F1F2}\u{1F1FC}',
        ioc: 'MAW',
        languages: ['eng', 'nya'],
        name: 'Malawi',
        status: 'assigned',
      },
      {
        alpha2: 'MX',
        alpha3: 'MEX',
        countryCallingCodes: ['+52'],
        currencies: ['MXN', 'MXV'],
        emoji: '\u{1F1F2}\u{1F1FD}',
        ioc: 'MEX',
        languages: ['spa'],
        name: 'Mexico',
        status: 'assigned',
      },
      {
        alpha2: 'MY',
        alpha3: 'MYS',
        countryCallingCodes: ['+60'],
        currencies: ['MYR'],
        emoji: '\u{1F1F2}\u{1F1FE}',
        ioc: 'MAS',
        languages: ['msa', 'eng'],
        name: 'Malaysia',
        status: 'assigned',
      },
      {
        alpha2: 'MZ',
        alpha3: 'MOZ',
        countryCallingCodes: ['+258'],
        currencies: ['MZN'],
        emoji: '\u{1F1F2}\u{1F1FF}',
        ioc: 'MOZ',
        languages: ['por'],
        name: 'Mozambique',
        status: 'assigned',
      },
      {
        alpha2: 'NA',
        alpha3: 'NAM',
        countryCallingCodes: ['+264'],
        currencies: ['NAD', 'ZAR'],
        emoji: '\u{1F1F3}\u{1F1E6}',
        ioc: 'NAM',
        languages: ['eng'],
        name: 'Namibia',
        status: 'assigned',
      },
      {
        alpha2: 'NC',
        alpha3: 'NCL',
        countryCallingCodes: ['+687'],
        currencies: ['XPF'],
        emoji: '\u{1F1F3}\u{1F1E8}',
        ioc: '',
        languages: ['fra'],
        name: 'New Caledonia',
        status: 'assigned',
      },
      {
        alpha2: 'NE',
        alpha3: 'NER',
        countryCallingCodes: ['+227'],
        currencies: ['XOF'],
        emoji: '\u{1F1F3}\u{1F1EA}',
        ioc: 'NIG',
        languages: ['fra'],
        name: 'Niger',
        status: 'assigned',
      },
      {
        alpha2: 'NF',
        alpha3: 'NFK',
        countryCallingCodes: ['+672'],
        currencies: ['AUD'],
        emoji: '\u{1F1F3}\u{1F1EB}',
        ioc: '',
        languages: ['eng'],
        name: 'Norfolk Island',
        status: 'assigned',
      },
      {
        alpha2: 'NG',
        alpha3: 'NGA',
        countryCallingCodes: ['+234'],
        currencies: ['NGN'],
        emoji: '\u{1F1F3}\u{1F1EC}',
        ioc: 'NGR',
        languages: ['eng'],
        name: 'Nigeria',
        status: 'assigned',
      },
      {
        alpha2: 'NH',
        alpha3: 'NHB',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'New Hebrides',
        status: 'deleted',
      },
      {
        alpha2: 'NI',
        alpha3: 'NIC',
        countryCallingCodes: ['+505'],
        currencies: ['NIO'],
        emoji: '\u{1F1F3}\u{1F1EE}',
        ioc: 'NCA',
        languages: ['spa'],
        name: 'Nicaragua',
        status: 'assigned',
      },
      {
        alpha2: 'NL',
        alpha3: 'NLD',
        countryCallingCodes: ['+31'],
        currencies: ['EUR'],
        emoji: '\u{1F1F3}\u{1F1F1}',
        ioc: 'NED',
        languages: ['nld'],
        name: 'Netherlands',
        status: 'assigned',
      },
      {
        alpha2: 'NO',
        alpha3: 'NOR',
        countryCallingCodes: ['+47'],
        currencies: ['NOK'],
        emoji: '\u{1F1F3}\u{1F1F4}',
        ioc: 'NOR',
        languages: ['nor'],
        name: 'Norway',
        status: 'assigned',
      },
      {
        alpha2: 'NP',
        alpha3: 'NPL',
        countryCallingCodes: ['+977'],
        currencies: ['NPR'],
        emoji: '\u{1F1F3}\u{1F1F5}',
        ioc: 'NEP',
        languages: ['nep'],
        name: 'Nepal',
        status: 'assigned',
      },
      {
        alpha2: 'NQ',
        alpha3: 'ATN',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Dronning Maud Land',
        status: 'deleted',
      },
      {
        alpha2: 'NR',
        alpha3: 'NRU',
        countryCallingCodes: ['+674'],
        currencies: ['AUD'],
        emoji: '\u{1F1F3}\u{1F1F7}',
        ioc: 'NRU',
        languages: ['eng', 'nau'],
        name: 'Nauru',
        status: 'assigned',
      },
      {
        alpha2: 'NT',
        alpha3: 'NTZ',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Neutral Zone',
        status: 'deleted',
      },
      {
        alpha2: 'NU',
        alpha3: 'NIU',
        countryCallingCodes: ['+683'],
        currencies: ['NZD'],
        emoji: '\u{1F1F3}\u{1F1FA}',
        ioc: '',
        languages: ['eng'],
        name: 'Niue',
        status: 'assigned',
      },
      {
        alpha2: 'NZ',
        alpha3: 'NZL',
        countryCallingCodes: ['+64'],
        currencies: ['NZD'],
        emoji: '\u{1F1F3}\u{1F1FF}',
        ioc: 'NZL',
        languages: ['eng'],
        name: 'New Zealand',
        status: 'assigned',
      },
      {
        alpha2: 'OM',
        alpha3: 'OMN',
        countryCallingCodes: ['+968'],
        currencies: ['OMR'],
        emoji: '\u{1F1F4}\u{1F1F2}',
        ioc: 'OMA',
        languages: ['ara'],
        name: 'Oman',
        status: 'assigned',
      },
      {
        alpha2: 'PA',
        alpha3: 'PAN',
        countryCallingCodes: ['+507'],
        currencies: ['PAB', 'USD'],
        emoji: '\u{1F1F5}\u{1F1E6}',
        ioc: 'PAN',
        languages: ['spa'],
        name: 'Panama',
        status: 'assigned',
      },
      {
        alpha2: 'PC',
        alpha3: 'PCI',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Pacific Islands, Trust Territory of the',
        status: 'deleted',
      },
      {
        alpha2: 'PE',
        alpha3: 'PER',
        countryCallingCodes: ['+51'],
        currencies: ['PEN'],
        emoji: '\u{1F1F5}\u{1F1EA}',
        ioc: 'PER',
        languages: ['spa', 'aym', 'que'],
        name: 'Peru',
        status: 'assigned',
      },
      {
        alpha2: 'PF',
        alpha3: 'PYF',
        countryCallingCodes: ['+689'],
        currencies: ['XPF'],
        emoji: '\u{1F1F5}\u{1F1EB}',
        ioc: '',
        languages: ['fra'],
        name: 'French Polynesia',
        status: 'assigned',
      },
      {
        alpha2: 'PG',
        alpha3: 'PNG',
        countryCallingCodes: ['+675'],
        currencies: ['PGK'],
        emoji: '\u{1F1F5}\u{1F1EC}',
        ioc: 'PNG',
        languages: ['eng'],
        name: 'Papua New Guinea',
        status: 'assigned',
      },
      {
        alpha2: 'PH',
        alpha3: 'PHL',
        countryCallingCodes: ['+63'],
        currencies: ['PHP'],
        emoji: '\u{1F1F5}\u{1F1ED}',
        ioc: 'PHI',
        languages: ['eng'],
        name: 'Philippines',
        status: 'assigned',
      },
      {
        alpha2: 'PK',
        alpha3: 'PAK',
        countryCallingCodes: ['+92'],
        currencies: ['PKR'],
        emoji: '\u{1F1F5}\u{1F1F0}',
        ioc: 'PAK',
        languages: ['urd', 'eng'],
        name: 'Pakistan',
        status: 'assigned',
      },
      {
        alpha2: 'PL',
        alpha3: 'POL',
        countryCallingCodes: ['+48'],
        currencies: ['PLN'],
        emoji: '\u{1F1F5}\u{1F1F1}',
        ioc: 'POL',
        languages: ['pol'],
        name: 'Poland',
        status: 'assigned',
      },
      {
        alpha2: 'PM',
        alpha3: 'SPM',
        countryCallingCodes: ['+508'],
        currencies: ['EUR'],
        emoji: '\u{1F1F5}\u{1F1F2}',
        ioc: '',
        languages: ['eng'],
        name: 'Saint Pierre And Miquelon',
        status: 'assigned',
      },
      {
        alpha2: 'PN',
        alpha3: 'PCN',
        countryCallingCodes: ['+872'],
        currencies: ['NZD'],
        emoji: '\u{1F1F5}\u{1F1F3}',
        ioc: '',
        languages: ['eng'],
        name: 'Pitcairn',
        status: 'assigned',
      },
      {
        alpha2: 'PR',
        alpha3: 'PRI',
        countryCallingCodes: ['+1 787', '+1 939'],
        currencies: ['USD'],
        emoji: '\u{1F1F5}\u{1F1F7}',
        ioc: 'PUR',
        languages: ['spa', 'eng'],
        name: 'Puerto Rico',
        status: 'assigned',
      },
      {
        alpha2: 'PS',
        alpha3: 'PSE',
        countryCallingCodes: ['+970'],
        currencies: ['JOD', 'EGP', 'ILS'],
        emoji: '\u{1F1F5}\u{1F1F8}',
        ioc: 'PLE',
        languages: ['ara'],
        name: 'Palestinian Territory, Occupied',
        status: 'assigned',
      },
      {
        alpha2: 'PT',
        alpha3: 'PRT',
        countryCallingCodes: ['+351'],
        currencies: ['EUR'],
        emoji: '\u{1F1F5}\u{1F1F9}',
        ioc: 'POR',
        languages: ['por'],
        name: 'Portugal',
        status: 'assigned',
      },
      {
        alpha2: 'PU',
        alpha3: 'PUS',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'U.S. Miscellaneous Pacific Islands',
        status: 'deleted',
      },
      {
        alpha2: 'PW',
        alpha3: 'PLW',
        countryCallingCodes: ['+680'],
        currencies: ['USD'],
        emoji: '\u{1F1F5}\u{1F1FC}',
        ioc: 'PLW',
        languages: ['eng'],
        name: 'Palau',
        status: 'assigned',
      },
      {
        alpha2: 'PY',
        alpha3: 'PRY',
        countryCallingCodes: ['+595'],
        currencies: ['PYG'],
        emoji: '\u{1F1F5}\u{1F1FE}',
        ioc: 'PAR',
        languages: ['spa'],
        name: 'Paraguay',
        status: 'assigned',
      },
      {
        alpha2: 'PZ',
        alpha3: 'PCZ',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Panama Canal Zone',
        status: 'deleted',
      },
      {
        alpha2: 'QA',
        alpha3: 'QAT',
        countryCallingCodes: ['+974'],
        currencies: ['QAR'],
        emoji: '\u{1F1F6}\u{1F1E6}',
        ioc: 'QAT',
        languages: ['ara'],
        name: 'Qatar',
        status: 'assigned',
      },
      {
        alpha2: 'RE',
        alpha3: 'REU',
        countryCallingCodes: ['+262'],
        currencies: ['EUR'],
        emoji: '\u{1F1F7}\u{1F1EA}',
        ioc: '',
        languages: ['fra'],
        name: 'Reunion',
        status: 'assigned',
      },
      {
        alpha2: 'RH',
        alpha3: 'RHO',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Southern Rhodesia',
        status: 'deleted',
      },
      {
        alpha2: 'RO',
        alpha3: 'ROU',
        countryCallingCodes: ['+40'],
        currencies: ['RON'],
        emoji: '\u{1F1F7}\u{1F1F4}',
        ioc: 'ROU',
        languages: ['ron'],
        name: 'Romania',
        status: 'assigned',
      },
      {
        alpha2: 'RS',
        alpha3: 'SRB',
        countryCallingCodes: ['+381'],
        currencies: ['RSD'],
        emoji: '\u{1F1F7}\u{1F1F8}',
        ioc: 'SRB',
        languages: ['srp'],
        name: 'Serbia',
        status: 'assigned',
      },
      {
        alpha2: 'RU',
        alpha3: 'RUS',
        countryCallingCodes: ['+7', '+7 3', '+7 4', '+7 8'],
        currencies: ['RUB'],
        emoji: '\u{1F1F7}\u{1F1FA}',
        ioc: 'RUS',
        languages: ['rus'],
        name: 'Russian Federation',
        status: 'assigned',
      },
      {
        alpha2: 'RW',
        alpha3: 'RWA',
        countryCallingCodes: ['+250'],
        currencies: ['RWF'],
        emoji: '\u{1F1F7}\u{1F1FC}',
        ioc: 'RWA',
        languages: ['eng', 'fra', 'kin'],
        name: 'Rwanda',
        status: 'assigned',
      },
      {
        alpha2: 'SA',
        alpha3: 'SAU',
        countryCallingCodes: ['+966'],
        currencies: ['SAR'],
        emoji: '\u{1F1F8}\u{1F1E6}',
        ioc: 'KSA',
        languages: ['ara'],
        name: 'Saudi Arabia',
        status: 'assigned',
      },
      {
        alpha2: 'SB',
        alpha3: 'SLB',
        countryCallingCodes: ['+677'],
        currencies: ['SBD'],
        emoji: '\u{1F1F8}\u{1F1E7}',
        ioc: 'SOL',
        languages: ['eng'],
        name: 'Solomon Islands',
        status: 'assigned',
      },
      {
        alpha2: 'SC',
        alpha3: 'SYC',
        countryCallingCodes: ['+248'],
        currencies: ['SCR'],
        emoji: '\u{1F1F8}\u{1F1E8}',
        ioc: 'SEY',
        languages: ['eng', 'fra'],
        name: 'Seychelles',
        status: 'assigned',
      },
      {
        alpha2: 'SD',
        alpha3: 'SDN',
        countryCallingCodes: ['+249'],
        currencies: ['SDG'],
        emoji: '\u{1F1F8}\u{1F1E9}',
        ioc: 'SUD',
        languages: ['ara', 'eng'],
        name: 'Sudan',
        status: 'assigned',
      },
      {
        alpha2: 'SE',
        alpha3: 'SWE',
        countryCallingCodes: ['+46'],
        currencies: ['SEK'],
        emoji: '\u{1F1F8}\u{1F1EA}',
        ioc: 'SWE',
        languages: ['swe'],
        name: 'Sweden',
        status: 'assigned',
      },
      {
        alpha2: 'SG',
        alpha3: 'SGP',
        countryCallingCodes: ['+65'],
        currencies: ['SGD'],
        emoji: '\u{1F1F8}\u{1F1EC}',
        ioc: 'SIN',
        languages: ['eng', 'zho', 'msa', 'tam'],
        name: 'Singapore',
        status: 'assigned',
      },
      {
        alpha2: 'SH',
        alpha3: 'SHN',
        countryCallingCodes: ['+290'],
        currencies: ['SHP'],
        emoji: '\u{1F1F8}\u{1F1ED}',
        ioc: '',
        languages: ['eng'],
        name: 'Saint Helena, Ascension And Tristan Da Cunha',
        status: 'assigned',
      },
      {
        alpha2: 'SI',
        alpha3: 'SVN',
        countryCallingCodes: ['+386'],
        currencies: ['EUR'],
        emoji: '\u{1F1F8}\u{1F1EE}',
        ioc: 'SLO',
        languages: ['slv'],
        name: 'Slovenia',
        status: 'assigned',
      },
      {
        alpha2: 'SJ',
        alpha3: 'SJM',
        countryCallingCodes: ['+47'],
        currencies: ['NOK'],
        emoji: '\u{1F1F8}\u{1F1EF}',
        ioc: '',
        languages: [],
        name: 'Svalbard And Jan Mayen',
        status: 'assigned',
      },
      {
        alpha2: 'SK',
        alpha3: 'SVK',
        countryCallingCodes: ['+421'],
        currencies: ['EUR'],
        emoji: '\u{1F1F8}\u{1F1F0}',
        ioc: 'SVK',
        languages: ['slk'],
        name: 'Slovakia',
        status: 'assigned',
      },
      {
        alpha2: 'SK',
        alpha3: 'SKM',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Sikkim',
        status: 'deleted',
      },
      {
        alpha2: 'SL',
        alpha3: 'SLE',
        countryCallingCodes: ['+232'],
        currencies: ['SLL'],
        emoji: '\u{1F1F8}\u{1F1F1}',
        ioc: 'SLE',
        languages: ['eng'],
        name: 'Sierra Leone',
        status: 'assigned',
      },
      {
        alpha2: 'SM',
        alpha3: 'SMR',
        countryCallingCodes: ['+378'],
        currencies: ['EUR'],
        emoji: '\u{1F1F8}\u{1F1F2}',
        ioc: 'SMR',
        languages: ['ita'],
        name: 'San Marino',
        status: 'assigned',
      },
      {
        alpha2: 'SN',
        alpha3: 'SEN',
        countryCallingCodes: ['+221'],
        currencies: ['XOF'],
        emoji: '\u{1F1F8}\u{1F1F3}',
        ioc: 'SEN',
        languages: ['fra'],
        name: 'Senegal',
        status: 'assigned',
      },
      {
        alpha2: 'SO',
        alpha3: 'SOM',
        countryCallingCodes: ['+252'],
        currencies: ['SOS'],
        emoji: '\u{1F1F8}\u{1F1F4}',
        ioc: 'SOM',
        languages: ['som'],
        name: 'Somalia',
        status: 'assigned',
      },
      {
        alpha2: 'SR',
        alpha3: 'SUR',
        countryCallingCodes: ['+597'],
        currencies: ['SRD'],
        emoji: '\u{1F1F8}\u{1F1F7}',
        ioc: 'SUR',
        languages: ['nld'],
        name: 'Suriname',
        status: 'assigned',
      },
      {
        alpha2: 'SS',
        alpha3: 'SSD',
        countryCallingCodes: ['+211'],
        currencies: ['SSP'],
        emoji: '\u{1F1F8}\u{1F1F8}',
        ioc: 'SSD',
        languages: ['eng'],
        name: 'South Sudan',
        status: 'assigned',
      },
      {
        alpha2: 'ST',
        alpha3: 'STP',
        countryCallingCodes: ['+239'],
        currencies: ['STD'],
        emoji: '\u{1F1F8}\u{1F1F9}',
        ioc: 'STP',
        languages: ['por'],
        name: 'Sao Tome and Principe',
        status: 'assigned',
      },
      {
        alpha2: 'SU',
        alpha3: '',
        countryCallingCodes: [],
        currencies: ['RUB'],
        emoji: '',
        ioc: '',
        languages: ['rus'],
        name: 'USSR',
        status: 'reserved',
      },
      {
        alpha2: 'SV',
        alpha3: 'SLV',
        countryCallingCodes: ['+503'],
        currencies: ['USD'],
        emoji: '\u{1F1F8}\u{1F1FB}',
        ioc: 'ESA',
        languages: ['spa'],
        name: 'El Salvador',
        status: 'assigned',
      },
      {
        alpha2: 'SX',
        alpha3: 'SXM',
        countryCallingCodes: ['+1 721'],
        currencies: ['ANG'],
        emoji: '\u{1F1F8}\u{1F1FD}',
        ioc: '',
        languages: ['nld'],
        name: 'Sint Maarten',
        status: 'assigned',
      },
      {
        alpha2: 'SY',
        alpha3: 'SYR',
        countryCallingCodes: ['+963'],
        currencies: ['SYP'],
        emoji: '\u{1F1F8}\u{1F1FE}',
        ioc: 'SYR',
        languages: ['ara'],
        name: 'Syrian Arab Republic',
        status: 'assigned',
      },
      {
        alpha2: 'SZ',
        alpha3: 'SWZ',
        countryCallingCodes: ['+268'],
        currencies: ['SZL'],
        emoji: '\u{1F1F8}\u{1F1FF}',
        ioc: 'SWZ',
        languages: ['eng', 'ssw'],
        name: 'Swaziland',
        status: 'assigned',
      },
      {
        alpha2: 'TA',
        alpha3: '',
        countryCallingCodes: ['+290'],
        currencies: ['GBP'],
        emoji: '',
        ioc: '',
        languages: [],
        name: 'Tristan de Cunha',
        status: 'reserved',
      },
      {
        alpha2: 'TC',
        alpha3: 'TCA',
        countryCallingCodes: ['+1 649'],
        currencies: ['USD'],
        emoji: '\u{1F1F9}\u{1F1E8}',
        ioc: '',
        languages: ['eng'],
        name: 'Turks And Caicos Islands',
        status: 'assigned',
      },
      {
        alpha2: 'TD',
        alpha3: 'TCD',
        countryCallingCodes: ['+235'],
        currencies: ['XAF'],
        emoji: '\u{1F1F9}\u{1F1E9}',
        ioc: 'CHA',
        languages: ['ara', 'fra'],
        name: 'Chad',
        status: 'assigned',
      },
      {
        alpha2: 'TF',
        alpha3: 'ATF',
        countryCallingCodes: [],
        currencies: ['EUR'],
        emoji: '\u{1F1F9}\u{1F1EB}',
        ioc: '',
        languages: ['fra'],
        name: 'French Southern Territories',
        status: 'assigned',
      },
      {
        alpha2: 'TG',
        alpha3: 'TGO',
        countryCallingCodes: ['+228'],
        currencies: ['XOF'],
        emoji: '\u{1F1F9}\u{1F1EC}',
        ioc: 'TOG',
        languages: ['fra'],
        name: 'Togo',
        status: 'assigned',
      },
      {
        alpha2: 'TH',
        alpha3: 'THA',
        countryCallingCodes: ['+66'],
        currencies: ['THB'],
        emoji: '\u{1F1F9}\u{1F1ED}',
        ioc: 'THA',
        languages: ['tha'],
        name: 'Thailand',
        status: 'assigned',
      },
      {
        alpha2: 'TJ',
        alpha3: 'TJK',
        countryCallingCodes: ['+992'],
        currencies: ['TJS'],
        emoji: '\u{1F1F9}\u{1F1EF}',
        ioc: 'TJK',
        languages: ['tgk', 'rus'],
        name: 'Tajikistan',
        status: 'assigned',
      },
      {
        alpha2: 'TK',
        alpha3: 'TKL',
        countryCallingCodes: ['+690'],
        currencies: ['NZD'],
        emoji: '\u{1F1F9}\u{1F1F0}',
        ioc: '',
        languages: ['eng'],
        name: 'Tokelau',
        status: 'assigned',
      },
      {
        alpha2: 'TL',
        alpha3: 'TLS',
        countryCallingCodes: ['+670'],
        currencies: ['USD'],
        emoji: '\u{1F1F9}\u{1F1F1}',
        ioc: 'TLS',
        languages: ['por'],
        name: 'Timor-Leste, Democratic Republic of',
        status: 'assigned',
      },
      {
        alpha2: 'TM',
        alpha3: 'TKM',
        countryCallingCodes: ['+993'],
        currencies: ['TMT'],
        emoji: '\u{1F1F9}\u{1F1F2}',
        ioc: 'TKM',
        languages: ['tuk', 'rus'],
        name: 'Turkmenistan',
        status: 'assigned',
      },
      {
        alpha2: 'TN',
        alpha3: 'TUN',
        countryCallingCodes: ['+216'],
        currencies: ['TND'],
        emoji: '\u{1F1F9}\u{1F1F3}',
        ioc: 'TUN',
        languages: ['ara'],
        name: 'Tunisia',
        status: 'assigned',
      },
      {
        alpha2: 'TO',
        alpha3: 'TON',
        countryCallingCodes: ['+676'],
        currencies: ['TOP'],
        emoji: '\u{1F1F9}\u{1F1F4}',
        ioc: 'TGA',
        languages: ['eng'],
        name: 'Tonga',
        status: 'assigned',
      },
      {
        alpha2: 'TP',
        alpha3: 'TMP',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'East Timor',
        status: 'deleted',
      },
      {
        alpha2: 'TR',
        alpha3: 'TUR',
        countryCallingCodes: ['+90'],
        currencies: ['TRY'],
        emoji: '\u{1F1F9}\u{1F1F7}',
        ioc: 'TUR',
        languages: ['tur'],
        name: 'Turkey',
        status: 'assigned',
      },
      {
        alpha2: 'TT',
        alpha3: 'TTO',
        countryCallingCodes: ['+1 868'],
        currencies: ['TTD'],
        emoji: '\u{1F1F9}\u{1F1F9}',
        ioc: 'TTO',
        languages: ['eng'],
        name: 'Trinidad And Tobago',
        status: 'assigned',
      },
      {
        alpha2: 'TV',
        alpha3: 'TUV',
        countryCallingCodes: ['+688'],
        currencies: ['AUD'],
        emoji: '\u{1F1F9}\u{1F1FB}',
        ioc: 'TUV',
        languages: ['eng'],
        name: 'Tuvalu',
        status: 'assigned',
      },
      {
        alpha2: 'TW',
        alpha3: 'TWN',
        countryCallingCodes: ['+886'],
        currencies: ['TWD'],
        emoji: '\u{1F1F9}\u{1F1FC}',
        ioc: 'TPE',
        languages: ['zho'],
        name: 'Taiwan',
        status: 'assigned',
      },
      {
        alpha2: 'TZ',
        alpha3: 'TZA',
        countryCallingCodes: ['+255'],
        currencies: ['TZS'],
        emoji: '\u{1F1F9}\u{1F1FF}',
        ioc: 'TAN',
        languages: ['swa', 'eng'],
        name: 'Tanzania, United Republic Of',
        status: 'assigned',
      },
      {
        alpha2: 'UA',
        alpha3: 'UKR',
        countryCallingCodes: ['+380'],
        currencies: ['UAH'],
        emoji: '\u{1F1FA}\u{1F1E6}',
        ioc: 'UKR',
        languages: ['ukr', 'rus'],
        name: 'Ukraine',
        status: 'assigned',
      },
      {
        alpha2: 'UG',
        alpha3: 'UGA',
        countryCallingCodes: ['+256'],
        currencies: ['UGX'],
        emoji: '\u{1F1FA}\u{1F1EC}',
        ioc: 'UGA',
        languages: ['eng', 'swa'],
        name: 'Uganda',
        status: 'assigned',
      },
      {
        alpha2: 'UK',
        alpha3: '',
        countryCallingCodes: [],
        currencies: ['GBP'],
        emoji: '',
        ioc: '',
        languages: ['eng', 'cor', 'gle', 'gla', 'cym'],
        name: 'United Kingdom',
        status: 'reserved',
      },
      {
        alpha2: 'UM',
        alpha3: 'UMI',
        countryCallingCodes: ['+1'],
        currencies: ['USD'],
        emoji: '\u{1F1FA}\u{1F1F2}',
        ioc: '',
        languages: ['eng'],
        name: 'United States Minor Outlying Islands',
        status: 'assigned',
      },
      {
        alpha2: 'US',
        alpha3: 'USA',
        countryCallingCodes: ['+1'],
        currencies: ['USD'],
        emoji: '\u{1F1FA}\u{1F1F8}',
        ioc: 'USA',
        languages: ['eng'],
        name: 'United States',
        status: 'assigned',
      },
      {
        alpha2: 'UY',
        alpha3: 'URY',
        countryCallingCodes: ['+598'],
        currencies: ['UYU', 'UYI'],
        emoji: '\u{1F1FA}\u{1F1FE}',
        ioc: 'URU',
        languages: ['spa'],
        name: 'Uruguay',
        status: 'assigned',
      },
      {
        alpha2: 'UZ',
        alpha3: 'UZB',
        countryCallingCodes: ['+998'],
        currencies: ['UZS'],
        emoji: '\u{1F1FA}\u{1F1FF}',
        ioc: 'UZB',
        languages: ['uzb', 'rus'],
        name: 'Uzbekistan',
        status: 'assigned',
      },
      {
        alpha2: 'VA',
        alpha3: 'VAT',
        countryCallingCodes: ['+379', '+39'],
        currencies: ['EUR'],
        emoji: '\u{1F1FB}\u{1F1E6}',
        ioc: '',
        languages: ['ita'],
        name: 'Vatican City State',
        status: 'assigned',
      },
      {
        alpha2: 'VC',
        alpha3: 'VCT',
        countryCallingCodes: ['+1 784'],
        currencies: ['XCD'],
        emoji: '\u{1F1FB}\u{1F1E8}',
        ioc: 'VIN',
        languages: ['eng'],
        name: 'Saint Vincent And The Grenadines',
        status: 'assigned',
      },
      {
        alpha2: 'VD',
        alpha3: 'VDR',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Viet-Nam, Democratic Republic of',
        status: 'deleted',
      },
      {
        alpha2: 'VE',
        alpha3: 'VEN',
        countryCallingCodes: ['+58'],
        currencies: ['VEF'],
        emoji: '\u{1F1FB}\u{1F1EA}',
        ioc: 'VEN',
        languages: ['spa'],
        name: 'Venezuela, Bolivarian Republic Of',
        status: 'assigned',
      },
      {
        alpha2: 'VG',
        alpha3: 'VGB',
        countryCallingCodes: ['+1 284'],
        currencies: ['USD'],
        emoji: '\u{1F1FB}\u{1F1EC}',
        ioc: 'IVB',
        languages: ['eng'],
        name: 'Virgin Islands (British)',
        status: 'assigned',
      },
      {
        alpha2: 'VI',
        alpha3: 'VIR',
        countryCallingCodes: ['+1 340'],
        currencies: ['USD'],
        emoji: '\u{1F1FB}\u{1F1EE}',
        ioc: 'ISV',
        languages: ['eng'],
        name: 'Virgin Islands (US)',
        status: 'assigned',
      },
      {
        alpha2: 'VN',
        alpha3: 'VNM',
        countryCallingCodes: ['+84'],
        currencies: ['VND'],
        emoji: '\u{1F1FB}\u{1F1F3}',
        ioc: 'VIE',
        languages: ['vie'],
        name: 'Viet Nam',
        status: 'assigned',
      },
      {
        alpha2: 'VU',
        alpha3: 'VUT',
        countryCallingCodes: ['+678'],
        currencies: ['VUV'],
        emoji: '\u{1F1FB}\u{1F1FA}',
        ioc: 'VAN',
        languages: ['bis', 'eng', 'fra'],
        name: 'Vanuatu',
        status: 'assigned',
      },
      {
        alpha2: 'WF',
        alpha3: 'WLF',
        countryCallingCodes: ['+681'],
        currencies: ['XPF'],
        emoji: '\u{1F1FC}\u{1F1EB}',
        ioc: '',
        languages: ['fra'],
        name: 'Wallis And Futuna',
        status: 'assigned',
      },
      {
        alpha2: 'WK',
        alpha3: 'WAK',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Wake Island',
        status: 'deleted',
      },
      {
        alpha2: 'WS',
        alpha3: 'WSM',
        countryCallingCodes: ['+685'],
        currencies: ['WST'],
        emoji: '\u{1F1FC}\u{1F1F8}',
        ioc: 'SAM',
        languages: ['eng', 'smo'],
        name: 'Samoa',
        status: 'assigned',
      },
      {
        alpha2: 'XK',
        alpha3: '',
        countryCallingCodes: ['+383'],
        currencies: ['EUR'],
        emoji: '',
        ioc: 'KOS',
        languages: ['sqi', 'srp', 'bos', 'tur', 'rom'],
        name: 'Kosovo',
        status: 'user assigned',
      },
      {
        alpha2: 'YD',
        alpha3: 'YMD',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Yemen, Democratic',
        status: 'deleted',
      },
      {
        alpha2: 'YE',
        alpha3: 'YEM',
        countryCallingCodes: ['+967'],
        currencies: ['YER'],
        emoji: '\u{1F1FE}\u{1F1EA}',
        ioc: 'YEM',
        languages: ['ara'],
        name: 'Yemen',
        status: 'assigned',
      },
      {
        alpha2: 'YT',
        alpha3: 'MYT',
        countryCallingCodes: ['+262'],
        currencies: ['EUR'],
        emoji: '\u{1F1FE}\u{1F1F9}',
        ioc: '',
        languages: ['fra'],
        name: 'Mayotte',
        status: 'assigned',
      },
      {
        alpha2: 'YU',
        alpha3: 'YUG',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Yugoslavia',
        status: 'deleted',
      },
      {
        alpha2: 'ZA',
        alpha3: 'ZAF',
        countryCallingCodes: ['+27'],
        currencies: ['ZAR'],
        emoji: '\u{1F1FF}\u{1F1E6}',
        ioc: 'RSA',
        languages: ['afr', 'eng', 'nbl', 'som', 'tso', 'ven', 'xho', 'zul'],
        name: 'South Africa',
        status: 'assigned',
      },
      {
        alpha2: 'ZM',
        alpha3: 'ZMB',
        countryCallingCodes: ['+260'],
        currencies: ['ZMW'],
        emoji: '\u{1F1FF}\u{1F1F2}',
        ioc: 'ZAM',
        languages: ['eng'],
        name: 'Zambia',
        status: 'assigned',
      },
      {
        alpha2: 'ZR',
        alpha3: 'ZAR',
        countryCallingCodes: [],
        currencies: [],
        ioc: '',
        languages: [],
        name: 'Zaire',
        status: 'deleted',
      },
      {
        alpha2: 'ZW',
        alpha3: 'ZWE',
        countryCallingCodes: ['+263'],
        currencies: ['USD', 'ZAR', 'BWP', 'GBP', 'EUR'],
        emoji: '\u{1F1FF}\u{1F1FC}',
        ioc: 'ZIM',
        languages: ['eng', 'sna', 'nde'],
        name: 'Zimbabwe',
        status: 'assigned',
      },
    ];
  },
});

// node_modules/country-data/data/currencies.json
var require_currencies = __commonJS({
  'node_modules/country-data/data/currencies.json'(exports, module) {
    module.exports = [
      {
        code: 'AED',
        decimals: 2,
        name: 'United Arab Emirates dirham',
        number: '784',
      },
      {
        code: 'AFN',
        decimals: 2,
        name: 'Afghan afghani',
        number: '971',
      },
      {
        code: 'ALL',
        decimals: 2,
        name: 'Albanian lek',
        number: '8',
      },
      {
        code: 'AMD',
        decimals: 2,
        name: 'Armenian dram',
        number: '51',
      },
      {
        code: 'ANG',
        decimals: 2,
        name: 'Netherlands Antillean guilder',
        number: '532',
      },
      {
        code: 'AOA',
        decimals: 2,
        name: 'Angolan kwanza',
        number: '973',
      },
      {
        code: 'ARS',
        decimals: 2,
        name: 'Argentine peso',
        number: '32',
      },
      {
        code: 'AUD',
        decimals: 2,
        name: 'Australian dollar',
        number: '36',
      },
      {
        code: 'AWG',
        decimals: 2,
        name: 'Aruban florin',
        number: '533',
      },
      {
        code: 'AZN',
        decimals: 2,
        name: 'Azerbaijani manat',
        number: '944',
      },
      {
        code: 'BAM',
        decimals: 2,
        name: 'Bosnia and Herzegovina convertible mark',
        number: '977',
      },
      {
        code: 'BBD',
        decimals: 2,
        name: 'Barbados dollar',
        number: '52',
      },
      {
        code: 'BDT',
        decimals: 2,
        name: 'Bangladeshi taka',
        number: '50',
      },
      {
        code: 'BGN',
        decimals: 2,
        name: 'Bulgarian lev',
        number: '975',
      },
      {
        code: 'BHD',
        decimals: 3,
        name: 'Bahraini dinar',
        number: '48',
      },
      {
        code: 'BIF',
        decimals: 0,
        name: 'Burundian franc',
        number: '108',
      },
      {
        code: 'BMD',
        decimals: 2,
        name: 'Bermudian dollar (customarily known as Bermuda dollar)',
        number: '60',
      },
      {
        code: 'BND',
        decimals: 2,
        name: 'Brunei dollar',
        number: '96',
      },
      {
        code: 'BOB',
        decimals: 2,
        name: 'Boliviano',
        number: '68',
      },
      {
        code: 'BOV',
        decimals: 2,
        name: 'Bolivian Mvdol (funds code)',
        number: '984',
      },
      {
        code: 'BRL',
        decimals: 2,
        name: 'Brazilian real',
        number: '986',
      },
      {
        code: 'BSD',
        decimals: 2,
        name: 'Bahamian dollar',
        number: '44',
      },
      {
        code: 'BTN',
        decimals: 2,
        name: 'Bhutanese ngultrum',
        number: '64',
      },
      {
        code: 'BWP',
        decimals: 2,
        name: 'Botswana pula',
        number: '72',
      },
      {
        code: 'BYR',
        decimals: 0,
        name: 'Belarusian ruble',
        number: '974',
      },
      {
        code: 'BZD',
        decimals: 2,
        name: 'Belize dollar',
        number: '84',
      },
      {
        code: 'CAD',
        decimals: 2,
        name: 'Canadian dollar',
        number: '124',
      },
      {
        code: 'CDF',
        decimals: 2,
        name: 'Congolese franc',
        number: '976',
      },
      {
        code: 'CHE',
        decimals: 2,
        name: 'WIR Euro (complementary currency)',
        number: '947',
      },
      {
        code: 'CHF',
        decimals: 2,
        name: 'Swiss franc',
        number: '756',
      },
      {
        code: 'CHW',
        decimals: 2,
        name: 'WIR Franc (complementary currency)',
        number: '948',
      },
      {
        code: 'CLF',
        decimals: 0,
        name: 'Unidad de Fomento (funds code)',
        number: '990',
      },
      {
        code: 'CLP',
        decimals: 0,
        name: 'Chilean peso',
        number: '152',
      },
      {
        code: 'CNY',
        decimals: 2,
        name: 'Chinese yuan',
        number: '156',
      },
      {
        code: 'COP',
        decimals: 2,
        name: 'Colombian peso',
        number: '170',
      },
      {
        code: 'COU',
        decimals: 2,
        name: 'Unidad de Valor Real',
        number: '970',
      },
      {
        code: 'CRC',
        decimals: 2,
        name: 'Costa Rican colon',
        number: '188',
      },
      {
        code: 'CUC',
        decimals: 2,
        name: 'Cuban convertible peso',
        number: '931',
      },
      {
        code: 'CUP',
        decimals: 2,
        name: 'Cuban peso',
        number: '192',
      },
      {
        code: 'CVE',
        decimals: 0,
        name: 'Cape Verde escudo',
        number: '132',
      },
      {
        code: 'CZK',
        decimals: 2,
        name: 'Czech koruna',
        number: '203',
      },
      {
        code: 'DJF',
        decimals: 0,
        name: 'Djiboutian franc',
        number: '262',
      },
      {
        code: 'DKK',
        decimals: 2,
        name: 'Danish krone',
        number: '208',
      },
      {
        code: 'DOP',
        decimals: 2,
        name: 'Dominican peso',
        number: '214',
      },
      {
        code: 'DZD',
        decimals: 2,
        name: 'Algerian dinar',
        number: '12',
      },
      {
        code: 'EGP',
        decimals: 2,
        name: 'Egyptian pound',
        number: '818',
      },
      {
        code: 'ERN',
        decimals: 2,
        name: 'Eritrean nakfa',
        number: '232',
      },
      {
        code: 'ETB',
        decimals: 2,
        name: 'Ethiopian birr',
        number: '230',
      },
      {
        code: 'EUR',
        decimals: 2,
        name: 'Euro',
        number: '978',
      },
      {
        code: 'FJD',
        decimals: 2,
        name: 'Fiji dollar',
        number: '242',
      },
      {
        code: 'FKP',
        decimals: 2,
        name: 'Falkland Islands pound',
        number: '238',
      },
      {
        code: 'GBP',
        decimals: 2,
        name: 'Pound sterling',
        number: '826',
      },
      {
        code: 'GEL',
        decimals: 2,
        name: 'Georgian lari',
        number: '981',
      },
      {
        code: 'GHS',
        decimals: 2,
        name: 'Ghanaian cedi',
        number: '936',
      },
      {
        code: 'GIP',
        decimals: 2,
        name: 'Gibraltar pound',
        number: '292',
      },
      {
        code: 'GMD',
        decimals: 2,
        name: 'Gambian dalasi',
        number: '270',
      },
      {
        code: 'GNF',
        decimals: 0,
        name: 'Guinean franc',
        number: '324',
      },
      {
        code: 'GTQ',
        decimals: 2,
        name: 'Guatemalan quetzal',
        number: '320',
      },
      {
        code: 'GYD',
        decimals: 2,
        name: 'Guyanese dollar',
        number: '328',
      },
      {
        code: 'HKD',
        decimals: 2,
        name: 'Hong Kong dollar',
        number: '344',
      },
      {
        code: 'HNL',
        decimals: 2,
        name: 'Honduran lempira',
        number: '340',
      },
      {
        code: 'HRK',
        decimals: 2,
        name: 'Croatian kuna',
        number: '191',
      },
      {
        code: 'HTG',
        decimals: 2,
        name: 'Haitian gourde',
        number: '332',
      },
      {
        code: 'HUF',
        decimals: 2,
        name: 'Hungarian forint',
        number: '348',
      },
      {
        code: 'IDR',
        decimals: 2,
        name: 'Indonesian rupiah',
        number: '360',
      },
      {
        code: 'ILS',
        decimals: 2,
        name: 'Israeli new shekel',
        number: '376',
      },
      {
        code: 'INR',
        decimals: 2,
        name: 'Indian rupee',
        number: '356',
      },
      {
        code: 'IQD',
        decimals: 3,
        name: 'Iraqi dinar',
        number: '368',
      },
      {
        code: 'IRR',
        decimals: 0,
        name: 'Iranian rial',
        number: '364',
      },
      {
        code: 'ISK',
        decimals: 0,
        name: 'Icelandic kr\xF3na',
        number: '352',
      },
      {
        code: 'JMD',
        decimals: 2,
        name: 'Jamaican dollar',
        number: '388',
      },
      {
        code: 'JOD',
        decimals: 3,
        name: 'Jordanian dinar',
        number: '400',
      },
      {
        code: 'JPY',
        decimals: 0,
        name: 'Japanese yen',
        number: '392',
      },
      {
        code: 'KES',
        decimals: 2,
        name: 'Kenyan shilling',
        number: '404',
      },
      {
        code: 'KGS',
        decimals: 2,
        name: 'Kyrgyzstani som',
        number: '417',
      },
      {
        code: 'KHR',
        decimals: 2,
        name: 'Cambodian riel',
        number: '116',
      },
      {
        code: 'KMF',
        decimals: 0,
        name: 'Comoro franc',
        number: '174',
      },
      {
        code: 'KPW',
        decimals: 0,
        name: 'North Korean won',
        number: '408',
      },
      {
        code: 'KRW',
        decimals: 0,
        name: 'South Korean won',
        number: '410',
      },
      {
        code: 'KWD',
        decimals: 3,
        name: 'Kuwaiti dinar',
        number: '414',
      },
      {
        code: 'KYD',
        decimals: 2,
        name: 'Cayman Islands dollar',
        number: '136',
      },
      {
        code: 'KZT',
        decimals: 2,
        name: 'Kazakhstani tenge',
        number: '398',
      },
      {
        code: 'LAK',
        decimals: 0,
        name: 'Lao kip',
        number: '418',
      },
      {
        code: 'LBP',
        decimals: 0,
        name: 'Lebanese pound',
        number: '422',
      },
      {
        code: 'LKR',
        decimals: 2,
        name: 'Sri Lankan rupee',
        number: '144',
      },
      {
        code: 'LRD',
        decimals: 2,
        name: 'Liberian dollar',
        number: '430',
      },
      {
        code: 'LSL',
        decimals: 2,
        name: 'Lesotho loti',
        number: '426',
      },
      {
        code: 'LTL',
        decimals: 2,
        name: 'Lithuanian litas',
        number: '440',
      },
      {
        code: 'LVL',
        decimals: 2,
        name: 'Latvian lats',
        number: '428',
      },
      {
        code: 'LYD',
        decimals: 3,
        name: 'Libyan dinar',
        number: '434',
      },
      {
        code: 'MAD',
        decimals: 2,
        name: 'Moroccan dirham',
        number: '504',
      },
      {
        code: 'MDL',
        decimals: 2,
        name: 'Moldovan leu',
        number: '498',
      },
      {
        code: 'MGA',
        decimals: 0,
        name: 'Malagasy ariary',
        number: '969',
      },
      {
        code: 'MKD',
        decimals: 0,
        name: 'Macedonian denar',
        number: '807',
      },
      {
        code: 'MMK',
        decimals: 0,
        name: 'Myanma kyat',
        number: '104',
      },
      {
        code: 'MNT',
        decimals: 2,
        name: 'Mongolian tugrik',
        number: '496',
      },
      {
        code: 'MOP',
        decimals: 2,
        name: 'Macanese pataca',
        number: '446',
      },
      {
        code: 'MRO',
        decimals: 0,
        name: 'Mauritanian ouguiya',
        number: '478',
      },
      {
        code: 'MUR',
        decimals: 2,
        name: 'Mauritian rupee',
        number: '480',
      },
      {
        code: 'MVR',
        decimals: 2,
        name: 'Maldivian rufiyaa',
        number: '462',
      },
      {
        code: 'MWK',
        decimals: 2,
        name: 'Malawian kwacha',
        number: '454',
      },
      {
        code: 'MXN',
        decimals: 2,
        name: 'Mexican peso',
        number: '484',
      },
      {
        code: 'MXV',
        decimals: 2,
        name: 'Mexican Unidad de Inversion (UDI) (funds code)',
        number: '979',
      },
      {
        code: 'MYR',
        decimals: 2,
        name: 'Malaysian ringgit',
        number: '458',
      },
      {
        code: 'MZN',
        decimals: 2,
        name: 'Mozambican metical',
        number: '943',
      },
      {
        code: 'NAD',
        decimals: 2,
        name: 'Namibian dollar',
        number: '516',
      },
      {
        code: 'NGN',
        decimals: 2,
        name: 'Nigerian naira',
        number: '566',
      },
      {
        code: 'NIO',
        decimals: 2,
        name: 'Nicaraguan c\xF3rdoba',
        number: '558',
      },
      {
        code: 'NOK',
        decimals: 2,
        name: 'Norwegian krone',
        number: '578',
      },
      {
        code: 'NPR',
        decimals: 2,
        name: 'Nepalese rupee',
        number: '524',
      },
      {
        code: 'NZD',
        decimals: 2,
        name: 'New Zealand dollar',
        number: '554',
      },
      {
        code: 'OMR',
        decimals: 3,
        name: 'Omani rial',
        number: '512',
      },
      {
        code: 'PAB',
        decimals: 2,
        name: 'Panamanian balboa',
        number: '590',
      },
      {
        code: 'PEN',
        decimals: 2,
        name: 'Peruvian nuevo sol',
        number: '604',
      },
      {
        code: 'PGK',
        decimals: 2,
        name: 'Papua New Guinean kina',
        number: '598',
      },
      {
        code: 'PHP',
        decimals: 2,
        name: 'Philippine peso',
        number: '608',
      },
      {
        code: 'PKR',
        decimals: 2,
        name: 'Pakistani rupee',
        number: '586',
      },
      {
        code: 'PLN',
        decimals: 2,
        name: 'Polish z\u0142oty',
        number: '985',
      },
      {
        code: 'PYG',
        decimals: 0,
        name: 'Paraguayan guaran\xED',
        number: '600',
      },
      {
        code: 'QAR',
        decimals: 2,
        name: 'Qatari riyal',
        number: '634',
      },
      {
        code: 'RON',
        decimals: 2,
        name: 'Romanian new leu',
        number: '946',
      },
      {
        code: 'RSD',
        decimals: 2,
        name: 'Serbian dinar',
        number: '941',
      },
      {
        code: 'RUB',
        decimals: 2,
        name: 'Russian rouble',
        number: '643',
      },
      {
        code: 'RWF',
        decimals: 0,
        name: 'Rwandan franc',
        number: '646',
      },
      {
        code: 'SAR',
        decimals: 2,
        name: 'Saudi riyal',
        number: '682',
      },
      {
        code: 'SBD',
        decimals: 2,
        name: 'Solomon Islands dollar',
        number: '90',
      },
      {
        code: 'SCR',
        decimals: 2,
        name: 'Seychelles rupee',
        number: '690',
      },
      {
        code: 'SDG',
        decimals: 2,
        name: 'Sudanese pound',
        number: '938',
      },
      {
        code: 'SEK',
        decimals: 2,
        name: 'Swedish krona/kronor',
        number: '752',
      },
      {
        code: 'SGD',
        decimals: 2,
        name: 'Singapore dollar',
        number: '702',
      },
      {
        code: 'SHP',
        decimals: 2,
        name: 'Saint Helena pound',
        number: '654',
      },
      {
        code: 'SLL',
        decimals: 0,
        name: 'Sierra Leonean leone',
        number: '694',
      },
      {
        code: 'SOS',
        decimals: 2,
        name: 'Somali shilling',
        number: '706',
      },
      {
        code: 'SRD',
        decimals: 2,
        name: 'Surinamese dollar',
        number: '968',
      },
      {
        code: 'SSP',
        decimals: 2,
        name: 'South Sudanese pound',
        number: '728',
      },
      {
        code: 'STD',
        decimals: 0,
        name: 'S\xE3o Tom\xE9 and Pr\xEDncipe dobra',
        number: '678',
      },
      {
        code: 'SYP',
        decimals: 2,
        name: 'Syrian pound',
        number: '760',
      },
      {
        code: 'SZL',
        decimals: 2,
        name: 'Swazi lilangeni',
        number: '748',
      },
      {
        code: 'THB',
        decimals: 2,
        name: 'Thai baht',
        number: '764',
      },
      {
        code: 'TJS',
        decimals: 2,
        name: 'Tajikistani somoni',
        number: '972',
      },
      {
        code: 'TMT',
        decimals: 2,
        name: 'Turkmenistani manat',
        number: '934',
      },
      {
        code: 'TND',
        decimals: 3,
        name: 'Tunisian dinar',
        number: '788',
      },
      {
        code: 'TOP',
        decimals: 2,
        name: 'Tongan pa\u02BBanga',
        number: '776',
      },
      {
        code: 'TRY',
        decimals: 2,
        name: 'Turkish lira',
        number: '949',
      },
      {
        code: 'TTD',
        decimals: 2,
        name: 'Trinidad and Tobago dollar',
        number: '780',
      },
      {
        code: 'TWD',
        decimals: 2,
        name: 'New Taiwan dollar',
        number: '901',
      },
      {
        code: 'TZS',
        decimals: 2,
        name: 'Tanzanian shilling',
        number: '834',
      },
      {
        code: 'UAH',
        decimals: 2,
        name: 'Ukrainian hryvnia',
        number: '980',
      },
      {
        code: 'UGX',
        decimals: 2,
        name: 'Ugandan shilling',
        number: '800',
      },
      {
        code: 'USD',
        decimals: 2,
        name: 'United States dollar',
        number: '840',
      },
      {
        code: 'USN',
        decimals: 2,
        name: 'United States dollar (next day) (funds code)',
        number: '997',
      },
      {
        code: 'USS',
        decimals: 2,
        name: 'United States dollar (same day) (funds code) (one source[who?] claims it is no longer used, but it is still on the ISO 4217-MA list)',
        number: '998',
      },
      {
        code: 'UYI',
        decimals: 0,
        name: 'Uruguay Peso en Unidades Indexadas (URUIURUI) (funds code)',
        number: '940',
      },
      {
        code: 'UYU',
        decimals: 2,
        name: 'Uruguayan peso',
        number: '858',
      },
      {
        code: 'UZS',
        decimals: 2,
        name: 'Uzbekistan som',
        number: '860',
      },
      {
        code: 'VEF',
        decimals: 2,
        name: 'Venezuelan bol\xEDvar fuerte',
        number: '937',
      },
      {
        code: 'VND',
        decimals: 0,
        name: 'Vietnamese dong',
        number: '704',
      },
      {
        code: 'VUV',
        decimals: 0,
        name: 'Vanuatu vatu',
        number: '548',
      },
      {
        code: 'WST',
        decimals: 2,
        name: 'Samoan tala',
        number: '882',
      },
      {
        code: 'XAF',
        decimals: 0,
        name: 'CFA franc BEAC',
        number: '950',
      },
      {
        code: 'XAG',
        decimals: null,
        name: 'Silver (one troy ounce)',
        number: '961',
      },
      {
        code: 'XAU',
        decimals: null,
        name: 'Gold (one troy ounce)',
        number: '959',
      },
      {
        code: 'XBA',
        decimals: null,
        name: 'European Composite Unit (EURCO) (bond market unit)',
        number: '955',
      },
      {
        code: 'XBB',
        decimals: null,
        name: 'European Monetary Unit (E.M.U.-6) (bond market unit)',
        number: '956',
      },
      {
        code: 'XBC',
        decimals: null,
        name: 'European Unit of Account 9 (E.U.A.-9) (bond market unit)',
        number: '957',
      },
      {
        code: 'XBD',
        decimals: null,
        name: 'European Unit of Account 17 (E.U.A.-17) (bond market unit)',
        number: '958',
      },
      {
        code: 'XCD',
        decimals: 2,
        name: 'East Caribbean dollar',
        number: '951',
      },
      {
        code: 'XDR',
        decimals: null,
        name: 'Special drawing rights',
        number: '960',
      },
      {
        code: 'XFU',
        decimals: null,
        name: 'UIC franc (special settlement currency)',
        number: 'Nil',
      },
      {
        code: 'XOF',
        decimals: 0,
        name: 'CFA franc BCEAO',
        number: '952',
      },
      {
        code: 'XPD',
        decimals: null,
        name: 'Palladium (one troy ounce)',
        number: '964',
      },
      {
        code: 'XPF',
        decimals: 0,
        name: 'CFP franc',
        number: '953',
      },
      {
        code: 'XPT',
        decimals: null,
        name: 'Platinum (one troy ounce)',
        number: '962',
      },
      {
        code: 'XTS',
        decimals: null,
        name: 'Code reserved for testing purposes',
        number: '963',
      },
      {
        code: 'XXX',
        decimals: null,
        name: 'No currency',
        number: '999',
      },
      {
        code: 'YER',
        decimals: 2,
        name: 'Yemeni rial',
        number: '886',
      },
      {
        code: 'ZAR',
        decimals: 2,
        name: 'South African rand',
        number: '710',
      },
      {
        code: 'ZMW',
        decimals: 2,
        name: 'Zambian kwacha',
        number: '967',
      },
    ];
  },
});

// node_modules/country-data/data/languages.json
var require_languages = __commonJS({
  'node_modules/country-data/data/languages.json'(exports, module) {
    module.exports = [
      {
        alpha2: 'aa',
        alpha3: 'aar',
        bibliographic: '',
        name: 'Afar',
      },
      {
        alpha2: 'ab',
        alpha3: 'abk',
        bibliographic: '',
        name: 'Abkhazian',
      },
      {
        alpha2: '',
        alpha3: 'ace',
        bibliographic: '',
        name: 'Achinese',
      },
      {
        alpha2: '',
        alpha3: 'ach',
        bibliographic: '',
        name: 'Acoli',
      },
      {
        alpha2: '',
        alpha3: 'ada',
        bibliographic: '',
        name: 'Adangme',
      },
      {
        alpha2: '',
        alpha3: 'ady',
        bibliographic: '',
        name: 'Adygei',
      },
      {
        alpha2: '',
        alpha3: 'ady',
        bibliographic: '',
        name: 'Adyghe',
      },
      {
        alpha2: '',
        alpha3: 'afa',
        bibliographic: '',
        name: 'Afro-Asiatic languages',
      },
      {
        alpha2: '',
        alpha3: 'afh',
        bibliographic: '',
        name: 'Afrihili',
      },
      {
        alpha2: 'af',
        alpha3: 'afr',
        bibliographic: '',
        name: 'Afrikaans',
      },
      {
        alpha2: '',
        alpha3: 'ain',
        bibliographic: '',
        name: 'Ainu',
      },
      {
        alpha2: 'ak',
        alpha3: 'aka',
        bibliographic: '',
        name: 'Akan',
      },
      {
        alpha2: '',
        alpha3: 'akk',
        bibliographic: '',
        name: 'Akkadian',
      },
      {
        alpha2: '',
        alpha3: 'ale',
        bibliographic: '',
        name: 'Aleut',
      },
      {
        alpha2: '',
        alpha3: 'alg',
        bibliographic: '',
        name: 'Algonquian languages',
      },
      {
        alpha2: '',
        alpha3: 'alt',
        bibliographic: '',
        name: 'Southern Altai',
      },
      {
        alpha2: 'am',
        alpha3: 'amh',
        bibliographic: '',
        name: 'Amharic',
      },
      {
        alpha2: '',
        alpha3: 'ang',
        bibliographic: '',
        name: 'English, Old (ca.450-1100)',
      },
      {
        alpha2: '',
        alpha3: 'anp',
        bibliographic: '',
        name: 'Angika',
      },
      {
        alpha2: '',
        alpha3: 'apa',
        bibliographic: '',
        name: 'Apache languages',
      },
      {
        alpha2: 'ar',
        alpha3: 'ara',
        bibliographic: '',
        name: 'Arabic',
      },
      {
        alpha2: '',
        alpha3: 'arc',
        bibliographic: '',
        name: 'Imperial Aramaic (700-300 BCE)',
      },
      {
        alpha2: '',
        alpha3: 'arc',
        bibliographic: '',
        name: 'Official Aramaic (700-300 BCE)',
      },
      {
        alpha2: 'an',
        alpha3: 'arg',
        bibliographic: '',
        name: 'Aragonese',
      },
      {
        alpha2: '',
        alpha3: 'arn',
        bibliographic: '',
        name: 'Mapuche',
      },
      {
        alpha2: '',
        alpha3: 'arn',
        bibliographic: '',
        name: 'Mapudungun',
      },
      {
        alpha2: '',
        alpha3: 'arp',
        bibliographic: '',
        name: 'Arapaho',
      },
      {
        alpha2: '',
        alpha3: 'art',
        bibliographic: '',
        name: 'Artificial languages',
      },
      {
        alpha2: '',
        alpha3: 'arw',
        bibliographic: '',
        name: 'Arawak',
      },
      {
        alpha2: 'as',
        alpha3: 'asm',
        bibliographic: '',
        name: 'Assamese',
      },
      {
        alpha2: '',
        alpha3: 'ast',
        bibliographic: '',
        name: 'Asturian',
      },
      {
        alpha2: '',
        alpha3: 'ast',
        bibliographic: '',
        name: 'Asturleonese',
      },
      {
        alpha2: '',
        alpha3: 'ast',
        bibliographic: '',
        name: 'Bable',
      },
      {
        alpha2: '',
        alpha3: 'ast',
        bibliographic: '',
        name: 'Leonese',
      },
      {
        alpha2: '',
        alpha3: 'ath',
        bibliographic: '',
        name: 'Athapascan languages',
      },
      {
        alpha2: '',
        alpha3: 'aus',
        bibliographic: '',
        name: 'Australian languages',
      },
      {
        alpha2: 'av',
        alpha3: 'ava',
        bibliographic: '',
        name: 'Avaric',
      },
      {
        alpha2: 'ae',
        alpha3: 'ave',
        bibliographic: '',
        name: 'Avestan',
      },
      {
        alpha2: '',
        alpha3: 'awa',
        bibliographic: '',
        name: 'Awadhi',
      },
      {
        alpha2: 'ay',
        alpha3: 'aym',
        bibliographic: '',
        name: 'Aymara',
      },
      {
        alpha2: 'az',
        alpha3: 'aze',
        bibliographic: '',
        name: 'Azerbaijani',
      },
      {
        alpha2: '',
        alpha3: 'bad',
        bibliographic: '',
        name: 'Banda languages',
      },
      {
        alpha2: '',
        alpha3: 'bai',
        bibliographic: '',
        name: 'Bamileke languages',
      },
      {
        alpha2: 'ba',
        alpha3: 'bak',
        bibliographic: '',
        name: 'Bashkir',
      },
      {
        alpha2: '',
        alpha3: 'bal',
        bibliographic: '',
        name: 'Baluchi',
      },
      {
        alpha2: 'bm',
        alpha3: 'bam',
        bibliographic: '',
        name: 'Bambara',
      },
      {
        alpha2: '',
        alpha3: 'ban',
        bibliographic: '',
        name: 'Balinese',
      },
      {
        alpha2: '',
        alpha3: 'bas',
        bibliographic: '',
        name: 'Basa',
      },
      {
        alpha2: '',
        alpha3: 'bat',
        bibliographic: '',
        name: 'Baltic languages',
      },
      {
        alpha2: '',
        alpha3: 'bej',
        bibliographic: '',
        name: 'Bedawiyet',
      },
      {
        alpha2: '',
        alpha3: 'bej',
        bibliographic: '',
        name: 'Beja',
      },
      {
        alpha2: 'be',
        alpha3: 'bel',
        bibliographic: '',
        name: 'Belarusian',
      },
      {
        alpha2: '',
        alpha3: 'bem',
        bibliographic: '',
        name: 'Bemba',
      },
      {
        alpha2: 'bn',
        alpha3: 'ben',
        bibliographic: '',
        name: 'Bengali',
      },
      {
        alpha2: '',
        alpha3: 'ber',
        bibliographic: '',
        name: 'Berber languages',
      },
      {
        alpha2: '',
        alpha3: 'bho',
        bibliographic: '',
        name: 'Bhojpuri',
      },
      {
        alpha2: 'bh',
        alpha3: 'bih',
        bibliographic: '',
        name: 'Bihari languages',
      },
      {
        alpha2: '',
        alpha3: 'bik',
        bibliographic: '',
        name: 'Bikol',
      },
      {
        alpha2: '',
        alpha3: 'bin',
        bibliographic: '',
        name: 'Bini',
      },
      {
        alpha2: '',
        alpha3: 'bin',
        bibliographic: '',
        name: 'Edo',
      },
      {
        alpha2: 'bi',
        alpha3: 'bis',
        bibliographic: '',
        name: 'Bislama',
      },
      {
        alpha2: '',
        alpha3: 'bla',
        bibliographic: '',
        name: 'Siksika',
      },
      {
        alpha2: '',
        alpha3: 'bnt',
        bibliographic: '',
        name: 'Bantu languages',
      },
      {
        alpha2: 'bo',
        alpha3: 'bod',
        bibliographic: 'tib',
        name: 'Tibetan',
      },
      {
        alpha2: 'bs',
        alpha3: 'bos',
        bibliographic: '',
        name: 'Bosnian',
      },
      {
        alpha2: '',
        alpha3: 'bra',
        bibliographic: '',
        name: 'Braj',
      },
      {
        alpha2: 'br',
        alpha3: 'bre',
        bibliographic: '',
        name: 'Breton',
      },
      {
        alpha2: '',
        alpha3: 'btk',
        bibliographic: '',
        name: 'Batak languages',
      },
      {
        alpha2: '',
        alpha3: 'bua',
        bibliographic: '',
        name: 'Buriat',
      },
      {
        alpha2: '',
        alpha3: 'bug',
        bibliographic: '',
        name: 'Buginese',
      },
      {
        alpha2: 'bg',
        alpha3: 'bul',
        bibliographic: '',
        name: 'Bulgarian',
      },
      {
        alpha2: '',
        alpha3: 'byn',
        bibliographic: '',
        name: 'Bilin',
      },
      {
        alpha2: '',
        alpha3: 'byn',
        bibliographic: '',
        name: 'Blin',
      },
      {
        alpha2: '',
        alpha3: 'cad',
        bibliographic: '',
        name: 'Caddo',
      },
      {
        alpha2: '',
        alpha3: 'cai',
        bibliographic: '',
        name: 'Central American Indian languages',
      },
      {
        alpha2: '',
        alpha3: 'car',
        bibliographic: '',
        name: 'Galibi Carib',
      },
      {
        alpha2: 'ca',
        alpha3: 'cat',
        bibliographic: '',
        name: 'Catalan',
      },
      {
        alpha2: 'ca',
        alpha3: 'cat',
        bibliographic: '',
        name: 'Valencian',
      },
      {
        alpha2: '',
        alpha3: 'cau',
        bibliographic: '',
        name: 'Caucasian languages',
      },
      {
        alpha2: '',
        alpha3: 'ceb',
        bibliographic: '',
        name: 'Cebuano',
      },
      {
        alpha2: '',
        alpha3: 'cel',
        bibliographic: '',
        name: 'Celtic languages',
      },
      {
        alpha2: 'cs',
        alpha3: 'ces',
        bibliographic: 'cze',
        name: 'Czech',
      },
      {
        alpha2: 'ch',
        alpha3: 'cha',
        bibliographic: '',
        name: 'Chamorro',
      },
      {
        alpha2: '',
        alpha3: 'chb',
        bibliographic: '',
        name: 'Chibcha',
      },
      {
        alpha2: 'ce',
        alpha3: 'che',
        bibliographic: '',
        name: 'Chechen',
      },
      {
        alpha2: '',
        alpha3: 'chg',
        bibliographic: '',
        name: 'Chagatai',
      },
      {
        alpha2: '',
        alpha3: 'chk',
        bibliographic: '',
        name: 'Chuukese',
      },
      {
        alpha2: '',
        alpha3: 'chm',
        bibliographic: '',
        name: 'Mari',
      },
      {
        alpha2: '',
        alpha3: 'chn',
        bibliographic: '',
        name: 'Chinook jargon',
      },
      {
        alpha2: '',
        alpha3: 'cho',
        bibliographic: '',
        name: 'Choctaw',
      },
      {
        alpha2: '',
        alpha3: 'chp',
        bibliographic: '',
        name: 'Chipewyan',
      },
      {
        alpha2: '',
        alpha3: 'chp',
        bibliographic: '',
        name: 'Dene Suline',
      },
      {
        alpha2: '',
        alpha3: 'chr',
        bibliographic: '',
        name: 'Cherokee',
      },
      {
        alpha2: 'cu',
        alpha3: 'chu',
        bibliographic: '',
        name: 'Church Slavic',
      },
      {
        alpha2: 'cu',
        alpha3: 'chu',
        bibliographic: '',
        name: 'Church Slavonic',
      },
      {
        alpha2: 'cu',
        alpha3: 'chu',
        bibliographic: '',
        name: 'Old Bulgarian',
      },
      {
        alpha2: 'cu',
        alpha3: 'chu',
        bibliographic: '',
        name: 'Old Church Slavonic',
      },
      {
        alpha2: 'cu',
        alpha3: 'chu',
        bibliographic: '',
        name: 'Old Slavonic',
      },
      {
        alpha2: 'cv',
        alpha3: 'chv',
        bibliographic: '',
        name: 'Chuvash',
      },
      {
        alpha2: '',
        alpha3: 'chy',
        bibliographic: '',
        name: 'Cheyenne',
      },
      {
        alpha2: '',
        alpha3: 'cmc',
        bibliographic: '',
        name: 'Chamic languages',
      },
      {
        alpha2: '',
        alpha3: 'cop',
        bibliographic: '',
        name: 'Coptic',
      },
      {
        alpha2: 'kw',
        alpha3: 'cor',
        bibliographic: '',
        name: 'Cornish',
      },
      {
        alpha2: 'co',
        alpha3: 'cos',
        bibliographic: '',
        name: 'Corsican',
      },
      {
        alpha2: '',
        alpha3: 'cpe',
        bibliographic: '',
        name: 'Creoles and pidgins, English based',
      },
      {
        alpha2: '',
        alpha3: 'cpf',
        bibliographic: '',
        name: 'Creoles and pidgins, French-based',
      },
      {
        alpha2: '',
        alpha3: 'cpp',
        bibliographic: '',
        name: 'Creoles and pidgins, Portuguese-based',
      },
      {
        alpha2: 'cr',
        alpha3: 'cre',
        bibliographic: '',
        name: 'Cree',
      },
      {
        alpha2: '',
        alpha3: 'crh',
        bibliographic: '',
        name: 'Crimean Tatar',
      },
      {
        alpha2: '',
        alpha3: 'crh',
        bibliographic: '',
        name: 'Crimean Turkish',
      },
      {
        alpha2: '',
        alpha3: 'crp',
        bibliographic: '',
        name: 'Creoles and pidgins',
      },
      {
        alpha2: '',
        alpha3: 'csb',
        bibliographic: '',
        name: 'Kashubian',
      },
      {
        alpha2: '',
        alpha3: 'cus',
        bibliographic: '',
        name: 'Cushitic languages',
      },
      {
        alpha2: 'cy',
        alpha3: 'cym',
        bibliographic: 'wel',
        name: 'Welsh',
      },
      {
        alpha2: '',
        alpha3: 'dak',
        bibliographic: '',
        name: 'Dakota',
      },
      {
        alpha2: 'da',
        alpha3: 'dan',
        bibliographic: '',
        name: 'Danish',
      },
      {
        alpha2: '',
        alpha3: 'dar',
        bibliographic: '',
        name: 'Dargwa',
      },
      {
        alpha2: '',
        alpha3: 'day',
        bibliographic: '',
        name: 'Land Dayak languages',
      },
      {
        alpha2: '',
        alpha3: 'del',
        bibliographic: '',
        name: 'Delaware',
      },
      {
        alpha2: '',
        alpha3: 'den',
        bibliographic: '',
        name: 'Slave (Athapascan)',
      },
      {
        alpha2: 'de',
        alpha3: 'deu',
        bibliographic: 'ger',
        name: 'German',
      },
      {
        alpha2: '',
        alpha3: 'dgr',
        bibliographic: '',
        name: 'Dogrib',
      },
      {
        alpha2: '',
        alpha3: 'din',
        bibliographic: '',
        name: 'Dinka',
      },
      {
        alpha2: 'dv',
        alpha3: 'div',
        bibliographic: '',
        name: 'Dhivehi',
      },
      {
        alpha2: 'dv',
        alpha3: 'div',
        bibliographic: '',
        name: 'Divehi',
      },
      {
        alpha2: 'dv',
        alpha3: 'div',
        bibliographic: '',
        name: 'Maldivian',
      },
      {
        alpha2: '',
        alpha3: 'doi',
        bibliographic: '',
        name: 'Dogri',
      },
      {
        alpha2: '',
        alpha3: 'dra',
        bibliographic: '',
        name: 'Dravidian languages',
      },
      {
        alpha2: '',
        alpha3: 'dsb',
        bibliographic: '',
        name: 'Lower Sorbian',
      },
      {
        alpha2: '',
        alpha3: 'dua',
        bibliographic: '',
        name: 'Duala',
      },
      {
        alpha2: '',
        alpha3: 'dum',
        bibliographic: '',
        name: 'Dutch, Middle (ca.1050-1350)',
      },
      {
        alpha2: '',
        alpha3: 'dyu',
        bibliographic: '',
        name: 'Dyula',
      },
      {
        alpha2: 'dz',
        alpha3: 'dzo',
        bibliographic: '',
        name: 'Dzongkha',
      },
      {
        alpha2: '',
        alpha3: 'efi',
        bibliographic: '',
        name: 'Efik',
      },
      {
        alpha2: '',
        alpha3: 'egy',
        bibliographic: '',
        name: 'Egyptian (Ancient)',
      },
      {
        alpha2: '',
        alpha3: 'eka',
        bibliographic: '',
        name: 'Ekajuk',
      },
      {
        alpha2: 'el',
        alpha3: 'ell',
        bibliographic: 'gre',
        name: 'Greek, Modern (1453-)',
      },
      {
        alpha2: '',
        alpha3: 'elx',
        bibliographic: '',
        name: 'Elamite',
      },
      {
        alpha2: 'en',
        alpha3: 'eng',
        bibliographic: '',
        name: 'English',
      },
      {
        alpha2: '',
        alpha3: 'enm',
        bibliographic: '',
        name: 'English, Middle (1100-1500)',
      },
      {
        alpha2: 'eo',
        alpha3: 'epo',
        bibliographic: '',
        name: 'Esperanto',
      },
      {
        alpha2: 'et',
        alpha3: 'est',
        bibliographic: '',
        name: 'Estonian',
      },
      {
        alpha2: 'eu',
        alpha3: 'eus',
        bibliographic: 'baq',
        name: 'Basque',
      },
      {
        alpha2: 'ee',
        alpha3: 'ewe',
        bibliographic: '',
        name: 'Ewe',
      },
      {
        alpha2: '',
        alpha3: 'ewo',
        bibliographic: '',
        name: 'Ewondo',
      },
      {
        alpha2: '',
        alpha3: 'fan',
        bibliographic: '',
        name: 'Fang',
      },
      {
        alpha2: 'fo',
        alpha3: 'fao',
        bibliographic: '',
        name: 'Faroese',
      },
      {
        alpha2: 'fa',
        alpha3: 'fas',
        bibliographic: 'per',
        name: 'Persian',
      },
      {
        alpha2: '',
        alpha3: 'fat',
        bibliographic: '',
        name: 'Fanti',
      },
      {
        alpha2: 'fj',
        alpha3: 'fij',
        bibliographic: '',
        name: 'Fijian',
      },
      {
        alpha2: '',
        alpha3: 'fil',
        bibliographic: '',
        name: 'Filipino',
      },
      {
        alpha2: '',
        alpha3: 'fil',
        bibliographic: '',
        name: 'Pilipino',
      },
      {
        alpha2: 'fi',
        alpha3: 'fin',
        bibliographic: '',
        name: 'Finnish',
      },
      {
        alpha2: '',
        alpha3: 'fiu',
        bibliographic: '',
        name: 'Finno-Ugrian languages',
      },
      {
        alpha2: '',
        alpha3: 'fon',
        bibliographic: '',
        name: 'Fon',
      },
      {
        alpha2: 'fr',
        alpha3: 'fra',
        bibliographic: 'fre',
        name: 'French',
      },
      {
        alpha2: '',
        alpha3: 'frm',
        bibliographic: '',
        name: 'French, Middle (ca.1400-1600)',
      },
      {
        alpha2: '',
        alpha3: 'fro',
        bibliographic: '',
        name: 'French, Old (842-ca.1400)',
      },
      {
        alpha2: '',
        alpha3: 'frr',
        bibliographic: '',
        name: 'Northern Frisian',
      },
      {
        alpha2: '',
        alpha3: 'frs',
        bibliographic: '',
        name: 'Eastern Frisian',
      },
      {
        alpha2: 'fy',
        alpha3: 'fry',
        bibliographic: '',
        name: 'Western Frisian',
      },
      {
        alpha2: 'ff',
        alpha3: 'ful',
        bibliographic: '',
        name: 'Fulah',
      },
      {
        alpha2: '',
        alpha3: 'fur',
        bibliographic: '',
        name: 'Friulian',
      },
      {
        alpha2: '',
        alpha3: 'gaa',
        bibliographic: '',
        name: 'Ga',
      },
      {
        alpha2: '',
        alpha3: 'gay',
        bibliographic: '',
        name: 'Gayo',
      },
      {
        alpha2: '',
        alpha3: 'gba',
        bibliographic: '',
        name: 'Gbaya',
      },
      {
        alpha2: '',
        alpha3: 'gem',
        bibliographic: '',
        name: 'Germanic languages',
      },
      {
        alpha2: '',
        alpha3: 'gez',
        bibliographic: '',
        name: 'Geez',
      },
      {
        alpha2: '',
        alpha3: 'gil',
        bibliographic: '',
        name: 'Gilbertese',
      },
      {
        alpha2: 'gd',
        alpha3: 'gla',
        bibliographic: '',
        name: 'Gaelic',
      },
      {
        alpha2: 'gd',
        alpha3: 'gla',
        bibliographic: '',
        name: 'Scottish Gaelic',
      },
      {
        alpha2: 'ga',
        alpha3: 'gle',
        bibliographic: '',
        name: 'Irish',
      },
      {
        alpha2: 'gl',
        alpha3: 'glg',
        bibliographic: '',
        name: 'Galician',
      },
      {
        alpha2: 'gv',
        alpha3: 'glv',
        bibliographic: '',
        name: 'Manx',
      },
      {
        alpha2: '',
        alpha3: 'gmh',
        bibliographic: '',
        name: 'German, Middle High (ca.1050-1500)',
      },
      {
        alpha2: '',
        alpha3: 'goh',
        bibliographic: '',
        name: 'German, Old High (ca.750-1050)',
      },
      {
        alpha2: '',
        alpha3: 'gon',
        bibliographic: '',
        name: 'Gondi',
      },
      {
        alpha2: '',
        alpha3: 'gor',
        bibliographic: '',
        name: 'Gorontalo',
      },
      {
        alpha2: '',
        alpha3: 'got',
        bibliographic: '',
        name: 'Gothic',
      },
      {
        alpha2: '',
        alpha3: 'grb',
        bibliographic: '',
        name: 'Grebo',
      },
      {
        alpha2: '',
        alpha3: 'grc',
        bibliographic: '',
        name: 'Greek, Ancient (to 1453)',
      },
      {
        alpha2: 'gn',
        alpha3: 'grn',
        bibliographic: '',
        name: 'Guarani',
      },
      {
        alpha2: '',
        alpha3: 'gsw',
        bibliographic: '',
        name: 'Alemannic',
      },
      {
        alpha2: '',
        alpha3: 'gsw',
        bibliographic: '',
        name: 'Alsatian',
      },
      {
        alpha2: '',
        alpha3: 'gsw',
        bibliographic: '',
        name: 'Swiss German',
      },
      {
        alpha2: 'gu',
        alpha3: 'guj',
        bibliographic: '',
        name: 'Gujarati',
      },
      {
        alpha2: '',
        alpha3: 'gwi',
        bibliographic: '',
        name: "Gwich'in",
      },
      {
        alpha2: '',
        alpha3: 'hai',
        bibliographic: '',
        name: 'Haida',
      },
      {
        alpha2: 'ht',
        alpha3: 'hat',
        bibliographic: '',
        name: 'Haitian',
      },
      {
        alpha2: 'ht',
        alpha3: 'hat',
        bibliographic: '',
        name: 'Haitian Creole',
      },
      {
        alpha2: 'ha',
        alpha3: 'hau',
        bibliographic: '',
        name: 'Hausa',
      },
      {
        alpha2: '',
        alpha3: 'haw',
        bibliographic: '',
        name: 'Hawaiian',
      },
      {
        alpha2: 'he',
        alpha3: 'heb',
        bibliographic: '',
        name: 'Hebrew',
      },
      {
        alpha2: 'hz',
        alpha3: 'her',
        bibliographic: '',
        name: 'Herero',
      },
      {
        alpha2: '',
        alpha3: 'hil',
        bibliographic: '',
        name: 'Hiligaynon',
      },
      {
        alpha2: '',
        alpha3: 'him',
        bibliographic: '',
        name: 'Himachali languages',
      },
      {
        alpha2: '',
        alpha3: 'him',
        bibliographic: '',
        name: 'Western Pahari languages',
      },
      {
        alpha2: 'hi',
        alpha3: 'hin',
        bibliographic: '',
        name: 'Hindi',
      },
      {
        alpha2: '',
        alpha3: 'hit',
        bibliographic: '',
        name: 'Hittite',
      },
      {
        alpha2: '',
        alpha3: 'hmn',
        bibliographic: '',
        name: 'Hmong',
      },
      {
        alpha2: '',
        alpha3: 'hmn',
        bibliographic: '',
        name: 'Mong',
      },
      {
        alpha2: 'ho',
        alpha3: 'hmo',
        bibliographic: '',
        name: 'Hiri Motu',
      },
      {
        alpha2: 'hr',
        alpha3: 'hrv',
        bibliographic: '',
        name: 'Croatian',
      },
      {
        alpha2: '',
        alpha3: 'hsb',
        bibliographic: '',
        name: 'Upper Sorbian',
      },
      {
        alpha2: 'hu',
        alpha3: 'hun',
        bibliographic: '',
        name: 'Hungarian',
      },
      {
        alpha2: '',
        alpha3: 'hup',
        bibliographic: '',
        name: 'Hupa',
      },
      {
        alpha2: 'hy',
        alpha3: 'hye',
        bibliographic: 'arm',
        name: 'Armenian',
      },
      {
        alpha2: '',
        alpha3: 'iba',
        bibliographic: '',
        name: 'Iban',
      },
      {
        alpha2: 'ig',
        alpha3: 'ibo',
        bibliographic: '',
        name: 'Igbo',
      },
      {
        alpha2: 'io',
        alpha3: 'ido',
        bibliographic: '',
        name: 'Ido',
      },
      {
        alpha2: 'ii',
        alpha3: 'iii',
        bibliographic: '',
        name: 'Nuosu',
      },
      {
        alpha2: 'ii',
        alpha3: 'iii',
        bibliographic: '',
        name: 'Sichuan Yi',
      },
      {
        alpha2: '',
        alpha3: 'ijo',
        bibliographic: '',
        name: 'Ijo languages',
      },
      {
        alpha2: 'iu',
        alpha3: 'iku',
        bibliographic: '',
        name: 'Inuktitut',
      },
      {
        alpha2: 'ie',
        alpha3: 'ile',
        bibliographic: '',
        name: 'Interlingue',
      },
      {
        alpha2: 'ie',
        alpha3: 'ile',
        bibliographic: '',
        name: 'Occidental',
      },
      {
        alpha2: '',
        alpha3: 'ilo',
        bibliographic: '',
        name: 'Iloko',
      },
      {
        alpha2: 'ia',
        alpha3: 'ina',
        bibliographic: '',
        name: 'Interlingua (International Auxiliary Language Association)',
      },
      {
        alpha2: '',
        alpha3: 'inc',
        bibliographic: '',
        name: 'Indic languages',
      },
      {
        alpha2: 'id',
        alpha3: 'ind',
        bibliographic: '',
        name: 'Indonesian',
      },
      {
        alpha2: '',
        alpha3: 'ine',
        bibliographic: '',
        name: 'Indo-European languages',
      },
      {
        alpha2: '',
        alpha3: 'inh',
        bibliographic: '',
        name: 'Ingush',
      },
      {
        alpha2: 'ik',
        alpha3: 'ipk',
        bibliographic: '',
        name: 'Inupiaq',
      },
      {
        alpha2: '',
        alpha3: 'ira',
        bibliographic: '',
        name: 'Iranian languages',
      },
      {
        alpha2: '',
        alpha3: 'iro',
        bibliographic: '',
        name: 'Iroquoian languages',
      },
      {
        alpha2: 'is',
        alpha3: 'isl',
        bibliographic: 'ice',
        name: 'Icelandic',
      },
      {
        alpha2: 'it',
        alpha3: 'ita',
        bibliographic: '',
        name: 'Italian',
      },
      {
        alpha2: 'jv',
        alpha3: 'jav',
        bibliographic: '',
        name: 'Javanese',
      },
      {
        alpha2: '',
        alpha3: 'jbo',
        bibliographic: '',
        name: 'Lojban',
      },
      {
        alpha2: 'ja',
        alpha3: 'jpn',
        bibliographic: '',
        name: 'Japanese',
      },
      {
        alpha2: '',
        alpha3: 'jpr',
        bibliographic: '',
        name: 'Judeo-Persian',
      },
      {
        alpha2: '',
        alpha3: 'jrb',
        bibliographic: '',
        name: 'Judeo-Arabic',
      },
      {
        alpha2: '',
        alpha3: 'kaa',
        bibliographic: '',
        name: 'Kara-Kalpak',
      },
      {
        alpha2: '',
        alpha3: 'kab',
        bibliographic: '',
        name: 'Kabyle',
      },
      {
        alpha2: '',
        alpha3: 'kac',
        bibliographic: '',
        name: 'Jingpho',
      },
      {
        alpha2: '',
        alpha3: 'kac',
        bibliographic: '',
        name: 'Kachin',
      },
      {
        alpha2: 'kl',
        alpha3: 'kal',
        bibliographic: '',
        name: 'Greenlandic',
      },
      {
        alpha2: 'kl',
        alpha3: 'kal',
        bibliographic: '',
        name: 'Kalaallisut',
      },
      {
        alpha2: '',
        alpha3: 'kam',
        bibliographic: '',
        name: 'Kamba',
      },
      {
        alpha2: 'kn',
        alpha3: 'kan',
        bibliographic: '',
        name: 'Kannada',
      },
      {
        alpha2: '',
        alpha3: 'kar',
        bibliographic: '',
        name: 'Karen languages',
      },
      {
        alpha2: 'ks',
        alpha3: 'kas',
        bibliographic: '',
        name: 'Kashmiri',
      },
      {
        alpha2: 'ka',
        alpha3: 'kat',
        bibliographic: 'geo',
        name: 'Georgian',
      },
      {
        alpha2: 'kr',
        alpha3: 'kau',
        bibliographic: '',
        name: 'Kanuri',
      },
      {
        alpha2: '',
        alpha3: 'kaw',
        bibliographic: '',
        name: 'Kawi',
      },
      {
        alpha2: 'kk',
        alpha3: 'kaz',
        bibliographic: '',
        name: 'Kazakh',
      },
      {
        alpha2: '',
        alpha3: 'kbd',
        bibliographic: '',
        name: 'Kabardian',
      },
      {
        alpha2: '',
        alpha3: 'kha',
        bibliographic: '',
        name: 'Khasi',
      },
      {
        alpha2: '',
        alpha3: 'khi',
        bibliographic: '',
        name: 'Khoisan languages',
      },
      {
        alpha2: 'km',
        alpha3: 'khm',
        bibliographic: '',
        name: 'Central Khmer',
      },
      {
        alpha2: '',
        alpha3: 'kho',
        bibliographic: '',
        name: 'Khotanese',
      },
      {
        alpha2: '',
        alpha3: 'kho',
        bibliographic: '',
        name: 'Sakan',
      },
      {
        alpha2: 'ki',
        alpha3: 'kik',
        bibliographic: '',
        name: 'Gikuyu',
      },
      {
        alpha2: 'ki',
        alpha3: 'kik',
        bibliographic: '',
        name: 'Kikuyu',
      },
      {
        alpha2: 'rw',
        alpha3: 'kin',
        bibliographic: '',
        name: 'Kinyarwanda',
      },
      {
        alpha2: 'ky',
        alpha3: 'kir',
        bibliographic: '',
        name: 'Kirghiz',
      },
      {
        alpha2: 'ky',
        alpha3: 'kir',
        bibliographic: '',
        name: 'Kyrgyz',
      },
      {
        alpha2: '',
        alpha3: 'kmb',
        bibliographic: '',
        name: 'Kimbundu',
      },
      {
        alpha2: '',
        alpha3: 'kok',
        bibliographic: '',
        name: 'Konkani',
      },
      {
        alpha2: 'kv',
        alpha3: 'kom',
        bibliographic: '',
        name: 'Komi',
      },
      {
        alpha2: 'kg',
        alpha3: 'kon',
        bibliographic: '',
        name: 'Kongo',
      },
      {
        alpha2: 'ko',
        alpha3: 'kor',
        bibliographic: '',
        name: 'Korean',
      },
      {
        alpha2: '',
        alpha3: 'kos',
        bibliographic: '',
        name: 'Kosraean',
      },
      {
        alpha2: '',
        alpha3: 'kpe',
        bibliographic: '',
        name: 'Kpelle',
      },
      {
        alpha2: '',
        alpha3: 'krc',
        bibliographic: '',
        name: 'Karachay-Balkar',
      },
      {
        alpha2: '',
        alpha3: 'krl',
        bibliographic: '',
        name: 'Karelian',
      },
      {
        alpha2: '',
        alpha3: 'kro',
        bibliographic: '',
        name: 'Kru languages',
      },
      {
        alpha2: '',
        alpha3: 'kru',
        bibliographic: '',
        name: 'Kurukh',
      },
      {
        alpha2: 'kj',
        alpha3: 'kua',
        bibliographic: '',
        name: 'Kuanyama',
      },
      {
        alpha2: 'kj',
        alpha3: 'kua',
        bibliographic: '',
        name: 'Kwanyama',
      },
      {
        alpha2: '',
        alpha3: 'kum',
        bibliographic: '',
        name: 'Kumyk',
      },
      {
        alpha2: 'ku',
        alpha3: 'kur',
        bibliographic: '',
        name: 'Kurdish',
      },
      {
        alpha2: '',
        alpha3: 'kut',
        bibliographic: '',
        name: 'Kutenai',
      },
      {
        alpha2: '',
        alpha3: 'lad',
        bibliographic: '',
        name: 'Ladino',
      },
      {
        alpha2: '',
        alpha3: 'lah',
        bibliographic: '',
        name: 'Lahnda',
      },
      {
        alpha2: '',
        alpha3: 'lam',
        bibliographic: '',
        name: 'Lamba',
      },
      {
        alpha2: 'lo',
        alpha3: 'lao',
        bibliographic: '',
        name: 'Lao',
      },
      {
        alpha2: 'la',
        alpha3: 'lat',
        bibliographic: '',
        name: 'Latin',
      },
      {
        alpha2: 'lv',
        alpha3: 'lav',
        bibliographic: '',
        name: 'Latvian',
      },
      {
        alpha2: '',
        alpha3: 'lez',
        bibliographic: '',
        name: 'Lezghian',
      },
      {
        alpha2: 'li',
        alpha3: 'lim',
        bibliographic: '',
        name: 'Limburgan',
      },
      {
        alpha2: 'li',
        alpha3: 'lim',
        bibliographic: '',
        name: 'Limburger',
      },
      {
        alpha2: 'li',
        alpha3: 'lim',
        bibliographic: '',
        name: 'Limburgish',
      },
      {
        alpha2: 'ln',
        alpha3: 'lin',
        bibliographic: '',
        name: 'Lingala',
      },
      {
        alpha2: 'lt',
        alpha3: 'lit',
        bibliographic: '',
        name: 'Lithuanian',
      },
      {
        alpha2: '',
        alpha3: 'lol',
        bibliographic: '',
        name: 'Mongo',
      },
      {
        alpha2: '',
        alpha3: 'loz',
        bibliographic: '',
        name: 'Lozi',
      },
      {
        alpha2: 'lb',
        alpha3: 'ltz',
        bibliographic: '',
        name: 'Letzeburgesch',
      },
      {
        alpha2: 'lb',
        alpha3: 'ltz',
        bibliographic: '',
        name: 'Luxembourgish',
      },
      {
        alpha2: '',
        alpha3: 'lua',
        bibliographic: '',
        name: 'Luba-Lulua',
      },
      {
        alpha2: 'lu',
        alpha3: 'lub',
        bibliographic: '',
        name: 'Luba-Katanga',
      },
      {
        alpha2: 'lg',
        alpha3: 'lug',
        bibliographic: '',
        name: 'Ganda',
      },
      {
        alpha2: '',
        alpha3: 'lui',
        bibliographic: '',
        name: 'Luiseno',
      },
      {
        alpha2: '',
        alpha3: 'lun',
        bibliographic: '',
        name: 'Lunda',
      },
      {
        alpha2: '',
        alpha3: 'luo',
        bibliographic: '',
        name: 'Luo (Kenya and Tanzania)',
      },
      {
        alpha2: '',
        alpha3: 'lus',
        bibliographic: '',
        name: 'Lushai',
      },
      {
        alpha2: '',
        alpha3: 'mad',
        bibliographic: '',
        name: 'Madurese',
      },
      {
        alpha2: '',
        alpha3: 'mag',
        bibliographic: '',
        name: 'Magahi',
      },
      {
        alpha2: 'mh',
        alpha3: 'mah',
        bibliographic: '',
        name: 'Marshallese',
      },
      {
        alpha2: '',
        alpha3: 'mai',
        bibliographic: '',
        name: 'Maithili',
      },
      {
        alpha2: '',
        alpha3: 'mak',
        bibliographic: '',
        name: 'Makasar',
      },
      {
        alpha2: 'ml',
        alpha3: 'mal',
        bibliographic: '',
        name: 'Malayalam',
      },
      {
        alpha2: '',
        alpha3: 'man',
        bibliographic: '',
        name: 'Mandingo',
      },
      {
        alpha2: '',
        alpha3: 'map',
        bibliographic: '',
        name: 'Austronesian languages',
      },
      {
        alpha2: 'mr',
        alpha3: 'mar',
        bibliographic: '',
        name: 'Marathi',
      },
      {
        alpha2: '',
        alpha3: 'mas',
        bibliographic: '',
        name: 'Masai',
      },
      {
        alpha2: '',
        alpha3: 'mdf',
        bibliographic: '',
        name: 'Moksha',
      },
      {
        alpha2: '',
        alpha3: 'mdr',
        bibliographic: '',
        name: 'Mandar',
      },
      {
        alpha2: '',
        alpha3: 'men',
        bibliographic: '',
        name: 'Mende',
      },
      {
        alpha2: '',
        alpha3: 'mga',
        bibliographic: '',
        name: 'Irish, Middle (900-1200)',
      },
      {
        alpha2: '',
        alpha3: 'mic',
        bibliographic: '',
        name: "Mi'kmaq",
      },
      {
        alpha2: '',
        alpha3: 'mic',
        bibliographic: '',
        name: 'Micmac',
      },
      {
        alpha2: '',
        alpha3: 'min',
        bibliographic: '',
        name: 'Minangkabau',
      },
      {
        alpha2: '',
        alpha3: 'mis',
        bibliographic: '',
        name: 'Uncoded languages',
      },
      {
        alpha2: 'mk',
        alpha3: 'mkd',
        bibliographic: 'mac',
        name: 'Macedonian',
      },
      {
        alpha2: '',
        alpha3: 'mkh',
        bibliographic: '',
        name: 'Mon-Khmer languages',
      },
      {
        alpha2: 'mg',
        alpha3: 'mlg',
        bibliographic: '',
        name: 'Malagasy',
      },
      {
        alpha2: 'mt',
        alpha3: 'mlt',
        bibliographic: '',
        name: 'Maltese',
      },
      {
        alpha2: '',
        alpha3: 'mnc',
        bibliographic: '',
        name: 'Manchu',
      },
      {
        alpha2: '',
        alpha3: 'mni',
        bibliographic: '',
        name: 'Manipuri',
      },
      {
        alpha2: '',
        alpha3: 'mno',
        bibliographic: '',
        name: 'Manobo languages',
      },
      {
        alpha2: '',
        alpha3: 'moh',
        bibliographic: '',
        name: 'Mohawk',
      },
      {
        alpha2: 'mn',
        alpha3: 'mon',
        bibliographic: '',
        name: 'Mongolian',
      },
      {
        alpha2: '',
        alpha3: 'mos',
        bibliographic: '',
        name: 'Mossi',
      },
      {
        alpha2: '',
        alpha3: 'mot',
        bibliographic: '',
        name: 'Montenegrin',
      },
      {
        alpha2: 'mi',
        alpha3: 'mri',
        bibliographic: 'mao',
        name: 'Maori',
      },
      {
        alpha2: 'ms',
        alpha3: 'msa',
        bibliographic: 'may',
        name: 'Malay',
      },
      {
        alpha2: '',
        alpha3: 'mul',
        bibliographic: '',
        name: 'Multiple languages',
      },
      {
        alpha2: '',
        alpha3: 'mun',
        bibliographic: '',
        name: 'Munda languages',
      },
      {
        alpha2: '',
        alpha3: 'mus',
        bibliographic: '',
        name: 'Creek',
      },
      {
        alpha2: '',
        alpha3: 'mwl',
        bibliographic: '',
        name: 'Mirandese',
      },
      {
        alpha2: '',
        alpha3: 'mwr',
        bibliographic: '',
        name: 'Marwari',
      },
      {
        alpha2: 'my',
        alpha3: 'mya',
        bibliographic: 'bur',
        name: 'Burmese',
      },
      {
        alpha2: '',
        alpha3: 'myn',
        bibliographic: '',
        name: 'Mayan languages',
      },
      {
        alpha2: '',
        alpha3: 'myv',
        bibliographic: '',
        name: 'Erzya',
      },
      {
        alpha2: '',
        alpha3: 'nah',
        bibliographic: '',
        name: 'Nahuatl languages',
      },
      {
        alpha2: '',
        alpha3: 'nai',
        bibliographic: '',
        name: 'North American Indian languages',
      },
      {
        alpha2: '',
        alpha3: 'nap',
        bibliographic: '',
        name: 'Neapolitan',
      },
      {
        alpha2: 'na',
        alpha3: 'nau',
        bibliographic: '',
        name: 'Nauru',
      },
      {
        alpha2: 'nv',
        alpha3: 'nav',
        bibliographic: '',
        name: 'Navaho',
      },
      {
        alpha2: 'nv',
        alpha3: 'nav',
        bibliographic: '',
        name: 'Navajo',
      },
      {
        alpha2: 'nr',
        alpha3: 'nbl',
        bibliographic: '',
        name: 'Ndebele, South',
      },
      {
        alpha2: 'nr',
        alpha3: 'nbl',
        bibliographic: '',
        name: 'South Ndebele',
      },
      {
        alpha2: 'nd',
        alpha3: 'nde',
        bibliographic: '',
        name: 'Ndebele, North',
      },
      {
        alpha2: 'nd',
        alpha3: 'nde',
        bibliographic: '',
        name: 'North Ndebele',
      },
      {
        alpha2: 'ng',
        alpha3: 'ndo',
        bibliographic: '',
        name: 'Ndonga',
      },
      {
        alpha2: '',
        alpha3: 'nds',
        bibliographic: '',
        name: 'German, Low',
      },
      {
        alpha2: '',
        alpha3: 'nds',
        bibliographic: '',
        name: 'Low German',
      },
      {
        alpha2: '',
        alpha3: 'nds',
        bibliographic: '',
        name: 'Low Saxon',
      },
      {
        alpha2: '',
        alpha3: 'nds',
        bibliographic: '',
        name: 'Saxon, Low',
      },
      {
        alpha2: 'ne',
        alpha3: 'nep',
        bibliographic: '',
        name: 'Nepali',
      },
      {
        alpha2: '',
        alpha3: 'new',
        bibliographic: '',
        name: 'Nepal Bhasa',
      },
      {
        alpha2: '',
        alpha3: 'new',
        bibliographic: '',
        name: 'Newari',
      },
      {
        alpha2: '',
        alpha3: 'nia',
        bibliographic: '',
        name: 'Nias',
      },
      {
        alpha2: '',
        alpha3: 'nic',
        bibliographic: '',
        name: 'Niger-Kordofanian languages',
      },
      {
        alpha2: '',
        alpha3: 'niu',
        bibliographic: '',
        name: 'Niuean',
      },
      {
        alpha2: 'nl',
        alpha3: 'nld',
        bibliographic: 'dut',
        name: 'Dutch',
      },
      {
        alpha2: 'nl',
        alpha3: 'nld',
        bibliographic: 'dut',
        name: 'Flemish',
      },
      {
        alpha2: 'nn',
        alpha3: 'nno',
        bibliographic: '',
        name: 'Norwegian Nynorsk',
      },
      {
        alpha2: 'nn',
        alpha3: 'nno',
        bibliographic: '',
        name: 'Nynorsk, Norwegian',
      },
      {
        alpha2: 'nb',
        alpha3: 'nob',
        bibliographic: '',
        name: 'Bokm\xE5l, Norwegian',
      },
      {
        alpha2: 'nb',
        alpha3: 'nob',
        bibliographic: '',
        name: 'Norwegian Bokm\xE5l',
      },
      {
        alpha2: '',
        alpha3: 'nog',
        bibliographic: '',
        name: 'Nogai',
      },
      {
        alpha2: '',
        alpha3: 'non',
        bibliographic: '',
        name: 'Norse, Old',
      },
      {
        alpha2: 'no',
        alpha3: 'nor',
        bibliographic: '',
        name: 'Norwegian',
      },
      {
        alpha2: '',
        alpha3: 'nqo',
        bibliographic: '',
        name: "N'Ko",
      },
      {
        alpha2: '',
        alpha3: 'nso',
        bibliographic: '',
        name: 'Northern Sotho',
      },
      {
        alpha2: '',
        alpha3: 'nso',
        bibliographic: '',
        name: 'Pedi',
      },
      {
        alpha2: '',
        alpha3: 'nso',
        bibliographic: '',
        name: 'Sepedi',
      },
      {
        alpha2: '',
        alpha3: 'nso',
        bibliographic: '',
        name: 'Sotho, Northern',
      },
      {
        alpha2: '',
        alpha3: 'nub',
        bibliographic: '',
        name: 'Nubian languages',
      },
      {
        alpha2: '',
        alpha3: 'nwc',
        bibliographic: '',
        name: 'Classical Nepal Bhasa',
      },
      {
        alpha2: '',
        alpha3: 'nwc',
        bibliographic: '',
        name: 'Classical Newari',
      },
      {
        alpha2: '',
        alpha3: 'nwc',
        bibliographic: '',
        name: 'Old Newari',
      },
      {
        alpha2: 'ny',
        alpha3: 'nya',
        bibliographic: '',
        name: 'Chewa',
      },
      {
        alpha2: 'ny',
        alpha3: 'nya',
        bibliographic: '',
        name: 'Chichewa',
      },
      {
        alpha2: 'ny',
        alpha3: 'nya',
        bibliographic: '',
        name: 'Nyanja',
      },
      {
        alpha2: '',
        alpha3: 'nym',
        bibliographic: '',
        name: 'Nyamwezi',
      },
      {
        alpha2: '',
        alpha3: 'nyn',
        bibliographic: '',
        name: 'Nyankole',
      },
      {
        alpha2: '',
        alpha3: 'nyo',
        bibliographic: '',
        name: 'Nyoro',
      },
      {
        alpha2: '',
        alpha3: 'nzi',
        bibliographic: '',
        name: 'Nzima',
      },
      {
        alpha2: 'oc',
        alpha3: 'oci',
        bibliographic: '',
        name: 'Occitan (post 1500)',
      },
      {
        alpha2: 'oj',
        alpha3: 'oji',
        bibliographic: '',
        name: 'Ojibwa',
      },
      {
        alpha2: 'or',
        alpha3: 'ori',
        bibliographic: '',
        name: 'Oriya',
      },
      {
        alpha2: 'om',
        alpha3: 'orm',
        bibliographic: '',
        name: 'Oromo',
      },
      {
        alpha2: '',
        alpha3: 'osa',
        bibliographic: '',
        name: 'Osage',
      },
      {
        alpha2: 'os',
        alpha3: 'oss',
        bibliographic: '',
        name: 'Ossetian',
      },
      {
        alpha2: 'os',
        alpha3: 'oss',
        bibliographic: '',
        name: 'Ossetic',
      },
      {
        alpha2: '',
        alpha3: 'ota',
        bibliographic: '',
        name: 'Turkish, Ottoman (1500-1928)',
      },
      {
        alpha2: '',
        alpha3: 'oto',
        bibliographic: '',
        name: 'Otomian languages',
      },
      {
        alpha2: '',
        alpha3: 'paa',
        bibliographic: '',
        name: 'Papuan languages',
      },
      {
        alpha2: '',
        alpha3: 'pag',
        bibliographic: '',
        name: 'Pangasinan',
      },
      {
        alpha2: '',
        alpha3: 'pal',
        bibliographic: '',
        name: 'Pahlavi',
      },
      {
        alpha2: '',
        alpha3: 'pam',
        bibliographic: '',
        name: 'Kapampangan',
      },
      {
        alpha2: '',
        alpha3: 'pam',
        bibliographic: '',
        name: 'Pampanga',
      },
      {
        alpha2: 'pa',
        alpha3: 'pan',
        bibliographic: '',
        name: 'Panjabi',
      },
      {
        alpha2: 'pa',
        alpha3: 'pan',
        bibliographic: '',
        name: 'Punjabi',
      },
      {
        alpha2: '',
        alpha3: 'pap',
        bibliographic: '',
        name: 'Papiamento',
      },
      {
        alpha2: '',
        alpha3: 'pau',
        bibliographic: '',
        name: 'Palauan',
      },
      {
        alpha2: '',
        alpha3: 'peo',
        bibliographic: '',
        name: 'Persian, Old (ca.600-400 B.C.)',
      },
      {
        alpha2: '',
        alpha3: 'phi',
        bibliographic: '',
        name: 'Philippine languages',
      },
      {
        alpha2: '',
        alpha3: 'phn',
        bibliographic: '',
        name: 'Phoenician',
      },
      {
        alpha2: 'pi',
        alpha3: 'pli',
        bibliographic: '',
        name: 'Pali',
      },
      {
        alpha2: 'pl',
        alpha3: 'pol',
        bibliographic: '',
        name: 'Polish',
      },
      {
        alpha2: '',
        alpha3: 'pon',
        bibliographic: '',
        name: 'Pohnpeian',
      },
      {
        alpha2: 'pt',
        alpha3: 'por',
        bibliographic: '',
        name: 'Portuguese',
      },
      {
        alpha2: '',
        alpha3: 'pra',
        bibliographic: '',
        name: 'Prakrit languages',
      },
      {
        alpha2: '',
        alpha3: 'pro',
        bibliographic: '',
        name: 'Occitan, Old (to 1500)',
      },
      {
        alpha2: '',
        alpha3: 'pro',
        bibliographic: '',
        name: 'Proven\xE7al, Old (to 1500)',
      },
      {
        alpha2: 'ps',
        alpha3: 'pus',
        bibliographic: '',
        name: 'Pashto',
      },
      {
        alpha2: 'ps',
        alpha3: 'pus',
        bibliographic: '',
        name: 'Pushto',
      },
      {
        alpha2: 'qu',
        alpha3: 'que',
        bibliographic: '',
        name: 'Quechua',
      },
      {
        alpha2: '',
        alpha3: 'raj',
        bibliographic: '',
        name: 'Rajasthani',
      },
      {
        alpha2: '',
        alpha3: 'rap',
        bibliographic: '',
        name: 'Rapanui',
      },
      {
        alpha2: '',
        alpha3: 'rar',
        bibliographic: '',
        name: 'Cook Islands Maori',
      },
      {
        alpha2: '',
        alpha3: 'rar',
        bibliographic: '',
        name: 'Rarotongan',
      },
      {
        alpha2: '',
        alpha3: 'roa',
        bibliographic: '',
        name: 'Romance languages',
      },
      {
        alpha2: 'rm',
        alpha3: 'roh',
        bibliographic: '',
        name: 'Romansh',
      },
      {
        alpha2: '',
        alpha3: 'rom',
        bibliographic: '',
        name: 'Romany',
      },
      {
        alpha2: 'ro',
        alpha3: 'ron',
        bibliographic: 'rum',
        name: 'Moldavian',
      },
      {
        alpha2: 'ro',
        alpha3: 'ron',
        bibliographic: 'rum',
        name: 'Romanian',
      },
      {
        alpha2: 'rn',
        alpha3: 'run',
        bibliographic: '',
        name: 'Rundi',
      },
      {
        alpha2: '',
        alpha3: 'rup',
        bibliographic: '',
        name: 'Aromanian',
      },
      {
        alpha2: '',
        alpha3: 'rup',
        bibliographic: '',
        name: 'Arumanian',
      },
      {
        alpha2: '',
        alpha3: 'rup',
        bibliographic: '',
        name: 'Macedo-Romanian',
      },
      {
        alpha2: 'ru',
        alpha3: 'rus',
        bibliographic: '',
        name: 'Russian',
      },
      {
        alpha2: '',
        alpha3: 'sad',
        bibliographic: '',
        name: 'Sandawe',
      },
      {
        alpha2: 'sg',
        alpha3: 'sag',
        bibliographic: '',
        name: 'Sango',
      },
      {
        alpha2: '',
        alpha3: 'sah',
        bibliographic: '',
        name: 'Yakut',
      },
      {
        alpha2: '',
        alpha3: 'sai',
        bibliographic: '',
        name: 'South American Indian languages',
      },
      {
        alpha2: '',
        alpha3: 'sal',
        bibliographic: '',
        name: 'Salishan languages',
      },
      {
        alpha2: '',
        alpha3: 'sam',
        bibliographic: '',
        name: 'Samaritan Aramaic',
      },
      {
        alpha2: 'sa',
        alpha3: 'san',
        bibliographic: '',
        name: 'Sanskrit',
      },
      {
        alpha2: '',
        alpha3: 'sas',
        bibliographic: '',
        name: 'Sasak',
      },
      {
        alpha2: '',
        alpha3: 'sat',
        bibliographic: '',
        name: 'Santali',
      },
      {
        alpha2: '',
        alpha3: 'scn',
        bibliographic: '',
        name: 'Sicilian',
      },
      {
        alpha2: '',
        alpha3: 'sco',
        bibliographic: '',
        name: 'Scots',
      },
      {
        alpha2: '',
        alpha3: 'sel',
        bibliographic: '',
        name: 'Selkup',
      },
      {
        alpha2: '',
        alpha3: 'sem',
        bibliographic: '',
        name: 'Semitic languages',
      },
      {
        alpha2: '',
        alpha3: 'sga',
        bibliographic: '',
        name: 'Irish, Old (to 900)',
      },
      {
        alpha2: '',
        alpha3: 'sgn',
        bibliographic: '',
        name: 'Sign Languages',
      },
      {
        alpha2: '',
        alpha3: 'shn',
        bibliographic: '',
        name: 'Shan',
      },
      {
        alpha2: '',
        alpha3: 'sid',
        bibliographic: '',
        name: 'Sidamo',
      },
      {
        alpha2: 'si',
        alpha3: 'sin',
        bibliographic: '',
        name: 'Sinhala',
      },
      {
        alpha2: 'si',
        alpha3: 'sin',
        bibliographic: '',
        name: 'Sinhalese',
      },
      {
        alpha2: '',
        alpha3: 'sio',
        bibliographic: '',
        name: 'Siouan languages',
      },
      {
        alpha2: '',
        alpha3: 'sit',
        bibliographic: '',
        name: 'Sino-Tibetan languages',
      },
      {
        alpha2: '',
        alpha3: 'sla',
        bibliographic: '',
        name: 'Slavic languages',
      },
      {
        alpha2: 'sk',
        alpha3: 'slk',
        bibliographic: 'slo',
        name: 'Slovak',
      },
      {
        alpha2: 'sl',
        alpha3: 'slv',
        bibliographic: '',
        name: 'Slovenian',
      },
      {
        alpha2: '',
        alpha3: 'sma',
        bibliographic: '',
        name: 'Southern Sami',
      },
      {
        alpha2: 'se',
        alpha3: 'sme',
        bibliographic: '',
        name: 'Northern Sami',
      },
      {
        alpha2: '',
        alpha3: 'smi',
        bibliographic: '',
        name: 'Sami languages',
      },
      {
        alpha2: '',
        alpha3: 'smj',
        bibliographic: '',
        name: 'Lule Sami',
      },
      {
        alpha2: '',
        alpha3: 'smn',
        bibliographic: '',
        name: 'Inari Sami',
      },
      {
        alpha2: 'sm',
        alpha3: 'smo',
        bibliographic: '',
        name: 'Samoan',
      },
      {
        alpha2: '',
        alpha3: 'sms',
        bibliographic: '',
        name: 'Skolt Sami',
      },
      {
        alpha2: 'sn',
        alpha3: 'sna',
        bibliographic: '',
        name: 'Shona',
      },
      {
        alpha2: 'sd',
        alpha3: 'snd',
        bibliographic: '',
        name: 'Sindhi',
      },
      {
        alpha2: '',
        alpha3: 'snk',
        bibliographic: '',
        name: 'Soninke',
      },
      {
        alpha2: '',
        alpha3: 'sog',
        bibliographic: '',
        name: 'Sogdian',
      },
      {
        alpha2: 'so',
        alpha3: 'som',
        bibliographic: '',
        name: 'Somali',
      },
      {
        alpha2: '',
        alpha3: 'son',
        bibliographic: '',
        name: 'Songhai languages',
      },
      {
        alpha2: 'st',
        alpha3: 'sot',
        bibliographic: '',
        name: 'Sotho, Southern',
      },
      {
        alpha2: 'es',
        alpha3: 'spa',
        bibliographic: '',
        name: 'Castilian',
      },
      {
        alpha2: 'es',
        alpha3: 'spa',
        bibliographic: '',
        name: 'Spanish',
      },
      {
        alpha2: 'sq',
        alpha3: 'sqi',
        bibliographic: 'alb',
        name: 'Albanian',
      },
      {
        alpha2: 'sc',
        alpha3: 'srd',
        bibliographic: '',
        name: 'Sardinian',
      },
      {
        alpha2: '',
        alpha3: 'srn',
        bibliographic: '',
        name: 'Sranan Tongo',
      },
      {
        alpha2: 'sr',
        alpha3: 'srp',
        bibliographic: '',
        name: 'Serbian',
      },
      {
        alpha2: '',
        alpha3: 'srr',
        bibliographic: '',
        name: 'Serer',
      },
      {
        alpha2: '',
        alpha3: 'ssa',
        bibliographic: '',
        name: 'Nilo-Saharan languages',
      },
      {
        alpha2: 'ss',
        alpha3: 'ssw',
        bibliographic: '',
        name: 'Swati',
      },
      {
        alpha2: '',
        alpha3: 'suk',
        bibliographic: '',
        name: 'Sukuma',
      },
      {
        alpha2: 'su',
        alpha3: 'sun',
        bibliographic: '',
        name: 'Sundanese',
      },
      {
        alpha2: '',
        alpha3: 'sus',
        bibliographic: '',
        name: 'Susu',
      },
      {
        alpha2: '',
        alpha3: 'sux',
        bibliographic: '',
        name: 'Sumerian',
      },
      {
        alpha2: 'sw',
        alpha3: 'swa',
        bibliographic: '',
        name: 'Swahili',
      },
      {
        alpha2: 'sv',
        alpha3: 'swe',
        bibliographic: '',
        name: 'Swedish',
      },
      {
        alpha2: '',
        alpha3: 'syc',
        bibliographic: '',
        name: 'Classical Syriac',
      },
      {
        alpha2: '',
        alpha3: 'syr',
        bibliographic: '',
        name: 'Syriac',
      },
      {
        alpha2: 'ty',
        alpha3: 'tah',
        bibliographic: '',
        name: 'Tahitian',
      },
      {
        alpha2: '',
        alpha3: 'tai',
        bibliographic: '',
        name: 'Tai languages',
      },
      {
        alpha2: 'ta',
        alpha3: 'tam',
        bibliographic: '',
        name: 'Tamil',
      },
      {
        alpha2: 'tt',
        alpha3: 'tat',
        bibliographic: '',
        name: 'Tatar',
      },
      {
        alpha2: 'te',
        alpha3: 'tel',
        bibliographic: '',
        name: 'Telugu',
      },
      {
        alpha2: '',
        alpha3: 'tem',
        bibliographic: '',
        name: 'Timne',
      },
      {
        alpha2: '',
        alpha3: 'ter',
        bibliographic: '',
        name: 'Tereno',
      },
      {
        alpha2: '',
        alpha3: 'tet',
        bibliographic: '',
        name: 'Tetum',
      },
      {
        alpha2: 'tg',
        alpha3: 'tgk',
        bibliographic: '',
        name: 'Tajik',
      },
      {
        alpha2: 'tl',
        alpha3: 'tgl',
        bibliographic: '',
        name: 'Tagalog',
      },
      {
        alpha2: 'th',
        alpha3: 'tha',
        bibliographic: '',
        name: 'Thai',
      },
      {
        alpha2: '',
        alpha3: 'tig',
        bibliographic: '',
        name: 'Tigre',
      },
      {
        alpha2: 'ti',
        alpha3: 'tir',
        bibliographic: '',
        name: 'Tigrinya',
      },
      {
        alpha2: '',
        alpha3: 'tiv',
        bibliographic: '',
        name: 'Tiv',
      },
      {
        alpha2: '',
        alpha3: 'tkl',
        bibliographic: '',
        name: 'Tokelau',
      },
      {
        alpha2: '',
        alpha3: 'tlh',
        bibliographic: '',
        name: 'Klingon',
      },
      {
        alpha2: '',
        alpha3: 'tlh',
        bibliographic: '',
        name: 'tlhIngan-Hol',
      },
      {
        alpha2: '',
        alpha3: 'tli',
        bibliographic: '',
        name: 'Tlingit',
      },
      {
        alpha2: '',
        alpha3: 'tmh',
        bibliographic: '',
        name: 'Tamashek',
      },
      {
        alpha2: '',
        alpha3: 'tog',
        bibliographic: '',
        name: 'Tonga (Nyasa)',
      },
      {
        alpha2: 'to',
        alpha3: 'ton',
        bibliographic: '',
        name: 'Tonga (Tonga Islands)',
      },
      {
        alpha2: '',
        alpha3: 'tpi',
        bibliographic: '',
        name: 'Tok Pisin',
      },
      {
        alpha2: '',
        alpha3: 'tsi',
        bibliographic: '',
        name: 'Tsimshian',
      },
      {
        alpha2: 'tn',
        alpha3: 'tsn',
        bibliographic: '',
        name: 'Tswana',
      },
      {
        alpha2: 'ts',
        alpha3: 'tso',
        bibliographic: '',
        name: 'Tsonga',
      },
      {
        alpha2: 'tk',
        alpha3: 'tuk',
        bibliographic: '',
        name: 'Turkmen',
      },
      {
        alpha2: '',
        alpha3: 'tum',
        bibliographic: '',
        name: 'Tumbuka',
      },
      {
        alpha2: '',
        alpha3: 'tup',
        bibliographic: '',
        name: 'Tupi languages',
      },
      {
        alpha2: 'tr',
        alpha3: 'tur',
        bibliographic: '',
        name: 'Turkish',
      },
      {
        alpha2: '',
        alpha3: 'tut',
        bibliographic: '',
        name: 'Altaic languages',
      },
      {
        alpha2: '',
        alpha3: 'tvl',
        bibliographic: '',
        name: 'Tuvalu',
      },
      {
        alpha2: 'tw',
        alpha3: 'twi',
        bibliographic: '',
        name: 'Twi',
      },
      {
        alpha2: '',
        alpha3: 'tyv',
        bibliographic: '',
        name: 'Tuvinian',
      },
      {
        alpha2: '',
        alpha3: 'udm',
        bibliographic: '',
        name: 'Udmurt',
      },
      {
        alpha2: '',
        alpha3: 'uga',
        bibliographic: '',
        name: 'Ugaritic',
      },
      {
        alpha2: 'ug',
        alpha3: 'uig',
        bibliographic: '',
        name: 'Uighur',
      },
      {
        alpha2: 'ug',
        alpha3: 'uig',
        bibliographic: '',
        name: 'Uyghur',
      },
      {
        alpha2: 'uk',
        alpha3: 'ukr',
        bibliographic: '',
        name: 'Ukrainian',
      },
      {
        alpha2: '',
        alpha3: 'umb',
        bibliographic: '',
        name: 'Umbundu',
      },
      {
        alpha2: '',
        alpha3: 'und',
        bibliographic: '',
        name: 'Undetermined',
      },
      {
        alpha2: 'ur',
        alpha3: 'urd',
        bibliographic: '',
        name: 'Urdu',
      },
      {
        alpha2: 'uz',
        alpha3: 'uzb',
        bibliographic: '',
        name: 'Uzbek',
      },
      {
        alpha2: '',
        alpha3: 'vai',
        bibliographic: '',
        name: 'Vai',
      },
      {
        alpha2: 've',
        alpha3: 'ven',
        bibliographic: '',
        name: 'Venda',
      },
      {
        alpha2: 'vi',
        alpha3: 'vie',
        bibliographic: '',
        name: 'Vietnamese',
      },
      {
        alpha2: 'vo',
        alpha3: 'vol',
        bibliographic: '',
        name: 'Volap\xFCk',
      },
      {
        alpha2: '',
        alpha3: 'vot',
        bibliographic: '',
        name: 'Votic',
      },
      {
        alpha2: '',
        alpha3: 'wak',
        bibliographic: '',
        name: 'Wakashan languages',
      },
      {
        alpha2: '',
        alpha3: 'wal',
        bibliographic: '',
        name: 'Wolaitta',
      },
      {
        alpha2: '',
        alpha3: 'wal',
        bibliographic: '',
        name: 'Wolaytta',
      },
      {
        alpha2: '',
        alpha3: 'war',
        bibliographic: '',
        name: 'Waray',
      },
      {
        alpha2: '',
        alpha3: 'was',
        bibliographic: '',
        name: 'Washo',
      },
      {
        alpha2: '',
        alpha3: 'wen',
        bibliographic: '',
        name: 'Sorbian languages',
      },
      {
        alpha2: 'wa',
        alpha3: 'wln',
        bibliographic: '',
        name: 'Walloon',
      },
      {
        alpha2: 'wo',
        alpha3: 'wol',
        bibliographic: '',
        name: 'Wolof',
      },
      {
        alpha2: '',
        alpha3: 'xal',
        bibliographic: '',
        name: 'Kalmyk',
      },
      {
        alpha2: '',
        alpha3: 'xal',
        bibliographic: '',
        name: 'Oirat',
      },
      {
        alpha2: 'xh',
        alpha3: 'xho',
        bibliographic: '',
        name: 'Xhosa',
      },
      {
        alpha2: '',
        alpha3: 'yao',
        bibliographic: '',
        name: 'Yao',
      },
      {
        alpha2: '',
        alpha3: 'yap',
        bibliographic: '',
        name: 'Yapese',
      },
      {
        alpha2: 'yi',
        alpha3: 'yid',
        bibliographic: '',
        name: 'Yiddish',
      },
      {
        alpha2: 'yo',
        alpha3: 'yor',
        bibliographic: '',
        name: 'Yoruba',
      },
      {
        alpha2: '',
        alpha3: 'ypk',
        bibliographic: '',
        name: 'Yupik languages',
      },
      {
        alpha2: '',
        alpha3: 'zap',
        bibliographic: '',
        name: 'Zapotec',
      },
      {
        alpha2: '',
        alpha3: 'zbl',
        bibliographic: '',
        name: 'Bliss',
      },
      {
        alpha2: '',
        alpha3: 'zbl',
        bibliographic: '',
        name: 'Blissymbolics',
      },
      {
        alpha2: '',
        alpha3: 'zbl',
        bibliographic: '',
        name: 'Blissymbols',
      },
      {
        alpha2: '',
        alpha3: 'zen',
        bibliographic: '',
        name: 'Zenaga',
      },
      {
        alpha2: '',
        alpha3: 'zgh',
        bibliographic: '',
        name: 'Standard Moroccan Tamazight',
      },
      {
        alpha2: 'za',
        alpha3: 'zha',
        bibliographic: '',
        name: 'Chuang',
      },
      {
        alpha2: 'za',
        alpha3: 'zha',
        bibliographic: '',
        name: 'Zhuang',
      },
      {
        alpha2: 'zh',
        alpha3: 'zho',
        bibliographic: 'chi',
        name: 'Chinese',
      },
      {
        alpha2: '',
        alpha3: 'znd',
        bibliographic: '',
        name: 'Zande languages',
      },
      {
        alpha2: 'zu',
        alpha3: 'zul',
        bibliographic: '',
        name: 'Zulu',
      },
      {
        alpha2: '',
        alpha3: 'zun',
        bibliographic: '',
        name: 'Zuni',
      },
      {
        alpha2: '',
        alpha3: 'zxx',
        bibliographic: '',
        name: 'No linguistic content',
      },
      {
        alpha2: '',
        alpha3: 'zxx',
        bibliographic: '',
        name: 'Not applicable',
      },
      {
        alpha2: '',
        alpha3: 'zza',
        bibliographic: '',
        name: 'Dimili',
      },
      {
        alpha2: '',
        alpha3: 'zza',
        bibliographic: '',
        name: 'Dimli',
      },
      {
        alpha2: '',
        alpha3: 'zza',
        bibliographic: '',
        name: 'Kirdki',
      },
      {
        alpha2: '',
        alpha3: 'zza',
        bibliographic: '',
        name: 'Kirmanjki',
      },
      {
        alpha2: '',
        alpha3: 'zza',
        bibliographic: '',
        name: 'Zaza',
      },
      {
        alpha2: '',
        alpha3: 'zza',
        bibliographic: '',
        name: 'Zazaki',
      },
    ];
  },
});

// node_modules/country-data/lookup.js
var require_lookup = __commonJS({
  'node_modules/country-data/lookup.js'(exports, module) {
    var _15 = (init_index_all(), __toCommonJS(index_all_exports));
    module.exports = init;
    function init(o) {
      return {
        countries: search.bind(null, o.countries),
        currencies: search.bind(null, o.currencies),
        languages: search.bind(null, o.languages),
      };
    }
    function search(data, query) {
      var q = _15.pairs(query);
      return data.filter(function (d) {
        return (
          q.filter(function (v) {
            var prop = d[v[0]];
            if (_15.isArray(prop)) return prop.indexOf(v[1]) >= 0;
            return prop == v[1];
          }).length == q.length
        );
      });
    }
  },
});

// node_modules/currency-symbol-map/map.js
var require_map = __commonJS({
  'node_modules/currency-symbol-map/map.js'(exports, module) {
    module.exports = {
      ALL: 'L',
      AFN: '\u060B',
      ARS: '$',
      AWG: '\u0192',
      AUD: '$',
      AZN: '\u20BC',
      BSD: '$',
      BBD: '$',
      BYR: 'p.',
      BZD: 'BZ$',
      BMD: '$',
      BOB: 'Bs.',
      BAM: 'KM',
      BWP: 'P',
      BGN: '\u043B\u0432',
      BRL: 'R$',
      BND: '$',
      KHR: '\u17DB',
      CAD: '$',
      KYD: '$',
      CLP: '$',
      CNY: '\xA5',
      COP: '$',
      CRC: '\u20A1',
      HRK: 'kn',
      CUP: '\u20B1',
      CZK: 'K\u010D',
      DKK: 'kr',
      DOP: 'RD$',
      XCD: '$',
      EGP: '\xA3',
      SVC: '$',
      EEK: 'kr',
      EUR: '\u20AC',
      FKP: '\xA3',
      FJD: '$',
      GHC: '\xA2',
      GIP: '\xA3',
      GTQ: 'Q',
      GGP: '\xA3',
      GYD: '$',
      HNL: 'L',
      HKD: '$',
      HUF: 'Ft',
      ISK: 'kr',
      INR: '\u20B9',
      IDR: 'Rp',
      IRR: '\uFDFC',
      IMP: '\xA3',
      ILS: '\u20AA',
      JMD: 'J$',
      JPY: '\xA5',
      JEP: '\xA3',
      KES: 'KSh',
      KZT: '\u043B\u0432',
      KPW: '\u20A9',
      KRW: '\u20A9',
      KGS: '\u043B\u0432',
      LAK: '\u20AD',
      LVL: 'Ls',
      LBP: '\xA3',
      LRD: '$',
      LTL: 'Lt',
      MKD: '\u0434\u0435\u043D',
      MYR: 'RM',
      MUR: '\u20A8',
      MXN: '$',
      MNT: '\u20AE',
      MZN: 'MT',
      NAD: '$',
      NPR: '\u20A8',
      ANG: '\u0192',
      NZD: '$',
      NIO: 'C$',
      NGN: '\u20A6',
      NOK: 'kr',
      OMR: '\uFDFC',
      PKR: '\u20A8',
      PAB: 'B/.',
      PYG: 'Gs',
      PEN: 'S/.',
      PHP: '\u20B1',
      PLN: 'z\u0142',
      QAR: '\uFDFC',
      RON: 'lei',
      RUB: '\u20BD',
      SHP: '\xA3',
      SAR: '\uFDFC',
      RSD: '\u0414\u0438\u043D.',
      SCR: '\u20A8',
      SGD: '$',
      SBD: '$',
      SOS: 'S',
      ZAR: 'R',
      LKR: '\u20A8',
      SEK: 'kr',
      CHF: 'CHF',
      SRD: '$',
      SYP: '\xA3',
      TZS: 'TSh',
      TWD: 'NT$',
      THB: '\u0E3F',
      TTD: 'TT$',
      TRY: '',
      TRL: '\u20A4',
      TVD: '$',
      UGX: 'USh',
      UAH: '\u20B4',
      GBP: '\xA3',
      USD: '$',
      UYU: '$U',
      UZS: '\u043B\u0432',
      VEF: 'Bs',
      VND: '\u20AB',
      YER: '\uFDFC',
      ZWD: 'Z$',
    };
  },
});

// node_modules/currency-symbol-map/currency-symbol-map.js
var require_currency_symbol_map = __commonJS({
  'node_modules/currency-symbol-map/currency-symbol-map.js'(exports, module) {
    module.exports = mapSymbol;
    var map2 = require_map();
    function mapSymbol(currencyCode) {
      if (map2.hasOwnProperty(currencyCode)) {
        return map2[currencyCode];
      } else {
        return '?';
      }
    }
  },
});

// node_modules/country-data/index.js
var require_country_data = __commonJS({
  'node_modules/country-data/index.js'(exports) {
    'use strict';
    var _15 = (init_index_all(), __toCommonJS(index_all_exports));
    var continents = require_continents();
    var regions = require_regions();
    var countriesAll = require_countries();
    var currenciesAll = require_currencies();
    var languagesAll = require_languages();
    var lookup = require_lookup();
    var getSymbol = require_currency_symbol_map();
    exports.continents = continents;
    exports.regions = regions;
    exports.countries = {
      all: countriesAll,
    };
    _15.each(countriesAll, function (country) {
      var exportedAlpha2 = exports.countries[country.alpha2];
      if (!exportedAlpha2 || exportedAlpha2.status === 'deleted') {
        exports.countries[country.alpha2] = country;
      }
      var exportedAlpha3 = exports.countries[country.alpha3];
      if (!exportedAlpha3 || exportedAlpha3.status === 'deleted') {
        exports.countries[country.alpha3] = country;
      }
    });
    exports.currencies = {
      all: currenciesAll,
    };
    _15.each(currenciesAll, function (currency) {
      var symbol = getSymbol(currency.code);
      if (symbol == '?') {
        symbol = currency.code;
      }
      currency.symbol = symbol;
      exports.currencies[currency.code] = currency;
    });
    exports.languages = {
      all: languagesAll,
    };
    _15.each(languagesAll, function (language) {
      exports.languages[language.alpha2] = language;
      exports.languages[language.bibliographic] = language;
      exports.languages[language.alpha3] = language;
    });
    exports.lookup = lookup({
      countries: countriesAll,
      currencies: currenciesAll,
      languages: languagesAll,
    });
    var callingCountries = { all: [] };
    var callingCodesAll = _15.reduce(
      countriesAll,
      function (codes, country) {
        if (country.countryCallingCodes && country.countryCallingCodes.length) {
          callingCountries.all.push(country);
          callingCountries[country.alpha2] = country;
          callingCountries[country.alpha3] = country;
          _15.each(country.countryCallingCodes, function (code) {
            if (codes.indexOf(code) == -1) {
              codes.push(code);
            }
          });
        }
        return codes;
      },
      []
    );
    delete callingCountries[''];
    exports.callingCountries = callingCountries;
    callingCodesAll.sort(function (a, b) {
      var parse2 = function (str) {
        return parseInt(str);
      };
      var splitA = _15.map(a.split(' '), parse2);
      var splitB = _15.map(b.split(' '), parse2);
      if (splitA[0] < splitB[0]) {
        return -1;
      } else if (splitA[0] > splitB[0]) {
        return 1;
      } else {
        if (splitA[1] === void 0 && splitB[1] !== void 0) {
          return -1;
        } else if (splitA[1] !== void 0 && splitB[1] === void 0) {
          return 1;
        } else if (splitA[1] < splitB[1]) {
          return -1;
        } else if (splitA[1] > splitB[1]) {
          return 1;
        } else {
          return 0;
        }
      }
    });
    exports.callingCodes = {
      all: callingCodesAll,
    };
  },
});

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  'node_modules/react/cjs/react.development.js'(exports, module) {
    'use strict';
    if (true) {
      (function () {
        'use strict';
        if (
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
            'function'
        ) {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(
            new Error()
          );
        }
        var ReactVersion = '18.3.1';
        var REACT_ELEMENT_TYPE = Symbol.for('react.element');
        var REACT_PORTAL_TYPE = Symbol.for('react.portal');
        var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
        var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
        var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
        var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
        var REACT_CONTEXT_TYPE = Symbol.for('react.context');
        var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
        var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
        var REACT_MEMO_TYPE = Symbol.for('react.memo');
        var REACT_LAZY_TYPE = Symbol.for('react.lazy');
        var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator';
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== 'object') {
            return null;
          }
          var maybeIterator =
            (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
            maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === 'function') {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null,
        };
        var ReactCurrentBatchConfig = {
          transition: null,
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false,
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null,
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function () {
            var stack = '';
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || '';
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (
                var _len = arguments.length,
                  args = new Array(_len > 1 ? _len - 1 : 0),
                  _key = 1;
                _key < _len;
                _key++
              ) {
                args[_key - 1] = arguments[_key];
              }
              printWarning('warn', format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (
                var _len2 = arguments.length,
                  args = new Array(_len2 > 1 ? _len2 - 1 : 0),
                  _key2 = 1;
                _key2 < _len2;
                _key2++
              ) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning('error', format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 =
              ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== '') {
              format += '%s';
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function (item) {
              return String(item);
            });
            argsWithFormat.unshift('Warning: ' + format);
            Function.prototype.apply.call(
              console[level],
              console,
              argsWithFormat
            );
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName =
              (_constructor &&
                (_constructor.displayName || _constructor.name)) ||
              'ReactClass';
            var warningKey = componentName + '.' + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error(
              "Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
              callerName,
              componentName
            );
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function (publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function (publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function (
            publicInstance,
            completeState,
            callback,
            callerName
          ) {
            warnNoop(publicInstance, 'replaceState');
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function (
            publicInstance,
            partialState,
            callback,
            callerName
          ) {
            warnNoop(publicInstance, 'setState');
          },
        };
        var assign2 = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function (partialState, callback) {
          if (
            typeof partialState !== 'object' &&
            typeof partialState !== 'function' &&
            partialState != null
          ) {
            throw new Error(
              'setState(...): takes an object of state variables to update or a function which returns an object of state variables.'
            );
          }
          this.updater.enqueueSetState(
            this,
            partialState,
            callback,
            'setState'
          );
        };
        Component.prototype.forceUpdate = function (callback) {
          this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
        };
        {
          var deprecatedAPIs = {
            isMounted: [
              'isMounted',
              'Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.',
            ],
            replaceState: [
              'replaceState',
              'Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).',
            ],
          };
          var defineDeprecationWarning = function (methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function () {
                warn(
                  '%s(...) is deprecated in plain JavaScript React classes. %s',
                  info[0],
                  info[1]
                );
                return void 0;
              },
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {}
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = (PureComponent.prototype =
          new ComponentDummy());
        pureComponentPrototype.constructor = PureComponent;
        assign2(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null,
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag =
              typeof Symbol === 'function' && Symbol.toStringTag;
            var type =
              (hasToStringTag && value[Symbol.toStringTag]) ||
              value.constructor.name ||
              'Object';
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return '' + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error(
                'The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.',
                typeName(value)
              );
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || '';
          return functionName !== ''
            ? wrapperName + '(' + functionName + ')'
            : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || 'Context';
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === 'number') {
              error(
                'Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.'
              );
            }
          }
          if (typeof type === 'function') {
            return type.displayName || type.name || null;
          }
          if (typeof type === 'string') {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return 'Fragment';
            case REACT_PORTAL_TYPE:
              return 'Portal';
            case REACT_PROFILER_TYPE:
              return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
              return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
              return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
              return 'SuspenseList';
          }
          if (typeof type === 'object') {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || 'Memo';
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true,
        };
        var specialPropKeyWarningShown,
          specialPropRefWarningShown,
          didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty2.call(config, 'ref')) {
              var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty2.call(config, 'key')) {
              var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function () {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error(
                  '%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)',
                  displayName
                );
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true,
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function () {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error(
                  '%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)',
                  displayName
                );
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true,
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (
              typeof config.ref === 'string' &&
              ReactCurrentOwner.current &&
              config.__self &&
              ReactCurrentOwner.current.stateNode !== config.__self
            ) {
              var componentName = getComponentNameFromType(
                ReactCurrentOwner.current.type
              );
              if (!didWarnAboutStringRefs[componentName]) {
                error(
                  'Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',
                  componentName,
                  config.ref
                );
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function (
          type,
          key,
          ref,
          self2,
          source,
          owner,
          props
        ) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner,
          };
          {
            element._store = {};
            Object.defineProperty(element._store, 'validated', {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false,
            });
            Object.defineProperty(element, '_self', {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2,
            });
            Object.defineProperty(element, '_source', {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source,
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement3(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = '' + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (
                hasOwnProperty2.call(config, propName) &&
                !RESERVED_PROPS.hasOwnProperty(propName)
              ) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName =
                typeof type === 'function'
                  ? type.displayName || type.name || 'Unknown'
                  : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(
            type,
            key,
            ref,
            self2,
            source,
            ReactCurrentOwner.current,
            props
          );
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(
            oldElement.type,
            newKey,
            oldElement.ref,
            oldElement._self,
            oldElement._source,
            oldElement._owner,
            oldElement.props
          );
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error(
              'React.cloneElement(...): The argument must be a React element, but you passed ' +
                element +
                '.'
            );
          }
          var propName;
          var props = assign2({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = '' + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (
                hasOwnProperty2.call(config, propName) &&
                !RESERVED_PROPS.hasOwnProperty(propName)
              ) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(
            element.type,
            key,
            ref,
            self2,
            source,
            owner,
            props
          );
        }
        function isValidElement(object2) {
          return (
            typeof object2 === 'object' &&
            object2 !== null &&
            object2.$$typeof === REACT_ELEMENT_TYPE
          );
        }
        var SEPARATOR = '.';
        var SUBSEPARATOR = ':';
        function escape2(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            '=': '=0',
            ':': '=2',
          };
          var escapedString = key.replace(escapeRegex, function (match) {
            return escaperLookup[match];
          });
          return '$' + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, '$&/');
        }
        function getElementKey(element, index) {
          if (
            typeof element === 'object' &&
            element !== null &&
            element.key != null
          ) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape2('' + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(
          children,
          array,
          escapedPrefix,
          nameSoFar,
          callback
        ) {
          var type = typeof children;
          if (type === 'undefined' || type === 'boolean') {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case 'string':
              case 'number':
                invokeCallback = true;
                break;
              case 'object':
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey =
              nameSoFar === ''
                ? SEPARATOR + getElementKey(_child, 0)
                : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = '';
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + '/';
              }
              mapIntoArray(
                mappedChild,
                array,
                escapedChildKey,
                '',
                function (c) {
                  return c;
                }
              );
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (
                    mappedChild.key &&
                    (!_child || _child.key !== mappedChild.key)
                  ) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key &&
                    (!_child || _child.key !== mappedChild.key)
                      ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                        // eslint-disable-next-line react-internal/safe-string-coercion
                        escapeUserProvidedKey('' + mappedChild.key) + '/'
                      : '') +
                    childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix =
            nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(
                child,
                array,
                escapedPrefix,
                nextName,
                callback
              );
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn(
                      'Using Maps as children is not supported. Use an array of keyed ReactElements instead.'
                    );
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(
                  child,
                  array,
                  escapedPrefix,
                  nextName,
                  callback
                );
              }
            } else if (type === 'object') {
              var childrenString = String(children);
              throw new Error(
                'Objects are not valid as a React child (found: ' +
                  (childrenString === '[object Object]'
                    ? 'object with keys {' +
                      Object.keys(children).join(', ') +
                      '}'
                    : childrenString) +
                  '). If you meant to render a collection of children, use an array instead.'
              );
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result2 = [];
          var count = 0;
          mapIntoArray(children, result2, '', '', function (child) {
            return func.call(context, child, count++);
          });
          return result2;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function () {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(
            children,
            function () {
              forEachFunc.apply(this, arguments);
            },
            forEachContext
          );
        }
        function toArray2(children) {
          return (
            mapChildren(children, function (child) {
              return child;
            }) || []
          );
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error(
              'React.Children.only expected to receive a single React element child.'
            );
          }
          return children;
        }
        function createContext2(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null,
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context,
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function () {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error(
                      'Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?'
                    );
                  }
                  return context.Provider;
                },
                set: function (_Provider) {
                  context.Provider = _Provider;
                },
              },
              _currentValue: {
                get: function () {
                  return context._currentValue;
                },
                set: function (_currentValue) {
                  context._currentValue = _currentValue;
                },
              },
              _currentValue2: {
                get: function () {
                  return context._currentValue2;
                },
                set: function (_currentValue2) {
                  context._currentValue2 = _currentValue2;
                },
              },
              _threadCount: {
                get: function () {
                  return context._threadCount;
                },
                set: function (_threadCount) {
                  context._threadCount = _threadCount;
                },
              },
              Consumer: {
                get: function () {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error(
                      'Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?'
                    );
                  }
                  return context.Consumer;
                },
              },
              displayName: {
                get: function () {
                  return context.displayName;
                },
                set: function (displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn(
                      "Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.",
                      displayName
                    );
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                },
              },
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor2 = payload._result;
            var thenable = ctor2();
            thenable.then(
              function (moduleObject2) {
                if (
                  payload._status === Pending ||
                  payload._status === Uninitialized
                ) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              },
              function (error2) {
                if (
                  payload._status === Pending ||
                  payload._status === Uninitialized
                ) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              }
            );
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error(
                  "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",
                  moduleObject
                );
              }
            }
            {
              if (!('default' in moduleObject)) {
                error(
                  "lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
                  moduleObject
                );
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor2) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor2,
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer,
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function () {
                  return defaultProps;
                },
                set: function (newDefaultProps) {
                  error(
                    'React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.'
                  );
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, 'defaultProps', {
                    enumerable: true,
                  });
                },
              },
              propTypes: {
                configurable: true,
                get: function () {
                  return propTypes;
                },
                set: function (newPropTypes) {
                  error(
                    'React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.'
                  );
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, 'propTypes', {
                    enumerable: true,
                  });
                },
              },
            });
          }
          return lazyType;
        }
        function forwardRef2(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error(
                'forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).'
              );
            } else if (typeof render !== 'function') {
              error(
                'forwardRef requires a render function but was given %s.',
                render === null ? 'null' : typeof render
              );
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error(
                  'forwardRef render functions accept exactly two parameters: props and ref. %s',
                  render.length === 1
                    ? 'Did you forget to use the ref parameter?'
                    : 'Any additional parameter will be undefined.'
                );
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error(
                  'forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?'
                );
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render,
          };
          {
            var ownName;
            Object.defineProperty(elementType, 'displayName', {
              enumerable: false,
              configurable: true,
              get: function () {
                return ownName;
              },
              set: function (name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              },
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
        }
        function isValidElementType2(type) {
          if (typeof type === 'string' || typeof type === 'function') {
            return true;
          }
          if (
            type === REACT_FRAGMENT_TYPE ||
            type === REACT_PROFILER_TYPE ||
            enableDebugTracing ||
            type === REACT_STRICT_MODE_TYPE ||
            type === REACT_SUSPENSE_TYPE ||
            type === REACT_SUSPENSE_LIST_TYPE ||
            enableLegacyHidden ||
            type === REACT_OFFSCREEN_TYPE ||
            enableScopeAPI ||
            enableCacheElement ||
            enableTransitionTracing
          ) {
            return true;
          }
          if (typeof type === 'object' && type !== null) {
            if (
              type.$$typeof === REACT_LAZY_TYPE ||
              type.$$typeof === REACT_MEMO_TYPE ||
              type.$$typeof === REACT_PROVIDER_TYPE ||
              type.$$typeof === REACT_CONTEXT_TYPE ||
              type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE ||
              type.getModuleId !== void 0
            ) {
              return true;
            }
          }
          return false;
        }
        function memo2(type, compare) {
          {
            if (!isValidElementType2(type)) {
              error(
                'memo: The first argument must be a component. Instead received: %s',
                type === null ? 'null' : typeof type
              );
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare,
          };
          {
            var ownName;
            Object.defineProperty(elementType, 'displayName', {
              enumerable: false,
              configurable: true,
              get: function () {
                return ownName;
              },
              set: function (name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              },
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error(
                'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.'
              );
            }
          }
          return dispatcher;
        }
        function useContext3(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error(
                  'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?'
                );
              } else if (realContext.Provider === Context) {
                error(
                  'Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?'
                );
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState(initialState51) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState51);
        }
        function useReducer(reducer4, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer4, initialArg, init);
        }
        function useRef3(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect2(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create2, deps);
        }
        function useInsertionEffect(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create2, deps);
        }
        function useLayoutEffect2(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create2, deps);
        }
        function useCallback2(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo3(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create2, deps);
        }
        function useImperativeHandle(ref, create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create2, deps);
        }
        function useDebugValue2(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore3(
          subscribe,
          getSnapshot,
          getServerSnapshot
        ) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(
            subscribe,
            getSnapshot,
            getServerSnapshot
          );
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {}
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true,
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props,
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true,
              };
              Object.defineProperties(console, {
                log: assign2({}, props, {
                  value: prevLog,
                }),
                info: assign2({}, props, {
                  value: prevInfo,
                }),
                warn: assign2({}, props, {
                  value: prevWarn,
                }),
                error: assign2({}, props, {
                  value: prevError,
                }),
                group: assign2({}, props, {
                  value: prevGroup,
                }),
                groupCollapsed: assign2({}, props, {
                  value: prevGroupCollapsed,
                }),
                groupEnd: assign2({}, props, {
                  value: prevGroupEnd,
                }),
              });
            }
            if (disabledDepth < 0) {
              error(
                'disabledDepth fell below zero. This is a bug in React. Please file an issue.'
              );
            }
          }
        }
        var ReactCurrentDispatcher$1 =
          ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = (match && match[1]) || '';
              }
            }
            return '\n' + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return '';
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function () {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, 'props', {
                set: function () {
                  throw Error();
                },
              });
              if (typeof Reflect === 'object' && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample2) {
            if (sample2 && control && typeof sample2.stack === 'string') {
              var sampleLines = sample2.stack.split('\n');
              var controlLines = control.stack.split('\n');
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame =
                          '\n' + sampleLines[s].replace(' at new ', ' at ');
                        if (fn.displayName && _frame.includes('<anonymous>')) {
                          _frame = _frame.replace(
                            '<anonymous>',
                            fn.displayName
                          );
                        }
                        {
                          if (typeof fn === 'function') {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : '';
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
          {
            if (typeof fn === 'function') {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return '';
          }
          if (typeof type === 'function') {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === 'string') {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame('SuspenseList');
          }
          if (typeof type === 'object') {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(
                  type.type,
                  source,
                  ownerFn
                );
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(
                    init(payload),
                    source,
                    ownerFn
                  );
                } catch (x) {}
              }
            }
          }
          return '';
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 =
          ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(
                element.type,
                element._source,
                owner ? owner.type : null
              );
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(
          typeSpecs,
          values2,
          location,
          componentName,
          element
        ) {
          {
            var has4 = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has4(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error(
                      (componentName || 'React class') +
                        ': ' +
                        location +
                        ' type `' +
                        typeSpecName +
                        '` is invalid; it must be a function, usually from the `prop-types` package, but received `' +
                        typeof typeSpecs[typeSpecName] +
                        '`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
                    );
                    err.name = 'Invariant Violation';
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](
                    values2,
                    typeSpecName,
                    componentName,
                    location,
                    null,
                    'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'
                  );
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error(
                    '%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).',
                    componentName || 'React class',
                    location,
                    typeSpecName,
                    typeof error$1
                  );
                  setCurrentlyValidatingElement(null);
                }
                if (
                  error$1 instanceof Error &&
                  !(error$1.message in loggedTypeFailures)
                ) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error('Failed %s type: %s', location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(
                element.type,
                element._source,
                owner ? owner.type : null
              );
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return '\n\nCheck the render method of `' + name + '`.';
            }
          }
          return '';
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return (
              '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.'
            );
          }
          return '';
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return '';
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName =
              typeof parentType === 'string'
                ? parentType
                : parentType.displayName || parentType.name;
            if (parentName) {
              info =
                '\n\nCheck the top-level render call using <' +
                parentName +
                '>.';
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (
            !element._store ||
            element._store.validated ||
            element.key != null
          ) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo =
            getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = '';
          if (
            element &&
            element._owner &&
            element._owner !== ReactCurrentOwner.current
          ) {
            childOwner =
              ' It was passed a child from ' +
              getComponentNameFromType(element._owner.type) +
              '.';
          }
          {
            setCurrentlyValidatingElement$1(element);
            error(
              'Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',
              currentComponentErrorInfo,
              childOwner
            );
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== 'object') {
            return;
          }
          if (isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === 'string') {
              return;
            }
            var propTypes;
            if (typeof type === 'function') {
              propTypes = type.propTypes;
            } else if (
              typeof type === 'object' &&
              (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
                // Inner props are checked in the reconciler.
                type.$$typeof === REACT_MEMO_TYPE)
            ) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, 'prop', name, element);
            } else if (
              type.PropTypes !== void 0 &&
              !propTypesMisspellWarningShown
            ) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error(
                'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?',
                _name || 'Unknown'
              );
            }
            if (
              typeof type.getDefaultProps === 'function' &&
              !type.getDefaultProps.isReactClassApproved
            ) {
              error(
                'getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.'
              );
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys2 = Object.keys(fragment.props);
            for (var i = 0; i < keys2.length; i++) {
              var key = keys2[i];
              if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error(
                  'Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.',
                  key
                );
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error('Invalid attribute `ref` supplied to `React.Fragment`.');
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType2(type);
          if (!validType) {
            var info = '';
            if (
              type === void 0 ||
              (typeof type === 'object' &&
                type !== null &&
                Object.keys(type).length === 0)
            ) {
              info +=
                " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = 'null';
            } else if (isArray(type)) {
              typeString = 'array';
            } else if (
              type !== void 0 &&
              type.$$typeof === REACT_ELEMENT_TYPE
            ) {
              typeString =
                '<' +
                (getComponentNameFromType(type.type) || 'Unknown') +
                ' />';
              info =
                ' Did you accidentally export a JSX literal instead of a component?';
            } else {
              typeString = typeof type;
            }
            {
              error(
                'React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s',
                typeString,
                info
              );
            }
          }
          var element = createElement3.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn(
                'React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.'
              );
            }
            Object.defineProperty(validatedFactory, 'type', {
              enumerable: false,
              get: function () {
                warn(
                  'Factory.type is deprecated. Access the class directly before passing it to createFactory.'
                );
                Object.defineProperty(this, 'type', {
                  value: type,
                });
                return type;
              },
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers =
              /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn(
                    'Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.'
                  );
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ('require' + Math.random()).slice(0, 7);
              var nodeRequire = module && module[requireString];
              enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function (callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === 'undefined') {
                      error(
                        'This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.'
                      );
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result2;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result2 = callback();
              if (
                !prevIsBatchingLegacy &&
                ReactCurrentActQueue.didScheduleLegacyUpdate
              ) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (
              result2 !== null &&
              typeof result2 === 'object' &&
              typeof result2.then === 'function'
            ) {
              var thenableResult = result2;
              var wasAwaited = false;
              var thenable = {
                then: function (resolve, reject2) {
                  wasAwaited = true;
                  thenableResult.then(
                    function (returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(
                          returnValue2,
                          resolve,
                          reject2
                        );
                      } else {
                        resolve(returnValue2);
                      }
                    },
                    function (error2) {
                      popActScope(prevActScopeDepth);
                      reject2(error2);
                    }
                  );
                },
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
                  Promise.resolve()
                    .then(function () {})
                    .then(function () {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error(
                          'You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);'
                        );
                      }
                    });
                }
              }
              return thenable;
            } else {
              var returnValue = result2;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function (resolve, reject2) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(
                        returnValue,
                        resolve,
                        reject2
                      );
                    } else {
                      resolve(returnValue);
                    }
                  },
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function (resolve, reject2) {
                    resolve(returnValue);
                  },
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error(
                'You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. '
              );
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject2) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function () {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject2);
                  }
                });
              } catch (error2) {
                reject2(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray2,
          only: onlyChild,
        };
        exports.Children = Children;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED =
          ReactSharedInternals;
        exports.act = act;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext2;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef2;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo2;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback2;
        exports.useContext = useContext3;
        exports.useDebugValue = useDebugValue2;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect2;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect2;
        exports.useMemo = useMemo3;
        exports.useReducer = useReducer;
        exports.useRef = useRef3;
        exports.useState = useState;
        exports.useSyncExternalStore = useSyncExternalStore3;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
            'function'
        ) {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(
            new Error()
          );
        }
      })();
    }
  },
});

// node_modules/react/index.js
var require_react = __commonJS({
  'node_modules/react/index.js'(exports, module) {
    'use strict';
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  },
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  'node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js'(
    exports
  ) {
    'use strict';
    (function () {
      function is(x, y) {
        return (
          (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y)
        );
      }
      function useSyncExternalStore$2(subscribe, getSnapshot) {
        didWarnOld18Alpha ||
          void 0 === React6.startTransition ||
          ((didWarnOld18Alpha = true),
          console.error(
            'You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.'
          ));
        var value = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
          var cachedValue = getSnapshot();
          objectIs(value, cachedValue) ||
            (console.error(
              'The result of getSnapshot should be cached to avoid an infinite loop'
            ),
            (didWarnUncachedGetSnapshot = true));
        }
        cachedValue = useState({
          inst: { value, getSnapshot },
        });
        var inst = cachedValue[0].inst,
          forceUpdate = cachedValue[1];
        useLayoutEffect2(
          function () {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
          },
          [subscribe, value, getSnapshot]
        );
        useEffect2(
          function () {
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            return subscribe(function () {
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            });
          },
          [subscribe]
        );
        useDebugValue2(value);
        return value;
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        inst = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(inst, nextValue);
        } catch (error) {
          return true;
        }
      }
      function useSyncExternalStore$1(subscribe, getSnapshot) {
        return getSnapshot();
      }
      'undefined' !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
        'function' ===
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React6 = require_react(),
        objectIs = 'function' === typeof Object.is ? Object.is : is,
        useState = React6.useState,
        useEffect2 = React6.useEffect,
        useLayoutEffect2 = React6.useLayoutEffect,
        useDebugValue2 = React6.useDebugValue,
        didWarnOld18Alpha = false,
        didWarnUncachedGetSnapshot = false,
        shim =
          'undefined' === typeof window ||
          'undefined' === typeof window.document ||
          'undefined' === typeof window.document.createElement
            ? useSyncExternalStore$1
            : useSyncExternalStore$2;
      exports.useSyncExternalStore =
        void 0 !== React6.useSyncExternalStore
          ? React6.useSyncExternalStore
          : shim;
      'undefined' !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
        'function' ===
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  },
});

// node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  'node_modules/use-sync-external-store/shim/index.js'(exports, module) {
    'use strict';
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_use_sync_external_store_shim_development();
    }
  },
});

// node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
var require_with_selector_development = __commonJS({
  'node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js'(
    exports
  ) {
    'use strict';
    (function () {
      function is(x, y) {
        return (
          (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y)
        );
      }
      'undefined' !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
        'function' ===
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
      var React6 = require_react(),
        shim = require_shim(),
        objectIs = 'function' === typeof Object.is ? Object.is : is,
        useSyncExternalStore3 = shim.useSyncExternalStore,
        useRef3 = React6.useRef,
        useEffect2 = React6.useEffect,
        useMemo3 = React6.useMemo,
        useDebugValue2 = React6.useDebugValue;
      exports.useSyncExternalStoreWithSelector = function (
        subscribe,
        getSnapshot,
        getServerSnapshot,
        selector,
        isEqual2
      ) {
        var instRef = useRef3(null);
        if (null === instRef.current) {
          var inst = { hasValue: false, value: null };
          instRef.current = inst;
        } else inst = instRef.current;
        instRef = useMemo3(
          function () {
            function memoizedSelector(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                nextSnapshot = selector(nextSnapshot);
                if (void 0 !== isEqual2 && inst.hasValue) {
                  var currentSelection = inst.value;
                  if (isEqual2(currentSelection, nextSnapshot))
                    return (memoizedSelection = currentSelection);
                }
                return (memoizedSelection = nextSnapshot);
              }
              currentSelection = memoizedSelection;
              if (objectIs(memoizedSnapshot, nextSnapshot))
                return currentSelection;
              var nextSelection = selector(nextSnapshot);
              if (
                void 0 !== isEqual2 &&
                isEqual2(currentSelection, nextSelection)
              )
                return (memoizedSnapshot = nextSnapshot), currentSelection;
              memoizedSnapshot = nextSnapshot;
              return (memoizedSelection = nextSelection);
            }
            var hasMemo = false,
              memoizedSnapshot,
              memoizedSelection,
              maybeGetServerSnapshot =
                void 0 === getServerSnapshot ? null : getServerSnapshot;
            return [
              function () {
                return memoizedSelector(getSnapshot());
              },
              null === maybeGetServerSnapshot
                ? void 0
                : function () {
                    return memoizedSelector(maybeGetServerSnapshot());
                  },
            ];
          },
          [getSnapshot, getServerSnapshot, selector, isEqual2]
        );
        var value = useSyncExternalStore3(subscribe, instRef[0], instRef[1]);
        useEffect2(
          function () {
            inst.hasValue = true;
            inst.value = value;
          },
          [value]
        );
        useDebugValue2(value);
        return value;
      };
      'undefined' !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
        'function' ===
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  },
});

// node_modules/use-sync-external-store/shim/with-selector.js
var require_with_selector = __commonJS({
  'node_modules/use-sync-external-store/shim/with-selector.js'(
    exports,
    module
  ) {
    'use strict';
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_with_selector_development();
    }
  },
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  'node_modules/scheduler/cjs/scheduler.development.js'(exports) {
    'use strict';
    if (true) {
      (function () {
        'use strict';
        if (
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
            'function'
        ) {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(
            new Error()
          );
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push2(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first2 = heap[0];
          var last2 = heap.pop();
          if (last2 !== first2) {
            heap[0] = last2;
            siftDown(heap, last2, 0);
          }
          return first2;
        }
        function siftUp(heap, node, i) {
          var index = i;
          while (index > 0) {
            var parentIndex = (index - 1) >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index = i;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index < halfLength) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare(left, node) < 0) {
              if (rightIndex < length && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (rightIndex < length && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {}
        var hasPerformanceNow =
          typeof performance === 'object' &&
          typeof performance.now === 'function';
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function () {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function () {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout =
          typeof setTimeout === 'function' ? setTimeout : null;
        var localClearTimeout =
          typeof clearTimeout === 'function' ? clearTimeout : null;
        var localSetImmediate =
          typeof setImmediate !== 'undefined' ? setImmediate : null;
        var isInputPending =
          typeof navigator !== 'undefined' &&
          navigator.scheduling !== void 0 &&
          navigator.scheduling.isInputPending !== void 0
            ? navigator.scheduling.isInputPending.bind(navigator.scheduling)
            : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push2(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(
                  handleTimeout,
                  firstTimer.startTime - currentTime
                );
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (
              currentTask.expirationTime > currentTime &&
              (!hasTimeRemaining || shouldYieldToHost())
            ) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout =
                currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === 'function') {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(
                handleTimeout,
                firstTimer.startTime - currentTime
              );
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function () {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1,
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push2(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push2(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {}
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {}
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console['error'](
              'forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported'
            );
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function () {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(
                hasTimeRemaining,
                currentTime
              );
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === 'function') {
          schedulePerformWorkUntilDeadline = function () {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== 'undefined') {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function () {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function () {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function () {
            callback(exports.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel =
          unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
            'function'
        ) {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(
            new Error()
          );
        }
      })();
    }
  },
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  'node_modules/scheduler/index.js'(exports, module) {
    'use strict';
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_development();
    }
  },
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  'node_modules/react-dom/cjs/react-dom.development.js'(exports) {
    'use strict';
    if (true) {
      (function () {
        'use strict';
        if (
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
            'function'
        ) {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(
            new Error()
          );
        }
        var React6 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals =
          React6.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (
                var _len = arguments.length,
                  args = new Array(_len > 1 ? _len - 1 : 0),
                  _key = 1;
                _key < _len;
                _key++
              ) {
                args[_key - 1] = arguments[_key];
              }
              printWarning('warn', format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (
                var _len2 = arguments.length,
                  args = new Array(_len2 > 1 ? _len2 - 1 : 0),
                  _key2 = 1;
                _key2 < _len2;
                _key2++
              ) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning('error', format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 =
              ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== '') {
              format += '%s';
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function (item) {
              return String(item);
            });
            argsWithFormat.unshift('Warning: ' + format);
            Function.prototype.apply.call(
              console[level],
              console,
              argsWithFormat
            );
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = true;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + 'Capture', dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error(
                'EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.',
                registrationName
              );
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === 'onDoubleClick') {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM2 = !!(
          typeof window !== 'undefined' &&
          typeof window.document !== 'undefined' &&
          typeof window.document.createElement !== 'undefined'
        );
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag =
              typeof Symbol === 'function' && Symbol.toStringTag;
            var type =
              (hasToStringTag && value[Symbol.toStringTag]) ||
              value.constructor.name ||
              'Object';
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return '' + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error(
                'The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.',
                attributeName,
                typeName(value)
              );
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error(
                'The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.',
                typeName(value)
              );
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error(
                'The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.',
                propName,
                typeName(value)
              );
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error(
                'The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.',
                propName,
                typeName(value)
              );
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error(
                'The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.',
                typeName(value)
              );
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error(
                'Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.',
                typeName(value)
              );
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR =
          ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
        var ATTRIBUTE_NAME_CHAR =
          ATTRIBUTE_NAME_START_CHAR +
          '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
          '^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$'
        );
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (
            hasOwnProperty2.call(validatedAttributeNameCache, attributeName)
          ) {
            return true;
          }
          if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error('Invalid attribute name: `%s`', attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(
          name,
          propertyInfo,
          isCustomComponentTag
        ) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (
            name.length > 2 &&
            (name[0] === 'o' || name[0] === 'O') &&
            (name[1] === 'n' || name[1] === 'N')
          ) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(
          name,
          value,
          propertyInfo,
          isCustomComponentTag
        ) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case 'function':
            // $FlowIssue symbol is perfectly valid here
            case 'symbol':
              return true;
            case 'boolean': {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== 'data-' && prefix2 !== 'aria-';
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(
          name,
          value,
          propertyInfo,
          isCustomComponentTag
        ) {
          if (value === null || typeof value === 'undefined') {
            return true;
          }
          if (
            shouldRemoveAttributeWithWarning(
              name,
              value,
              propertyInfo,
              isCustomComponentTag
            )
          ) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(
          name,
          type,
          mustUseProperty,
          attributeName,
          attributeNamespace,
          sanitizeURL2,
          removeEmptyString
        ) {
          this.acceptsBooleans =
            type === BOOLEANISH_STRING ||
            type === BOOLEAN ||
            type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          'children',
          'dangerouslySetInnerHTML',
          // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          'defaultValue',
          'defaultChecked',
          'innerHTML',
          'suppressContentEditableWarning',
          'suppressHydrationWarning',
          'style',
        ];
        reservedProps.forEach(function (name) {
          properties[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          ['acceptCharset', 'accept-charset'],
          ['className', 'class'],
          ['htmlFor', 'for'],
          ['httpEquiv', 'http-equiv'],
        ].forEach(function (_ref) {
          var name = _ref[0],
            attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(
          function (name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          }
        );
        [
          'autoReverse',
          'externalResourcesRequired',
          'focusable',
          'preserveAlpha',
        ].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          'allowFullScreen',
          'async',
          // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          'autoFocus',
          'autoPlay',
          'controls',
          'default',
          'defer',
          'disabled',
          'disablePictureInPicture',
          'disableRemotePlayback',
          'formNoValidate',
          'hidden',
          'loop',
          'noModule',
          'noValidate',
          'open',
          'playsInline',
          'readOnly',
          'required',
          'reversed',
          'scoped',
          'seamless',
          // Microdata
          'itemScope',
        ].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          'checked',
          // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          'multiple',
          'muted',
          'selected',
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          'capture',
          'download',
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          'cols',
          'rows',
          'size',
          'span',
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ['rowSpan', 'start'].forEach(function (name) {
          properties[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function (token2) {
          return token2[1].toUpperCase();
        };
        [
          'accent-height',
          'alignment-baseline',
          'arabic-form',
          'baseline-shift',
          'cap-height',
          'clip-path',
          'clip-rule',
          'color-interpolation',
          'color-interpolation-filters',
          'color-profile',
          'color-rendering',
          'dominant-baseline',
          'enable-background',
          'fill-opacity',
          'fill-rule',
          'flood-color',
          'flood-opacity',
          'font-family',
          'font-size',
          'font-size-adjust',
          'font-stretch',
          'font-style',
          'font-variant',
          'font-weight',
          'glyph-name',
          'glyph-orientation-horizontal',
          'glyph-orientation-vertical',
          'horiz-adv-x',
          'horiz-origin-x',
          'image-rendering',
          'letter-spacing',
          'lighting-color',
          'marker-end',
          'marker-mid',
          'marker-start',
          'overline-position',
          'overline-thickness',
          'paint-order',
          'panose-1',
          'pointer-events',
          'rendering-intent',
          'shape-rendering',
          'stop-color',
          'stop-opacity',
          'strikethrough-position',
          'strikethrough-thickness',
          'stroke-dasharray',
          'stroke-dashoffset',
          'stroke-linecap',
          'stroke-linejoin',
          'stroke-miterlimit',
          'stroke-opacity',
          'stroke-width',
          'text-anchor',
          'text-decoration',
          'text-rendering',
          'underline-position',
          'underline-thickness',
          'unicode-bidi',
          'unicode-range',
          'units-per-em',
          'v-alphabetic',
          'v-hanging',
          'v-ideographic',
          'v-mathematical',
          'vector-effect',
          'vert-adv-y',
          'vert-origin-x',
          'vert-origin-y',
          'word-spacing',
          'writing-mode',
          'xmlns:xlink',
          'x-height',
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function (attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          'xlink:actuate',
          'xlink:arcrole',
          'xlink:role',
          'xlink:show',
          'xlink:title',
          'xlink:type',
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function (attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            'http://www.w3.org/1999/xlink',
            false,
            // sanitizeURL
            false
          );
        });
        [
          'xml:base',
          'xml:lang',
          'xml:space',
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function (attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            'http://www.w3.org/XML/1998/namespace',
            false,
            // sanitizeURL
            false
          );
        });
        ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var xlinkHref = 'xlinkHref';
        properties[xlinkHref] = new PropertyInfoRecord(
          'xlinkHref',
          STRING,
          false,
          // mustUseProperty
          'xlink:href',
          'http://www.w3.org/1999/xlink',
          true,
          // sanitizeURL
          false
        );
        ['src', 'href', 'action', 'formAction'].forEach(function (
          attributeName
        ) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            true,
            // sanitizeURL
            true
          );
        });
        var isJavaScriptProtocol =
          /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url2) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url2)) {
              didWarn = true;
              error(
                'A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.',
                JSON.stringify(url2)
              );
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL('' + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === '') {
                    return true;
                  }
                  if (
                    shouldRemoveAttribute(name, expected, propertyInfo, false)
                  ) {
                    return value;
                  }
                  if (value === '' + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (
                  shouldRemoveAttribute(name, expected, propertyInfo, false)
                ) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === '' + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(
          node,
          name,
          expected,
          isCustomComponentTag
        ) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === '' + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (
            shouldRemoveAttribute(
              name,
              value,
              propertyInfo,
              isCustomComponentTag
            )
          ) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name);
                }
                node.setAttribute(_attributeName, '' + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : '';
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName,
            attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (
              _type === BOOLEAN ||
              (_type === OVERLOADED_BOOLEAN && value === true)
            ) {
              attributeValue = '';
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = '' + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(
                attributeNamespace,
                attributeName,
                attributeValue
              );
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for('react.element');
        var REACT_PORTAL_TYPE = Symbol.for('react.portal');
        var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
        var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
        var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
        var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
        var REACT_CONTEXT_TYPE = Symbol.for('react.context');
        var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
        var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
        var REACT_MEMO_TYPE = Symbol.for('react.memo');
        var REACT_LAZY_TYPE = Symbol.for('react.lazy');
        var REACT_SCOPE_TYPE = Symbol.for('react.scope');
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(
          'react.debug_trace_mode'
        );
        var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
        var REACT_CACHE_TYPE = Symbol.for('react.cache');
        var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = '@@iterator';
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== 'object') {
            return null;
          }
          var maybeIterator =
            (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
            maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === 'function') {
            return maybeIterator;
          }
          return null;
        }
        var assign2 = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {}
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true,
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props,
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true,
              };
              Object.defineProperties(console, {
                log: assign2({}, props, {
                  value: prevLog,
                }),
                info: assign2({}, props, {
                  value: prevInfo,
                }),
                warn: assign2({}, props, {
                  value: prevWarn,
                }),
                error: assign2({}, props, {
                  value: prevError,
                }),
                group: assign2({}, props, {
                  value: prevGroup,
                }),
                groupCollapsed: assign2({}, props, {
                  value: prevGroupCollapsed,
                }),
                groupEnd: assign2({}, props, {
                  value: prevGroupEnd,
                }),
              });
            }
            if (disabledDepth < 0) {
              error(
                'disabledDepth fell below zero. This is a bug in React. Please file an issue.'
              );
            }
          }
        }
        var ReactCurrentDispatcher =
          ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = (match && match[1]) || '';
              }
            }
            return '\n' + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return '';
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function () {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, 'props', {
                set: function () {
                  throw Error();
                },
              });
              if (typeof Reflect === 'object' && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample2) {
            if (sample2 && control && typeof sample2.stack === 'string') {
              var sampleLines = sample2.stack.split('\n');
              var controlLines = control.stack.split('\n');
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame =
                          '\n' + sampleLines[s].replace(' at new ', ' at ');
                        if (fn.displayName && _frame.includes('<anonymous>')) {
                          _frame = _frame.replace(
                            '<anonymous>',
                            fn.displayName
                          );
                        }
                        {
                          if (typeof fn === 'function') {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : '';
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
          {
            if (typeof fn === 'function') {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor2, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor2, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return '';
          }
          if (typeof type === 'function') {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === 'string') {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame('SuspenseList');
          }
          if (typeof type === 'object') {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(
                  type.type,
                  source,
                  ownerFn
                );
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(
                    init(payload),
                    source,
                    ownerFn
                  );
                } catch (x) {}
              }
            }
          }
          return '';
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
              return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
              return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return '';
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = '';
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || '';
          return functionName !== ''
            ? wrapperName + '(' + functionName + ')'
            : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || 'Context';
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === 'number') {
              error(
                'Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.'
              );
            }
          }
          if (typeof type === 'function') {
            return type.displayName || type.name || null;
          }
          if (typeof type === 'string') {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return 'Fragment';
            case REACT_PORTAL_TYPE:
              return 'Portal';
            case REACT_PROFILER_TYPE:
              return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
              return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
              return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
              return 'SuspenseList';
          }
          if (typeof type === 'object') {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || 'Memo';
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || '';
          return (
            outerType.displayName ||
            (functionName !== ''
              ? wrapperName + '(' + functionName + ')'
              : wrapperName)
          );
        }
        function getContextName$1(type) {
          return type.displayName || 'Context';
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag,
            type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return 'Cache';
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + '.Consumer';
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider._context) + '.Provider';
            case DehydratedFragment:
              return 'DehydratedFragment';
            case ForwardRef:
              return getWrappedName$1(type, type.render, 'ForwardRef');
            case Fragment:
              return 'Fragment';
            case HostComponent:
              return type;
            case HostPortal:
              return 'Portal';
            case HostRoot:
              return 'Root';
            case HostText:
              return 'Text';
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return 'StrictMode';
              }
              return 'Mode';
            case OffscreenComponent:
              return 'Offscreen';
            case Profiler:
              return 'Profiler';
            case ScopeComponent:
              return 'Scope';
            case SuspenseComponent:
              return 'Suspense';
            case SuspenseListComponent:
              return 'SuspenseList';
            case TracingMarkerComponent:
              return 'TracingMarker';
            // The display name for this tags come from the user-provided type:
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === 'function') {
                return type.displayName || type.name || null;
              }
              if (typeof type === 'string') {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame =
          ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== 'undefined') {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return '';
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack =
              fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString2(value) {
          return '' + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case 'boolean':
            case 'number':
            case 'string':
            case 'undefined':
              return value;
            case 'object':
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return '';
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true,
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (
              !(
                hasReadOnlyValue[props.type] ||
                props.onChange ||
                props.onInput ||
                props.readOnly ||
                props.disabled ||
                props.value == null
              )
            ) {
              error(
                'You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.'
              );
            }
            if (
              !(
                props.onChange ||
                props.readOnly ||
                props.disabled ||
                props.checked == null
              )
            ) {
              error(
                'You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.'
              );
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return (
            nodeName &&
            nodeName.toLowerCase() === 'input' &&
            (type === 'checkbox' || type === 'radio')
          );
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = '';
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? 'true' : 'false';
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? 'checked' : 'value';
          var descriptor = Object.getOwnPropertyDescriptor(
            node.constructor.prototype,
            valueField
          );
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = '' + node[valueField];
          if (
            node.hasOwnProperty(valueField) ||
            typeof descriptor === 'undefined' ||
            typeof descriptor.get !== 'function' ||
            typeof descriptor.set !== 'function'
          ) {
            return;
          }
          var get3 = descriptor.get,
            set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function () {
              return get3.call(this);
            },
            set: function (value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = '' + value;
              set2.call(this, value);
            },
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable,
          });
          var tracker = {
            getValue: function () {
              return currentValue;
            },
            setValue: function (value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = '' + value;
            },
            stopTracking: function () {
              detachTracker(node);
              delete node[valueField];
            },
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== 'undefined' ? document : void 0);
          if (typeof doc === 'undefined') {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === 'checkbox' || props.type === 'radio';
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign2({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked:
              checked != null ? checked : node._wrapperState.initialChecked,
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps('input', props);
            if (
              props.checked !== void 0 &&
              props.defaultChecked !== void 0 &&
              !didWarnCheckedDefaultChecked
            ) {
              error(
                '%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components',
                getCurrentFiberOwnerNameInDevOrNull() || 'A component',
                props.type
              );
              didWarnCheckedDefaultChecked = true;
            }
            if (
              props.value !== void 0 &&
              props.defaultValue !== void 0 &&
              !didWarnValueDefaultValue
            ) {
              error(
                '%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components',
                getCurrentFiberOwnerNameInDevOrNull() || 'A component',
                props.type
              );
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue =
            props.defaultValue == null ? '' : props.defaultValue;
          node._wrapperState = {
            initialChecked:
              props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(
              props.value != null ? props.value : defaultValue
            ),
            controlled: isControlled(props),
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, 'checked', checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (
              !node._wrapperState.controlled &&
              controlled &&
              !didWarnUncontrolledToControlled
            ) {
              error(
                'A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components'
              );
              didWarnUncontrolledToControlled = true;
            }
            if (
              node._wrapperState.controlled &&
              !controlled &&
              !didWarnControlledToUncontrolled
            ) {
              error(
                'A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components'
              );
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === 'number') {
              if (
                (value === 0 && node.value === '') || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value
              ) {
                node.value = toString2(value);
              }
            } else if (node.value !== toString2(value)) {
              node.value = toString2(value);
            }
          } else if (type === 'submit' || type === 'reset') {
            node.removeAttribute('value');
            return;
          }
          {
            if (props.hasOwnProperty('value')) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty('defaultValue')) {
              setDefaultValue(
                node,
                props.type,
                getToStringValue(props.defaultValue)
              );
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (
            props.hasOwnProperty('value') ||
            props.hasOwnProperty('defaultValue')
          ) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset';
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString2(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== '') {
            node.name = '';
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== '') {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, 'name');
            }
            var group2 = queryRoot.querySelectorAll(
              'input[name=' + JSON.stringify('' + name) + '][type="radio"]'
            );
            for (var i = 0; i < group2.length; i++) {
              var otherNode = group2[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error(
                  'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.'
                );
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (
            // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
            type !== 'number' ||
            getActiveElement(node.ownerDocument) !== node
          ) {
            if (value == null) {
              node.defaultValue = toString2(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString2(value)) {
              node.defaultValue = toString2(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (
                typeof props.children === 'object' &&
                props.children !== null
              ) {
                React6.Children.forEach(props.children, function (child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === 'string' || typeof child === 'number') {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error(
                      'Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.'
                    );
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error(
                    'Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.'
                  );
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error(
                'Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.'
              );
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute(
              'value',
              toString2(getToStringValue(props.value))
            );
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return '\n\nCheck the render method of `' + ownerName + '`.';
          }
          return '';
        }
        var valuePropNames = ['value', 'defaultValue'];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps('select', props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error(
                  'The `%s` prop supplied to <select> must be an array if `multiple` is true.%s',
                  propName,
                  getDeclarationErrorAddendum()
                );
              } else if (!props.multiple && propNameIsArray) {
                error(
                  'The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s',
                  propName,
                  getDeclarationErrorAddendum()
                );
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue['$' + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty(
                '$' + options2[_i].value
              );
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString2(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign2({}, props, {
            value: void 0,
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple,
          };
          {
            if (
              props.value !== void 0 &&
              props.defaultValue !== void 0 &&
              !didWarnValueDefaultValue$1
            ) {
              error(
                'Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components'
              );
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(
                node,
                !!props.multiple,
                props.multiple ? [] : '',
                false
              );
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error(
              '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
            );
          }
          var hostProps = assign2({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString2(node._wrapperState.initialValue),
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps('textarea', props);
            if (
              props.value !== void 0 &&
              props.defaultValue !== void 0 &&
              !didWarnValDefaultVal
            ) {
              error(
                '%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components',
                getCurrentFiberOwnerNameInDevOrNull() || 'A component'
              );
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children,
              defaultValue = props.defaultValue;
            if (children != null) {
              {
                error(
                  'Use the `defaultValue` or `value` props instead of setting children on <textarea>.'
                );
              }
              {
                if (defaultValue != null) {
                  throw new Error(
                    'If you supply `defaultValue` on a <textarea>, do not pass children.'
                  );
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error(
                      '<textarea> can only have at most one child.'
                    );
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = '';
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue),
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString2(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString2(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
        var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
        var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
        function getIntrinsicNamespace(type) {
          switch (type) {
            case 'svg':
              return SVG_NAMESPACE;
            case 'math':
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function (func) {
          if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
            return function (arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function () {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (
          node,
          html
        ) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!('innerHTML' in node)) {
              reusableSVGContainer =
                reusableSVGContainer || document.createElement('div');
              reusableSVGContainer.innerHTML =
                '<svg>' + html.valueOf().toString() + '</svg>';
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function (node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (
              firstChild &&
              firstChild === node.lastChild &&
              firstChild.nodeType === TEXT_NODE
            ) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction',
          ],
          background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize',
          ],
          backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
          border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth',
          ],
          borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth',
          ],
          borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth',
          ],
          borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
          ],
          borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor',
          ],
          borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
          ],
          borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth',
          ],
          borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth',
          ],
          borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
          borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius',
          ],
          borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
          ],
          borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle',
          ],
          borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
          borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth',
          ],
          columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
          columns: ['columnCount', 'columnWidth'],
          flex: ['flexBasis', 'flexGrow', 'flexShrink'],
          flexFlow: ['flexDirection', 'flexWrap'],
          font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight',
          ],
          fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
          ],
          gap: ['columnGap', 'rowGap'],
          grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows',
          ],
          gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart',
          ],
          gridColumn: ['gridColumnEnd', 'gridColumnStart'],
          gridColumnGap: ['columnGap'],
          gridGap: ['columnGap', 'rowGap'],
          gridRow: ['gridRowEnd', 'gridRowStart'],
          gridRowGap: ['rowGap'],
          gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows',
          ],
          listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
          margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
          marker: ['markerEnd', 'markerMid', 'markerStart'],
          mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize',
          ],
          maskPosition: ['maskPositionX', 'maskPositionY'],
          outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
          overflow: ['overflowX', 'overflowY'],
          padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop',
          ],
          placeContent: ['alignContent', 'justifyContent'],
          placeItems: ['alignItems', 'justifyItems'],
          placeSelf: ['alignSelf', 'justifySelf'],
          textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle',
          ],
          textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
          transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction',
          ],
          wordWrap: ['overflowWrap'],
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true,
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
        Object.keys(isUnitlessNumber).forEach(function (prop) {
          prefixes.forEach(function (prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty2 =
            value == null || typeof value === 'boolean' || value === '';
          if (isEmpty2) {
            return '';
          }
          if (
            !isCustomProperty &&
            typeof value === 'number' &&
            value !== 0 &&
            !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])
          ) {
            return value + 'px';
          }
          {
            checkCSSPropertyStringCoercion(value, name);
          }
          return ('' + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name
            .replace(uppercasePattern, '-$1')
            .toLowerCase()
            .replace(msPattern, '-ms-');
        }
        var warnValidStyle = function () {};
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function (string) {
            return string.replace(hyphenPattern, function (_15, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function (name) {
            if (
              warnedStyleNames.hasOwnProperty(name) &&
              warnedStyleNames[name]
            ) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              'Unsupported style property %s. Did you mean %s?',
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, 'ms-'))
            );
          };
          var warnBadVendoredStyleName = function (name) {
            if (
              warnedStyleNames.hasOwnProperty(name) &&
              warnedStyleNames[name]
            ) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              'Unsupported vendor-prefixed style property %s. Did you mean %s?',
              name,
              name.charAt(0).toUpperCase() + name.slice(1)
            );
          };
          var warnStyleValueWithSemicolon = function (name, value) {
            if (
              warnedStyleValues.hasOwnProperty(value) &&
              warnedStyleValues[value]
            ) {
              return;
            }
            warnedStyleValues[value] = true;
            error(
              `Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`,
              name,
              value.replace(badStyleValueWithSemicolonPattern, '')
            );
          };
          var warnStyleValueIsNaN = function (name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error(
              '`NaN` is an invalid value for the `%s` css style property.',
              name
            );
          };
          var warnStyleValueIsInfinity = function (name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error(
              '`Infinity` is an invalid value for the `%s` css style property.',
              name
            );
          };
          warnValidStyle = function (name, value) {
            if (name.indexOf('-') > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === 'number') {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = '';
            var delimiter = '';
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized +=
                  delimiter +
                  (isCustomProperty
                    ? styleName
                    : hyphenateStyleName(styleName)) +
                  ':';
                serialized += dangerousStyleValue(
                  styleName,
                  styleValue,
                  isCustomProperty
                );
                delimiter = ';';
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf('--') === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(
              styleName,
              styles[styleName],
              isCustomProperty
            );
            if (styleName === 'float') {
              styleName = 'cssFloat';
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === 'boolean' || value === '';
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(
          styleUpdates,
          nextStyles
        ) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error(
                  "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",
                  isValueEmpty(styleUpdates[originalKey])
                    ? 'Removing'
                    : 'Updating',
                  originalKey,
                  correctOriginalKey
                );
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true,
          // NOTE: menuitem's close tag should be omitted, but that causes problems.
        };
        var voidElementTags = assign2(
          {
            menuitem: true,
          },
          omittedCloseTags
        );
        var HTML = '__html';
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (
              props.children != null ||
              props.dangerouslySetInnerHTML != null
            ) {
              throw new Error(
                tag +
                  ' is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.'
              );
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error(
                'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
              );
            }
            if (
              typeof props.dangerouslySetInnerHTML !== 'object' ||
              !(HTML in props.dangerouslySetInnerHTML)
            ) {
              throw new Error(
                '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.'
              );
            }
          }
          {
            if (
              !props.suppressContentEditableWarning &&
              props.contentEditable &&
              props.children != null
            ) {
              error(
                'A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.'
              );
            }
          }
          if (props.style != null && typeof props.style !== 'object') {
            throw new Error(
              "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
            );
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf('-') === -1) {
            return typeof props.is === 'string';
          }
          switch (tagName) {
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          'accept': 'accept',
          'acceptcharset': 'acceptCharset',
          'accept-charset': 'acceptCharset',
          'accesskey': 'accessKey',
          'action': 'action',
          'allowfullscreen': 'allowFullScreen',
          'alt': 'alt',
          'as': 'as',
          'async': 'async',
          'autocapitalize': 'autoCapitalize',
          'autocomplete': 'autoComplete',
          'autocorrect': 'autoCorrect',
          'autofocus': 'autoFocus',
          'autoplay': 'autoPlay',
          'autosave': 'autoSave',
          'capture': 'capture',
          'cellpadding': 'cellPadding',
          'cellspacing': 'cellSpacing',
          'challenge': 'challenge',
          'charset': 'charSet',
          'checked': 'checked',
          'children': 'children',
          'cite': 'cite',
          'class': 'className',
          'classid': 'classID',
          'classname': 'className',
          'cols': 'cols',
          'colspan': 'colSpan',
          'content': 'content',
          'contenteditable': 'contentEditable',
          'contextmenu': 'contextMenu',
          'controls': 'controls',
          'controlslist': 'controlsList',
          'coords': 'coords',
          'crossorigin': 'crossOrigin',
          'dangerouslysetinnerhtml': 'dangerouslySetInnerHTML',
          'data': 'data',
          'datetime': 'dateTime',
          'default': 'default',
          'defaultchecked': 'defaultChecked',
          'defaultvalue': 'defaultValue',
          'defer': 'defer',
          'dir': 'dir',
          'disabled': 'disabled',
          'disablepictureinpicture': 'disablePictureInPicture',
          'disableremoteplayback': 'disableRemotePlayback',
          'download': 'download',
          'draggable': 'draggable',
          'enctype': 'encType',
          'enterkeyhint': 'enterKeyHint',
          'for': 'htmlFor',
          'form': 'form',
          'formmethod': 'formMethod',
          'formaction': 'formAction',
          'formenctype': 'formEncType',
          'formnovalidate': 'formNoValidate',
          'formtarget': 'formTarget',
          'frameborder': 'frameBorder',
          'headers': 'headers',
          'height': 'height',
          'hidden': 'hidden',
          'high': 'high',
          'href': 'href',
          'hreflang': 'hrefLang',
          'htmlfor': 'htmlFor',
          'httpequiv': 'httpEquiv',
          'http-equiv': 'httpEquiv',
          'icon': 'icon',
          'id': 'id',
          'imagesizes': 'imageSizes',
          'imagesrcset': 'imageSrcSet',
          'innerhtml': 'innerHTML',
          'inputmode': 'inputMode',
          'integrity': 'integrity',
          'is': 'is',
          'itemid': 'itemID',
          'itemprop': 'itemProp',
          'itemref': 'itemRef',
          'itemscope': 'itemScope',
          'itemtype': 'itemType',
          'keyparams': 'keyParams',
          'keytype': 'keyType',
          'kind': 'kind',
          'label': 'label',
          'lang': 'lang',
          'list': 'list',
          'loop': 'loop',
          'low': 'low',
          'manifest': 'manifest',
          'marginwidth': 'marginWidth',
          'marginheight': 'marginHeight',
          'max': 'max',
          'maxlength': 'maxLength',
          'media': 'media',
          'mediagroup': 'mediaGroup',
          'method': 'method',
          'min': 'min',
          'minlength': 'minLength',
          'multiple': 'multiple',
          'muted': 'muted',
          'name': 'name',
          'nomodule': 'noModule',
          'nonce': 'nonce',
          'novalidate': 'noValidate',
          'open': 'open',
          'optimum': 'optimum',
          'pattern': 'pattern',
          'placeholder': 'placeholder',
          'playsinline': 'playsInline',
          'poster': 'poster',
          'preload': 'preload',
          'profile': 'profile',
          'radiogroup': 'radioGroup',
          'readonly': 'readOnly',
          'referrerpolicy': 'referrerPolicy',
          'rel': 'rel',
          'required': 'required',
          'reversed': 'reversed',
          'role': 'role',
          'rows': 'rows',
          'rowspan': 'rowSpan',
          'sandbox': 'sandbox',
          'scope': 'scope',
          'scoped': 'scoped',
          'scrolling': 'scrolling',
          'seamless': 'seamless',
          'selected': 'selected',
          'shape': 'shape',
          'size': 'size',
          'sizes': 'sizes',
          'span': 'span',
          'spellcheck': 'spellCheck',
          'src': 'src',
          'srcdoc': 'srcDoc',
          'srclang': 'srcLang',
          'srcset': 'srcSet',
          'start': 'start',
          'step': 'step',
          'style': 'style',
          'summary': 'summary',
          'tabindex': 'tabIndex',
          'target': 'target',
          'title': 'title',
          'type': 'type',
          'usemap': 'useMap',
          'value': 'value',
          'width': 'width',
          'wmode': 'wmode',
          'wrap': 'wrap',
          // SVG
          'about': 'about',
          'accentheight': 'accentHeight',
          'accent-height': 'accentHeight',
          'accumulate': 'accumulate',
          'additive': 'additive',
          'alignmentbaseline': 'alignmentBaseline',
          'alignment-baseline': 'alignmentBaseline',
          'allowreorder': 'allowReorder',
          'alphabetic': 'alphabetic',
          'amplitude': 'amplitude',
          'arabicform': 'arabicForm',
          'arabic-form': 'arabicForm',
          'ascent': 'ascent',
          'attributename': 'attributeName',
          'attributetype': 'attributeType',
          'autoreverse': 'autoReverse',
          'azimuth': 'azimuth',
          'basefrequency': 'baseFrequency',
          'baselineshift': 'baselineShift',
          'baseline-shift': 'baselineShift',
          'baseprofile': 'baseProfile',
          'bbox': 'bbox',
          'begin': 'begin',
          'bias': 'bias',
          'by': 'by',
          'calcmode': 'calcMode',
          'capheight': 'capHeight',
          'cap-height': 'capHeight',
          'clip': 'clip',
          'clippath': 'clipPath',
          'clip-path': 'clipPath',
          'clippathunits': 'clipPathUnits',
          'cliprule': 'clipRule',
          'clip-rule': 'clipRule',
          'color': 'color',
          'colorinterpolation': 'colorInterpolation',
          'color-interpolation': 'colorInterpolation',
          'colorinterpolationfilters': 'colorInterpolationFilters',
          'color-interpolation-filters': 'colorInterpolationFilters',
          'colorprofile': 'colorProfile',
          'color-profile': 'colorProfile',
          'colorrendering': 'colorRendering',
          'color-rendering': 'colorRendering',
          'contentscripttype': 'contentScriptType',
          'contentstyletype': 'contentStyleType',
          'cursor': 'cursor',
          'cx': 'cx',
          'cy': 'cy',
          'd': 'd',
          'datatype': 'datatype',
          'decelerate': 'decelerate',
          'descent': 'descent',
          'diffuseconstant': 'diffuseConstant',
          'direction': 'direction',
          'display': 'display',
          'divisor': 'divisor',
          'dominantbaseline': 'dominantBaseline',
          'dominant-baseline': 'dominantBaseline',
          'dur': 'dur',
          'dx': 'dx',
          'dy': 'dy',
          'edgemode': 'edgeMode',
          'elevation': 'elevation',
          'enablebackground': 'enableBackground',
          'enable-background': 'enableBackground',
          'end': 'end',
          'exponent': 'exponent',
          'externalresourcesrequired': 'externalResourcesRequired',
          'fill': 'fill',
          'fillopacity': 'fillOpacity',
          'fill-opacity': 'fillOpacity',
          'fillrule': 'fillRule',
          'fill-rule': 'fillRule',
          'filter': 'filter',
          'filterres': 'filterRes',
          'filterunits': 'filterUnits',
          'floodopacity': 'floodOpacity',
          'flood-opacity': 'floodOpacity',
          'floodcolor': 'floodColor',
          'flood-color': 'floodColor',
          'focusable': 'focusable',
          'fontfamily': 'fontFamily',
          'font-family': 'fontFamily',
          'fontsize': 'fontSize',
          'font-size': 'fontSize',
          'fontsizeadjust': 'fontSizeAdjust',
          'font-size-adjust': 'fontSizeAdjust',
          'fontstretch': 'fontStretch',
          'font-stretch': 'fontStretch',
          'fontstyle': 'fontStyle',
          'font-style': 'fontStyle',
          'fontvariant': 'fontVariant',
          'font-variant': 'fontVariant',
          'fontweight': 'fontWeight',
          'font-weight': 'fontWeight',
          'format': 'format',
          'from': 'from',
          'fx': 'fx',
          'fy': 'fy',
          'g1': 'g1',
          'g2': 'g2',
          'glyphname': 'glyphName',
          'glyph-name': 'glyphName',
          'glyphorientationhorizontal': 'glyphOrientationHorizontal',
          'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
          'glyphorientationvertical': 'glyphOrientationVertical',
          'glyph-orientation-vertical': 'glyphOrientationVertical',
          'glyphref': 'glyphRef',
          'gradienttransform': 'gradientTransform',
          'gradientunits': 'gradientUnits',
          'hanging': 'hanging',
          'horizadvx': 'horizAdvX',
          'horiz-adv-x': 'horizAdvX',
          'horizoriginx': 'horizOriginX',
          'horiz-origin-x': 'horizOriginX',
          'ideographic': 'ideographic',
          'imagerendering': 'imageRendering',
          'image-rendering': 'imageRendering',
          'in2': 'in2',
          'in': 'in',
          'inlist': 'inlist',
          'intercept': 'intercept',
          'k1': 'k1',
          'k2': 'k2',
          'k3': 'k3',
          'k4': 'k4',
          'k': 'k',
          'kernelmatrix': 'kernelMatrix',
          'kernelunitlength': 'kernelUnitLength',
          'kerning': 'kerning',
          'keypoints': 'keyPoints',
          'keysplines': 'keySplines',
          'keytimes': 'keyTimes',
          'lengthadjust': 'lengthAdjust',
          'letterspacing': 'letterSpacing',
          'letter-spacing': 'letterSpacing',
          'lightingcolor': 'lightingColor',
          'lighting-color': 'lightingColor',
          'limitingconeangle': 'limitingConeAngle',
          'local': 'local',
          'markerend': 'markerEnd',
          'marker-end': 'markerEnd',
          'markerheight': 'markerHeight',
          'markermid': 'markerMid',
          'marker-mid': 'markerMid',
          'markerstart': 'markerStart',
          'marker-start': 'markerStart',
          'markerunits': 'markerUnits',
          'markerwidth': 'markerWidth',
          'mask': 'mask',
          'maskcontentunits': 'maskContentUnits',
          'maskunits': 'maskUnits',
          'mathematical': 'mathematical',
          'mode': 'mode',
          'numoctaves': 'numOctaves',
          'offset': 'offset',
          'opacity': 'opacity',
          'operator': 'operator',
          'order': 'order',
          'orient': 'orient',
          'orientation': 'orientation',
          'origin': 'origin',
          'overflow': 'overflow',
          'overlineposition': 'overlinePosition',
          'overline-position': 'overlinePosition',
          'overlinethickness': 'overlineThickness',
          'overline-thickness': 'overlineThickness',
          'paintorder': 'paintOrder',
          'paint-order': 'paintOrder',
          'panose1': 'panose1',
          'panose-1': 'panose1',
          'pathlength': 'pathLength',
          'patterncontentunits': 'patternContentUnits',
          'patterntransform': 'patternTransform',
          'patternunits': 'patternUnits',
          'pointerevents': 'pointerEvents',
          'pointer-events': 'pointerEvents',
          'points': 'points',
          'pointsatx': 'pointsAtX',
          'pointsaty': 'pointsAtY',
          'pointsatz': 'pointsAtZ',
          'prefix': 'prefix',
          'preservealpha': 'preserveAlpha',
          'preserveaspectratio': 'preserveAspectRatio',
          'primitiveunits': 'primitiveUnits',
          'property': 'property',
          'r': 'r',
          'radius': 'radius',
          'refx': 'refX',
          'refy': 'refY',
          'renderingintent': 'renderingIntent',
          'rendering-intent': 'renderingIntent',
          'repeatcount': 'repeatCount',
          'repeatdur': 'repeatDur',
          'requiredextensions': 'requiredExtensions',
          'requiredfeatures': 'requiredFeatures',
          'resource': 'resource',
          'restart': 'restart',
          'result': 'result',
          'results': 'results',
          'rotate': 'rotate',
          'rx': 'rx',
          'ry': 'ry',
          'scale': 'scale',
          'security': 'security',
          'seed': 'seed',
          'shaperendering': 'shapeRendering',
          'shape-rendering': 'shapeRendering',
          'slope': 'slope',
          'spacing': 'spacing',
          'specularconstant': 'specularConstant',
          'specularexponent': 'specularExponent',
          'speed': 'speed',
          'spreadmethod': 'spreadMethod',
          'startoffset': 'startOffset',
          'stddeviation': 'stdDeviation',
          'stemh': 'stemh',
          'stemv': 'stemv',
          'stitchtiles': 'stitchTiles',
          'stopcolor': 'stopColor',
          'stop-color': 'stopColor',
          'stopopacity': 'stopOpacity',
          'stop-opacity': 'stopOpacity',
          'strikethroughposition': 'strikethroughPosition',
          'strikethrough-position': 'strikethroughPosition',
          'strikethroughthickness': 'strikethroughThickness',
          'strikethrough-thickness': 'strikethroughThickness',
          'string': 'string',
          'stroke': 'stroke',
          'strokedasharray': 'strokeDasharray',
          'stroke-dasharray': 'strokeDasharray',
          'strokedashoffset': 'strokeDashoffset',
          'stroke-dashoffset': 'strokeDashoffset',
          'strokelinecap': 'strokeLinecap',
          'stroke-linecap': 'strokeLinecap',
          'strokelinejoin': 'strokeLinejoin',
          'stroke-linejoin': 'strokeLinejoin',
          'strokemiterlimit': 'strokeMiterlimit',
          'stroke-miterlimit': 'strokeMiterlimit',
          'strokewidth': 'strokeWidth',
          'stroke-width': 'strokeWidth',
          'strokeopacity': 'strokeOpacity',
          'stroke-opacity': 'strokeOpacity',
          'suppresscontenteditablewarning': 'suppressContentEditableWarning',
          'suppresshydrationwarning': 'suppressHydrationWarning',
          'surfacescale': 'surfaceScale',
          'systemlanguage': 'systemLanguage',
          'tablevalues': 'tableValues',
          'targetx': 'targetX',
          'targety': 'targetY',
          'textanchor': 'textAnchor',
          'text-anchor': 'textAnchor',
          'textdecoration': 'textDecoration',
          'text-decoration': 'textDecoration',
          'textlength': 'textLength',
          'textrendering': 'textRendering',
          'text-rendering': 'textRendering',
          'to': 'to',
          'transform': 'transform',
          'typeof': 'typeof',
          'u1': 'u1',
          'u2': 'u2',
          'underlineposition': 'underlinePosition',
          'underline-position': 'underlinePosition',
          'underlinethickness': 'underlineThickness',
          'underline-thickness': 'underlineThickness',
          'unicode': 'unicode',
          'unicodebidi': 'unicodeBidi',
          'unicode-bidi': 'unicodeBidi',
          'unicoderange': 'unicodeRange',
          'unicode-range': 'unicodeRange',
          'unitsperem': 'unitsPerEm',
          'units-per-em': 'unitsPerEm',
          'unselectable': 'unselectable',
          'valphabetic': 'vAlphabetic',
          'v-alphabetic': 'vAlphabetic',
          'values': 'values',
          'vectoreffect': 'vectorEffect',
          'vector-effect': 'vectorEffect',
          'version': 'version',
          'vertadvy': 'vertAdvY',
          'vert-adv-y': 'vertAdvY',
          'vertoriginx': 'vertOriginX',
          'vert-origin-x': 'vertOriginX',
          'vertoriginy': 'vertOriginY',
          'vert-origin-y': 'vertOriginY',
          'vhanging': 'vHanging',
          'v-hanging': 'vHanging',
          'videographic': 'vIdeographic',
          'v-ideographic': 'vIdeographic',
          'viewbox': 'viewBox',
          'viewtarget': 'viewTarget',
          'visibility': 'visibility',
          'vmathematical': 'vMathematical',
          'v-mathematical': 'vMathematical',
          'vocab': 'vocab',
          'widths': 'widths',
          'wordspacing': 'wordSpacing',
          'word-spacing': 'wordSpacing',
          'writingmode': 'writingMode',
          'writing-mode': 'writingMode',
          'x1': 'x1',
          'x2': 'x2',
          'x': 'x',
          'xchannelselector': 'xChannelSelector',
          'xheight': 'xHeight',
          'x-height': 'xHeight',
          'xlinkactuate': 'xlinkActuate',
          'xlink:actuate': 'xlinkActuate',
          'xlinkarcrole': 'xlinkArcrole',
          'xlink:arcrole': 'xlinkArcrole',
          'xlinkhref': 'xlinkHref',
          'xlink:href': 'xlinkHref',
          'xlinkrole': 'xlinkRole',
          'xlink:role': 'xlinkRole',
          'xlinkshow': 'xlinkShow',
          'xlink:show': 'xlinkShow',
          'xlinktitle': 'xlinkTitle',
          'xlink:title': 'xlinkTitle',
          'xlinktype': 'xlinkType',
          'xlink:type': 'xlinkType',
          'xmlbase': 'xmlBase',
          'xml:base': 'xmlBase',
          'xmllang': 'xmlLang',
          'xml:lang': 'xmlLang',
          'xmlns': 'xmlns',
          'xml:space': 'xmlSpace',
          'xmlnsxlink': 'xmlnsXlink',
          'xmlns:xlink': 'xmlnsXlink',
          'xmlspace': 'xmlSpace',
          'y1': 'y1',
          'y2': 'y2',
          'y': 'y',
          'ychannelselector': 'yChannelSelector',
          'z': 'z',
          'zoomandpan': 'zoomAndPan',
        };
        var ariaProperties = {
          'aria-current': 0,
          // state
          'aria-description': 0,
          'aria-details': 0,
          'aria-disabled': 0,
          // state
          'aria-hidden': 0,
          // state
          'aria-invalid': 0,
          // state
          'aria-keyshortcuts': 0,
          'aria-label': 0,
          'aria-roledescription': 0,
          // Widget Attributes
          'aria-autocomplete': 0,
          'aria-checked': 0,
          'aria-expanded': 0,
          'aria-haspopup': 0,
          'aria-level': 0,
          'aria-modal': 0,
          'aria-multiline': 0,
          'aria-multiselectable': 0,
          'aria-orientation': 0,
          'aria-placeholder': 0,
          'aria-pressed': 0,
          'aria-readonly': 0,
          'aria-required': 0,
          'aria-selected': 0,
          'aria-sort': 0,
          'aria-valuemax': 0,
          'aria-valuemin': 0,
          'aria-valuenow': 0,
          'aria-valuetext': 0,
          // Live Region Attributes
          'aria-atomic': 0,
          'aria-busy': 0,
          'aria-live': 0,
          'aria-relevant': 0,
          // Drag-and-Drop Attributes
          'aria-dropeffect': 0,
          'aria-grabbed': 0,
          // Relationship Attributes
          'aria-activedescendant': 0,
          'aria-colcount': 0,
          'aria-colindex': 0,
          'aria-colspan': 0,
          'aria-controls': 0,
          'aria-describedby': 0,
          'aria-errormessage': 0,
          'aria-flowto': 0,
          'aria-labelledby': 0,
          'aria-owns': 0,
          'aria-posinset': 0,
          'aria-rowcount': 0,
          'aria-rowindex': 0,
          'aria-rowspan': 0,
          'aria-setsize': 0,
        };
        var warnedProperties = {};
        var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
        var rARIACamel = new RegExp(
          '^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$'
        );
        function validateProperty(tagName, name) {
          {
            if (
              hasOwnProperty2.call(warnedProperties, name) &&
              warnedProperties[name]
            ) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = 'aria-' + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName)
                ? ariaName
                : null;
              if (correctName == null) {
                error(
                  'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.',
                  name
                );
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error(
                  'Invalid ARIA attribute `%s`. Did you mean `%s`?',
                  name,
                  correctName
                );
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName)
                ? lowerCasedName
                : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error(
                  'Unknown ARIA attribute `%s`. Did you mean `%s`?',
                  name,
                  standardName
                );
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps
              .map(function (prop) {
                return '`' + prop + '`';
              })
              .join(', ');
            if (invalidProps.length === 1) {
              error(
                'Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props',
                unknownPropString,
                type
              );
            } else if (invalidProps.length > 1) {
              error(
                'Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props',
                unknownPropString,
                type
              );
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== 'input' && type !== 'textarea' && type !== 'select') {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === 'select' && props.multiple) {
                error(
                  '`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.',
                  type
                );
              } else {
                error(
                  '`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.',
                  type
                );
              }
            }
          }
        }
        var validateProperty$1 = function () {};
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
          var rARIACamel$1 = new RegExp(
            '^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$'
          );
          validateProperty$1 = function (tagName, name, value, eventRegistry) {
            if (
              hasOwnProperty2.call(warnedProperties$1, name) &&
              warnedProperties$1[name]
            ) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (
              lowerCasedName === 'onfocusin' ||
              lowerCasedName === 'onfocusout'
            ) {
              error(
                'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.'
              );
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 =
                  eventRegistry.registrationNameDependencies,
                possibleRegistrationNames2 =
                  eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(
                lowerCasedName
              )
                ? possibleRegistrationNames2[lowerCasedName]
                : null;
              if (registrationName != null) {
                error(
                  'Invalid event handler property `%s`. Did you mean `%s`?',
                  name,
                  registrationName
                );
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error(
                  'Unknown event handler property `%s`. It will be ignored.',
                  name
                );
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error(
                  'Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.',
                  name
                );
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === 'innerhtml') {
              error(
                'Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.'
              );
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === 'aria') {
              error(
                'The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.'
              );
              warnedProperties$1[name] = true;
              return true;
            }
            if (
              lowerCasedName === 'is' &&
              value !== null &&
              value !== void 0 &&
              typeof value !== 'string'
            ) {
              error(
                'Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.',
                typeof value
              );
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === 'number' && isNaN(value)) {
              error(
                'Received NaN for the `%s` attribute. If this is expected, cast the value to a string.',
                name
              );
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved =
              propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error(
                  'Invalid DOM property `%s`. Did you mean `%s`?',
                  name,
                  standardName
                );
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error(
                'React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.',
                name,
                lowerCasedName
              );
              warnedProperties$1[name] = true;
              return true;
            }
            if (
              typeof value === 'boolean' &&
              shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)
            ) {
              if (value) {
                error(
                  'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
                  value,
                  name,
                  name,
                  value,
                  name
                );
              } else {
                error(
                  'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
                  value,
                  name,
                  name,
                  value,
                  name,
                  name,
                  name
                );
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (
              shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)
            ) {
              warnedProperties$1[name] = true;
              return false;
            }
            if (
              (value === 'false' || value === 'true') &&
              propertyInfo !== null &&
              propertyInfo.type === BOOLEAN
            ) {
              error(
                'Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?',
                value,
                name,
                value === 'false'
                  ? 'The browser will interpret it as a truthy value.'
                  : 'Although this works, it will not work as expected if you pass the string "false".',
                name,
                value
              );
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function (type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(
                type,
                key,
                props[key],
                eventRegistry
              );
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps
              .map(function (prop) {
                return '`' + prop + '`';
              })
              .join(', ');
            if (unknownProps.length === 1) {
              error(
                'Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ',
                unknownPropString,
                type
              );
            } else if (unknownProps.length > 1) {
              error(
                'Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ',
                unknownPropString,
                type
              );
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS =
          IS_EVENT_HANDLE_NON_MANAGED_NODE |
          IS_NON_DELEGATED |
          IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error(
                'Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.'
              );
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error(
                'Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.'
              );
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== 'function') {
            throw new Error(
              'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.'
            );
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(
              internalInstance.stateNode,
              internalInstance.type,
              _props
            );
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function (fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl = function () {};
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a, b) {
          if (isInsideEventHandler) {
            return fn(a, b);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a, b);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(
          _batchedUpdatesImpl,
          _discreteUpdatesImpl,
          _flushSyncImpl
        ) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return (
            tag === 'button' ||
            tag === 'input' ||
            tag === 'select' ||
            tag === 'textarea'
          );
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener2 = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener2 && typeof listener2 !== 'function') {
            throw new Error(
              'Expected `' +
                registrationName +
                '` listener to be a function, instead got a value of `' +
                typeof listener2 +
                '` type.'
            );
          }
          return listener2;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM2) {
          try {
            var options = {};
            Object.defineProperty(options, 'passive', {
              get: function () {
                passiveBrowserEventsSupported = true;
              },
            });
            window.addEventListener('test', options, options);
            window.removeEventListener('test', options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(
          name,
          func,
          context,
          a,
          b,
          c,
          d,
          e,
          f
        ) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (
            typeof window !== 'undefined' &&
            typeof window.dispatchEvent === 'function' &&
            typeof document !== 'undefined' &&
            typeof document.createEvent === 'function'
          ) {
            var fakeNode = document.createElement('react');
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(
              name,
              func,
              context,
              a,
              b,
              c,
              d,
              e,
              f
            ) {
              if (typeof document === 'undefined' || document === null) {
                throw new Error(
                  'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.'
                );
              }
              var evt = document.createEvent('Event');
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(
                window,
                'event'
              );
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (
                  typeof window.event !== 'undefined' &&
                  window.hasOwnProperty('event')
                ) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (
                  error2 === null &&
                  event.colno === 0 &&
                  event.lineno === 0
                ) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === 'object') {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {}
                  }
                }
              }
              var evtType = 'react-' + (name ? name : 'invokeguardedcallback');
              window.addEventListener('error', handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, 'event', windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(
                    `An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`
                  );
                } else if (isCrossOriginError) {
                  error2 = new Error(
                    "A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information."
                  );
                }
                this.onError(error2);
              }
              window.removeEventListener('error', handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function (error2) {
            hasError = true;
            caughtError = error2;
          },
        };
        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(
          name,
          func,
          context,
          a,
          b,
          c,
          d,
          e,
          f
        ) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error(
              'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.'
            );
          }
        }
        function get2(key) {
          return key._reactInternals;
        }
        function has4(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags =
          /*                      */
          0;
        var PerformedWork =
          /*                */
          1;
        var Placement =
          /*                    */
          2;
        var Update =
          /*                       */
          4;
        var ChildDeletion =
          /*                */
          16;
        var ContentReset =
          /*                 */
          32;
        var Callback =
          /*                     */
          64;
        var DidCapture =
          /*                   */
          128;
        var ForceClientRender =
          /*            */
          256;
        var Ref =
          /*                          */
          512;
        var Snapshot =
          /*                     */
          1024;
        var Passive =
          /*                      */
          2048;
        var Hydrating =
          /*                    */
          4096;
        var Visibility =
          /*                   */
          8192;
        var StoreConsistency =
          /*             */
          16384;
        var LifecycleEffectMask =
          Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask =
          /*               */
          32767;
        var Incomplete =
          /*                   */
          32768;
        var ShouldCapture =
          /*                */
          65536;
        var ForceUpdateForLegacySuspense =
          /* */
          131072;
        var Forked =
          /*                       */
          1048576;
        var RefStatic =
          /*                    */
          2097152;
        var LayoutStatic =
          /*                 */
          4194304;
        var PassiveStatic =
          /*                */
          8388608;
        var MountLayoutDev =
          /*               */
          16777216;
        var MountPassiveDev =
          /*              */
          33554432;
        var BeforeMutationMask =
          // TODO: Remove Update flag from before mutation phase by re-landing Visibility
          // flag logic (see #20043)
          Update | Snapshot | 0;
        var MutationMask =
          Placement |
          Update |
          ChildDeletion |
          ContentReset |
          Ref |
          Hydrating |
          Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error(
                  '%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.',
                  getComponentNameFromFiber(ownerFiber) || 'A component'
                );
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get2(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error('Unable to find node on an unmounted component.');
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error('Unable to find node on an unmounted component.');
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error('Unable to find node on an unmounted component.');
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error(
                    'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.'
                  );
                }
              }
            }
            if (a.alternate !== b) {
              throw new Error(
                "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
              );
            }
          }
          if (a.tag !== HostRoot) {
            throw new Error('Unable to find node on an unmounted component.');
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null
            ? findCurrentHostFiberImpl(currentParent)
            : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null
            ? findCurrentHostFiberWithNoPortalsImpl(currentParent)
            : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var getCurrentPriorityLevel =
          Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue =
          Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent =
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error(
                'The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools'
              );
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign2({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks,
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error('React instrumentation encountered an error: %s.', err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root3, children) {
          {
            if (
              injectedHook &&
              typeof injectedHook.onScheduleFiberRoot === 'function'
            ) {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root3, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error('React instrumentation encountered an error: %s', err);
                }
              }
            }
          }
        }
        function onCommitRoot(root3, eventPriority) {
          if (
            injectedHook &&
            typeof injectedHook.onCommitFiberRoot === 'function'
          ) {
            try {
              var didError = (root3.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(
                  rendererID,
                  root3,
                  schedulerPriority,
                  didError
                );
              } else {
                injectedHook.onCommitFiberRoot(
                  rendererID,
                  root3,
                  void 0,
                  didError
                );
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error('React instrumentation encountered an error: %s', err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root3) {
          if (
            injectedHook &&
            typeof injectedHook.onPostCommitFiberRoot === 'function'
          ) {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root3);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error('React instrumentation encountered an error: %s', err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (
            injectedHook &&
            typeof injectedHook.onCommitFiberUnmount === 'function'
          ) {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error('React instrumentation encountered an error: %s', err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === 'function') {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (
              injectedHook &&
              typeof injectedHook.setStrictMode === 'function'
            ) {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error(
                      'React instrumentation encountered an error: %s',
                      err
                    );
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map2 = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index2 = 0; index2 < TotalLanes; index2++) {
              var label = getLabelForLane(lane);
              map2.set(lane, label);
              lane *= 2;
            }
            return map2;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markCommitStarted === 'function'
            ) {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markCommitStopped === 'function'
            ) {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentRenderStarted ===
                'function'
            ) {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentRenderStopped ===
                'function'
            ) {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted ===
                'function'
            ) {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(
                fiber
              );
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped ===
                'function'
            ) {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted ===
                'function'
            ) {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(
                fiber
              );
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped ===
                'function'
            ) {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted ===
                'function'
            ) {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(
                fiber
              );
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped ===
                'function'
            ) {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted ===
                'function'
            ) {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(
                fiber
              );
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped ===
                'function'
            ) {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentErrored === 'function'
            ) {
              injectedProfilingHooks.markComponentErrored(
                fiber,
                thrownValue,
                lanes
              );
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markComponentSuspended ===
                'function'
            ) {
              injectedProfilingHooks.markComponentSuspended(
                fiber,
                wakeable,
                lanes
              );
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markLayoutEffectsStarted ===
                'function'
            ) {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markLayoutEffectsStopped ===
                'function'
            ) {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markPassiveEffectsStarted ===
                'function'
            ) {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markPassiveEffectsStopped ===
                'function'
            ) {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markRenderStarted === 'function'
            ) {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markRenderYielded === 'function'
            ) {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markRenderStopped === 'function'
            ) {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markRenderScheduled === 'function'
            ) {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markForceUpdateScheduled ===
                'function'
            ) {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (
              injectedProfilingHooks !== null &&
              typeof injectedProfilingHooks.markStateUpdateScheduled ===
                'function'
            ) {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode =
          /*                         */
          0;
        var ConcurrentMode =
          /*                 */
          1;
        var ProfileMode =
          /*                    */
          2;
        var StrictLegacyMode =
          /*               */
          8;
        var StrictEffectsMode =
          /*              */
          16;
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return (31 - ((log(asUint) / LN2) | 0)) | 0;
        }
        var TotalLanes = 31;
        var NoLanes =
          /*                        */
          0;
        var NoLane =
          /*                          */
          0;
        var SyncLane =
          /*                        */
          1;
        var InputContinuousHydrationLane =
          /*    */
          2;
        var InputContinuousLane =
          /*             */
          4;
        var DefaultHydrationLane =
          /*            */
          8;
        var DefaultLane =
          /*                     */
          16;
        var TransitionHydrationLane =
          /*                */
          32;
        var TransitionLanes =
          /*                       */
          4194240;
        var TransitionLane1 =
          /*                        */
          64;
        var TransitionLane2 =
          /*                        */
          128;
        var TransitionLane3 =
          /*                        */
          256;
        var TransitionLane4 =
          /*                        */
          512;
        var TransitionLane5 =
          /*                        */
          1024;
        var TransitionLane6 =
          /*                        */
          2048;
        var TransitionLane7 =
          /*                        */
          4096;
        var TransitionLane8 =
          /*                        */
          8192;
        var TransitionLane9 =
          /*                        */
          16384;
        var TransitionLane10 =
          /*                       */
          32768;
        var TransitionLane11 =
          /*                       */
          65536;
        var TransitionLane12 =
          /*                       */
          131072;
        var TransitionLane13 =
          /*                       */
          262144;
        var TransitionLane14 =
          /*                       */
          524288;
        var TransitionLane15 =
          /*                       */
          1048576;
        var TransitionLane16 =
          /*                       */
          2097152;
        var RetryLanes =
          /*                            */
          130023424;
        var RetryLane1 =
          /*                             */
          4194304;
        var RetryLane2 =
          /*                             */
          8388608;
        var RetryLane3 =
          /*                             */
          16777216;
        var RetryLane4 =
          /*                             */
          33554432;
        var RetryLane5 =
          /*                             */
          67108864;
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane =
          /*          */
          134217728;
        var NonIdleLanes =
          /*                          */
          268435455;
        var IdleHydrationLane =
          /*               */
          268435456;
        var IdleLane =
          /*                        */
          536870912;
        var OffscreenLane =
          /*                   */
          1073741824;
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return 'Sync';
            }
            if (lane & InputContinuousHydrationLane) {
              return 'InputContinuousHydration';
            }
            if (lane & InputContinuousLane) {
              return 'InputContinuous';
            }
            if (lane & DefaultHydrationLane) {
              return 'DefaultHydration';
            }
            if (lane & DefaultLane) {
              return 'Default';
            }
            if (lane & TransitionHydrationLane) {
              return 'TransitionHydration';
            }
            if (lane & TransitionLanes) {
              return 'Transition';
            }
            if (lane & RetryLanes) {
              return 'Retry';
            }
            if (lane & SelectiveHydrationLane) {
              return 'SelectiveHydration';
            }
            if (lane & IdleHydrationLane) {
              return 'IdleHydration';
            }
            if (lane & IdleLane) {
              return 'Idle';
            }
            if (lane & OffscreenLane) {
              return 'Offscreen';
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error(
                  'Should have found matching lanes. This is a bug in React.'
                );
              }
              return lanes;
          }
        }
        function getNextLanes(root3, wipLanes) {
          var pendingLanes = root3.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (
            wipLanes !== NoLanes &&
            wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes
          ) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (
              // Tests whether the next lane is equal or lower priority than the wip
              // one. This works because the bits decrease in priority as you go left.
              nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
              // only difference between default updates and transition updates is that
              // default updates do not support refresh transitions.
              (nextLane === DefaultLane &&
                (wipLane & TransitionLanes) !== NoLanes)
            ) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root3.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root3.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root3, lanes) {
          var eventTimes = root3.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error(
                  'Should have found matching lanes. This is a bug in React.'
                );
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root3, currentTime) {
          var pendingLanes = root3.pendingLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if (
                (lane & suspendedLanes) === NoLanes ||
                (lane & pingedLanes) !== NoLanes
              ) {
                expirationTimes[index2] = computeExpirationTime(
                  lane,
                  currentTime
                );
              }
            } else if (expirationTime <= currentTime) {
              root3.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root3) {
          return getHighestPriorityLanes(root3.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root3) {
          var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root3, lanes) {
          var SyncDefaultLanes =
            InputContinuousHydrationLane |
            InputContinuousLane |
            DefaultHydrationLane |
            DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root3, lanes) {
          return (lanes & root3.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a, b) {
          return a | b;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a, b) {
          return a & b;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a, b) {
          return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial2) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial2);
          }
          return laneMap;
        }
        function markRootUpdated(root3, updateLane, eventTime) {
          root3.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
          }
          var eventTimes = root3.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root3, suspendedLanes) {
          root3.suspendedLanes |= suspendedLanes;
          root3.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root3, pingedLanes, eventTime) {
          root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root3, remainingLanes) {
          var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
          root3.pendingLanes = remainingLanes;
          root3.suspendedLanes = NoLanes;
          root3.pingedLanes = NoLanes;
          root3.expiredLanes &= remainingLanes;
          root3.mutableReadLanes &= remainingLanes;
          root3.entangledLanes &= remainingLanes;
          var entanglements = root3.entanglements;
          var eventTimes = root3.eventTimes;
          var expirationTimes = root3.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root3, entangledLanes) {
          var rootEntangledLanes = (root3.entangledLanes |= entangledLanes);
          var entanglements = root3.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            if (
              // Is this one of the newly entangled lanes?
              (lane & entangledLanes) | // Is this lane transitively entangled with the newly entangled lanes?
              (entanglements[index2] & entangledLanes)
            ) {
              entanglements[index2] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root3, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root3, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root3, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
          var memoizedUpdaters = root3.memoizedUpdaters;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            if (updaters.size > 0) {
              updaters.forEach(function (fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root3, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a, b) {
          return a !== 0 && a < b ? a : b;
        }
        function lowerEventPriority(a, b) {
          return a === 0 || a > b ? a : b;
        }
        function isHigherEventPriority(a, b) {
          return a !== 0 && a < b;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root3) {
          var currentState = root3.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          'mousedown',
          'mouseup',
          'touchcancel',
          'touchend',
          'touchstart',
          'auxclick',
          'dblclick',
          'pointercancel',
          'pointerdown',
          'pointerup',
          'dragend',
          'dragstart',
          'drop',
          'compositionend',
          'compositionstart',
          'keydown',
          'keypress',
          'keyup',
          'input',
          'textInput',
          // Intentionally camelCase
          'copy',
          'cut',
          'paste',
          'click',
          'change',
          'contextmenu',
          'reset',
          'submit',
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(
          blockedOn,
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        ) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer],
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case 'focusin':
            case 'focusout':
              queuedFocus = null;
              break;
            case 'dragenter':
            case 'dragleave':
              queuedDrag = null;
              break;
            case 'mouseover':
            case 'mouseout':
              queuedMouse = null;
              break;
            case 'pointerover':
            case 'pointerout': {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case 'gotpointercapture':
            case 'lostpointercapture': {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(
          existingQueuedEvent,
          blockedOn,
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        ) {
          if (
            existingQueuedEvent === null ||
            existingQueuedEvent.nativeEvent !== nativeEvent
          ) {
            var queuedEvent = createQueuedReplayableEvent(
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            );
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (
            targetContainer !== null &&
            targetContainers.indexOf(targetContainer) === -1
          ) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(
          blockedOn,
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        ) {
          switch (domEventName) {
            case 'focusin': {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedFocus,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                focusEvent
              );
              return true;
            }
            case 'dragenter': {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedDrag,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                dragEvent
              );
              return true;
            }
            case 'mouseover': {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedMouse,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                mouseEvent
              );
              return true;
            }
            case 'pointerover': {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(
                pointerId,
                accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedPointers.get(pointerId) || null,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  pointerEvent
                )
              );
              return true;
            }
            case 'gotpointercapture': {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(
                _pointerId2,
                accumulateOrCreateContinuousQueuedReplayableEvent(
                  queuedPointerCaptures.get(_pointerId2) || null,
                  blockedOn,
                  domEventName,
                  eventSystemFlags,
                  targetContainer,
                  _pointerEvent
                )
              );
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(
                    queuedTarget.priority,
                    function () {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    }
                  );
                  return;
                }
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (isRootDehydrated(root3)) {
                  queuedTarget.blockedOn =
                    getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority,
          };
          var i = 0;
          for (; i < queuedExplicitHydrationTargets.length; i++) {
            if (
              !isHigherEventPriority(
                updatePriority,
                queuedExplicitHydrationTargets[i].priority
              )
            ) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
          if (i === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(
              queuedEvent.domEventName,
              queuedEvent.eventSystemFlags,
              targetContainer,
              queuedEvent.nativeEvent
            );
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(
                  nativeEvent.type,
                  nativeEvent
                );
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(
          queuedEvent,
          key,
          map2
        ) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map2.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (
            queuedFocus !== null &&
            attemptReplayContinuousQueuedEvent(queuedFocus)
          ) {
            queuedFocus = null;
          }
          if (
            queuedDrag !== null &&
            attemptReplayContinuousQueuedEvent(queuedDrag)
          ) {
            queuedDrag = null;
          }
          if (
            queuedMouse !== null &&
            attemptReplayContinuousQueuedEvent(queuedMouse)
          ) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(
            attemptReplayContinuousQueuedEventInMap
          );
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(
                Scheduler.unstable_NormalPriority,
                replayUnblockedEvents
              );
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function (queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig =
          ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(
          targetContainer,
          domEventName,
          eventSystemFlags
        ) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(
            null,
            domEventName,
            eventSystemFlags,
            targetContainer
          );
        }
        function dispatchDiscreteEvent(
          domEventName,
          eventSystemFlags,
          container,
          nativeEvent
        ) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(
              domEventName,
              eventSystemFlags,
              container,
              nativeEvent
            );
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(
          domEventName,
          eventSystemFlags,
          container,
          nativeEvent
        ) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(
              domEventName,
              eventSystemFlags,
              container,
              nativeEvent
            );
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        ) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            );
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        ) {
          var blockedOn = findInstanceBlockingEvent(
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          );
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(
              domEventName,
              eventSystemFlags,
              nativeEvent,
              return_targetInst,
              targetContainer
            );
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (
            queueIfContinuousEvent(
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            )
          ) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (
            eventSystemFlags & IS_CAPTURE_PHASE &&
            isDiscreteEventThatRequiresHydration(domEventName)
          ) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              );
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(
                  domEventName,
                  eventSystemFlags,
                  nativeEvent,
                  return_targetInst,
                  targetContainer
                );
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(
            domEventName,
            eventSystemFlags,
            nativeEvent,
            null,
            targetContainer
          );
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        ) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (isRootDehydrated(root3)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            // Used by SimpleEventPlugin:
            case 'cancel':
            case 'click':
            case 'close':
            case 'contextmenu':
            case 'copy':
            case 'cut':
            case 'auxclick':
            case 'dblclick':
            case 'dragend':
            case 'dragstart':
            case 'drop':
            case 'focusin':
            case 'focusout':
            case 'input':
            case 'invalid':
            case 'keydown':
            case 'keypress':
            case 'keyup':
            case 'mousedown':
            case 'mouseup':
            case 'paste':
            case 'pause':
            case 'play':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointerup':
            case 'ratechange':
            case 'reset':
            case 'resize':
            case 'seeked':
            case 'submit':
            case 'touchcancel':
            case 'touchend':
            case 'touchstart':
            case 'volumechange':
            // Used by polyfills:
            // eslint-disable-next-line no-fallthrough
            case 'change':
            case 'selectionchange':
            case 'textInput':
            case 'compositionstart':
            case 'compositionend':
            case 'compositionupdate':
            // Only enableCreateEventHandleAPI:
            // eslint-disable-next-line no-fallthrough
            case 'beforeblur':
            case 'afterblur':
            // Not used by React but could be by user code:
            // eslint-disable-next-line no-fallthrough
            case 'beforeinput':
            case 'blur':
            case 'fullscreenchange':
            case 'focus':
            case 'hashchange':
            case 'popstate':
            case 'select':
            case 'selectstart':
              return DiscreteEventPriority;
            case 'drag':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'mousemove':
            case 'mouseout':
            case 'mouseover':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'scroll':
            case 'toggle':
            case 'touchmove':
            case 'wheel':
            // Not used by React but could be by user code:
            // eslint-disable-next-line no-fallthrough
            case 'mouseenter':
            case 'mouseleave':
            case 'pointerenter':
            case 'pointerleave':
              return ContinuousEventPriority;
            case 'message': {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener2) {
          target.addEventListener(eventType, listener2, false);
          return listener2;
        }
        function addEventCaptureListener(target, eventType, listener2) {
          target.addEventListener(eventType, listener2, true);
          return listener2;
        }
        function addEventCaptureListenerWithPassiveFlag(
          target,
          eventType,
          listener2,
          passive
        ) {
          target.addEventListener(eventType, listener2, {
            capture: true,
            passive,
          });
          return listener2;
        }
        function addEventBubbleListenerWithPassiveFlag(
          target,
          eventType,
          listener2,
          passive
        ) {
          target.addEventListener(eventType, listener2, {
            passive,
          });
          return listener2;
        }
        var root2 = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root2 = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root2 = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ('value' in root2) {
            return root2.value;
          }
          return root2.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(
            reactName,
            reactEventType,
            targetInst,
            nativeEvent,
            nativeEventTarget
          ) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented =
              nativeEvent.defaultPrevented != null
                ? nativeEvent.defaultPrevented
                : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign2(SyntheticBaseEvent.prototype, {
            preventDefault: function () {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== 'unknown') {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function () {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== 'unknown') {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function () {},
            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: functionThatReturnsTrue,
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function (event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0,
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign2({}, EventInterface, {
          view: 0,
          detail: 0,
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign2({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function (event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement
                ? event.toElement
                : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function (event) {
            if ('movementX' in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function (event) {
            if ('movementY' in event) {
              return event.movementY;
            }
            return lastMovementY;
          },
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign2({}, MouseEventInterface, {
          dataTransfer: 0,
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign2({}, UIEventInterface, {
          relatedTarget: 0,
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign2({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0,
        });
        var SyntheticAnimationEvent = createSyntheticEvent(
          AnimationEventInterface
        );
        var ClipboardEventInterface = assign2({}, EventInterface, {
          clipboardData: function (event) {
            return 'clipboardData' in event
              ? event.clipboardData
              : window.clipboardData;
          },
        });
        var SyntheticClipboardEvent = createSyntheticEvent(
          ClipboardEventInterface
        );
        var CompositionEventInterface = assign2({}, EventInterface, {
          data: 0,
        });
        var SyntheticCompositionEvent = createSyntheticEvent(
          CompositionEventInterface
        );
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: 'Escape',
          Spacebar: ' ',
          Left: 'ArrowLeft',
          Up: 'ArrowUp',
          Right: 'ArrowRight',
          Down: 'ArrowDown',
          Del: 'Delete',
          Win: 'OS',
          Menu: 'ContextMenu',
          Apps: 'ContextMenu',
          Scroll: 'ScrollLock',
          MozPrintableKey: 'Unidentified',
        };
        var translateToKey = {
          8: 'Backspace',
          9: 'Tab',
          12: 'Clear',
          13: 'Enter',
          16: 'Shift',
          17: 'Control',
          18: 'Alt',
          19: 'Pause',
          20: 'CapsLock',
          27: 'Escape',
          32: ' ',
          33: 'PageUp',
          34: 'PageDown',
          35: 'End',
          36: 'Home',
          37: 'ArrowLeft',
          38: 'ArrowUp',
          39: 'ArrowRight',
          40: 'ArrowDown',
          45: 'Insert',
          46: 'Delete',
          112: 'F1',
          113: 'F2',
          114: 'F3',
          115: 'F4',
          116: 'F5',
          117: 'F6',
          118: 'F7',
          119: 'F8',
          120: 'F9',
          121: 'F10',
          122: 'F11',
          123: 'F12',
          144: 'NumLock',
          145: 'ScrollLock',
          224: 'Meta',
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') {
              return key;
            }
          }
          if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
            return translateToKey[nativeEvent.keyCode] || 'Unidentified';
          }
          return '';
        }
        var modifierKeyToProp = {
          Alt: 'altKey',
          Control: 'ctrlKey',
          Meta: 'metaKey',
          Shift: 'shiftKey',
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign2({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          // Legacy Interface
          charCode: function (event) {
            if (event.type === 'keypress') {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function (event) {
            if (event.type === 'keydown' || event.type === 'keyup') {
              return event.keyCode;
            }
            return 0;
          },
          which: function (event) {
            if (event.type === 'keypress') {
              return getEventCharCode(event);
            }
            if (event.type === 'keydown' || event.type === 'keyup') {
              return event.keyCode;
            }
            return 0;
          },
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(
          KeyboardEventInterface
        );
        var PointerEventInterface = assign2({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0,
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign2({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState,
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign2({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0,
        });
        var SyntheticTransitionEvent = createSyntheticEvent(
          TransitionEventInterface
        );
        var WheelEventInterface = assign2({}, MouseEventInterface, {
          deltaX: function (event) {
            return 'deltaX' in event
              ? event.deltaX
              : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
              'wheelDeltaX' in event
              ? -event.wheelDeltaX
              : 0;
          },
          deltaY: function (event) {
            return 'deltaY' in event
              ? event.deltaY
              : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
              'wheelDeltaY' in event
              ? -event.wheelDeltaY
              : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
              'wheelDelta' in event
              ? -event.wheelDelta
              : 0;
          },
          deltaZ: 0,
          // Browsers without "deltaMode" is reporting in raw wheel delta where one
          // notch on the scroll is always +/- 120, roughly equivalent to pixels.
          // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
          // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
          deltaMode: 0,
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM2 && 'CompositionEvent' in window;
        var documentMode = null;
        if (canUseDOM2 && 'documentMode' in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent =
          canUseDOM2 && 'TextEvent' in window && !documentMode;
        var useFallbackCompositionData =
          canUseDOM2 &&
          (!canUseCompositionEvent ||
            (documentMode && documentMode > 8 && documentMode <= 11));
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste',
          ]);
          registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown',
          ]);
          registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown',
          ]);
          registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown',
          ]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (
            (nativeEvent.ctrlKey ||
              nativeEvent.altKey ||
              nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey)
          );
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case 'compositionstart':
              return 'onCompositionStart';
            case 'compositionend':
              return 'onCompositionEnd';
            case 'compositionupdate':
              return 'onCompositionUpdate';
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return (
            domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE
          );
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case 'keyup':
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
              return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === 'object' && 'data' in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === 'ko';
        }
        var isComposing = false;
        function extractCompositionEvent(
          dispatchQueue,
          domEventName,
          targetInst,
          nativeEvent,
          nativeEventTarget
        ) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = 'onCompositionStart';
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = 'onCompositionEnd';
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === 'onCompositionStart') {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === 'onCompositionEnd') {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(
              eventType,
              domEventName,
              null,
              nativeEvent,
              nativeEventTarget
            );
            dispatchQueue.push({
              event,
              listeners,
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case 'compositionend':
              return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case 'textInput':
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (
              domEventName === 'compositionend' ||
              (!canUseCompositionEvent &&
                isFallbackCompositionEnd(domEventName, nativeEvent))
            ) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case 'paste':
              return null;
            case 'keypress':
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case 'compositionend':
              return useFallbackCompositionData &&
                !isUsingKoreanIME(nativeEvent)
                ? null
                : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(
          dispatchQueue,
          domEventName,
          targetInst,
          nativeEvent,
          nativeEventTarget
        ) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(
            targetInst,
            'onBeforeInput'
          );
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent(
              'onBeforeInput',
              'beforeinput',
              null,
              nativeEvent,
              nativeEventTarget
            );
            dispatchQueue.push({
              event,
              listeners,
            });
            event.data = chars;
          }
        }
        function extractEvents(
          dispatchQueue,
          domEventName,
          targetInst,
          nativeEvent,
          nativeEventTarget,
          eventSystemFlags,
          targetContainer
        ) {
          extractCompositionEvent(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget
          );
          extractBeforeInputEvent(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget
          );
        }
        var supportedInputTypes = {
          'color': true,
          'date': true,
          'datetime': true,
          'datetime-local': true,
          'email': true,
          'month': true,
          'number': true,
          'password': true,
          'range': true,
          'search': true,
          'tel': true,
          'text': true,
          'time': true,
          'url': true,
          'week': true,
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === 'input') {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === 'textarea') {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM2) {
            return false;
          }
          var eventName = 'on' + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange',
          ]);
        }
        function createAndAccumulateChangeEvent(
          dispatchQueue,
          inst,
          nativeEvent,
          target
        ) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
          if (listeners.length > 0) {
            var event = new SyntheticEvent(
              'onChange',
              'change',
              null,
              nativeEvent,
              target
            );
            dispatchQueue.push({
              event,
              listeners,
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return (
            nodeName === 'select' ||
            (nodeName === 'input' && elem.type === 'file')
          );
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(
            dispatchQueue,
            activeElementInst,
            nativeEvent,
            getEventTarget(nativeEvent)
          );
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === 'change') {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM2) {
          isInputEventSupported =
            isEventSupported('input') &&
            (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent('onpropertychange', handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent('onpropertychange', handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== 'value') {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(
          domEventName,
          target,
          targetInst
        ) {
          if (domEventName === 'focusin') {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === 'focusout') {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (
            domEventName === 'selectionchange' ||
            domEventName === 'keyup' ||
            domEventName === 'keydown'
          ) {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return (
            nodeName &&
            nodeName.toLowerCase() === 'input' &&
            (elem.type === 'checkbox' || elem.type === 'radio')
          );
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === 'click') {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === 'input' || domEventName === 'change') {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== 'number') {
            return;
          }
          {
            setDefaultValue(node, 'number', node.value);
          }
        }
        function extractEvents$1(
          dispatchQueue,
          domEventName,
          targetInst,
          nativeEvent,
          nativeEventTarget,
          eventSystemFlags,
          targetContainer
        ) {
          var targetNode = targetInst
            ? getNodeFromInstance(targetInst)
            : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(
                dispatchQueue,
                inst,
                nativeEvent,
                nativeEventTarget
              );
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === 'focusout') {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
          registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
          registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
          registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
        }
        function extractEvents$2(
          dispatchQueue,
          domEventName,
          targetInst,
          nativeEvent,
          nativeEventTarget,
          eventSystemFlags,
          targetContainer
        ) {
          var isOverEvent =
            domEventName === 'mouseover' || domEventName === 'pointerover';
          var isOutEvent =
            domEventName === 'mouseout' || domEventName === 'pointerout';
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (
                getClosestInstanceFromNode(related) ||
                isContainerMarkedAsRoot(related)
              ) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (
                to !== nearestMounted ||
                (to.tag !== HostComponent && to.tag !== HostText)
              ) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = 'onMouseLeave';
          var enterEventType = 'onMouseEnter';
          var eventTypePrefix = 'mouse';
          if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(
            leaveEventType,
            eventTypePrefix + 'leave',
            from,
            nativeEvent,
            nativeEventTarget
          );
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(
              enterEventType,
              eventTypePrefix + 'enter',
              to,
              nativeEvent,
              nativeEventTarget
            );
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(
            dispatchQueue,
            leave,
            enter,
            from,
            to
          );
        }
        function is(x, y) {
          return (
            (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y)
          );
        }
        var objectIs = typeof Object.is === 'function' ? Object.is : is;
        function shallowEqual2(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (
            typeof objA !== 'object' ||
            objA === null ||
            typeof objB !== 'object' ||
            objB === null
          ) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            var currentKey = keysA[i];
            if (
              !hasOwnProperty2.call(objB, currentKey) ||
              !objectIs(objA[currentKey], objB[currentKey])
            ) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root3, offset) {
          var node = getLeafNode(root3);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart,
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = (ownerDocument && ownerDocument.defaultView) || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode,
            anchorOffset = selection.anchorOffset,
            focusNode = selection.focusNode,
            focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(
            outerNode,
            anchorNode,
            anchorOffset,
            focusNode,
            focusOffset
          );
        }
        function getModernOffsetsFromPoints(
          outerNode,
          anchorNode,
          anchorOffset,
          focusNode,
          focusOffset
        ) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer: while (true) {
            var next = null;
            while (true) {
              if (
                node === anchorNode &&
                (anchorOffset === 0 || node.nodeType === TEXT_NODE)
              ) {
                start = length + anchorOffset;
              }
              if (
                node === focusNode &&
                (focusOffset === 0 || node.nodeType === TEXT_NODE)
              ) {
                end = length + focusOffset;
              }
              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }
              if ((next = node.firstChild) === null) {
                break;
              }
              parentNode = node;
              node = next;
            }
            while (true) {
              if (node === outerNode) {
                break outer;
              }
              if (
                parentNode === anchorNode &&
                ++indexWithinAnchor === anchorOffset
              ) {
                start = length;
              }
              if (
                parentNode === focusNode &&
                ++indexWithinFocus === focusOffset
              ) {
                end = length;
              }
              if ((next = node.nextSibling) !== null) {
                break;
              }
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end,
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = (doc && doc.defaultView) || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end =
            offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (
              selection.rangeCount === 1 &&
              selection.anchorNode === startMarker.node &&
              selection.anchorOffset === startMarker.offset &&
              selection.focusNode === endMarker.node &&
              selection.focusOffset === endMarker.offset
            ) {
              return;
            }
            var range2 = doc.createRange();
            range2.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range2);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range2.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range2);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ('contains' in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return (
            node &&
            node.ownerDocument &&
            containsNode(node.ownerDocument.documentElement, node)
          );
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === 'string';
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return (
            nodeName &&
            ((nodeName === 'input' &&
              (elem.type === 'text' ||
                elem.type === 'search' ||
                elem.type === 'tel' ||
                elem.type === 'url' ||
                elem.type === 'password')) ||
              nodeName === 'textarea' ||
              elem.contentEditable === 'true')
          );
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem)
              ? getSelection(focusedElem)
              : null,
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (
            curFocusedElem !== priorFocusedElem &&
            isInDocument(priorFocusedElem)
          ) {
            if (
              priorSelectionRange !== null &&
              hasSelectionCapabilities(priorFocusedElem)
            ) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while ((ancestor = ancestor.parentNode)) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop,
                });
              }
            }
            if (typeof priorFocusedElem.focus === 'function') {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ('selectionStart' in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd,
            };
          } else {
            selection = getOffsets(input);
          }
          return (
            selection || {
              start: 0,
              end: 0,
            }
          );
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent =
          canUseDOM2 &&
          'documentMode' in document &&
          document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange',
          ]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ('selectionStart' in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd,
            };
          } else {
            var win =
              (node.ownerDocument && node.ownerDocument.defaultView) || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset,
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget
            ? eventTarget.document
            : eventTarget.nodeType === DOCUMENT_NODE
            ? eventTarget
            : eventTarget.ownerDocument;
        }
        function constructSelectEvent(
          dispatchQueue,
          nativeEvent,
          nativeEventTarget
        ) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (
            mouseDown ||
            activeElement$1 == null ||
            activeElement$1 !== getActiveElement(doc)
          ) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (
            !lastSelection ||
            !shallowEqual2(lastSelection, currentSelection)
          ) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(
              activeElementInst$1,
              'onSelect'
            );
            if (listeners.length > 0) {
              var event = new SyntheticEvent(
                'onSelect',
                'select',
                null,
                nativeEvent,
                nativeEventTarget
              );
              dispatchQueue.push({
                event,
                listeners,
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(
          dispatchQueue,
          domEventName,
          targetInst,
          nativeEvent,
          nativeEventTarget,
          eventSystemFlags,
          targetContainer
        ) {
          var targetNode = targetInst
            ? getNodeFromInstance(targetInst)
            : window;
          switch (domEventName) {
            // Track the input node that has focus.
            case 'focusin':
              if (
                isTextInputElement(targetNode) ||
                targetNode.contentEditable === 'true'
              ) {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case 'focusout':
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case 'mousedown':
              mouseDown = true;
              break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
              mouseDown = false;
              constructSelectEvent(
                dispatchQueue,
                nativeEvent,
                nativeEventTarget
              );
              break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case 'selectionchange':
              if (skipSelectionChangeEvent) {
                break;
              }
            // falls through
            case 'keydown':
            case 'keyup':
              constructSelectEvent(
                dispatchQueue,
                nativeEvent,
                nativeEventTarget
              );
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2['Webkit' + styleProp] = 'webkit' + eventName;
          prefixes2['Moz' + styleProp] = 'moz' + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap('Animation', 'AnimationEnd'),
          animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
          animationstart: makePrefixMap('Animation', 'AnimationStart'),
          transitionend: makePrefixMap('Transition', 'TransitionEnd'),
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM2) {
          style = document.createElement('div').style;
          if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!('TransitionEvent' in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return (prefixedEventNames[eventName] = prefixMap[styleProp]);
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName('animationend');
        var ANIMATION_ITERATION =
          getVendorPrefixedEventName('animationiteration');
        var ANIMATION_START = getVendorPrefixedEventName('animationstart');
        var TRANSITION_END = getVendorPrefixedEventName('transitionend');
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = [
          'abort',
          'auxClick',
          'cancel',
          'canPlay',
          'canPlayThrough',
          'click',
          'close',
          'contextMenu',
          'copy',
          'cut',
          'drag',
          'dragEnd',
          'dragEnter',
          'dragExit',
          'dragLeave',
          'dragOver',
          'dragStart',
          'drop',
          'durationChange',
          'emptied',
          'encrypted',
          'ended',
          'error',
          'gotPointerCapture',
          'input',
          'invalid',
          'keyDown',
          'keyPress',
          'keyUp',
          'load',
          'loadedData',
          'loadedMetadata',
          'loadStart',
          'lostPointerCapture',
          'mouseDown',
          'mouseMove',
          'mouseOut',
          'mouseOver',
          'mouseUp',
          'paste',
          'pause',
          'play',
          'playing',
          'pointerCancel',
          'pointerDown',
          'pointerMove',
          'pointerOut',
          'pointerOver',
          'pointerUp',
          'progress',
          'rateChange',
          'reset',
          'resize',
          'seeked',
          'seeking',
          'stalled',
          'submit',
          'suspend',
          'timeUpdate',
          'touchCancel',
          'touchEnd',
          'touchStart',
          'volumeChange',
          'scroll',
          'toggle',
          'touchMove',
          'waiting',
          'wheel',
        ];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent =
              eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, 'on' + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');
          registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');
          registerSimpleEvent(ANIMATION_START, 'onAnimationStart');
          registerSimpleEvent('dblclick', 'onDoubleClick');
          registerSimpleEvent('focusin', 'onFocus');
          registerSimpleEvent('focusout', 'onBlur');
          registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');
        }
        function extractEvents$4(
          dispatchQueue,
          domEventName,
          targetInst,
          nativeEvent,
          nativeEventTarget,
          eventSystemFlags,
          targetContainer
        ) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case 'keypress':
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            /* falls through */
            case 'keydown':
            case 'keyup':
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case 'focusin':
              reactEventType = 'focus';
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case 'focusout':
              reactEventType = 'blur';
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case 'beforeblur':
            case 'afterblur':
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case 'click':
              if (nativeEvent.button === 2) {
                return;
              }
            /* falls through */
            case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            // TODO: Disabled elements should not respond to mouse events
            /* falls through */
            case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case 'scroll':
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case 'wheel':
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case 'copy':
            case 'cut':
            case 'paste':
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly =
              !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === 'scroll';
            var _listeners = accumulateSinglePhaseListeners(
              targetInst,
              reactName,
              nativeEvent.type,
              inCapturePhase,
              accumulateTargetOnly
            );
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(
                reactName,
                reactEventType,
                null,
                nativeEvent,
                nativeEventTarget
              );
              dispatchQueue.push({
                event: _event,
                listeners: _listeners,
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(
          dispatchQueue,
          domEventName,
          targetInst,
          nativeEvent,
          nativeEventTarget,
          eventSystemFlags,
          targetContainer
        ) {
          extractEvents$4(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags
          );
          var shouldProcessPolyfillPlugins =
            (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) ===
            0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(
              dispatchQueue,
              domEventName,
              targetInst,
              nativeEvent,
              nativeEventTarget
            );
            extractEvents$1(
              dispatchQueue,
              domEventName,
              targetInst,
              nativeEvent,
              nativeEventTarget
            );
            extractEvents$3(
              dispatchQueue,
              domEventName,
              targetInst,
              nativeEvent,
              nativeEventTarget
            );
            extractEvents(
              dispatchQueue,
              domEventName,
              targetInst,
              nativeEvent,
              nativeEventTarget
            );
          }
        }
        var mediaEventTypes = [
          'abort',
          'canplay',
          'canplaythrough',
          'durationchange',
          'emptied',
          'encrypted',
          'ended',
          'error',
          'loadeddata',
          'loadedmetadata',
          'loadstart',
          'pause',
          'play',
          'playing',
          'progress',
          'ratechange',
          'resize',
          'seeked',
          'seeking',
          'stalled',
          'suspend',
          'timeupdate',
          'volumechange',
          'waiting',
        ];
        var nonDelegatedEvents = new Set(
          ['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(
            mediaEventTypes
          )
        );
        function executeDispatch(event, listener2, currentTarget) {
          var type = event.type || 'unknown-event';
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(
            type,
            listener2,
            void 0,
            event
          );
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(
          event,
          dispatchListeners,
          inCapturePhase
        ) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i],
                instance = _dispatchListeners$i.instance,
                currentTarget = _dispatchListeners$i.currentTarget,
                listener2 = _dispatchListeners$i.listener;
              if (
                instance !== previousInstance &&
                event.isPropagationStopped()
              ) {
                return;
              }
              executeDispatch(event, listener2, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i],
                _instance = _dispatchListeners$_i.instance,
                _currentTarget = _dispatchListeners$_i.currentTarget,
                _listener = _dispatchListeners$_i.listener;
              if (
                _instance !== previousInstance &&
                event.isPropagationStopped()
              ) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i],
              event = _dispatchQueue$i.event,
              listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetInst,
          targetContainer
        ) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags
          );
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error(
                'Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',
                domEventName
              );
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(
            domEventName,
            isCapturePhaseListener
          );
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(
              targetElement,
              domEventName,
              IS_NON_DELEGATED,
              isCapturePhaseListener
            );
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(
          domEventName,
          isCapturePhaseListener,
          target
        ) {
          {
            if (
              nonDelegatedEvents.has(domEventName) &&
              !isCapturePhaseListener
            ) {
              error(
                'Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',
                domEventName
              );
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(
            target,
            domEventName,
            eventSystemFlags,
            isCapturePhaseListener
          );
        }
        var listeningMarker =
          '_reactListening' + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function (domEventName) {
              if (domEventName !== 'selectionchange') {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(
                    domEventName,
                    false,
                    rootContainerElement
                  );
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument =
              rootContainerElement.nodeType === DOCUMENT_NODE
                ? rootContainerElement
                : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent('selectionchange', false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(
          targetContainer,
          domEventName,
          eventSystemFlags,
          isCapturePhaseListener,
          isDeferredListenerForLegacyFBSupport
        ) {
          var listener2 = createEventListenerWrapperWithPriority(
            targetContainer,
            domEventName,
            eventSystemFlags
          );
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (
              domEventName === 'touchstart' ||
              domEventName === 'touchmove' ||
              domEventName === 'wheel'
            ) {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(
                targetContainer,
                domEventName,
                listener2,
                isPassiveListener
              );
            } else {
              unsubscribeListener = addEventCaptureListener(
                targetContainer,
                domEventName,
                listener2
              );
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(
                targetContainer,
                domEventName,
                listener2,
                isPassiveListener
              );
            } else {
              unsubscribeListener = addEventBubbleListener(
                targetContainer,
                domEventName,
                listener2
              );
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return (
            grandContainer === targetContainer ||
            (grandContainer.nodeType === COMMENT_NODE &&
              grandContainer.parentNode === targetContainer)
          );
        }
        function dispatchEventForPluginEventSystem(
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetInst,
          targetContainer
        ) {
          var ancestorInst = targetInst;
          if (
            (eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 &&
            (eventSystemFlags & IS_NON_DELEGATED) === 0
          ) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop: while (true) {
                if (node === null) {
                  return;
                }
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (
                          isMatchingRootContainer(
                            grandContainer,
                            targetContainerNode
                          )
                        ) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
            }
          }
          batchedUpdates(function () {
            return dispatchEventsForPlugins(
              domEventName,
              eventSystemFlags,
              nativeEvent,
              ancestorInst
            );
          });
        }
        function createDispatchListener(instance, listener2, currentTarget) {
          return {
            instance,
            listener: listener2,
            currentTarget,
          };
        }
        function accumulateSinglePhaseListeners(
          targetFiber,
          reactName,
          nativeEventType,
          inCapturePhase,
          accumulateTargetOnly,
          nativeEvent
        ) {
          var captureName = reactName !== null ? reactName + 'Capture' : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance,
              stateNode = _instance2.stateNode,
              tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener2 = getListener(instance, reactEventName);
                if (listener2 != null) {
                  listeners.push(
                    createDispatchListener(
                      instance,
                      listener2,
                      lastHostComponent
                    )
                  );
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + 'Capture';
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance,
              stateNode = _instance3.stateNode,
              tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(
                  createDispatchListener(
                    instance,
                    captureListener,
                    currentTarget
                  )
                );
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(
                  createDispatchListener(
                    instance,
                    bubbleListener,
                    currentTarget
                  )
                );
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (
              nodeA === nodeB ||
              (nodeB !== null && nodeA === nodeB.alternate)
            ) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(
          dispatchQueue,
          event,
          target,
          common,
          inCapturePhase
        ) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance,
              alternate = _instance4.alternate,
              stateNode = _instance4.stateNode,
              tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(
                    createDispatchListener(
                      instance,
                      captureListener,
                      currentTarget
                    )
                  );
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(
                    createDispatchListener(
                      instance,
                      bubbleListener,
                      currentTarget
                    )
                  );
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners,
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(
          dispatchQueue,
          leaveEvent,
          enterEvent,
          from,
          to
        ) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(
              dispatchQueue,
              leaveEvent,
              from,
              common,
              false
            );
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(
              dispatchQueue,
              enterEvent,
              to,
              common,
              true
            );
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + '__' + (capture ? 'capture' : 'bubble');
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
        var SUPPRESS_CONTENT_EDITABLE_WARNING =
          'suppressContentEditableWarning';
        var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
        var AUTOFOCUS = 'autoFocus';
        var CHILDREN = 'children';
        var STYLE = 'style';
        var HTML$1 = '__html';
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            // There are working polyfills for <dialog>. Let people use it.
            dialog: true,
            // Electron ships a custom <webview> tag to display external web content in
            // an isolated frame and process.
            // This tag is not present in non Electron environments such as JSDom which
            // is often used for testing purposes.
            // @see https://electronjs.org/docs/api/webview-tag
            webview: true,
          };
          validatePropertiesInDevelopment = function (type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames,
            });
          };
          canDiffStyleForHydrationWarning =
            canUseDOM2 && !document.documentMode;
          warnForPropDifference = function (
            propName,
            serverValue,
            clientValue
          ) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue =
              normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue =
              normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error(
              'Prop `%s` did not match. Server: %s Client: %s',
              propName,
              JSON.stringify(normalizedServerValue),
              JSON.stringify(normalizedClientValue)
            );
          };
          warnForExtraAttributes = function (attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function (name) {
              names.push(name);
            });
            error('Extra attributes from the server: %s', names);
          };
          warnForInvalidEventListener = function (registrationName, listener2) {
            if (listener2 === false) {
              error(
                'Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
                registrationName,
                registrationName,
                registrationName
              );
            } else {
              error(
                'Expected `%s` listener to be a function, instead got a value of `%s` type.',
                registrationName,
                typeof listener2
              );
            }
          };
          normalizeHTML = function (parent, html) {
            var testElement =
              parent.namespaceURI === HTML_NAMESPACE
                ? parent.ownerDocument.createElement(parent.tagName)
                : parent.ownerDocument.createElementNS(
                    parent.namespaceURI,
                    parent.tagName
                  );
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === 'string' ? markup : '' + markup;
          return markupString
            .replace(NORMALIZE_NEWLINES_REGEX, '\n')
            .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
        }
        function checkForUnmatchedText(
          serverText,
          clientText,
          isConcurrentMode,
          shouldWarnDev
        ) {
          var normalizedClientText =
            normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText =
            normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error(
                  'Text content did not match. Server: "%s" Client: "%s"',
                  normalizedServerText,
                  normalizedClientText
                );
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error(
              'Text content does not match server-rendered HTML.'
            );
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE
            ? rootContainerElement
            : rootContainerElement.ownerDocument;
        }
        function noop2() {}
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop2;
        }
        function setInitialDOMProperties(
          tag,
          domElement,
          rootContainerElement,
          nextProps,
          isCustomComponentTag
        ) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === 'string') {
                var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === 'number') {
                setTextContent(domElement, '' + nextProp);
              }
            } else if (
              propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
              propKey === SUPPRESS_HYDRATION_WARNING
            );
            else if (propKey === AUTOFOCUS);
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== 'function') {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === 'onScroll') {
                  listenToNonDelegatedEvent('scroll', domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(
                domElement,
                propKey,
                nextProp,
                isCustomComponentTag
              );
            }
          }
        }
        function updateDOMProperties(
          domElement,
          updatePayload,
          wasCustomComponentTag,
          isCustomComponentTag
        ) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(
                domElement,
                propKey,
                propValue,
                isCustomComponentTag
              );
            }
          }
        }
        function createElement3(
          type,
          props,
          rootContainerElement,
          parentNamespace
        ) {
          var isCustomComponentTag;
          var ownerDocument =
            getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error(
                  '<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.',
                  type
                );
              }
            }
            if (type === 'script') {
              var div = ownerDocument.createElement('div');
              div.innerHTML = '<script></script>';
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') {
              domElement = ownerDocument.createElement(type, {
                is: props.is,
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === 'select') {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (
                !isCustomComponentTag &&
                Object.prototype.toString.call(domElement) ===
                  '[object HTMLUnknownElement]' &&
                !hasOwnProperty2.call(warnedUnknownTags, type)
              ) {
                warnedUnknownTags[type] = true;
                error(
                  'The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.',
                  type
                );
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(
            rootContainerElement
          ).createTextNode(text);
        }
        function setInitialProperties(
          domElement,
          tag,
          rawProps,
          rootContainerElement
        ) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case 'dialog':
              listenToNonDelegatedEvent('cancel', domElement);
              listenToNonDelegatedEvent('close', domElement);
              props = rawProps;
              break;
            case 'iframe':
            case 'object':
            case 'embed':
              listenToNonDelegatedEvent('load', domElement);
              props = rawProps;
              break;
            case 'video':
            case 'audio':
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case 'source':
              listenToNonDelegatedEvent('error', domElement);
              props = rawProps;
              break;
            case 'img':
            case 'image':
            case 'link':
              listenToNonDelegatedEvent('error', domElement);
              listenToNonDelegatedEvent('load', domElement);
              props = rawProps;
              break;
            case 'details':
              listenToNonDelegatedEvent('toggle', domElement);
              props = rawProps;
              break;
            case 'input':
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent('invalid', domElement);
              break;
            case 'option':
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case 'select':
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent('invalid', domElement);
              break;
            case 'textarea':
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent('invalid', domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(
            tag,
            domElement,
            rootContainerElement,
            props,
            isCustomComponentTag
          );
          switch (tag) {
            case 'input':
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case 'textarea':
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case 'option':
              postMountWrapper$1(domElement, rawProps);
              break;
            case 'select':
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === 'function') {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(
          domElement,
          tag,
          lastRawProps,
          nextRawProps,
          rootContainerElement
        ) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case 'input':
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case 'select':
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case 'textarea':
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (
                typeof lastProps.onClick !== 'function' &&
                typeof nextProps.onClick === 'function'
              ) {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (
              nextProps.hasOwnProperty(propKey) ||
              !lastProps.hasOwnProperty(propKey) ||
              lastProps[propKey] == null
            ) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = '';
                }
              }
            } else if (
              propKey === DANGEROUSLY_SET_INNER_HTML ||
              propKey === CHILDREN
            );
            else if (
              propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
              propKey === SUPPRESS_HYDRATION_WARNING
            );
            else if (propKey === AUTOFOCUS);
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (
              !nextProps.hasOwnProperty(propKey) ||
              nextProp === lastProp ||
              (nextProp == null && lastProp == null)
            ) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (
                    lastProp.hasOwnProperty(styleName) &&
                    (!nextProp || !nextProp.hasOwnProperty(styleName))
                  ) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = '';
                  }
                }
                for (styleName in nextProp) {
                  if (
                    nextProp.hasOwnProperty(styleName) &&
                    lastProp[styleName] !== nextProp[styleName]
                  ) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (
                typeof nextProp === 'string' ||
                typeof nextProp === 'number'
              ) {
                (updatePayload = updatePayload || []).push(
                  propKey,
                  '' + nextProp
                );
              }
            } else if (
              propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
              propKey === SUPPRESS_HYDRATION_WARNING
            );
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== 'function') {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === 'onScroll') {
                  listenToNonDelegatedEvent('scroll', domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(
                styleUpdates,
                nextProps[STYLE]
              );
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(
          domElement,
          updatePayload,
          tag,
          lastRawProps,
          nextRawProps
        ) {
          if (
            tag === 'input' &&
            nextRawProps.type === 'radio' &&
            nextRawProps.name != null
          ) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(
            domElement,
            updatePayload,
            wasCustomComponentTag,
            isCustomComponentTag
          );
          switch (tag) {
            case 'input':
              updateWrapper(domElement, nextRawProps);
              break;
            case 'textarea':
              updateWrapper$1(domElement, nextRawProps);
              break;
            case 'select':
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(
          domElement,
          tag,
          rawProps,
          parentNamespace,
          rootContainerElement,
          isConcurrentMode,
          shouldWarnDev
        ) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case 'dialog':
              listenToNonDelegatedEvent('cancel', domElement);
              listenToNonDelegatedEvent('close', domElement);
              break;
            case 'iframe':
            case 'object':
            case 'embed':
              listenToNonDelegatedEvent('load', domElement);
              break;
            case 'video':
            case 'audio':
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case 'source':
              listenToNonDelegatedEvent('error', domElement);
              break;
            case 'img':
            case 'image':
            case 'link':
              listenToNonDelegatedEvent('error', domElement);
              listenToNonDelegatedEvent('load', domElement);
              break;
            case 'details':
              listenToNonDelegatedEvent('toggle', domElement);
              break;
            case 'input':
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent('invalid', domElement);
              break;
            case 'option':
              validateProps(domElement, rawProps);
              break;
            case 'select':
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent('invalid', domElement);
              break;
            case 'textarea':
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent('invalid', domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                  break;
                case 'checked':
                  break;
                case 'selected':
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === 'string') {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(
                      domElement.textContent,
                      nextProp,
                      isConcurrentMode,
                      shouldWarnDev
                    );
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === 'number') {
                if (domElement.textContent !== '' + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(
                      domElement.textContent,
                      nextProp,
                      isConcurrentMode,
                      shouldWarnDev
                    );
                  }
                  updatePayload = [CHILDREN, '' + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== 'function') {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === 'onScroll') {
                  listenToNonDelegatedEvent('scroll', domElement);
                }
              }
            } else if (
              shouldWarnDev &&
              true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === 'boolean'
            ) {
              var serverValue = void 0;
              var propertyInfo =
                isCustomComponentTag && enableCustomElementPropertySupport
                  ? null
                  : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true);
              else if (
                propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === 'value' ||
                propKey === 'checked' ||
                propKey === 'selected'
              );
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute('style');
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (
                isCustomComponentTag &&
                !enableCustomElementPropertySupport
              ) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(
                  domElement,
                  propKey,
                  nextProp
                );
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (
                !shouldIgnoreAttribute(
                  propKey,
                  propertyInfo,
                  isCustomComponentTag
                ) &&
                !shouldRemoveAttribute(
                  propKey,
                  nextProp,
                  propertyInfo,
                  isCustomComponentTag
                )
              ) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(
                    domElement,
                    propKey,
                    nextProp,
                    propertyInfo
                  );
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(
                    domElement,
                    propKey,
                    nextProp
                  );
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (
                  !dontWarnCustomElement &&
                  nextProp !== serverValue &&
                  !isMismatchDueToBadCasing
                ) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.size > 0 &&
                rawProps[SUPPRESS_HYDRATION_WARNING] !== true
              ) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case 'input':
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case 'textarea':
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case 'select':
            case 'option':
              break;
            default:
              if (typeof rawProps.onClick === 'function') {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error(
              'Did not expect server HTML to contain a <%s> in <%s>.',
              child.nodeName.toLowerCase(),
              parentNode.nodeName.toLowerCase()
            );
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error(
              'Did not expect server HTML to contain the text node "%s" in <%s>.',
              child.nodeValue,
              parentNode.nodeName.toLowerCase()
            );
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error(
              'Expected server HTML to contain a matching <%s> in <%s>.',
              tag,
              parentNode.nodeName.toLowerCase()
            );
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === '') {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error(
              'Expected server HTML to contain a matching text node for "%s" in <%s>.',
              text,
              parentNode.nodeName.toLowerCase()
            );
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case 'input':
              restoreControlledState(domElement, props);
              return;
            case 'textarea':
              restoreControlledState$2(domElement, props);
              return;
            case 'select':
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function () {};
        var updatedAncestorInfo = function () {};
        {
          var specialTags = [
            'address',
            'applet',
            'area',
            'article',
            'aside',
            'base',
            'basefont',
            'bgsound',
            'blockquote',
            'body',
            'br',
            'button',
            'caption',
            'center',
            'col',
            'colgroup',
            'dd',
            'details',
            'dir',
            'div',
            'dl',
            'dt',
            'embed',
            'fieldset',
            'figcaption',
            'figure',
            'footer',
            'form',
            'frame',
            'frameset',
            'h1',
            'h2',
            'h3',
            'h4',
            'h5',
            'h6',
            'head',
            'header',
            'hgroup',
            'hr',
            'html',
            'iframe',
            'img',
            'input',
            'isindex',
            'li',
            'link',
            'listing',
            'main',
            'marquee',
            'menu',
            'menuitem',
            'meta',
            'nav',
            'noembed',
            'noframes',
            'noscript',
            'object',
            'ol',
            'p',
            'param',
            'plaintext',
            'pre',
            'script',
            'section',
            'select',
            'source',
            'style',
            'summary',
            'table',
            'tbody',
            'td',
            'template',
            'textarea',
            'tfoot',
            'th',
            'thead',
            'title',
            'tr',
            'track',
            'ul',
            'wbr',
            'xmp',
          ];
          var inScopeTags = [
            'applet',
            'caption',
            'html',
            'table',
            'td',
            'th',
            'marquee',
            'object',
            'template',
            // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
            // TODO: Distinguish by namespace here -- for <title>, including it here
            // errs on the side of fewer warnings
            'foreignObject',
            'desc',
            'title',
          ];
          var buttonScopeTags = inScopeTags.concat(['button']);
          var impliedEndTags = [
            'dd',
            'dt',
            'li',
            'option',
            'optgroup',
            'p',
            'rp',
            'rt',
          ];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null,
          };
          updatedAncestorInfo = function (oldInfo, tag) {
            var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag,
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (
              specialTags.indexOf(tag) !== -1 &&
              tag !== 'address' &&
              tag !== 'div' &&
              tag !== 'p'
            ) {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === 'form') {
              ancestorInfo.formTag = info;
            }
            if (tag === 'a') {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === 'button') {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === 'nobr') {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === 'p') {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === 'li') {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === 'dd' || tag === 'dt') {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function (tag, parentTag) {
            switch (parentTag) {
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
              case 'select':
                return (
                  tag === 'option' || tag === 'optgroup' || tag === '#text'
                );
              case 'optgroup':
                return tag === 'option' || tag === '#text';
              // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
              // but
              case 'option':
                return tag === '#text';
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
              // No special behavior since these rules fall back to "in body" mode for
              // all except special table nodes which cause bad parsing behavior anyway.
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
              case 'tr':
                return (
                  tag === 'th' ||
                  tag === 'td' ||
                  tag === 'style' ||
                  tag === 'script' ||
                  tag === 'template'
                );
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
              case 'tbody':
              case 'thead':
              case 'tfoot':
                return (
                  tag === 'tr' ||
                  tag === 'style' ||
                  tag === 'script' ||
                  tag === 'template'
                );
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
              case 'colgroup':
                return tag === 'col' || tag === 'template';
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
              case 'table':
                return (
                  tag === 'caption' ||
                  tag === 'colgroup' ||
                  tag === 'tbody' ||
                  tag === 'tfoot' ||
                  tag === 'thead' ||
                  tag === 'style' ||
                  tag === 'script' ||
                  tag === 'template'
                );
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
              case 'head':
                return (
                  tag === 'base' ||
                  tag === 'basefont' ||
                  tag === 'bgsound' ||
                  tag === 'link' ||
                  tag === 'meta' ||
                  tag === 'title' ||
                  tag === 'noscript' ||
                  tag === 'noframes' ||
                  tag === 'style' ||
                  tag === 'script' ||
                  tag === 'template'
                );
              // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
              case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
              case 'frameset':
                return tag === 'frame';
              case '#document':
                return tag === 'html';
            }
            switch (tag) {
              case 'h1':
              case 'h2':
              case 'h3':
              case 'h4':
              case 'h5':
              case 'h6':
                return (
                  parentTag !== 'h1' &&
                  parentTag !== 'h2' &&
                  parentTag !== 'h3' &&
                  parentTag !== 'h4' &&
                  parentTag !== 'h5' &&
                  parentTag !== 'h6'
                );
              case 'rp':
              case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
              case 'body':
              case 'caption':
              case 'col':
              case 'colgroup':
              case 'frameset':
              case 'frame':
              case 'head':
              case 'html':
              case 'tbody':
              case 'td':
              case 'tfoot':
              case 'th':
              case 'thead':
              case 'tr':
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function (tag, ancestorInfo) {
            switch (tag) {
              case 'address':
              case 'article':
              case 'aside':
              case 'blockquote':
              case 'center':
              case 'details':
              case 'dialog':
              case 'dir':
              case 'div':
              case 'dl':
              case 'fieldset':
              case 'figcaption':
              case 'figure':
              case 'footer':
              case 'header':
              case 'hgroup':
              case 'main':
              case 'menu':
              case 'nav':
              case 'ol':
              case 'p':
              case 'section':
              case 'summary':
              case 'ul':
              case 'pre':
              case 'listing':
              case 'table':
              case 'hr':
              case 'xmp':
              case 'h1':
              case 'h2':
              case 'h3':
              case 'h4':
              case 'h5':
              case 'h6':
                return ancestorInfo.pTagInButtonScope;
              case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case 'li':
                return ancestorInfo.listItemTagAutoclosing;
              case 'dd':
              case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
              case 'button':
                return ancestorInfo.buttonTagInScope;
              case 'a':
                return ancestorInfo.aTagInScope;
              case 'nobr':
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function (childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error(
                  'validateDOMNesting: when childText is passed, childTag should be null'
                );
              }
              childTag = '#text';
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag)
              ? null
              : parentInfo;
            var invalidAncestor = invalidParent
              ? null
              : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = '';
            if (childTag === '#text') {
              if (/\S/.test(childText)) {
                tagDisplayName = 'Text nodes';
              } else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo =
                  " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = '<' + childTag + '>';
            }
            if (invalidParent) {
              var info = '';
              if (ancestorTag === 'table' && childTag === 'tr') {
                info +=
                  ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.';
              }
              error(
                'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s',
                tagDisplayName,
                ancestorTag,
                whitespaceInfo,
                info
              );
            } else {
              error(
                'validateDOMNesting(...): %s cannot appear as a descendant of <%s>.',
                tagDisplayName,
                ancestorTag
              );
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
        var SUSPENSE_START_DATA = '$';
        var SUSPENSE_END_DATA = '/$';
        var SUSPENSE_PENDING_START_DATA = '$?';
        var SUSPENSE_FALLBACK_START_DATA = '$!';
        var STYLE$1 = 'style';
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
              var root3 = rootContainerInstance.documentElement;
              namespace = root3
                ? root3.namespaceURI
                : getChildNamespace(null, '');
              break;
            }
            default: {
              var container =
                nodeType === COMMENT_NODE
                  ? rootContainerInstance.parentNode
                  : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo,
            };
          }
        }
        function getChildHostContext(
          parentHostContext,
          type,
          rootContainerInstance
        ) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(
              parentHostContextDev.namespace,
              type
            );
            var ancestorInfo = updatedAncestorInfo(
              parentHostContextDev.ancestorInfo,
              type
            );
            return {
              namespace,
              ancestorInfo,
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(
          type,
          props,
          rootContainerInstance,
          hostContext,
          internalInstanceHandle
        ) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (
              typeof props.children === 'string' ||
              typeof props.children === 'number'
            ) {
              var string = '' + props.children;
              var ownAncestorInfo = updatedAncestorInfo(
                hostContextDev.ancestorInfo,
                type
              );
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement3(
            type,
            props,
            rootContainerInstance,
            parentNamespace
          );
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(
          domElement,
          type,
          props,
          rootContainerInstance,
          hostContext
        ) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
              return !!props.autoFocus;
            case 'img':
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(
          domElement,
          type,
          oldProps,
          newProps,
          rootContainerInstance,
          hostContext
        ) {
          {
            var hostContextDev = hostContext;
            if (
              typeof newProps.children !== typeof oldProps.children &&
              (typeof newProps.children === 'string' ||
                typeof newProps.children === 'number')
            ) {
              var string = '' + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(
                hostContextDev.ancestorInfo,
                type
              );
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return (
            type === 'textarea' ||
            type === 'noscript' ||
            typeof props.children === 'string' ||
            typeof props.children === 'number' ||
            (typeof props.dangerouslySetInnerHTML === 'object' &&
              props.dangerouslySetInnerHTML !== null &&
              props.dangerouslySetInnerHTML.__html != null)
          );
        }
        function createTextInstance(
          text,
          rootContainerInstance,
          hostContext,
          internalInstanceHandle
        ) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout =
          typeof setTimeout === 'function' ? setTimeout : void 0;
        var cancelTimeout =
          typeof clearTimeout === 'function' ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === 'function' ? Promise : void 0;
        var scheduleMicrotask =
          typeof queueMicrotask === 'function'
            ? queueMicrotask
            : typeof localPromise !== 'undefined'
            ? function (callback) {
                return localPromise
                  .resolve(null)
                  .then(callback)
                  .catch(handleErrorInNextTick);
              }
            : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function () {
            throw error2;
          });
        }
        function commitMount(
          domElement,
          type,
          newProps,
          internalInstanceHandle
        ) {
          switch (type) {
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case 'img': {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(
          domElement,
          updatePayload,
          type,
          oldProps,
          newProps,
          internalInstanceHandle
        ) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, '');
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if (
            (reactRootContainer === null || reactRootContainer === void 0) &&
            parentNode.onclick === null
          ) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (
                data === SUSPENSE_START_DATA ||
                data === SUSPENSE_PENDING_START_DATA ||
                data === SUSPENSE_FALLBACK_START_DATA
              ) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(
          container,
          suspenseInstance
        ) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          }
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === 'function') {
            style2.setProperty('display', 'none', 'important');
          } else {
            style2.display = 'none';
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = '';
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display =
            styleProp !== void 0 &&
            styleProp !== null &&
            styleProp.hasOwnProperty('display')
              ? styleProp.display
              : null;
          instance.style.display = dangerousStyleValue('display', display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = '';
          } else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) {
              container.removeChild(container.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (
            instance.nodeType !== ELEMENT_NODE ||
            type.toLowerCase() !== instance.nodeName.toLowerCase()
          ) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === '' || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack,
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (
                nodeData === SUSPENSE_START_DATA ||
                nodeData === SUSPENSE_FALLBACK_START_DATA ||
                nodeData === SUSPENSE_PENDING_START_DATA
              ) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(
          instance,
          type,
          props,
          rootContainerInstance,
          hostContext,
          internalInstanceHandle,
          shouldWarnDev
        ) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode =
            (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(
            instance,
            type,
            props,
            parentNamespace,
            rootContainerInstance,
            isConcurrentMode,
            shouldWarnDev
          );
        }
        function hydrateTextInstance(
          textInstance,
          text,
          internalInstanceHandle,
          shouldWarnDev
        ) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode =
            (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(
          suspenseInstance,
          internalInstanceHandle
        ) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(
          suspenseInstance
        ) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (
                data === SUSPENSE_START_DATA ||
                data === SUSPENSE_FALLBACK_START_DATA ||
                data === SUSPENSE_PENDING_START_DATA
              ) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (
                data === SUSPENSE_START_DATA ||
                data === SUSPENSE_FALLBACK_START_DATA ||
                data === SUSPENSE_PENDING_START_DATA
              ) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== 'head' && parentType !== 'body';
        }
        function didNotMatchHydratedContainerTextInstance(
          parentContainer,
          textInstance,
          text,
          isConcurrentMode
        ) {
          var shouldWarnDev = true;
          checkForUnmatchedText(
            textInstance.nodeValue,
            text,
            isConcurrentMode,
            shouldWarnDev
          );
        }
        function didNotMatchHydratedTextInstance(
          parentType,
          parentProps,
          parentInstance,
          textInstance,
          text,
          isConcurrentMode
        ) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(
              textInstance.nodeValue,
              text,
              isConcurrentMode,
              shouldWarnDev
            );
          }
        }
        function didNotHydrateInstanceWithinContainer(
          parentContainer,
          instance
        ) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE);
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(
          parentInstance,
          instance
        ) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE);
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(
          parentType,
          parentProps,
          parentInstance,
          instance,
          isConcurrentMode
        ) {
          {
            if (
              isConcurrentMode ||
              parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true
            ) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE);
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(
          parentContainer,
          type,
          props
        ) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(
          parentContainer,
          text
        ) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(
          parentInstance,
          type,
          props
        ) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(
          parentInstance,
          text
        ) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(
          parentType,
          parentProps,
          parentInstance,
          type,
          props,
          isConcurrentMode
        ) {
          {
            if (
              isConcurrentMode ||
              parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true
            ) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(
          parentType,
          parentProps,
          parentInstance,
          text,
          isConcurrentMode
        ) {
          {
            if (
              isConcurrentMode ||
              parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true
            ) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error(
              'An error occurred during hydration. The server HTML was replaced with client content in <%s>.',
              parentContainer.nodeName.toLowerCase()
            );
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = '__reactFiber$' + randomKey;
        var internalPropsKey = '__reactProps$' + randomKey;
        var internalContainerInstanceKey = '__reactContainer$' + randomKey;
        var internalEventHandlersKey = '__reactEvents$' + randomKey;
        var internalEventHandlerListenersKey = '__reactListeners$' + randomKey;
        var internalEventHandlesSetKey = '__reactHandles$' + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst =
              parentNode[internalContainerInstanceKey] ||
              parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (
                targetInst.child !== null ||
                (alternate !== null && alternate.child !== null)
              ) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst =
                    suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance =
                    getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst =
            node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (
              inst.tag === HostComponent ||
              inst.tag === HostText ||
              inst.tag === SuspenseComponent ||
              inst.tag === HostRoot
            ) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error('getNodeFromInstance: Invalid argument.');
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] =
              /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 =
          ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(
                element.type,
                element._source,
                owner ? owner.type : null
              );
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(
          typeSpecs,
          values2,
          location,
          componentName,
          element
        ) {
          {
            var has5 = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has5(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error(
                      (componentName || 'React class') +
                        ': ' +
                        location +
                        ' type `' +
                        typeSpecName +
                        '` is invalid; it must be a function, usually from the `prop-types` package, but received `' +
                        typeof typeSpecs[typeSpecName] +
                        '`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
                    );
                    err.name = 'Invariant Violation';
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](
                    values2,
                    typeSpecName,
                    componentName,
                    location,
                    null,
                    'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'
                  );
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error(
                    '%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).',
                    componentName || 'React class',
                    location,
                    typeSpecName,
                    typeof error$1
                  );
                  setCurrentlyValidatingElement(null);
                }
                if (
                  error$1 instanceof Error &&
                  !(error$1.message in loggedTypeFailures)
                ) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error('Failed %s type: %s', location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue,
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error('Unexpected pop.');
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error('Unexpected Fiber popped.');
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push2(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(
          workInProgress2,
          Component,
          didPushOwnContextIfProvider
        ) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext =
              unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (
              instance &&
              instance.__reactInternalMemoizedUnmaskedChildContext ===
                unmaskedContext
            ) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name =
                getComponentNameFromFiber(workInProgress2) || 'Unknown';
              checkPropTypes(contextTypes, context, 'context', name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error(
                'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.'
              );
            }
            push2(contextStackCursor, context, fiber);
            push2(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== 'function') {
              {
                var componentName =
                  getComponentNameFromFiber(fiber) || 'Unknown';
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error(
                    '%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.',
                    componentName,
                    componentName
                  );
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error(
                  (getComponentNameFromFiber(fiber) || 'Unknown') +
                    '.getChildContext(): key "' +
                    contextKey +
                    '" is not defined in childContextTypes.'
                );
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || 'Unknown';
              checkPropTypes(
                childContextTypes,
                childContext,
                'child context',
                name
              );
            }
            return assign2({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext =
              (instance &&
                instance.__reactInternalMemoizedMergedChildContext) ||
              emptyContextObject;
            previousContext = contextStackCursor.current;
            push2(
              contextStackCursor,
              memoizedMergedChildContext,
              workInProgress2
            );
            push2(
              didPerformWorkStackCursor,
              didPerformWorkStackCursor.current,
              workInProgress2
            );
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error(
                'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.'
              );
            }
            if (didChange) {
              var mergedContext = processChildContext(
                workInProgress2,
                type,
                previousContext
              );
              instance.__reactInternalMemoizedMergedChildContext =
                mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push2(contextStackCursor, mergedContext, workInProgress2);
              push2(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push2(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error(
                'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.'
              );
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode
                      .__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error(
              'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.'
            );
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = '';
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index2) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index2 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - (baseLength % 5);
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = (1 << restOfLength) | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = (1 << length) | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << (getBitLength(id) - 1);
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow,
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(
          workInProgress2,
          suspendedContext
        ) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error(
                'Expected to be hydrating. This is a bug in React. Please file an issue.'
              );
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error(
                'We should not be hydrating here. This is a bug in React. Please file a bug.'
              );
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance =
            getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(
          fiber,
          suspenseInstance,
          treeContext
        ) {
          nextHydratableInstance =
            getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(
                  returnFiber.stateNode.containerInfo,
                  instance
                );
                break;
              }
              case HostComponent: {
                var isConcurrentMode =
                  (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(
                  returnFiber.type,
                  returnFiber.memoizedProps,
                  returnFiber.stateNode,
                  instance,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(
                    suspenseState.dehydrated,
                    instance
                  );
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(
                      parentContainer,
                      type
                    );
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(
                      parentContainer,
                      text
                    );
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode =
                      (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _type,
                      _props,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode =
                      (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _text,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode
                    );
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(
                        _parentInstance,
                        _type2
                      );
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(
                        _parentInstance,
                        _text2
                      );
                      break;
                  }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = (fiber.flags & ~Hydrating) | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane,
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment =
                  createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (
            (fiber.mode & ConcurrentMode) !== NoMode &&
            (fiber.flags & DidCapture) === NoFlags
          );
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error(
            'Hydration failed because the initial UI does not match what was rendered on the server.'
          );
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(
              prevHydrationParentFiber,
              firstAttemptedInstance
            );
          }
        }
        function prepareToHydrateHostInstance(
          fiber,
          rootContainerInstance,
          hostContext
        ) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(
            instance,
            fiber.type,
            fiber.memoizedProps,
            rootContainerInstance,
            hostContext,
            fiber,
            shouldWarnIfMismatchDev
          );
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(
            textInstance,
            textContent,
            fiber
          );
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode =
                    (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(
                    parentContainer,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 =
                    (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode2
                  );
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance =
            suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error(
              'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.'
            );
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance =
            suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error(
              'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.'
            );
          }
          return getNextHydratableInstanceAfterSuspenseInstance(
            suspenseInstance
          );
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (
            parent !== null &&
            parent.tag !== HostComponent &&
            parent.tag !== HostRoot &&
            parent.tag !== SuspenseComponent
          ) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (
            fiber.tag !== HostRoot &&
            (fiber.tag !== HostComponent ||
              (shouldDeleteUnhydratedTailInstances(fiber.type) &&
                !shouldSetTextContent(fiber.type, fiber.memoizedProps)))
          ) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber
              ? getNextHydratableSibling(fiber.stateNode)
              : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 =
          ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function (fiber, instance) {},
          flushPendingUnsafeLifecycleWarnings: function () {},
          recordLegacyContextWarning: function (fiber, instance) {},
          flushLegacyContextWarning: function () {},
          discardPendingWarnings: function () {},
        };
        {
          var findStrictRoot = function (fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function (set2) {
            var array = [];
            set2.forEach(function (value) {
              array.push(value);
            });
            return array.sort().join(', ');
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (
            fiber,
            instance
          ) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (
              typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true
            ) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (
              fiber.mode & StrictLegacyMode &&
              typeof instance.UNSAFE_componentWillMount === 'function'
            ) {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (
              typeof instance.componentWillReceiveProps === 'function' &&
              instance.componentWillReceiveProps
                .__suppressDeprecationWarning !== true
            ) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (
              fiber.mode & StrictLegacyMode &&
              typeof instance.UNSAFE_componentWillReceiveProps === 'function'
            ) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (
              typeof instance.componentWillUpdate === 'function' &&
              instance.componentWillUpdate.__suppressDeprecationWarning !== true
            ) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (
              fiber.mode & StrictLegacyMode &&
              typeof instance.UNSAFE_componentWillUpdate === 'function'
            ) {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings =
            function () {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function (fiber) {
                  componentWillMountUniqueNames.add(
                    getComponentNameFromFiber(fiber) || 'Component'
                  );
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames =
                /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function (
                  fiber
                ) {
                  UNSAFE_componentWillMountUniqueNames.add(
                    getComponentNameFromFiber(fiber) || 'Component'
                  );
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames =
                /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function (
                  fiber
                ) {
                  componentWillReceivePropsUniqueNames.add(
                    getComponentNameFromFiber(fiber) || 'Component'
                  );
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames =
                /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(
                  function (fiber) {
                    UNSAFE_componentWillReceivePropsUniqueNames.add(
                      getComponentNameFromFiber(fiber) || 'Component'
                    );
                    didWarnAboutUnsafeLifecycles.add(fiber.type);
                  }
                );
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function (fiber) {
                  componentWillUpdateUniqueNames.add(
                    getComponentNameFromFiber(fiber) || 'Component'
                  );
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames =
                /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (
                  fiber
                ) {
                  UNSAFE_componentWillUpdateUniqueNames.add(
                    getComponentNameFromFiber(fiber) || 'Component'
                  );
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(
                  UNSAFE_componentWillMountUniqueNames
                );
                error(
                  'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s',
                  sortedNames
                );
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(
                  UNSAFE_componentWillReceivePropsUniqueNames
                );
                error(
                  "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s",
                  _sortedNames
                );
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(
                  UNSAFE_componentWillUpdateUniqueNames
                );
                error(
                  'Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s',
                  _sortedNames2
                );
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(
                  componentWillMountUniqueNames
                );
                warn(
                  'componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s',
                  _sortedNames3
                );
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(
                  componentWillReceivePropsUniqueNames
                );
                warn(
                  "componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
                  _sortedNames4
                );
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(
                  componentWillUpdateUniqueNames
                );
                warn(
                  'componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s',
                  _sortedNames5
                );
              }
            };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function (
            fiber,
            instance
          ) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error(
                'Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.'
              );
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (
              fiber.type.contextTypes != null ||
              fiber.type.childContextTypes != null ||
              (instance !== null &&
                typeof instance.getChildContext === 'function')
            ) {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function () {
            pendingLegacyContextWarning.forEach(function (
              fiberArray,
              strictRoot
            ) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function (fiber) {
                uniqueNames.add(
                  getComponentNameFromFiber(fiber) || 'Component'
                );
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error(
                  'Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context',
                  sortedNames
                );
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function () {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function (child, returnFiber) {};
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function (child, returnFiber) {
            if (child === null || typeof child !== 'object') {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== 'object') {
              throw new Error(
                'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.'
              );
            }
            child._store.validated = true;
            var componentName =
              getComponentNameFromFiber(returnFiber) || 'Component';
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error(
              'Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'
            );
          };
        }
        function isReactClass(type) {
          return type.prototype && type.prototype.isReactComponent;
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (
            mixedRef !== null &&
            typeof mixedRef !== 'function' &&
            typeof mixedRef !== 'object'
          ) {
            {
              if (
                (returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(
                  element._owner &&
                  element._self &&
                  element._owner.stateNode !== element._self
                ) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(
                  typeof element.type === 'function' &&
                  !isReactClass(element.type)
                ) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner
              ) {
                var componentName =
                  getComponentNameFromFiber(returnFiber) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error(
                      'Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',
                      componentName,
                      mixedRef
                    );
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error(
                    'Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref'
                  );
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error(
                  'Missing owner for string ref ' +
                    mixedRef +
                    '. This error is likely caused by a bug in React. Please file an issue.'
                );
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, 'ref');
              }
              var stringRef = '' + mixedRef;
              if (
                current2 !== null &&
                current2.ref !== null &&
                typeof current2.ref === 'function' &&
                current2.ref._stringRef === stringRef
              ) {
                return current2.ref;
              }
              var ref = function (value) {
                var refs = resolvedInst.refs;
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== 'string') {
                throw new Error(
                  'Expected ref to be a function, a string, an object returned by React.createRef(), or null.'
                );
              }
              if (!element._owner) {
                throw new Error(
                  'Element ref was specified as a string (' +
                    mixedRef +
                    ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information."
                );
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error(
            'Objects are not valid as a React child (found: ' +
              (childString === '[object Object]'
                ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'
                : childString) +
              '). If you meant to render a collection of children, use an array instead.'
          );
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName =
              getComponentNameFromFiber(returnFiber) || 'Component';
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error(
              'Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.'
            );
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone2 = createWorkInProgress(fiber, pendingProps);
            clone2.index = 0;
            clone2.sibling = null;
            return clone2;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(
                textContent,
                returnFiber.mode,
                lanes
              );
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(
                returnFiber,
                current2,
                element.props.children,
                lanes,
                element.key
              );
            }
            if (current2 !== null) {
              if (
                current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                (typeof elementType === 'object' &&
                  elementType !== null &&
                  elementType.$$typeof === REACT_LAZY_TYPE &&
                  resolveLazy(elementType) === current2.type)
              ) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(
              element,
              returnFiber.mode,
              lanes
            );
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (
              current2 === null ||
              current2.tag !== HostPortal ||
              current2.stateNode.containerInfo !== portal.containerInfo ||
              current2.stateNode.implementation !== portal.implementation
            ) {
              var created = createFiberFromPortal(
                portal,
                returnFiber.mode,
                lanes
              );
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(
            returnFiber,
            current2,
            fragment,
            lanes,
            key
          ) {
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(
                fragment,
                returnFiber.mode,
                lanes,
                key
              );
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (
              (typeof newChild === 'string' && newChild !== '') ||
              typeof newChild === 'number'
            ) {
              var created = createFiberFromText(
                '' + newChild,
                returnFiber.mode,
                lanes
              );
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(
                    newChild,
                    returnFiber.mode,
                    lanes
                  );
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(
                    newChild,
                    returnFiber.mode,
                    lanes
                  );
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(
                  newChild,
                  returnFiber.mode,
                  lanes,
                  null
                );
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === 'function') {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (
              (typeof newChild === 'string' && newChild !== '') ||
              typeof newChild === 'number'
            ) {
              if (key !== null) {
                return null;
              }
              return updateTextNode(
                returnFiber,
                oldFiber,
                '' + newChild,
                lanes
              );
            }
            if (typeof newChild === 'object' && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(
                      returnFiber,
                      oldFiber,
                      newChild,
                      lanes
                    );
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(
                    returnFiber,
                    oldFiber,
                    init(payload),
                    lanes
                  );
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(
                  returnFiber,
                  oldFiber,
                  newChild,
                  lanes,
                  null
                );
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === 'function') {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(
            existingChildren,
            returnFiber,
            newIdx,
            newChild,
            lanes
          ) {
            if (
              (typeof newChild === 'string' && newChild !== '') ||
              typeof newChild === 'number'
            ) {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(
                returnFiber,
                matchedFiber,
                '' + newChild,
                lanes
              );
            }
            if (typeof newChild === 'object' && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber =
                    existingChildren.get(
                      newChild.key === null ? newIdx : newChild.key
                    ) || null;
                  return updateElement(
                    returnFiber,
                    _matchedFiber,
                    newChild,
                    lanes
                  );
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 =
                    existingChildren.get(
                      newChild.key === null ? newIdx : newChild.key
                    ) || null;
                  return updatePortal(
                    returnFiber,
                    _matchedFiber2,
                    newChild,
                    lanes
                  );
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(
                    existingChildren,
                    returnFiber,
                    newIdx,
                    init(payload),
                    lanes
                  );
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(
                  returnFiber,
                  _matchedFiber3,
                  newChild,
                  lanes,
                  null
                );
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === 'function') {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== 'object' || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== 'string') {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error(
                    'Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.',
                    key
                  );
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(
            returnFiber,
            currentFirstChild,
            newChildren,
            lanes
          ) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(
                returnFiber,
                oldFiber,
                newChildren[newIdx],
                lanes
              );
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(
                  returnFiber,
                  newChildren[newIdx],
                  lanes
                );
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(
                  _newFiber,
                  lastPlacedIndex,
                  newIdx
                );
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                newChildren[newIdx],
                lanes
              );
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(
                      _newFiber2.key === null ? newIdx : _newFiber2.key
                    );
                  }
                }
                lastPlacedIndex = placeChild(
                  _newFiber2,
                  lastPlacedIndex,
                  newIdx
                );
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function (child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(
            returnFiber,
            currentFirstChild,
            newChildrenIterable,
            lanes
          ) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== 'function') {
              throw new Error(
                'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.'
              );
            }
            {
              if (
                typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === 'Generator'
              ) {
                if (!didWarnAboutGenerators) {
                  error(
                    'Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.'
                  );
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error(
                    'Using Maps as children is not supported. Use an array of keyed ReactElements instead.'
                  );
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error('An iterable object provided no iterator.');
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (
              ;
              oldFiber !== null && !step.done;
              newIdx++, step = newChildren.next()
            ) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(
                returnFiber,
                oldFiber,
                step.value,
                lanes
              );
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(
                  _newFiber3,
                  lastPlacedIndex,
                  newIdx
                );
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                step.value,
                lanes
              );
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(
                      _newFiber4.key === null ? newIdx : _newFiber4.key
                    );
                  }
                }
                lastPlacedIndex = placeChild(
                  _newFiber4,
                  lastPlacedIndex,
                  newIdx
                );
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function (child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(
            returnFiber,
            currentFirstChild,
            textContent,
            lanes
          ) {
            if (
              currentFirstChild !== null &&
              currentFirstChild.tag === HostText
            ) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(
              textContent,
              returnFiber.mode,
              lanes
            );
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(
            returnFiber,
            currentFirstChild,
            element,
            lanes
          ) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (
                    child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    (typeof elementType === 'object' &&
                      elementType !== null &&
                      elementType.$$typeof === REACT_LAZY_TYPE &&
                      resolveLazy(elementType) === child.type)
                  ) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(
                element.props.children,
                returnFiber.mode,
                lanes,
                element.key
              );
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(
                element,
                returnFiber.mode,
                lanes
              );
              _created4.ref = coerceRef(
                returnFiber,
                currentFirstChild,
                element
              );
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(
            returnFiber,
            currentFirstChild,
            portal,
            lanes
          ) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (
                  child.tag === HostPortal &&
                  child.stateNode.containerInfo === portal.containerInfo &&
                  child.stateNode.implementation === portal.implementation
                ) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(
              portal,
              returnFiber.mode,
              lanes
            );
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(
            returnFiber,
            currentFirstChild,
            newChild,
            lanes
          ) {
            var isUnkeyedTopLevelFragment =
              typeof newChild === 'object' &&
              newChild !== null &&
              newChild.type === REACT_FRAGMENT_TYPE &&
              newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === 'object' && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(
                    reconcileSingleElement(
                      returnFiber,
                      currentFirstChild,
                      newChild,
                      lanes
                    )
                  );
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(
                    reconcileSinglePortal(
                      returnFiber,
                      currentFirstChild,
                      newChild,
                      lanes
                    )
                  );
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(
                    returnFiber,
                    currentFirstChild,
                    init(payload),
                    lanes
                  );
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(
                  returnFiber,
                  currentFirstChild,
                  newChild,
                  lanes
                );
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(
                  returnFiber,
                  currentFirstChild,
                  newChild,
                  lanes
                );
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (
              (typeof newChild === 'string' && newChild !== '') ||
              typeof newChild === 'number'
            ) {
              return placeSingleChild(
                reconcileSingleTextNode(
                  returnFiber,
                  currentFirstChild,
                  '' + newChild,
                  lanes
                )
              );
            }
            {
              if (typeof newChild === 'function') {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error('Resuming work not yet implemented.');
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(
            currentChild,
            currentChild.pendingProps
          );
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(
              currentChild,
              currentChild.pendingProps
            );
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push2(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (
                context._currentRenderer !== void 0 &&
                context._currentRenderer !== null &&
                context._currentRenderer !== rendererSigil
              ) {
                error(
                  'Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.'
                );
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(
          parent,
          renderLanes2,
          propagationRoot
        ) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(
                  alternate.childLanes,
                  renderLanes2
                );
              }
            } else if (
              alternate !== null &&
              !isSubsetOfLanes(alternate.childLanes, renderLanes2)
            ) {
              alternate.childLanes = mergeLanes(
                alternate.childLanes,
                renderLanes2
              );
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error(
                'Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.'
              );
            }
          }
        }
        function propagateContextChange(
          workInProgress2,
          context,
          renderLanes2
        ) {
          {
            propagateContextChange_eager(
              workInProgress2,
              context,
              renderLanes2
            );
          }
        }
        function propagateContextChange_eager(
          workInProgress2,
          context,
          renderLanes2
        ) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null);
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(
                    fiber.return,
                    renderLanes2,
                    workInProgress2
                  );
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber =
                fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error(
                  'We just came from a parent so we must have had a parent. This is a bug in React.'
                );
              }
              parentSuspense.lanes = mergeLanes(
                parentSuspense.lanes,
                renderLanes2
              );
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(
                parentSuspense,
                renderLanes2,
                workInProgress2
              );
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error(
                'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().'
              );
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context);
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null,
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error(
                  'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().'
                );
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem,
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i = 0; i < concurrentQueues.length; i++) {
              var queue = concurrentQueues[i];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(
          fiber,
          queue,
          update,
          lane
        ) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot =
          markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (
              alternate === null &&
              (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags
            ) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root3 = node.stateNode;
            return root3;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
            },
            effects: null,
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone2 = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects,
            };
            workInProgress2.updateQueue = clone2;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null,
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (
              currentlyProcessingQueue === sharedQueue &&
              !didWarnUpdateInsideUpdate
            ) {
              error(
                'An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.'
              );
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(
              fiber,
              sharedQueue,
              update,
              lane
            );
          }
        }
        function entangleTransitions(root3, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root3, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone2 = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null,
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone2;
                  } else {
                    newLast.next = clone2;
                    newLast = clone2;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects,
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(
          workInProgress2,
          queue,
          update,
          prevState,
          nextProps,
          instance
        ) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === 'function') {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags =
                (workInProgress2.flags & ~ShouldCapture) | DidCapture;
            }
            // Intentional fallthrough
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === 'function') {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign2({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(
          workInProgress2,
          props,
          instance,
          renderLanes2
        ) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone2 = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null,
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone2;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone2;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null,
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(
                  workInProgress2,
                  queue,
                  update,
                  newState,
                  props,
                  instance
                );
                var callback = update.callback;
                if (
                  callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane
                ) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== 'function') {
            throw new Error(
              'Invalid argument passed as callback. Expected a function. Instead ' +
                ('received: ' + callback)
            );
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (c === NO_CONTEXT) {
            throw new Error(
              'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.'
            );
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push2(rootInstanceStackCursor, nextRootInstance, fiber);
          push2(contextFiberStackCursor, fiber, fiber);
          push2(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push2(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push2(contextFiberStackCursor, fiber, fiber);
          push2(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return (parentContext & SubtreeSuspenseContextMask) | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push2(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (
                  dehydrated === null ||
                  isSuspenseInstancePending(dehydrated) ||
                  isSuspenseInstanceFallback(dehydrated)
                ) {
                  return node;
                }
              }
            } else if (
              node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0
            ) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 =
          /*   */
          0;
        var HasEffect =
          /* */
          1;
        var Insertion =
          /*  */
          2;
        var Layout =
          /*    */
          4;
        var Passive$1 =
          /*   */
          8;
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root3, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root3.mutableSourceEagerHydrationData == null) {
            root3.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root3.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 =
            ReactSharedInternals.ReactCurrentDispatcher,
          ReactCurrentBatchConfig$2 =
            ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error(
                '%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.',
                currentHookNameInDev,
                typeof deps
              );
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(
              currentlyRenderingFiber$1
            );
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName =
                    i === hookTypesUpdateIndexDev
                      ? currentHookName
                      : oldHookName;
                  var row = i + 1 + '. ' + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += ' ';
                  }
                  row += newHookName + '\n';
                  table += row;
                }
                error(
                  'React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n',
                  componentName,
                  table
                );
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error(
            'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.'
          );
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error(
                '%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.',
                currentHookNameInDev
              );
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error(
                'The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s',
                currentHookNameInDev,
                '[' + prevDeps.join(', ') + ']',
                '[' + nextDeps.join(', ') + ']'
              );
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(
          current2,
          workInProgress2,
          Component,
          props,
          secondArg,
          nextRenderLanes
        ) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies =
              current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current =
                HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error(
                  'Too many re-renders. React limits the number of renders to prevent an infinite loop.'
                );
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks =
            currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (
              current2 !== null &&
              (current2.flags & StaticMask) !==
                (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode
            ) {
              error(
                'Internal React error: Expected static flag was missing. Please notify the React team.'
              );
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error(
              'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.'
            );
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(
              MountPassiveDev |
              MountLayoutDev |
              Passive |
              Update
            );
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null,
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error(
                'Rendered more hooks than during the previous render.'
              );
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null,
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook =
                newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null,
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === 'function' ? action(state) : action;
        }
        function mountReducer(reducer4, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState51;
          if (init !== void 0) {
            initialState51 = init(initialArg);
          } else {
            initialState51 = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState51;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer4,
            lastRenderedState: initialState51,
          };
          hook.queue = queue;
          var dispatch = (queue.dispatch = dispatchReducerAction.bind(
            null,
            currentlyRenderingFiber$1,
            queue
          ));
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer4, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error(
              'Should have a queue. This is likely a bug in React. Please file an issue.'
            );
          }
          queue.lastRenderedReducer = reducer4;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error(
                  'Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.'
                );
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first2 = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first2;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone2 = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null,
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone2;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone2;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(
                  currentlyRenderingFiber$1.lanes,
                  updateLane
                );
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null,
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer4(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first2);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(
                currentlyRenderingFiber$1.lanes,
                interleavedLane
              );
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer4, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error(
              'Should have a queue. This is likely a bug in React. Please file an issue.'
            );
          }
          queue.lastRenderedReducer = reducer4;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer4(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(
          subscribe,
          getSnapshot,
          getServerSnapshot
        ) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error(
                'Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.'
              );
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error(
                    'The result of getServerSnapshot should be cached to avoid an infinite loop'
                  );
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error(
                    'The result of getSnapshot should be cached to avoid an infinite loop'
                  );
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root3 = getWorkInProgressRoot();
            if (root3 === null) {
              throw new Error(
                'Expected a work-in-progress root. This is a bug in React. Please file an issue.'
              );
            }
            if (!includesBlockingLane(root3, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot,
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe,
          ]);
          fiber.flags |= Passive;
          pushEffect(
            HasEffect | Passive$1,
            updateStoreInstance.bind(
              null,
              fiber,
              inst,
              nextSnapshot,
              getSnapshot
            ),
            void 0,
            null
          );
          return nextSnapshot;
        }
        function updateSyncExternalStore(
          subscribe,
          getSnapshot,
          getServerSnapshot
        ) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error(
                  'The result of getSnapshot should be cached to avoid an infinite loop'
                );
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe,
          ]);
          if (
            inst.getSnapshot !== getSnapshot ||
            snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            (workInProgressHook !== null &&
              workInProgressHook.memoizedState.tag & HasEffect)
          ) {
            fiber.flags |= Passive;
            pushEffect(
              HasEffect | Passive$1,
              updateStoreInstance.bind(
                null,
                fiber,
                inst,
                nextSnapshot,
                getSnapshot
              ),
              void 0,
              null
            );
            var root3 = getWorkInProgressRoot();
            if (root3 === null) {
              throw new Error(
                'Expected a work-in-progress root. This is a bug in React. Please file an issue.'
              );
            }
            if (!includesBlockingLane(root3, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(
          fiber,
          getSnapshot,
          renderedSnapshot
        ) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot,
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function () {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState51) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState51 === 'function') {
            initialState51 = initialState51();
          }
          hook.memoizedState = hook.baseState = initialState51;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState51,
          };
          hook.queue = queue;
          var dispatch = (queue.dispatch = dispatchSetState.bind(
            null,
            currentlyRenderingFiber$1,
            queue
          ));
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState51) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState51) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create2, destroy, deps) {
          var effect = {
            tag,
            create: create2,
            destroy,
            deps,
            // Circular
            next: null,
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue,
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(
            HasEffect | hookFlags,
            create2,
            void 0,
            nextDeps
          );
        }
        function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(
                  hookFlags,
                  create2,
                  destroy,
                  nextDeps
                );
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(
            HasEffect | hookFlags,
            create2,
            destroy,
            nextDeps
          );
        }
        function mountEffect(create2, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(
              MountPassiveDev | Passive | PassiveStatic,
              Passive$1,
              create2,
              deps
            );
          } else {
            return mountEffectImpl(
              Passive | PassiveStatic,
              Passive$1,
              create2,
              deps
            );
          }
        }
        function updateEffect(create2, deps) {
          return updateEffectImpl(Passive, Passive$1, create2, deps);
        }
        function mountInsertionEffect(create2, deps) {
          return mountEffectImpl(Update, Insertion, create2, deps);
        }
        function updateInsertionEffect(create2, deps) {
          return updateEffectImpl(Update, Insertion, create2, deps);
        }
        function mountLayoutEffect(create2, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create2, deps);
        }
        function updateLayoutEffect(create2, deps) {
          return updateEffectImpl(Update, Layout, create2, deps);
        }
        function imperativeHandleEffect(create2, ref) {
          if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create2();
            refCallback(_inst);
            return function () {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty('current')) {
                error(
                  'Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.',
                  'an object with keys {' +
                    Object.keys(refObject).join(', ') +
                    '}'
                );
              }
            }
            var _inst2 = create2();
            refObject.current = _inst2;
            return function () {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create2, deps) {
          {
            if (typeof create2 !== 'function') {
              error(
                'Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.',
                create2 !== null ? typeof create2 : 'null'
              );
            }
          }
          var effectDeps =
            deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(
            fiberFlags,
            Layout,
            imperativeHandleEffect.bind(null, create2, ref),
            effectDeps
          );
        }
        function updateImperativeHandle(ref, create2, deps) {
          {
            if (typeof create2 !== 'function') {
              error(
                'Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.',
                create2 !== null ? typeof create2 : 'null'
              );
            }
          }
          var effectDeps =
            deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(
            Update,
            Layout,
            imperativeHandleEffect.bind(null, create2, ref),
            effectDeps
          );
        }
        function mountDebugValue(value, formatterFn) {}
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(
                currentlyRenderingFiber$1.lanes,
                deferredLane
              );
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(
            higherEventPriority(previousPriority, ContinuousEventPriority)
          );
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers =
              /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn(
                    'Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.'
                  );
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false),
            isPending = _mountState[0],
            setPending = _mountState[1];
          var start = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start;
          return [isPending, start];
        }
        function updateTransition() {
          var _updateState = updateState(),
            isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(),
            isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root3 = getWorkInProgressRoot();
          var identifierPrefix = root3.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ':' + identifierPrefix + 'R' + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += 'H' + localId.toString(32);
            }
            id += ':';
          } else {
            var globalClientId = globalClientIdCounter++;
            id =
              ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === 'function') {
              error(
                "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
              );
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null,
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitionUpdate(root3, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === 'function') {
              error(
                "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
              );
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null,
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (
              fiber.lanes === NoLanes &&
              (alternate === null || alternate.lanes === NoLanes)
            ) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current =
                    InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(
                      fiber,
                      queue,
                      update,
                      lane
                    );
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitionUpdate(root3, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return (
            fiber === currentlyRenderingFiber$1 ||
            (alternate !== null && alternate === currentlyRenderingFiber$1)
          );
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass =
            didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root3, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root3, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler,
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function () {
            error(
              'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().'
            );
          };
          var warnInvalidHookAccess = function () {
            error(
              'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks'
            );
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function (context) {
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = 'useCallback';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = 'useContext';
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create2, deps) {
              currentHookNameInDev = 'useEffect';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function (ref, create2, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function (create2, deps) {
              currentHookNameInDev = 'useInsertionEffect';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create2, deps);
            },
            useLayoutEffect: function (create2, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function (create2, deps) {
              currentHookNameInDev = 'useMemo';
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer4, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer4, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = 'useRef';
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function (initialState51) {
              currentHookNameInDev = 'useState';
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState51);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = 'useDeferredValue';
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = 'useTransition';
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function (
              subscribe,
              getSnapshot,
              getServerSnapshot
            ) {
              currentHookNameInDev = 'useSyncExternalStore';
              mountHookTypesDev();
              return mountSyncExternalStore(
                subscribe,
                getSnapshot,
                getServerSnapshot
              );
            },
            useId: function () {
              currentHookNameInDev = 'useId';
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function (context) {
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = 'useCallback';
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = 'useContext';
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create2, deps) {
              currentHookNameInDev = 'useEffect';
              updateHookTypesDev();
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function (ref, create2, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              updateHookTypesDev();
              return mountImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function (create2, deps) {
              currentHookNameInDev = 'useInsertionEffect';
              updateHookTypesDev();
              return mountInsertionEffect(create2, deps);
            },
            useLayoutEffect: function (create2, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              updateHookTypesDev();
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function (create2, deps) {
              currentHookNameInDev = 'useMemo';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer4, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer4, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = 'useRef';
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function (initialState51) {
              currentHookNameInDev = 'useState';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState51);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = 'useDeferredValue';
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = 'useTransition';
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function (
              subscribe,
              getSnapshot,
              getServerSnapshot
            ) {
              currentHookNameInDev = 'useSyncExternalStore';
              updateHookTypesDev();
              return mountSyncExternalStore(
                subscribe,
                getSnapshot,
                getServerSnapshot
              );
            },
            useId: function () {
              currentHookNameInDev = 'useId';
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function (context) {
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = 'useCallback';
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = 'useContext';
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create2, deps) {
              currentHookNameInDev = 'useEffect';
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function (ref, create2, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function (create2, deps) {
              currentHookNameInDev = 'useInsertionEffect';
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            },
            useLayoutEffect: function (create2, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function (create2, deps) {
              currentHookNameInDev = 'useMemo';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer4, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer4, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = 'useRef';
              updateHookTypesDev();
              return updateRef();
            },
            useState: function (initialState51) {
              currentHookNameInDev = 'useState';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState51);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = 'useDeferredValue';
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = 'useTransition';
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function (
              subscribe,
              getSnapshot,
              getServerSnapshot
            ) {
              currentHookNameInDev = 'useSyncExternalStore';
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function () {
              currentHookNameInDev = 'useId';
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function (context) {
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = 'useCallback';
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = 'useContext';
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create2, deps) {
              currentHookNameInDev = 'useEffect';
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function (ref, create2, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function (create2, deps) {
              currentHookNameInDev = 'useInsertionEffect';
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            },
            useLayoutEffect: function (create2, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function (create2, deps) {
              currentHookNameInDev = 'useMemo';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer4, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer4, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = 'useRef';
              updateHookTypesDev();
              return updateRef();
            },
            useState: function (initialState51) {
              currentHookNameInDev = 'useState';
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState51);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = 'useDeferredValue';
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = 'useTransition';
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function (
              subscribe,
              getSnapshot,
              getServerSnapshot
            ) {
              currentHookNameInDev = 'useSyncExternalStore';
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function () {
              currentHookNameInDev = 'useId';
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function (context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = 'useCallback';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = 'useContext';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create2, deps) {
              currentHookNameInDev = 'useEffect';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function (ref, create2, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function (create2, deps) {
              currentHookNameInDev = 'useInsertionEffect';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create2, deps);
            },
            useLayoutEffect: function (create2, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function (create2, deps) {
              currentHookNameInDev = 'useMemo';
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer4, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer4, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = 'useRef';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function (initialState51) {
              currentHookNameInDev = 'useState';
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState51);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = 'useDeferredValue';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = 'useTransition';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function (
              subscribe,
              getSnapshot,
              getServerSnapshot
            ) {
              currentHookNameInDev = 'useSyncExternalStore';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(
                subscribe,
                getSnapshot,
                getServerSnapshot
              );
            },
            useId: function () {
              currentHookNameInDev = 'useId';
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function (context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = 'useCallback';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = 'useContext';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create2, deps) {
              currentHookNameInDev = 'useEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function (ref, create2, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function (create2, deps) {
              currentHookNameInDev = 'useInsertionEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            },
            useLayoutEffect: function (create2, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function (create2, deps) {
              currentHookNameInDev = 'useMemo';
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer4, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer4, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = 'useRef';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function (initialState51) {
              currentHookNameInDev = 'useState';
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState51);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = 'useDeferredValue';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = 'useTransition';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function (
              subscribe,
              getSnapshot,
              getServerSnapshot
            ) {
              currentHookNameInDev = 'useSyncExternalStore';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function () {
              currentHookNameInDev = 'useId';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function (context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function (callback, deps) {
              currentHookNameInDev = 'useCallback';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function (context) {
              currentHookNameInDev = 'useContext';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function (create2, deps) {
              currentHookNameInDev = 'useEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function (ref, create2, deps) {
              currentHookNameInDev = 'useImperativeHandle';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function (create2, deps) {
              currentHookNameInDev = 'useInsertionEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            },
            useLayoutEffect: function (create2, deps) {
              currentHookNameInDev = 'useLayoutEffect';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function (create2, deps) {
              currentHookNameInDev = 'useMemo';
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function (reducer4, initialArg, init) {
              currentHookNameInDev = 'useReducer';
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer4, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function (initialValue) {
              currentHookNameInDev = 'useRef';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function (initialState51) {
              currentHookNameInDev = 'useState';
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current =
                InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState51);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function (value, formatterFn) {
              currentHookNameInDev = 'useDebugValue';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function (value) {
              currentHookNameInDev = 'useDeferredValue';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function () {
              currentHookNameInDev = 'useTransition';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function (source, getSnapshot, subscribe) {
              currentHookNameInDev = 'useMutableSource';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function (
              subscribe,
              getSnapshot,
              getServerSnapshot
            ) {
              currentHookNameInDev = 'useSyncExternalStore';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function () {
              currentHookNameInDev = 'useId';
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler,
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(
          fiber,
          overrideBaseTime
        ) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root3 = parentFiber.stateNode;
                  root3.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root3 = parentFiber.stateNode;
                  if (root3 !== null) {
                    root3.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign2({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var fakeInternalInstance = {};
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        var didWarnAboutLegacyContext$1;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate =
            /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState =
            /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function (callback, callerName) {
            if (callback === null || typeof callback === 'function') {
              return;
            }
            var key = callerName + '_' + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error(
                '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.',
                callerName,
                callback
              );
            }
          };
          warnOnUndefinedDerivedState = function (type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || 'Component';
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error(
                  '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.',
                  componentName
                );
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, '_processChildContext', {
            enumerable: false,
            value: function () {
              throw new Error(
                "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)."
              );
            },
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(
          workInProgress2,
          ctor2,
          getDerivedStateFromProps,
          nextProps
        ) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor2, partialState);
          }
          var memoizedState =
            partialState === null || partialState === void 0
              ? prevState
              : assign2({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function (inst, payload, callback) {
            var fiber = get2(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, 'setState');
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function (inst, payload, callback) {
            var fiber = get2(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, 'replaceState');
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function (inst, callback) {
            var fiber = get2(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, 'forceUpdate');
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(fiber, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
              entangleTransitions(root3, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          },
        };
        function checkShouldComponentUpdate(
          workInProgress2,
          ctor2,
          oldProps,
          newProps,
          oldState,
          newState,
          nextContext
        ) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === 'function') {
            var shouldUpdate = instance.shouldComponentUpdate(
              newProps,
              newState,
              nextContext
            );
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(
                    newProps,
                    newState,
                    nextContext
                  );
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error(
                  '%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.',
                  getComponentNameFromType(ctor2) || 'Component'
                );
              }
            }
            return shouldUpdate;
          }
          if (ctor2.prototype && ctor2.prototype.isPureReactComponent) {
            return (
              !shallowEqual2(oldProps, newProps) ||
              !shallowEqual2(oldState, newState)
            );
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor2, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor2) || 'Component';
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (
                ctor2.prototype &&
                typeof ctor2.prototype.render === 'function'
              ) {
                error(
                  '%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?',
                  name
                );
              } else {
                error(
                  '%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.',
                  name
                );
              }
            }
            if (
              instance.getInitialState &&
              !instance.getInitialState.isReactClassApproved &&
              !instance.state
            ) {
              error(
                'getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?',
                name
              );
            }
            if (
              instance.getDefaultProps &&
              !instance.getDefaultProps.isReactClassApproved
            ) {
              error(
                'getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.',
                name
              );
            }
            if (instance.propTypes) {
              error(
                'propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.',
                name
              );
            }
            if (instance.contextType) {
              error(
                'contextType was defined as an instance property on %s. Use a static property to define contextType instead.',
                name
              );
            }
            {
              if (
                ctor2.childContextTypes &&
                !didWarnAboutLegacyContext$1.has(ctor2) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode
              ) {
                didWarnAboutLegacyContext$1.add(ctor2);
                error(
                  '%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context',
                  name
                );
              }
              if (
                ctor2.contextTypes &&
                !didWarnAboutLegacyContext$1.has(ctor2) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode
              ) {
                didWarnAboutLegacyContext$1.add(ctor2);
                error(
                  '%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context',
                  name
                );
              }
              if (instance.contextTypes) {
                error(
                  'contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.',
                  name
                );
              }
              if (
                ctor2.contextType &&
                ctor2.contextTypes &&
                !didWarnAboutContextTypeAndContextTypes.has(ctor2)
              ) {
                didWarnAboutContextTypeAndContextTypes.add(ctor2);
                error(
                  '%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.',
                  name
                );
              }
            }
            if (typeof instance.componentShouldUpdate === 'function') {
              error(
                '%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.',
                name
              );
            }
            if (
              ctor2.prototype &&
              ctor2.prototype.isPureReactComponent &&
              typeof instance.shouldComponentUpdate !== 'undefined'
            ) {
              error(
                '%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.',
                getComponentNameFromType(ctor2) || 'A pure component'
              );
            }
            if (typeof instance.componentDidUnmount === 'function') {
              error(
                '%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?',
                name
              );
            }
            if (typeof instance.componentDidReceiveProps === 'function') {
              error(
                '%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().',
                name
              );
            }
            if (typeof instance.componentWillRecieveProps === 'function') {
              error(
                '%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
                name
              );
            }
            if (
              typeof instance.UNSAFE_componentWillRecieveProps === 'function'
            ) {
              error(
                '%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',
                name
              );
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error(
                "%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
                name,
                name
              );
            }
            if (instance.defaultProps) {
              error(
                'Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.',
                name,
                name
              );
            }
            if (
              typeof instance.getSnapshotBeforeUpdate === 'function' &&
              typeof instance.componentDidUpdate !== 'function' &&
              !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor2)
            ) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor2);
              error(
                '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.',
                getComponentNameFromType(ctor2)
              );
            }
            if (typeof instance.getDerivedStateFromProps === 'function') {
              error(
                '%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.',
                name
              );
            }
            if (typeof instance.getDerivedStateFromError === 'function') {
              error(
                '%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.',
                name
              );
            }
            if (typeof ctor2.getSnapshotBeforeUpdate === 'function') {
              error(
                '%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.',
                name
              );
            }
            var _state = instance.state;
            if (_state && (typeof _state !== 'object' || isArray(_state))) {
              error('%s.state: must be set to an object or null', name);
            }
            if (
              typeof instance.getChildContext === 'function' &&
              typeof ctor2.childContextTypes !== 'object'
            ) {
              error(
                '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().',
                name
              );
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor2, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor2.contextType;
          {
            if ('contextType' in ctor2) {
              var isValid =
                // Allow null for conditional declaration
                contextType === null ||
                (contextType !== void 0 &&
                  contextType.$$typeof === REACT_CONTEXT_TYPE &&
                  contextType._context === void 0);
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor2)) {
                didWarnAboutInvalidateContextType.add(ctor2);
                var addendum = '';
                if (contextType === void 0) {
                  addendum =
                    ' However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.';
                } else if (typeof contextType !== 'object') {
                  addendum =
                    ' However, it is set to a ' + typeof contextType + '.';
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum =
                    ' Did you accidentally pass the Context.Provider instead?';
                } else if (contextType._context !== void 0) {
                  addendum =
                    ' Did you accidentally pass the Context.Consumer instead?';
                } else {
                  addendum =
                    ' However, it is set to an object with keys {' +
                    Object.keys(contextType).join(', ') +
                    '}.';
                }
                error(
                  '%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s',
                  getComponentNameFromType(ctor2) || 'Component',
                  addendum
                );
              }
            }
          }
          if (typeof contextType === 'object' && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor2, true);
            var contextTypes = ctor2.contextTypes;
            isLegacyContextConsumer =
              contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer
              ? getMaskedContext(workInProgress2, unmaskedContext)
              : emptyContextObject;
          }
          var instance = new ctor2(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor2(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = (workInProgress2.memoizedState =
            instance.state !== null && instance.state !== void 0
              ? instance.state
              : null);
          adoptClassInstance(workInProgress2, instance);
          {
            if (
              typeof ctor2.getDerivedStateFromProps === 'function' &&
              state === null
            ) {
              var componentName =
                getComponentNameFromType(ctor2) || 'Component';
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error(
                  '`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',
                  componentName,
                  instance.state === null ? 'null' : 'undefined',
                  componentName
                );
              }
            }
            if (
              typeof ctor2.getDerivedStateFromProps === 'function' ||
              typeof instance.getSnapshotBeforeUpdate === 'function'
            ) {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (
                typeof instance.componentWillMount === 'function' &&
                instance.componentWillMount.__suppressDeprecationWarning !==
                  true
              ) {
                foundWillMountName = 'componentWillMount';
              } else if (
                typeof instance.UNSAFE_componentWillMount === 'function'
              ) {
                foundWillMountName = 'UNSAFE_componentWillMount';
              }
              if (
                typeof instance.componentWillReceiveProps === 'function' &&
                instance.componentWillReceiveProps
                  .__suppressDeprecationWarning !== true
              ) {
                foundWillReceivePropsName = 'componentWillReceiveProps';
              } else if (
                typeof instance.UNSAFE_componentWillReceiveProps === 'function'
              ) {
                foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
              }
              if (
                typeof instance.componentWillUpdate === 'function' &&
                instance.componentWillUpdate.__suppressDeprecationWarning !==
                  true
              ) {
                foundWillUpdateName = 'componentWillUpdate';
              } else if (
                typeof instance.UNSAFE_componentWillUpdate === 'function'
              ) {
                foundWillUpdateName = 'UNSAFE_componentWillUpdate';
              }
              if (
                foundWillMountName !== null ||
                foundWillReceivePropsName !== null ||
                foundWillUpdateName !== null
              ) {
                var _componentName =
                  getComponentNameFromType(ctor2) || 'Component';
                var newApiName =
                  typeof ctor2.getDerivedStateFromProps === 'function'
                    ? 'getDerivedStateFromProps()'
                    : 'getSnapshotBeforeUpdate()';
                if (
                  !didWarnAboutLegacyLifecyclesAndDerivedState.has(
                    _componentName
                  )
                ) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(
                    _componentName
                  );
                  error(
                    'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles',
                    _componentName,
                    newApiName,
                    foundWillMountName !== null
                      ? '\n  ' + foundWillMountName
                      : '',
                    foundWillReceivePropsName !== null
                      ? '\n  ' + foundWillReceivePropsName
                      : '',
                    foundWillUpdateName !== null
                      ? '\n  ' + foundWillUpdateName
                      : ''
                  );
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === 'function') {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === 'function') {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error(
                "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
                getComponentNameFromFiber(workInProgress2) || 'Component'
              );
            }
            classComponentUpdater.enqueueReplaceState(
              instance,
              instance.state,
              null
            );
          }
        }
        function callComponentWillReceiveProps(
          workInProgress2,
          instance,
          newProps,
          nextContext
        ) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === 'function') {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName =
                getComponentNameFromFiber(workInProgress2) || 'Component';
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error(
                  "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
                  componentName
                );
              }
            }
            classComponentUpdater.enqueueReplaceState(
              instance,
              instance.state,
              null
            );
          }
        }
        function mountClassInstance(
          workInProgress2,
          ctor2,
          newProps,
          renderLanes2
        ) {
          {
            checkClassInstance(workInProgress2, ctor2, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = {};
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor2.contextType;
          if (typeof contextType === 'object' && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(
              workInProgress2,
              ctor2,
              true
            );
            instance.context = getMaskedContext(
              workInProgress2,
              unmaskedContext
            );
          }
          {
            if (instance.state === newProps) {
              var componentName =
                getComponentNameFromType(ctor2) || 'Component';
              if (
                !didWarnAboutDirectlyAssigningPropsToState.has(componentName)
              ) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error(
                  "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
                  componentName
                );
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(
                workInProgress2,
                instance
              );
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
                workInProgress2,
                instance
              );
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor2.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(
              workInProgress2,
              ctor2,
              getDerivedStateFromProps,
              newProps
            );
            instance.state = workInProgress2.memoizedState;
          }
          if (
            typeof ctor2.getDerivedStateFromProps !== 'function' &&
            typeof instance.getSnapshotBeforeUpdate !== 'function' &&
            (typeof instance.UNSAFE_componentWillMount === 'function' ||
              typeof instance.componentWillMount === 'function')
          ) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(
              workInProgress2,
              newProps,
              instance,
              renderLanes2
            );
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === 'function') {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(
          workInProgress2,
          ctor2,
          newProps,
          renderLanes2
        ) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor2.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === 'object' && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(
              workInProgress2,
              ctor2,
              true
            );
            nextContext = getMaskedContext(
              workInProgress2,
              nextLegacyUnmaskedContext
            );
          }
          var getDerivedStateFromProps = ctor2.getDerivedStateFromProps;
          var hasNewLifecycles =
            typeof getDerivedStateFromProps === 'function' ||
            typeof instance.getSnapshotBeforeUpdate === 'function';
          if (
            !hasNewLifecycles &&
            (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||
              typeof instance.componentWillReceiveProps === 'function')
          ) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(
                workInProgress2,
                instance,
                newProps,
                nextContext
              );
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = (instance.state = oldState);
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (
            oldProps === newProps &&
            oldState === newState &&
            !hasContextChanged() &&
            !checkHasForceUpdateAfterProcessing()
          ) {
            if (typeof instance.componentDidMount === 'function') {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(
              workInProgress2,
              ctor2,
              getDerivedStateFromProps,
              newProps
            );
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate =
            checkHasForceUpdateAfterProcessing() ||
            checkShouldComponentUpdate(
              workInProgress2,
              ctor2,
              oldProps,
              newProps,
              oldState,
              newState,
              nextContext
            );
          if (shouldUpdate) {
            if (
              !hasNewLifecycles &&
              (typeof instance.UNSAFE_componentWillMount === 'function' ||
                typeof instance.componentWillMount === 'function')
            ) {
              if (typeof instance.componentWillMount === 'function') {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === 'function') {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === 'function') {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === 'function') {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(
          current2,
          workInProgress2,
          ctor2,
          newProps,
          renderLanes2
        ) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps =
            workInProgress2.type === workInProgress2.elementType
              ? unresolvedOldProps
              : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor2.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === 'object' && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(
              workInProgress2,
              ctor2,
              true
            );
            nextContext = getMaskedContext(
              workInProgress2,
              nextUnmaskedContext
            );
          }
          var getDerivedStateFromProps = ctor2.getDerivedStateFromProps;
          var hasNewLifecycles =
            typeof getDerivedStateFromProps === 'function' ||
            typeof instance.getSnapshotBeforeUpdate === 'function';
          if (
            !hasNewLifecycles &&
            (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||
              typeof instance.componentWillReceiveProps === 'function')
          ) {
            if (
              unresolvedOldProps !== unresolvedNewProps ||
              oldContext !== nextContext
            ) {
              callComponentWillReceiveProps(
                workInProgress2,
                instance,
                newProps,
                nextContext
              );
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = (instance.state = oldState);
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (
            unresolvedOldProps === unresolvedNewProps &&
            oldState === newState &&
            !hasContextChanged() &&
            !checkHasForceUpdateAfterProcessing() &&
            !enableLazyContextPropagation
          ) {
            if (typeof instance.componentDidUpdate === 'function') {
              if (
                unresolvedOldProps !== current2.memoizedProps ||
                oldState !== current2.memoizedState
              ) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
              if (
                unresolvedOldProps !== current2.memoizedProps ||
                oldState !== current2.memoizedState
              ) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(
              workInProgress2,
              ctor2,
              getDerivedStateFromProps,
              newProps
            );
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate =
            checkHasForceUpdateAfterProcessing() ||
            checkShouldComponentUpdate(
              workInProgress2,
              ctor2,
              oldProps,
              newProps,
              oldState,
              newState,
              nextContext
            ) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
          if (shouldUpdate) {
            if (
              !hasNewLifecycles &&
              (typeof instance.UNSAFE_componentWillUpdate === 'function' ||
                typeof instance.componentWillUpdate === 'function')
            ) {
              if (typeof instance.componentWillUpdate === 'function') {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
                instance.UNSAFE_componentWillUpdate(
                  newProps,
                  newState,
                  nextContext
                );
              }
            }
            if (typeof instance.componentDidUpdate === 'function') {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === 'function') {
              if (
                unresolvedOldProps !== current2.memoizedProps ||
                oldState !== current2.memoizedState
              ) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
              if (
                unresolvedOldProps !== current2.memoizedProps ||
                oldState !== current2.memoizedState
              ) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null,
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null,
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : '';
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console['error'](error2);
              }
              var componentName = source
                ? getComponentNameFromFiber(source)
                : null;
              var componentNameMessage = componentName
                ? 'The above error occurred in the <' +
                  componentName +
                  '> component:'
                : 'The above error occurred in one of your React components:';
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage =
                  'Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
              } else {
                var errorBoundaryName =
                  getComponentNameFromFiber(boundary) || 'Anonymous';
                errorBoundaryMessage =
                  'React will try to recreate this component tree from scratch ' +
                  ('using the error boundary you provided, ' +
                    errorBoundaryName +
                    '.');
              }
              var combinedMessage =
                componentNameMessage +
                '\n' +
                componentStack +
                '\n\n' +
                ('' + errorBoundaryMessage);
              console['error'](combinedMessage);
            } else {
              console['error'](error2);
            }
          } catch (e) {
            setTimeout(function () {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null,
          };
          var error2 = errorInfo.value;
          update.callback = function () {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function () {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function () {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === 'function') {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== 'function') {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : '',
              });
              {
                if (typeof getDerivedStateFromError !== 'function') {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error(
                      '%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.',
                      getComponentNameFromFiber(fiber) || 'Unknown'
                    );
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root3, wakeable, lanes) {
          var pingCache = root3.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root3.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if (
            (sourceFiber.mode & ConcurrentMode) === NoMode &&
            (tag === FunctionComponent ||
              tag === ForwardRef ||
              tag === SimpleMemoComponent)
          ) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(
          suspenseBoundary,
          returnFiber,
          sourceFiber,
          root3,
          rootRenderLanes
        ) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(
          root3,
          returnFiber,
          sourceFiber,
          value,
          rootRenderLanes
        ) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root3, rootRenderLanes);
            }
          }
          if (
            value !== null &&
            typeof value === 'object' &&
            typeof value.then === 'function'
          ) {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary =
              getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(
                suspenseBoundary,
                returnFiber,
                sourceFiber,
                root3,
                rootRenderLanes
              );
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root3, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root3, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root3, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error(
                'A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.'
              );
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary =
                getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(
                  _suspenseBoundary,
                  returnFiber,
                  sourceFiber,
                  root3,
                  rootRenderLanes
                );
                queueHydrationError(
                  createCapturedValueAtFiber(value, sourceFiber)
                );
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(
                  workInProgress2,
                  _errorInfo,
                  lane
                );
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor2 = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if (
                  (workInProgress2.flags & DidCapture) === NoFlags &&
                  (typeof ctor2.getDerivedStateFromError === 'function' ||
                    (instance !== null &&
                      typeof instance.componentDidCatch === 'function' &&
                      !isAlreadyFailedLegacyErrorBoundary(instance)))
                ) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(
                    workInProgress2.lanes,
                    _lane
                  );
                  var _update = createClassErrorUpdate(
                    workInProgress2,
                    errorInfo,
                    _lane
                  );
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        var didWarnAboutDefaultPropsOnFunctionComponent;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
          didWarnAboutDefaultPropsOnFunctionComponent = {};
        }
        function reconcileChildren(
          current2,
          workInProgress2,
          nextChildren,
          renderLanes2
        ) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(
              workInProgress2,
              null,
              nextChildren,
              renderLanes2
            );
          } else {
            workInProgress2.child = reconcileChildFibers(
              workInProgress2,
              current2.child,
              nextChildren,
              renderLanes2
            );
          }
        }
        function forceUnmountCurrentAndReconcile(
          current2,
          workInProgress2,
          nextChildren,
          renderLanes2
        ) {
          workInProgress2.child = reconcileChildFibers(
            workInProgress2,
            current2.child,
            null,
            renderLanes2
          );
          workInProgress2.child = reconcileChildFibers(
            workInProgress2,
            null,
            nextChildren,
            renderLanes2
          );
        }
        function updateForwardRef(
          current2,
          workInProgress2,
          Component,
          nextProps,
          renderLanes2
        ) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  'prop',
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(
              current2,
              workInProgress2,
              render2,
              nextProps,
              ref,
              renderLanes2
            );
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(
                  current2,
                  workInProgress2,
                  render2,
                  nextProps,
                  ref,
                  renderLanes2
                );
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(
              current2,
              workInProgress2,
              renderLanes2
            );
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(
            current2,
            workInProgress2,
            nextChildren,
            renderLanes2
          );
          return workInProgress2.child;
        }
        function updateMemoComponent(
          current2,
          workInProgress2,
          Component,
          nextProps,
          renderLanes2
        ) {
          if (current2 === null) {
            var type = Component.type;
            if (
              isSimpleFunctionComponent(type) &&
              Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0
            ) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(
                current2,
                workInProgress2,
                resolvedType,
                nextProps,
                renderLanes2
              );
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  'prop',
                  getComponentNameFromType(type)
                );
              }
              if (Component.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(type) || 'Unknown';
                if (
                  !didWarnAboutDefaultPropsOnFunctionComponent[componentName]
                ) {
                  error(
                    '%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.',
                    componentName
                  );
                  didWarnAboutDefaultPropsOnFunctionComponent[
                    componentName
                  ] = true;
                }
              }
            }
            var child = createFiberFromTypeAndProps(
              Component.type,
              null,
              nextProps,
              workInProgress2,
              workInProgress2.mode,
              renderLanes2
            );
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(
                _innerPropTypes,
                nextProps,
                // Resolved props
                'prop',
                getComponentNameFromType(_type)
              );
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(
            current2,
            renderLanes2
          );
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual2;
            if (
              compare(prevProps, nextProps) &&
              current2.ref === workInProgress2.ref
            ) {
              return bailoutOnAlreadyFinishedWork(
                current2,
                workInProgress2,
                renderLanes2
              );
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(
          current2,
          workInProgress2,
          Component,
          nextProps,
          renderLanes2
        ) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    nextProps,
                    // Resolved (SimpleMemoComponent has no defaultProps)
                    'prop',
                    getComponentNameFromType(outerMemoType)
                  );
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (
              shallowEqual2(prevProps, nextProps) &&
              current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type
            ) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
              } else if (
                (current2.flags & ForceUpdateForLegacySuspense) !==
                NoFlags
              ) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(
            current2,
            workInProgress2,
            Component,
            nextProps,
            renderLanes2
          );
        }
        function updateOffscreenComponent(
          current2,
          workInProgress2,
          renderLanes2
        ) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === 'hidden' || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null,
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes =
                laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null,
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null,
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 =
                prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(
                prevState.baseLanes,
                renderLanes2
              );
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(
            current2,
            workInProgress2,
            nextChildren,
            renderLanes2
          );
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(
            current2,
            workInProgress2,
            nextChildren,
            renderLanes2
          );
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(
            current2,
            workInProgress2,
            nextChildren,
            renderLanes2
          );
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(
            current2,
            workInProgress2,
            nextChildren,
            renderLanes2
          );
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (
            (current2 === null && ref !== null) ||
            (current2 !== null && current2.ref !== ref)
          ) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(
          current2,
          workInProgress2,
          Component,
          nextProps,
          renderLanes2
        ) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  'prop',
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(
              workInProgress2,
              Component,
              true
            );
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(
              current2,
              workInProgress2,
              Component,
              nextProps,
              context,
              renderLanes2
            );
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(
                  current2,
                  workInProgress2,
                  Component,
                  nextProps,
                  context,
                  renderLanes2
                );
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(
              current2,
              workInProgress2,
              renderLanes2
            );
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(
            current2,
            workInProgress2,
            nextChildren,
            renderLanes2
          );
          return workInProgress2.child;
        }
        function updateClassComponent(
          current2,
          workInProgress2,
          Component,
          nextProps,
          renderLanes2
        ) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor2 = workInProgress2.type;
                var tempInstance = new ctor2(
                  workInProgress2.memoizedProps,
                  _instance.context
                );
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error('Simulated error coming from DevTools');
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(
                  workInProgress2,
                  createCapturedValueAtFiber(error$1, workInProgress2),
                  lane
                );
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  'prop',
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(
              workInProgress2,
              Component,
              nextProps,
              renderLanes2
            );
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(
              workInProgress2,
              Component,
              nextProps,
              renderLanes2
            );
          } else {
            shouldUpdate = updateClassInstance(
              current2,
              workInProgress2,
              Component,
              nextProps,
              renderLanes2
            );
          }
          var nextUnitOfWork = finishClassComponent(
            current2,
            workInProgress2,
            Component,
            shouldUpdate,
            hasContext,
            renderLanes2
          );
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error(
                  'It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.',
                  getComponentNameFromFiber(workInProgress2) || 'a component'
                );
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(
          current2,
          workInProgress2,
          Component,
          shouldUpdate,
          hasContext,
          renderLanes2
        ) {
          markRef(current2, workInProgress2);
          var didCaptureError =
            (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(
              current2,
              workInProgress2,
              renderLanes2
            );
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (
            didCaptureError &&
            typeof Component.getDerivedStateFromError !== 'function'
          ) {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(
              current2,
              workInProgress2,
              nextChildren,
              renderLanes2
            );
          } else {
            reconcileChildren(
              current2,
              workInProgress2,
              nextChildren,
              renderLanes2
            );
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root3 = workInProgress2.stateNode;
          if (root3.pendingContext) {
            pushTopLevelContextObject(
              workInProgress2,
              root3.pendingContext,
              root3.pendingContext !== root3.context
            );
          } else if (root3.context) {
            pushTopLevelContextObject(workInProgress2, root3.context, false);
          }
          pushHostContainer(workInProgress2, root3.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error(
              'Should have a current fiber. This is a bug in React.'
            );
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root3 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions,
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(
                new Error(
                  'There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.'
                ),
                workInProgress2
              );
              return mountHostRootWithoutHydrating(
                current2,
                workInProgress2,
                nextChildren,
                renderLanes2,
                recoverableError
              );
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(
                new Error(
                  'This root received an early update, before anything was able hydrate. Switched the entire root to client rendering.'
                ),
                workInProgress2
              );
              return mountHostRootWithoutHydrating(
                current2,
                workInProgress2,
                nextChildren,
                renderLanes2,
                _recoverableError
              );
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(
                workInProgress2,
                null,
                nextChildren,
                renderLanes2
              );
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = (node.flags & ~Placement) | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(
                current2,
                workInProgress2,
                renderLanes2
              );
            }
            reconcileChildren(
              current2,
              workInProgress2,
              nextChildren,
              renderLanes2
            );
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(
          current2,
          workInProgress2,
          nextChildren,
          renderLanes2,
          recoverableError
        ) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(
            current2,
            workInProgress2,
            nextChildren,
            renderLanes2
          );
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (
            prevProps !== null &&
            shouldSetTextContent(type, prevProps)
          ) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(
            current2,
            workInProgress2,
            nextChildren,
            renderLanes2
          );
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(
          _current,
          workInProgress2,
          elementType,
          renderLanes2
        ) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = (workInProgress2.tag =
            resolveLazyComponentTag(Component));
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component =
                  resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(
                null,
                workInProgress2,
                Component,
                resolvedProps,
                renderLanes2
              );
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component =
                  resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(
                null,
                workInProgress2,
                Component,
                resolvedProps,
                renderLanes2
              );
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component =
                  resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(
                null,
                workInProgress2,
                Component,
                resolvedProps,
                renderLanes2
              );
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      resolvedProps,
                      // Resolved for outer only
                      'prop',
                      getComponentNameFromType(Component)
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component,
                resolveDefaultProps(Component.type, resolvedProps),
                // The inner type can have defaults too
                renderLanes2
              );
              return child;
            }
          }
          var hint = '';
          {
            if (
              Component !== null &&
              typeof Component === 'object' &&
              Component.$$typeof === REACT_LAZY_TYPE
            ) {
              hint =
                ' Did you wrap a component in React.lazy() more than once?';
            }
          }
          throw new Error(
            'Element type is invalid. Received a promise that resolves to: ' +
              Component +
              '. ' +
              ('Lazy element type must resolve to a class or function.' + hint)
          );
        }
        function mountIncompleteClassComponent(
          _current,
          workInProgress2,
          Component,
          nextProps,
          renderLanes2
        ) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(
            workInProgress2,
            Component,
            nextProps,
            renderLanes2
          );
          return finishClassComponent(
            null,
            workInProgress2,
            Component,
            true,
            hasContext,
            renderLanes2
          );
        }
        function mountIndeterminateComponent(
          _current,
          workInProgress2,
          Component,
          renderLanes2
        ) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(
              workInProgress2,
              Component,
              false
            );
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (
              Component.prototype &&
              typeof Component.prototype.render === 'function'
            ) {
              var componentName =
                getComponentNameFromType(Component) || 'Unknown';
              if (!didWarnAboutBadClass[componentName]) {
                error(
                  "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
                  componentName,
                  componentName
                );
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(
                workInProgress2,
                null
              );
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(
              null,
              workInProgress2,
              Component,
              props,
              context,
              renderLanes2
            );
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (
              typeof value === 'object' &&
              value !== null &&
              typeof value.render === 'function' &&
              value.$$typeof === void 0
            ) {
              var _componentName =
                getComponentNameFromType(Component) || 'Unknown';
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error(
                  "The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",
                  _componentName,
                  _componentName,
                  _componentName
                );
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === 'object' &&
            value !== null &&
            typeof value.render === 'function' &&
            value.$$typeof === void 0
          ) {
            {
              var _componentName2 =
                getComponentNameFromType(Component) || 'Unknown';
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error(
                  "The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",
                  _componentName2,
                  _componentName2,
                  _componentName2
                );
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState =
              value.state !== null && value.state !== void 0
                ? value.state
                : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(
              null,
              workInProgress2,
              Component,
              true,
              hasContext,
              renderLanes2
            );
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(
                    null,
                    workInProgress2,
                    Component,
                    props,
                    context,
                    renderLanes2
                  );
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error(
                  '%s(...): childContextTypes cannot be defined on a function component.',
                  Component.displayName || Component.name || 'Component'
                );
              }
            }
            if (workInProgress2.ref !== null) {
              var info = '';
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += '\n\nCheck the render method of `' + ownerName + '`.';
              }
              var warningKey = ownerName || '';
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey =
                  debugSource.fileName + ':' + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error(
                  'Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s',
                  info
                );
              }
            }
            if (Component.defaultProps !== void 0) {
              var componentName =
                getComponentNameFromType(Component) || 'Unknown';
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error(
                  '%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.',
                  componentName
                );
                didWarnAboutDefaultPropsOnFunctionComponent[
                  componentName
                ] = true;
              }
            }
            if (typeof Component.getDerivedStateFromProps === 'function') {
              var _componentName3 =
                getComponentNameFromType(Component) || 'Unknown';
              if (
                !didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]
              ) {
                error(
                  '%s: Function components do not support getDerivedStateFromProps.',
                  _componentName3
                );
                didWarnAboutGetDerivedStateOnFunctionComponent[
                  _componentName3
                ] = true;
              }
            }
            if (
              typeof Component.contextType === 'object' &&
              Component.contextType !== null
            ) {
              var _componentName4 =
                getComponentNameFromType(Component) || 'Unknown';
              if (
                !didWarnAboutContextTypeOnFunctionComponent[_componentName4]
              ) {
                error(
                  '%s: Function components do not support contextType.',
                  _componentName4
                );
                didWarnAboutContextTypeOnFunctionComponent[
                  _componentName4
                ] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane,
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null,
          };
        }
        function updateSuspenseOffscreenState(
          prevOffscreenState,
          renderLanes2
        ) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions,
          };
        }
        function shouldRemainOnFallback(
          suspenseContext,
          current2,
          workInProgress2,
          renderLanes2
        ) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(
          current2,
          workInProgress2,
          renderLanes2
        ) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(
                  suspenseContext,
                  InvisibleParentSuspenseContext
                );
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(
                  workInProgress2,
                  dehydrated
                );
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(
                workInProgress2,
                nextPrimaryChildren,
                nextFallbackChildren,
                renderLanes2
              );
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState =
                mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(
                workInProgress2,
                nextPrimaryChildren
              );
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(
                  current2,
                  workInProgress2,
                  didSuspend,
                  nextProps,
                  _dehydrated,
                  prevState,
                  renderLanes2
                );
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(
                current2,
                workInProgress2,
                _nextPrimaryChildren,
                _nextFallbackChildren,
                renderLanes2
              );
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState =
                prevOffscreenState === null
                  ? mountSuspenseOffscreenState(renderLanes2)
                  : updateSuspenseOffscreenState(
                      prevOffscreenState,
                      renderLanes2
                    );
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(
                current2,
                renderLanes2
              );
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(
                current2,
                workInProgress2,
                _nextPrimaryChildren2,
                renderLanes2
              );
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(
          workInProgress2,
          primaryChildren,
          renderLanes2
        ) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren,
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(
            primaryChildProps,
            mode
          );
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(
          workInProgress2,
          primaryChildren,
          fallbackChildren,
          renderLanes2
        ) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren,
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if (
            (mode & ConcurrentMode) === NoMode &&
            progressedPrimaryFragment !== null
          ) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(
              fallbackChildren,
              mode,
              renderLanes2,
              null
            );
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(
              primaryChildProps,
              mode
            );
            fallbackChildFragment = createFiberFromFragment(
              fallbackChildren,
              mode,
              renderLanes2,
              null
            );
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(
          offscreenProps,
          mode,
          renderLanes2
        ) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(
          current2,
          workInProgress2,
          primaryChildren,
          renderLanes2
        ) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment =
            currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(
            currentPrimaryChildFragment,
            {
              mode: 'visible',
              children: primaryChildren,
            }
          );
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(
          current2,
          workInProgress2,
          primaryChildren,
          fallbackChildren,
          renderLanes2
        ) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment =
            currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren,
          };
          var primaryChildFragment;
          if (
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
            // already cloned. In legacy mode, the only case where this isn't true is
            // when DevTools forces us to display a fallback; we skip the first render
            // pass entirely and go straight to rendering the fallback. (In Concurrent
            // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
            // only codepath.)
            workInProgress2.child !== currentPrimaryChildFragment
          ) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration =
                currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration =
                currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(
              currentPrimaryChildFragment,
              primaryChildProps
            );
            primaryChildFragment.subtreeFlags =
              currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(
              currentFallbackChildFragment,
              fallbackChildren
            );
          } else {
            fallbackChildFragment = createFiberFromFragment(
              fallbackChildren,
              mode,
              renderLanes2,
              null
            );
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(
          current2,
          workInProgress2,
          renderLanes2,
          recoverableError
        ) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(
            workInProgress2,
            current2.child,
            null,
            renderLanes2
          );
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(
            workInProgress2,
            primaryChildren
          );
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(
          current2,
          workInProgress2,
          primaryChildren,
          fallbackChildren,
          renderLanes2
        ) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren,
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(
            primaryChildProps,
            fiberMode
          );
          var fallbackChildFragment = createFiberFromFragment(
            fallbackChildren,
            fiberMode,
            renderLanes2,
            null
          );
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(
              workInProgress2,
              current2.child,
              null,
              renderLanes2
            );
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(
          workInProgress2,
          suspenseInstance,
          renderLanes2
        ) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error(
                'Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.'
              );
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(
          current2,
          workInProgress2,
          didSuspend,
          nextProps,
          suspenseInstance,
          suspenseState,
          renderLanes2
        ) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2,
                // TODO: When we delete legacy mode, we should make this error argument
                // required — every concurrent mode path that causes hydration to
                // de-opt to client rendering should have an error message.
                null
              );
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF =
                  getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error(
                  'The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.'
                );
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2,
                capturedValue
              );
            }
            var hasContextChanged2 = includesSomeLane(
              renderLanes2,
              current2.childLanes
            );
            if (didReceiveUpdate || hasContextChanged2) {
              var root3 = getWorkInProgressRoot();
              if (root3 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(
                  root3,
                  renderLanes2
                );
                if (
                  attemptHydrationAtLane !== NoLane &&
                  attemptHydrationAtLane !== suspenseState.retryLane
                ) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(
                    current2,
                    attemptHydrationAtLane
                  );
                  scheduleUpdateOnFiber(
                    root3,
                    current2,
                    attemptHydrationAtLane,
                    eventTime
                  );
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(
                new Error(
                  'This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition.'
                )
              );
              return retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2,
                _capturedValue
              );
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(
                workInProgress2,
                suspenseInstance,
                suspenseState.treeContext
              );
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(
                workInProgress2,
                primaryChildren
              );
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(
                new Error(
                  'There was an error while hydrating this Suspense boundary. Switched to client rendering.'
                )
              );
              return retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2,
                _capturedValue2
              );
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment =
                mountSuspenseFallbackAfterRetryWithoutHydrating(
                  current2,
                  workInProgress2,
                  nextPrimaryChildren,
                  nextFallbackChildren,
                  renderLanes2
                );
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState =
                mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(
          fiber,
          renderLanes2,
          propagationRoot
        ) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(
            fiber.return,
            renderLanes2,
            propagationRoot
          );
        }
        function propagateSuspenseContextChange(
          workInProgress2,
          firstChild,
          renderLanes2
        ) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(
                  node,
                  renderLanes2,
                  workInProgress2
                );
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (
              currentRow !== null &&
              findFirstSuspended(currentRow) === null
            ) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (
              revealOrder !== void 0 &&
              revealOrder !== 'forwards' &&
              revealOrder !== 'backwards' &&
              revealOrder !== 'together' &&
              !didWarnAboutRevealOrder[revealOrder]
            ) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === 'string') {
                switch (revealOrder.toLowerCase()) {
                  case 'together':
                  case 'forwards':
                  case 'backwards': {
                    error(
                      '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
                      revealOrder,
                      revealOrder.toLowerCase()
                    );
                    break;
                  }
                  case 'forward':
                  case 'backward': {
                    error(
                      '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
                      revealOrder,
                      revealOrder.toLowerCase()
                    );
                    break;
                  }
                  default:
                    error(
                      '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                      revealOrder
                    );
                    break;
                }
              } else {
                error(
                  '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                  revealOrder
                );
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error(
                  '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',
                  tailMode
                );
              } else if (
                revealOrder !== 'forwards' &&
                revealOrder !== 'backwards'
              ) {
                didWarnAboutTailOptions[tailMode] = true;
                error(
                  '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
                  tailMode
                );
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable =
              !isAnArray && typeof getIteratorFn(childSlot) === 'function';
            if (isAnArray || isIterable) {
              var type = isAnArray ? 'array' : 'iterable';
              error(
                'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>',
                type,
                index2,
                type
              );
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if (
              (revealOrder === 'forwards' || revealOrder === 'backwards') &&
              children !== void 0 &&
              children !== null &&
              children !== false
            ) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error(
                    'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
                    revealOrder
                  );
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(
          workInProgress2,
          isBackwards,
          tail,
          lastContentRow,
          tailMode
        ) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode,
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(
          current2,
          workInProgress2,
          renderLanes2
        ) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(
            current2,
            workInProgress2,
            newChildren,
            renderLanes2
          );
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(
            suspenseContext,
            ForceSuspenseFallback
          );
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(
              suspenseContext,
              ForceSuspenseFallback
            );
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore =
              current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(
                workInProgress2,
                workInProgress2.child,
                renderLanes2
              );
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case 'forwards': {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  tail,
                  lastContentRow,
                  tailMode
                );
                break;
              }
              case 'backwards': {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (
                    currentRow !== null &&
                    findFirstSuspended(currentRow) === null
                  ) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  // isBackwards
                  _tail,
                  null,
                  // last
                  tailMode
                );
                break;
              }
              case 'together': {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  null,
                  // tail
                  null,
                  // last
                  void 0
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(
          current2,
          workInProgress2,
          renderLanes2
        ) {
          pushHostContainer(
            workInProgress2,
            workInProgress2.stateNode.containerInfo
          );
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(
              workInProgress2,
              null,
              nextChildren,
              renderLanes2
            );
          } else {
            reconcileChildren(
              current2,
              workInProgress2,
              nextChildren,
              renderLanes2
            );
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(
          current2,
          workInProgress2,
          renderLanes2
        ) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!('value' in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error(
                  'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?'
                );
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(
                providerPropTypes,
                newProps,
                'prop',
                'Context.Provider'
              );
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (
                  oldProps.children === newProps.children &&
                  !hasContextChanged()
                ) {
                  return bailoutOnAlreadyFinishedWork(
                    current2,
                    workInProgress2,
                    renderLanes2
                  );
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(
            current2,
            workInProgress2,
            newChildren,
            renderLanes2
          );
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(
          current2,
          workInProgress2,
          renderLanes2
        ) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error(
                    'Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?'
                  );
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== 'function') {
              error(
                "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
              );
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(
            current2,
            workInProgress2,
            newChildren,
            renderLanes2
          );
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(
          current2,
          workInProgress2
        ) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(
          current2,
          workInProgress2,
          renderLanes2
        ) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error('Cannot swap the root fiber.');
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error('Expected parent to have a child.');
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error('Expected to find the previous sibling.');
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(
          current2,
          workInProgress2,
          renderLanes2
        ) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root3 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              );
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(
                  renderLanes2,
                  workInProgress2.childLanes
                );
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(
                    workInProgress2,
                    setDefaultShallowSuspenseContext(
                      suspenseStackCursor.current
                    )
                  );
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(
                    current2,
                    workInProgress2,
                    renderLanes2
                  );
                } else {
                  pushSuspenseContext(
                    workInProgress2,
                    setDefaultShallowSuspenseContext(
                      suspenseStackCursor.current
                    )
                  );
                  var child = bailoutOnAlreadyFinishedWork(
                    current2,
                    workInProgress2,
                    renderLanes2
                  );
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(
                  workInProgress2,
                  setDefaultShallowSuspenseContext(suspenseStackCursor.current)
                );
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(
                renderLanes2,
                workInProgress2.childLanes
              );
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(
                    current2,
                    workInProgress2,
                    renderLanes2
                  );
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(
                current2,
                workInProgress2,
                renderLanes2
              );
            }
          }
          return bailoutOnAlreadyFinishedWork(
            current2,
            workInProgress2,
            renderLanes2
          );
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(
                current2,
                workInProgress2,
                createFiberFromTypeAndProps(
                  workInProgress2.type,
                  workInProgress2.key,
                  workInProgress2.pendingProps,
                  workInProgress2._debugOwner || null,
                  workInProgress2.mode,
                  workInProgress2.lanes
                )
              );
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (
              oldProps !== newProps ||
              hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type
            ) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(
                current2,
                renderLanes2
              );
              if (
                !hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags
              ) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(
                current2,
                workInProgress2,
                workInProgress2.type,
                renderLanes2
              );
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(
                current2,
                workInProgress2,
                elementType,
                renderLanes2
              );
            }
            case FunctionComponent: {
              var Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps =
                workInProgress2.elementType === Component
                  ? unresolvedProps
                  : resolveDefaultProps(Component, unresolvedProps);
              return updateFunctionComponent(
                current2,
                workInProgress2,
                Component,
                resolvedProps,
                renderLanes2
              );
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps =
                workInProgress2.elementType === _Component
                  ? _unresolvedProps
                  : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(
                current2,
                workInProgress2,
                _Component,
                _resolvedProps,
                renderLanes2
              );
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(
                current2,
                workInProgress2,
                renderLanes2
              );
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(
                current2,
                workInProgress2,
                renderLanes2
              );
            case HostPortal:
              return updatePortalComponent(
                current2,
                workInProgress2,
                renderLanes2
              );
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 =
                workInProgress2.elementType === type
                  ? _unresolvedProps2
                  : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(
                current2,
                workInProgress2,
                type,
                _resolvedProps2,
                renderLanes2
              );
            }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(
                current2,
                workInProgress2,
                renderLanes2
              );
            case ContextConsumer:
              return updateContextConsumer(
                current2,
                workInProgress2,
                renderLanes2
              );
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(
                _type2,
                _unresolvedProps3
              );
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      _resolvedProps3,
                      // Resolved for outer only
                      'prop',
                      getComponentNameFromType(_type2)
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(
                _type2.type,
                _resolvedProps3
              );
              return updateMemoComponent(
                current2,
                workInProgress2,
                _type2,
                _resolvedProps3,
                renderLanes2
              );
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(
                current2,
                workInProgress2,
                workInProgress2.type,
                workInProgress2.pendingProps,
                renderLanes2
              );
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 =
                workInProgress2.elementType === _Component2
                  ? _unresolvedProps4
                  : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(
                current2,
                workInProgress2,
                _Component2,
                _resolvedProps4,
                renderLanes2
              );
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(
                current2,
                workInProgress2,
                renderLanes2
              );
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(
                current2,
                workInProgress2,
                renderLanes2
              );
            }
          }
          throw new Error(
            'Unknown unit of work tag (' +
              workInProgress2.tag +
              '). This error is likely caused by a bug in React. Please file an issue.'
          );
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function (
            parent,
            workInProgress2,
            needsVisibilityToggle,
            isHidden
          ) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal);
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function (current2, workInProgress2) {};
          updateHostComponent$1 = function (
            current2,
            workInProgress2,
            type,
            newProps,
            rootContainerInstance
          ) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(
              instance,
              type,
              oldProps,
              newProps,
              rootContainerInstance,
              currentHostContext
            );
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function (
            current2,
            workInProgress2,
            oldText,
            newText
          ) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case 'hidden': {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case 'collapsed': {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout =
            completedWork.alternate !== null &&
            completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(
                  newChildLanes,
                  mergeLanes(child.lanes, child.childLanes)
                );
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(
                  newChildLanes,
                  mergeLanes(_child.lanes, _child.childLanes)
                );
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(
                  newChildLanes,
                  mergeLanes(_child2.lanes, _child2.childLanes)
                );
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(
                  newChildLanes,
                  mergeLanes(_child3.lanes, _child3.childLanes)
                );
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(
          current2,
          workInProgress2,
          nextState
        ) {
          if (
            hasUnhydratedTailNodes() &&
            (workInProgress2.mode & ConcurrentMode) !== NoMode &&
            (workInProgress2.flags & DidCapture) === NoFlags
          ) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |=
              ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error(
                  'A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.'
                );
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -=
                        primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -=
                        _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (
                      // Check if this is a client root
                      !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                      (workInProgress2.flags & ForceClientRender) !== NoFlags
                    ) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(
                  current2,
                  workInProgress2,
                  type,
                  newProps,
                  rootContainerInstance
                );
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error(
                      'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'
                    );
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (
                    prepareToHydrateHostInstance(
                      workInProgress2,
                      rootContainerInstance,
                      currentHostContext
                    )
                  ) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(
                    type,
                    newProps,
                    rootContainerInstance,
                    currentHostContext,
                    workInProgress2
                  );
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (
                    finalizeInitialChildren(
                      instance,
                      type,
                      newProps,
                      rootContainerInstance
                    )
                  ) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== 'string') {
                  if (workInProgress2.stateNode === null) {
                    throw new Error(
                      'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'
                    );
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(
                    newText,
                    _rootContainerInstance,
                    _currentHostContext,
                    workInProgress2
                  );
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (
                current2 === null ||
                (current2.memoizedState !== null &&
                  current2.memoizedState.dehydrated !== null)
              ) {
                var fallthroughToNormalSuspensePath =
                  completeDehydratedSuspenseBoundary(
                    current2,
                    workInProgress2,
                    nextState
                  );
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout =
                current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext =
                      current2 === null &&
                      (workInProgress2.memoizedProps
                        .unstable_avoidThisFallback !== true ||
                        !enableSuspenseAvoidThisFallback);
                    if (
                      hasInvisibleChildContext ||
                      hasSuspenseContext(
                        suspenseStackCursor.current,
                        InvisibleParentSuspenseContext
                      )
                    ) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -=
                        primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready =
                (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended =
                    renderHasNotSuspendedYet() &&
                    (current2 === null ||
                      (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(
                          workInProgress2,
                          setShallowSuspenseContext(
                            suspenseStackCursor.current,
                            ForceSuspenseFallback
                          )
                        );
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (
                    renderState.tail !== null &&
                    now() > getRenderTargetTime()
                  ) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (
                      renderState.tail === null &&
                      renderState.tailMode === 'hidden' &&
                      !renderedTail.alternate &&
                      !getIsHydrating()
                    ) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (
                    // The time it took to render last row is greater than the remaining
                    // time we have to render. So rendering one more row would likely
                    // exceed it.
                    now() * 2 - renderState.renderingStartTime >
                      getRenderTargetTime() &&
                    renderLanes2 !== OffscreenLane
                  ) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(
                    suspenseContext,
                    ForceSuspenseFallback
                  );
                } else {
                  suspenseContext =
                    setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (
                  prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden
                ) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (
                !nextIsHidden ||
                (workInProgress2.mode & ConcurrentMode) === NoMode
              ) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error(
            'Unknown unit of work tag (' +
              workInProgress2.tag +
              '). This error is likely caused by a bug in React. Please file an issue.'
          );
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = (flags & ~ShouldCapture) | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root3 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if (
                (_flags & ShouldCapture) !== NoFlags &&
                (_flags & DidCapture) === NoFlags
              ) {
                workInProgress2.flags = (_flags & ~ShouldCapture) | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error(
                    'Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.'
                  );
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = (_flags2 & ~ShouldCapture) | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(
          current2,
          interruptedWork,
          renderLanes2
        ) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root3 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function () {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function (current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(
          current2,
          nearestMountedAncestor
        ) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(
          current2,
          nearestMountedAncestor,
          instance
        ) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(
          current2,
          nearestMountedAncestor,
          instance
        ) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === 'function') {
              var retVal;
              try {
                if (
                  enableProfilerTimer &&
                  enableProfilerCommitHooks &&
                  current2.mode & ProfileMode
                ) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(
                  current2,
                  nearestMountedAncestor,
                  error2
                );
              }
              {
                if (typeof retVal === 'function') {
                  error(
                    'Unexpected return value from a callback ref in %s. A callback ref should not return a function.',
                    getComponentNameFromFiber(current2)
                  );
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root3, firstChild) {
          focusedInstanceHandle = prepareForCommit(root3.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if (
              (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags &&
              child !== null
            ) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (
                      finishedWork.type === finishedWork.elementType &&
                      !didWarnAboutReassigningProps
                    ) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error(
                          'Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.',
                          getComponentNameFromFiber(finishedWork) || 'instance'
                        );
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error(
                          'Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.',
                          getComponentNameFromFiber(finishedWork) || 'instance'
                        );
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(
                    finishedWork.elementType === finishedWork.type
                      ? prevProps
                      : resolveDefaultProps(finishedWork.type, prevProps),
                    prevState
                  );
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (
                      snapshot === void 0 &&
                      !didWarnSet.has(finishedWork.type)
                    ) {
                      didWarnSet.add(finishedWork.type);
                      error(
                        '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.',
                        getComponentNameFromFiber(finishedWork)
                      );
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root3 = finishedWork.stateNode;
                  clearContainer(root3.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error(
                  'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                );
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(
          flags,
          finishedWork,
          nearestMountedAncestor
        ) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(
                    finishedWork,
                    nearestMountedAncestor,
                    destroy
                  );
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create2 = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create2();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== 'function') {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) {
                      hookName = 'useLayoutEffect';
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = 'useInsertionEffect';
                    } else {
                      hookName = 'useEffect';
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum =
                        ' You returned null. If your effect does not require clean up, return undefined (or nothing).';
                    } else if (typeof destroy.then === 'function') {
                      addendum =
                        '\n\nIt looks like you wrote ' +
                        hookName +
                        '(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n' +
                        hookName +
                        "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = ' You returned: ' + destroy;
                    }
                    error(
                      '%s must not return anything besides a function, which is used for clean-up.%s',
                      hookName,
                      addendum
                    );
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration =
                    finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps,
                    id = _finishedWork$memoize.id,
                    onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase =
                    finishedWork.alternate === null ? 'mount' : 'update';
                  {
                    if (isCurrentUpdateNested()) {
                      phase = 'nested-update';
                    }
                  }
                  if (typeof onPostCommit === 'function') {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer: while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root3 = parentFiber.stateNode;
                        root3.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration +=
                          passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(
          finishedRoot,
          current2,
          finishedWork,
          committedLanes
        ) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(
                        Layout | HasEffect,
                        finishedWork
                      );
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (
                          finishedWork.type === finishedWork.elementType &&
                          !didWarnAboutReassigningProps
                        ) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error(
                              'Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.',
                              getComponentNameFromFiber(finishedWork) ||
                                'instance'
                            );
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error(
                              'Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.',
                              getComponentNameFromFiber(finishedWork) ||
                                'instance'
                            );
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps =
                        finishedWork.elementType === finishedWork.type
                          ? current2.memoizedProps
                          : resolveDefaultProps(
                              finishedWork.type,
                              current2.memoizedProps
                            );
                      var prevState = current2.memoizedState;
                      {
                        if (
                          finishedWork.type === finishedWork.elementType &&
                          !didWarnAboutReassigningProps
                        ) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error(
                              'Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.',
                              getComponentNameFromFiber(finishedWork) ||
                                'instance'
                            );
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error(
                              'Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.',
                              getComponentNameFromFiber(finishedWork) ||
                                'instance'
                            );
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(
                            prevProps,
                            prevState,
                            instance.__reactInternalSnapshotBeforeUpdate
                          );
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(
                          prevProps,
                          prevState,
                          instance.__reactInternalSnapshotBeforeUpdate
                        );
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (
                      finishedWork.type === finishedWork.elementType &&
                      !didWarnAboutReassigningProps
                    ) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error(
                          'Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.',
                          getComponentNameFromFiber(finishedWork) || 'instance'
                        );
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error(
                          'Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.',
                          getComponentNameFromFiber(finishedWork) || 'instance'
                        );
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(
                          finishedWork.child.stateNode
                        );
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps,
                    onCommit = _finishedWork$memoize2.onCommit,
                    onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? 'mount' : 'update';
                  {
                    if (isCurrentUpdateNested()) {
                      phase = 'nested-update';
                    }
                  }
                  if (typeof onRender === 'function') {
                    onRender(
                      finishedWork.memoizedProps.id,
                      phase,
                      finishedWork.actualDuration,
                      finishedWork.treeBaseDuration,
                      finishedWork.actualStartTime,
                      commitTime2
                    );
                  }
                  {
                    if (typeof onCommit === 'function') {
                      onCommit(
                        finishedWork.memoizedProps.id,
                        phase,
                        effectDuration,
                        commitTime2
                      );
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root3 = parentFiber.stateNode;
                          root3.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error(
                  'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                );
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === 'function') {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(
                      finishedWork,
                      finishedWork.return,
                      error2
                    );
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(
                      finishedWork,
                      finishedWork.return,
                      error2
                    );
                  }
                }
              } else if (
                (node.tag === OffscreenComponent ||
                  node.tag === LegacyHiddenComponent) &&
                node.memoizedState !== null &&
                node !== finishedWork
              );
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === 'function') {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === 'function') {
                  error(
                    'Unexpected return value from a callback ref in %s. A callback ref should not return a function.',
                    getComponentNameFromFiber(finishedWork)
                  );
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty('current')) {
                  error(
                    'Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().',
                    getComponentNameFromFiber(finishedWork)
                  );
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error(
            'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'
          );
        }
        function isHostParent(fiber) {
          return (
            fiber.tag === HostComponent ||
            fiber.tag === HostRoot ||
            fiber.tag === HostPortal
          );
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings: while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (
              node.tag !== HostComponent &&
              node.tag !== HostText &&
              node.tag !== DehydratedFragment
            ) {
              if (node.flags & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.flags & Placement)) {
              return node.stateNode;
            }
          }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before2 = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before2, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(
                finishedWork,
                _before,
                _parent
              );
              break;
            }
            // eslint-disable-next-line-no-fallthrough
            default:
              throw new Error(
                'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.'
              );
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(
          node,
          before2,
          parent
        ) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before2) {
              insertInContainerBefore(parent, stateNode, before2);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal);
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before2, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(
                  sibling,
                  before2,
                  parent
                );
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before2, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before2) {
              insertBefore(parent, stateNode, before2);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal);
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before2, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before2, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root3, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent: while (parent !== null) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
            if (hostParent === null) {
              throw new Error(
                'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'
              );
            }
            commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(
          finishedRoot,
          nearestMountedAncestor,
          parent
        ) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(
              finishedRoot,
              nearestMountedAncestor,
              child
            );
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(
          finishedRoot,
          nearestMountedAncestor,
          deletedFiber
        ) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            // eslint-disable-next-line-no-fallthrough
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(
                  finishedRoot,
                  nearestMountedAncestor,
                  deletedFiber
                );
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(
                      hostParent,
                      deletedFiber.stateNode
                    );
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(
                      hostParent,
                      deletedFiber.stateNode
                    );
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(
                  finishedRoot,
                  nearestMountedAncestor,
                  deletedFiber
                );
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect,
                        destroy = _effect.destroy,
                        tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(
                            deletedFiber,
                            nearestMountedAncestor,
                            destroy
                          );
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(
                              deletedFiber
                            );
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(
                              deletedFiber,
                              nearestMountedAncestor,
                              destroy
                            );
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(
                              deletedFiber,
                              nearestMountedAncestor,
                              destroy
                            );
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === 'function') {
                  safelyCallComponentWillUnmount(
                    deletedFiber,
                    nearestMountedAncestor,
                    instance
                  );
                }
              }
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              return;
            }
            case OffscreenComponent: {
              if (
                // TODO: Remove this dead flag
                deletedFiber.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden =
                  prevOffscreenSubtreeWasHidden ||
                  deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(
                  finishedRoot,
                  nearestMountedAncestor,
                  deletedFiber
                );
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(
                  finishedRoot,
                  nearestMountedAncestor,
                  deletedFiber
                );
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(
                finishedRoot,
                nearestMountedAncestor,
                deletedFiber
              );
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function (wakeable) {
              var retry = resolveRetryWakeable.bind(
                null,
                finishedWork,
                wakeable
              );
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error(
                        'Expected finished root and lanes to be set. This is a bug in React.'
                      );
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root3, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root3;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root3);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              try {
                commitDeletionEffects(root3, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root3);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(
                    Insertion | HasEffect,
                    finishedWork,
                    finishedWork.return
                  );
                  commitHookEffectListMount(
                    Insertion | HasEffect,
                    finishedWork
                  );
                } catch (error2) {
                  captureCommitPhaseError(
                    finishedWork,
                    finishedWork.return,
                    error2
                  );
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(
                      Layout | HasEffect,
                      finishedWork,
                      finishedWork.return
                    );
                  } catch (error2) {
                    captureCommitPhaseError(
                      finishedWork,
                      finishedWork.return,
                      error2
                    );
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(
                      Layout | HasEffect,
                      finishedWork,
                      finishedWork.return
                    );
                  } catch (error2) {
                    captureCommitPhaseError(
                      finishedWork,
                      finishedWork.return,
                      error2
                    );
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(
                      finishedWork,
                      finishedWork.return,
                      error2
                    );
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps =
                      current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(
                          _instance4,
                          updatePayload,
                          type,
                          oldProps,
                          newProps,
                          finishedWork
                        );
                      } catch (error2) {
                        captureCommitPhaseError(
                          finishedWork,
                          finishedWork.return,
                          error2
                        );
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error(
                      'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.'
                    );
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText =
                    current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(
                      finishedWork,
                      finishedWork.return,
                      error2
                    );
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root3.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(
                          finishedWork,
                          finishedWork.return,
                          error2
                        );
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden =
                    offscreenFiber.alternate !== null &&
                    offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(
                    finishedWork,
                    finishedWork.return,
                    error2
                  );
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden =
                current2 !== null && current2.memoizedState !== null;
              if (
                // TODO: Remove this dead flag
                finishedWork.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden =
                  prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root3, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root3, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if (
                        (offscreenBoundary.mode & ConcurrentMode) !==
                        NoMode
                      ) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root3, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(
                finishedWork,
                finishedWork.return,
                error2
              );
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root3, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root3;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root3, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden =
                isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(
                  subtreeRoot,
                  root3,
                  committedLanes
                );
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden =
                  current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden =
                  wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (
                  offscreenSubtreeWasHidden &&
                  !prevOffscreenSubtreeWasHidden
                ) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(
                    child,
                    // New root; bubble back up to here and stop.
                    root3,
                    committedLanes
                  );
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(
                  subtreeRoot,
                  root3,
                  committedLanes
                );
                continue;
              }
            }
            if (
              (fiber.subtreeFlags & LayoutMask) !== NoFlags &&
              firstChild !== null
            ) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(
                subtreeRoot,
                root3,
                committedLanes
              );
            }
          }
        }
        function commitLayoutMountEffects_complete(
          subtreeRoot,
          root3,
          committedLanes
        ) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(
                  root3,
                  current2,
                  fiber,
                  committedLanes
                );
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === 'function') {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(
          root3,
          finishedWork,
          committedLanes,
          committedTransitions
        ) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(
            finishedWork,
            root3,
            committedLanes,
            committedTransitions
          );
        }
        function commitPassiveMountEffects_begin(
          subtreeRoot,
          root3,
          committedLanes,
          committedTransitions
        ) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (
              (fiber.subtreeFlags & PassiveMask) !== NoFlags &&
              firstChild !== null
            ) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(
                subtreeRoot,
                root3,
                committedLanes,
                committedTransitions
              );
            }
          }
        }
        function commitPassiveMountEffects_complete(
          subtreeRoot,
          root3,
          committedLanes,
          committedTransitions
        ) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(
                  root3,
                  fiber,
                  committedLanes,
                  committedTransitions
                );
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(
          finishedRoot,
          finishedWork,
          committedLanes,
          committedTransitions
        ) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(
                    Passive$1 | HasEffect,
                    finishedWork
                  );
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                    fiberToDelete,
                    fiber
                  );
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if (
              (fiber.subtreeFlags & PassiveMask) !== NoFlags &&
              child !== null
            ) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(
                  Passive$1 | HasEffect,
                  finishedWork,
                  finishedWork.return
                );
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(
                  Passive$1 | HasEffect,
                  finishedWork,
                  finishedWork.return
                );
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
          deletedSubtreeRoot,
          nearestMountedAncestor
        ) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(
              fiber,
              nearestMountedAncestor
            );
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(
                deletedSubtreeRoot
              );
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(
          deletedSubtreeRoot
        ) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(
          current2,
          nearestMountedAncestor
        ) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(
                  Passive$1,
                  current2,
                  nearestMountedAncestor
                );
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(
                  Passive$1,
                  current2,
                  nearestMountedAncestor
                );
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(
                    Layout | HasEffect,
                    fiber,
                    fiber.return
                  );
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === 'function') {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(
                    Passive$1 | HasEffect,
                    fiber,
                    fiber.return
                  );
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === 'function' && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor('selector.component');
          HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');
          ROLE_TYPE = symbolFor('selector.role');
          TEST_NAME_TYPE = symbolFor('selector.test_id');
          TEXT_TYPE = symbolFor('selector.text');
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function (commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal =
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'
                ? IS_REACT_ACT_ENVIRONMENT
                : void 0;
            var jestIsDefined = typeof jest !== 'undefined';
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal =
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'
                ? IS_REACT_ACT_ENVIRONMENT
                : void 0;
            if (
              !isReactActEnvironmentGlobal &&
              ReactCurrentActQueue.current !== null
            ) {
              error(
                'The current testing environment is not configured to support act(...)'
              );
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 =
            ReactSharedInternals.ReactCurrentDispatcher,
          ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
          ReactCurrentBatchConfig$3 =
            ReactSharedInternals.ReactCurrentBatchConfig,
          ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext =
          /*             */
          0;
        var BatchedContext =
          /*               */
          1;
        var RenderContext =
          /*                */
          2;
        var CommitContext =
          /*                */
          4;
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if (
            (executionContext & (RenderContext | CommitContext)) !==
            NoContext
          ) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if (
            (executionContext & RenderContext) !== NoContext &&
            workInProgressRootRenderLanes !== NoLanes
          ) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error('useInsertionEffect must not schedule updates.');
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root3, lane, eventTime);
          if (
            (executionContext & RenderContext) !== NoLanes &&
            root3 === workInProgressRoot
          ) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root3, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root3 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(
                  workInProgressRootInterleavedUpdatedLanes,
                  lane
                );
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root3, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
            if (
              lane === SyncLane &&
              executionContext === NoContext &&
              (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy
            ) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
          var current2 = root3.current;
          current2.lanes = lane;
          markRootUpdated(root3, lane, eventTime);
          ensureRootIsScheduled(root3, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (
            // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
            // decided not to enable it.
            (executionContext & RenderContext) !== NoContext
          );
        }
        function ensureRootIsScheduled(root3, currentTime) {
          var existingCallbackNode = root3.callbackNode;
          markStarvedLanesAsExpired(root3, currentTime);
          var nextLanes = getNextLanes(
            root3,
            root3 === workInProgressRoot
              ? workInProgressRootRenderLanes
              : NoLanes
          );
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root3.callbackPriority;
          if (
            existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(
              ReactCurrentActQueue$1.current !== null &&
              existingCallbackNode !== fakeActCallbackNode
            )
          ) {
            {
              if (
                existingCallbackNode == null &&
                existingCallbackPriority !== SyncLane
              ) {
                error(
                  'Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.'
                );
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root3.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(
                performSyncWorkOnRoot.bind(null, root3)
              );
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function () {
                  if (
                    (executionContext & (RenderContext | CommitContext)) ===
                    NoContext
                  ) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(
              schedulerPriorityLevel,
              performConcurrentWorkOnRoot.bind(null, root3)
            );
          }
          root3.callbackPriority = newCallbackPriority;
          root3.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root3, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if (
            (executionContext & (RenderContext | CommitContext)) !==
            NoContext
          ) {
            throw new Error('Should not already be working.');
          }
          var originalCallbackNode = root3.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root3.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(
            root3,
            root3 === workInProgressRoot
              ? workInProgressRootRenderLanes
              : NoLanes
          );
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice =
            !includesBlockingLane(root3, lanes) &&
            !includesExpiredLane(root3, lanes) &&
            !didTimeout;
          var exitStatus = shouldTimeSlice
            ? renderRootConcurrent(root3, lanes)
            : renderRootSync(root3, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root3, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root3, lanes);
              var finishedWork = root3.current.alternate;
              if (
                renderWasConcurrent &&
                !isRenderConsistentWithExternalStores(finishedWork)
              ) {
                exitStatus = renderRootSync(root3, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes =
                    getLanesToRetrySynchronouslyOnError(root3);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(
                      root3,
                      _errorRetryLanes
                    );
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root3, NoLanes);
                  markRootSuspended$1(root3, lanes);
                  ensureRootIsScheduled(root3, now());
                  throw _fatalError;
                }
              }
              root3.finishedWork = finishedWork;
              root3.finishedLanes = lanes;
              finishConcurrentRender(root3, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root3, now());
          if (root3.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root3);
          }
          return null;
        }
        function recoverFromConcurrentError(root3, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root3)) {
            var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root3.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root3, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(
              workInProgressRootRecoverableErrors,
              errors
            );
          }
        }
        function finishConcurrentRender(root3, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error('Root did not complete. This is a bug in React.');
            }
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored: {
              commitRoot(
                root3,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions
              );
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root3, lanes);
              if (
                includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()
              ) {
                var msUntilTimeout =
                  globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root3, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root3.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root3, suspendedLanes);
                    break;
                  }
                  root3.timeoutHandle = scheduleTimeout(
                    commitRoot.bind(
                      null,
                      root3,
                      workInProgressRootRecoverableErrors,
                      workInProgressTransitions
                    ),
                    msUntilTimeout
                  );
                  break;
                }
              }
              commitRoot(
                root3,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions
              );
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root3, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root3.timeoutHandle = scheduleTimeout(
                    commitRoot.bind(
                      null,
                      root3,
                      workInProgressRootRecoverableErrors,
                      workInProgressTransitions
                    ),
                    _msUntilTimeout
                  );
                  break;
                }
              }
              commitRoot(
                root3,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions
              );
              break;
            }
            case RootCompleted: {
              commitRoot(
                root3,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions
              );
              break;
            }
            default: {
              throw new Error('Unknown root exit status.');
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i = 0; i < checks.length; i++) {
                    var check = checks[i];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root3, suspendedLanes) {
          suspendedLanes = removeLanes(
            suspendedLanes,
            workInProgressRootPingedLanes
          );
          suspendedLanes = removeLanes(
            suspendedLanes,
            workInProgressRootInterleavedUpdatedLanes
          );
          markRootSuspended(root3, suspendedLanes);
        }
        function performSyncWorkOnRoot(root3) {
          {
            syncNestedUpdateFlag();
          }
          if (
            (executionContext & (RenderContext | CommitContext)) !==
            NoContext
          ) {
            throw new Error('Should not already be working.');
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root3, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root3, now());
            return null;
          }
          var exitStatus = renderRootSync(root3, lanes);
          if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error('Root did not complete. This is a bug in React.');
          }
          var finishedWork = root3.current.alternate;
          root3.finishedWork = finishedWork;
          root3.finishedLanes = lanes;
          commitRoot(
            root3,
            workInProgressRootRecoverableErrors,
            workInProgressTransitions
          );
          ensureRootIsScheduled(root3, now());
          return null;
        }
        function flushRoot(root3, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root3, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root3, now());
            if (
              (executionContext & (RenderContext | CommitContext)) ===
              NoContext
            ) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (
              executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy
            ) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync(fn) {
          if (
            rootWithPendingPassiveEffects !== null &&
            rootWithPendingPassiveEffects.tag === LegacyRoot &&
            (executionContext & (RenderContext | CommitContext)) === NoContext
          ) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if (
              (executionContext & (RenderContext | CommitContext)) ===
              NoContext
            ) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (
            (executionContext & (RenderContext | CommitContext)) !== NoContext
          );
        }
        function pushRenderLanes(fiber, lanes) {
          push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(
            workInProgressRootIncludedLanes,
            lanes
          );
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root3, lanes) {
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          var timeoutHandle = root3.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root3.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root3;
          var rootWorkInProgress = createWorkInProgress(root3.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes =
            subtreeRenderLanes =
            workInProgressRootIncludedLanes =
              lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root3, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (
                  thrownValue !== null &&
                  typeof thrownValue === 'object' &&
                  typeof thrownValue.then === 'function'
                ) {
                  var wakeable = thrownValue;
                  markComponentSuspended(
                    erroredWork,
                    wakeable,
                    workInProgressRootRenderLanes
                  );
                } else {
                  markComponentErrored(
                    erroredWork,
                    thrownValue,
                    workInProgressRootRenderLanes
                  );
                }
              }
              throwException(
                root3,
                erroredWork.return,
                erroredWork,
                thrownValue,
                workInProgressRootRenderLanes
              );
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(
            lane,
            workInProgressRootSkippedLanes
          );
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (
            workInProgressRootExitStatus === RootInProgress ||
            workInProgressRootExitStatus === RootSuspended ||
            workInProgressRootExitStatus === RootErrored
          ) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (
            workInProgressRoot !== null &&
            (includesNonIdleWork(workInProgressRootSkippedLanes) ||
              includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))
          ) {
            markRootSuspended$1(
              workInProgressRoot,
              workInProgressRootRenderLanes
            );
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (
            workInProgressRoot !== root3 ||
            workInProgressRootRenderLanes !== lanes
          ) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root3, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root3, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error(
              'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.'
            );
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (
            workInProgressRoot !== root3 ||
            workInProgressRootRenderLanes !== lanes
          ) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root3, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(
                  current2,
                  completedWork,
                  subtreeRenderLanes
                );
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(
                  current2,
                  completedWork,
                  subtreeRenderLanes
                );
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root3, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(
              root3,
              recoverableErrors,
              transitions,
              previousUpdateLanePriority
            );
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(
          root3,
          recoverableErrors,
          transitions,
          renderPriorityLevel
        ) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if (
            (executionContext & (RenderContext | CommitContext)) !==
            NoContext
          ) {
            throw new Error('Should not already be working.');
          }
          var finishedWork = root3.finishedWork;
          var lanes = root3.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error(
                  'root.finishedLanes should not be empty during a commit. This is a bug in React.'
                );
              }
            }
          }
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          if (finishedWork === root3.current) {
            throw new Error(
              'Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.'
            );
          }
          root3.callbackNode = null;
          root3.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(
            finishedWork.lanes,
            finishedWork.childLanes
          );
          markRootFinished(root3, remainingLanes);
          if (root3 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if (
            (finishedWork.subtreeFlags & PassiveMask) !== NoFlags ||
            (finishedWork.flags & PassiveMask) !== NoFlags
          ) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function () {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects =
            (finishedWork.subtreeFlags &
              (BeforeMutationMask |
                MutationMask |
                LayoutMask |
                PassiveMask)) !==
            NoFlags;
          var rootHasEffect =
            (finishedWork.flags &
              (BeforeMutationMask |
                MutationMask |
                LayoutMask |
                PassiveMask)) !==
            NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 =
              commitBeforeMutationEffects(root3, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root3, finishedWork, lanes);
            resetAfterCommit(root3.containerInfo);
            root3.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root3, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root3.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root3.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root3.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root3.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root3, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root3.onRecoverableError;
            for (var i = 0; i < recoverableErrors.length; i++) {
              var recoverableError = recoverableErrors[i];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest,
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (
            includesSomeLane(pendingPassiveEffectsLanes, SyncLane) &&
            root3.tag !== LegacyRoot
          ) {
            flushPassiveEffects();
          }
          remainingLanes = root3.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root3 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root3;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(
              pendingPassiveEffectsLanes
            );
            var priority = lowerEventPriority(
              DefaultEventPriority,
              renderPriority
            );
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function () {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root3 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if (
            (executionContext & (RenderContext | CommitContext)) !==
            NoContext
          ) {
            throw new Error(
              'Cannot flush passive effects while already rendering.'
            );
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root3.current);
          commitPassiveMountEffects(root3, root3.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i = 0; i < profilerEffects.length; i++) {
              var _fiber = profilerEffects[i];
              commitPassiveEffectDurations(root3, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root3.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root3 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root3;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root3);
          {
            var stateNode = root3.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return (
            legacyErrorBoundariesThatAlreadyFailed !== null &&
            legacyErrorBoundariesThatAlreadyFailed.has(instance)
          );
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([
              instance,
            ]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root3 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
        }
        function captureCommitPhaseError(
          sourceFiber,
          nearestMountedAncestor,
          error$1
        ) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor2 = fiber.type;
              var instance = fiber.stateNode;
              if (
                typeof ctor2.getDerivedStateFromError === 'function' ||
                (typeof instance.componentDidCatch === 'function' &&
                  !isAlreadyFailedLegacyErrorBoundary(instance))
              ) {
                var errorInfo = createCapturedValueAtFiber(
                  error$1,
                  sourceFiber
                );
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root3 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root3 !== null) {
                  markRootUpdated(root3, SyncLane, eventTime);
                  ensureRootIsScheduled(root3, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error(
              'Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s',
              error$1
            );
          }
        }
        function pingSuspendedRoot(root3, wakeable, pingedLanes) {
          var pingCache = root3.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root3, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
          if (
            workInProgressRoot === root3 &&
            isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)
          ) {
            if (
              workInProgressRootExitStatus === RootSuspendedWithDelay ||
              (workInProgressRootExitStatus === RootSuspended &&
                includesOnlyRetries(workInProgressRootRenderLanes) &&
                now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)
            ) {
              prepareFreshStack(root3, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(
                workInProgressRootPingedLanes,
                pingedLanes
              );
            }
          }
          ensureRootIsScheduled(root3, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root3 !== null) {
            markRootUpdated(root3, retryLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error(
                'Pinged unknown suspense boundary type. This is probably a bug in React.'
              );
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120
            ? 120
            : timeElapsed < 480
            ? 480
            : timeElapsed < 1080
            ? 1080
            : timeElapsed < 1920
            ? 1920
            : timeElapsed < 3e3
            ? 3e3
            : timeElapsed < 4320
            ? 4320
            : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error(
              'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.'
            );
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error(
                "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
              );
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(
              fiber,
              MountLayoutDev,
              invokeLayoutEffectUnmountInDEV
            );
            if (hasPassiveEffects) {
              invokeEffectsInDev(
                fiber,
                MountPassiveDev,
                invokePassiveEffectUnmountInDEV
              );
            }
            invokeEffectsInDev(
              fiber,
              MountLayoutDev,
              invokeLayoutEffectMountInDEV
            );
            if (hasPassiveEffects) {
              invokeEffectsInDev(
                fiber,
                MountPassiveDev,
                invokePassiveEffectMountInDEV
              );
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (
                current2 !== subtreeRoot &&
                current2.child !== null &&
                primarySubtreeFlag !== NoFlags
              ) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (
              tag !== IndeterminateComponent &&
              tag !== HostRoot &&
              tag !== ClassComponent &&
              tag !== FunctionComponent &&
              tag !== ForwardRef &&
              tag !== MemoComponent &&
              tag !== SimpleMemoComponent
            ) {
              return;
            }
            var componentName =
              getComponentNameFromFiber(fiber) || 'ReactComponent';
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (
                didWarnStateUpdateForNotYetMountedComponent.has(componentName)
              ) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent =
                /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error(
                "Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead."
              );
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function (current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(
              dummyFiber,
              unitOfWork
            );
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (
                didSuspendOrErrorWhileHydratingDEV() ||
                (originalError !== null &&
                  typeof originalError === 'object' &&
                  typeof originalError.then === 'function')
              ) {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(
                unitOfWork,
                originalWorkInProgressCopy
              );
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(
                null,
                beginWork,
                null,
                current2,
                unitOfWork,
                lanes
              );
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (
                  typeof replayError === 'object' &&
                  replayError !== null &&
                  replayError._suppressLogging &&
                  typeof originalError === 'object' &&
                  originalError !== null &&
                  !originalError._suppressLogging
                ) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent =
            /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName =
                    (workInProgress &&
                      getComponentNameFromFiber(workInProgress)) ||
                    'Unknown';
                  var dedupeKey = renderingComponentName;
                  if (
                    !didWarnAboutUpdateInRenderForAnotherComponent.has(
                      dedupeKey
                    )
                  ) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(
                      dedupeKey
                    );
                    var setStateComponentName =
                      getComponentNameFromFiber(fiber) || 'Unknown';
                    error(
                      'Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render',
                      setStateComponentName,
                      renderingComponentName,
                      renderingComponentName
                    );
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error(
                      'Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.'
                    );
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root3, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root3.memoizedUpdaters;
              memoizedUpdaters.forEach(function (schedulingFiber) {
                addFiberToLanesMap(root3, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (
                fiber.tag !== FunctionComponent &&
                fiber.tag !== ForwardRef &&
                fiber.tag !== SimpleMemoComponent
              ) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error(
                  "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act",
                  getComponentNameFromFiber(fiber)
                );
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
          {
            if (
              root3.tag !== LegacyRoot &&
              isConcurrentActEnvironment() &&
              ReactCurrentActQueue$1.current === null
            ) {
              error(
                "A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act"
              );
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function (handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (
                type !== null &&
                type !== void 0 &&
                typeof type.render === 'function'
              ) {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender,
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType =
              typeof nextType === 'object' && nextType !== null
                ? nextType.$$typeof
                : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === 'function') {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === 'function') {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (
                prevFamily !== void 0 &&
                prevFamily === resolveFamily(nextType)
              ) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== 'function') {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function (root3, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies,
              updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function () {
              scheduleFibersWithFamiliesRecursively(
                root3.current,
                updatedFamilies,
                staleFamilies
              );
            });
          }
        };
        var scheduleRoot = function (root3, element) {
          {
            if (root3.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function () {
              updateContainer(element, root3, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(
          fiber,
          updatedFamilies,
          staleFamilies
        ) {
          {
            var alternate = fiber.alternate,
              child = fiber.child,
              sibling = fiber.sibling,
              tag = fiber.tag,
              type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error(
                'Expected resolveFamily to be set during hot reload.'
              );
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (
                failedBoundaries.has(fiber) ||
                (alternate !== null && failedBoundaries.has(alternate))
              ) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(
                child,
                updatedFamilies,
                staleFamilies
              );
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(
                sibling,
                updatedFamilies,
                staleFamilies
              );
            }
          }
        }
        var findHostInstancesForRefresh = function (root3, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(
              families.map(function (family) {
                return family.current;
              })
            );
            findHostInstancesForMatchingFibersRecursively(
              root3.current,
              types,
              hostInstances
            );
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(
          fiber,
          types,
          hostInstances
        ) {
          {
            var child = fiber.child,
              sibling = fiber.sibling,
              tag = fiber.tag,
              type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(
                  child,
                  types,
                  hostInstances
                );
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(
                sibling,
                types,
                hostInstances
              );
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(
              fiber,
              hostInstances
            );
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error('Expected to reach root first.');
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (
              !hasBadMapPolyfill &&
              typeof Object.preventExtensions === 'function'
            ) {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function (tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return (
            typeof type === 'function' &&
            !shouldConstruct$1(type) &&
            type.defaultProps === void 0
          );
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === 'function') {
            return shouldConstruct$1(Component)
              ? ClassComponent
              : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(
              current2.tag,
              pendingProps,
              current2.key,
              current2.mode
            );
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies =
            currentDependencies === null
              ? null
              : {
                  lanes: currentDependencies.lanes,
                  firstContext: currentDependencies.firstContext,
                };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(
                  current2.type
                );
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(
                  current2.type
                );
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(
                  current2.type
                );
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies =
              currentDependencies === null
                ? null
                : {
                    lanes: currentDependencies.lanes,
                    firstContext: currentDependencies.firstContext,
                  };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(
          tag,
          isStrictMode,
          concurrentUpdatesByDefaultOverride
        ) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(
          type,
          key,
          pendingProps,
          owner,
          mode,
          lanes
        ) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === 'string') {
            fiberTag = HostComponent;
          } else {
            getTag: switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(
                  pendingProps.children,
                  mode,
                  lanes,
                  key
                );
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(
                  pendingProps,
                  mode,
                  lanes,
                  key
                );
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              // eslint-disable-next-line no-fallthrough
              case REACT_SCOPE_TYPE:
              // eslint-disable-next-line no-fallthrough
              case REACT_CACHE_TYPE:
              // eslint-disable-next-line no-fallthrough
              case REACT_TRACING_MARKER_TYPE:
              // eslint-disable-next-line no-fallthrough
              case REACT_DEBUG_TRACING_MODE_TYPE:
              // eslint-disable-next-line no-fallthrough
              default: {
                if (typeof type === 'object' && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType =
                          resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info = '';
                {
                  if (
                    type === void 0 ||
                    (typeof type === 'object' &&
                      type !== null &&
                      Object.keys(type).length === 0)
                  ) {
                    info +=
                      " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner
                    ? getComponentNameFromFiber(owner)
                    : null;
                  if (ownerName) {
                    info +=
                      '\n\nCheck the render method of `' + ownerName + '`.';
                  }
                }
                throw new Error(
                  'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) ' +
                    ('but got: ' +
                      (type == null ? type : typeof type) +
                      '.' +
                      info)
                );
              }
            }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(
            type,
            key,
            pendingProps,
            owner,
            mode,
            lanes
          );
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== 'string') {
              error(
                'Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',
                typeof pendingProps.id
              );
            }
          }
          var fiber = createFiber(
            Profiler,
            pendingProps,
            key,
            mode | ProfileMode
          );
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0,
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(
            SuspenseListComponent,
            pendingProps,
            key,
            mode
          );
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false,
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = 'DELETED';
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation,
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(
          containerInfo,
          tag,
          hydrate2,
          identifierPrefix,
          onRecoverableError
        ) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2
                  ? 'hydrateRoot()'
                  : 'createRoot()';
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? 'hydrate()' : 'render()';
                break;
            }
          }
        }
        function createFiberRoot(
          containerInfo,
          tag,
          hydrate2,
          initialChildren,
          hydrationCallbacks,
          isStrictMode,
          concurrentUpdatesByDefaultOverride,
          identifierPrefix,
          onRecoverableError,
          transitionCallbacks
        ) {
          var root3 = new FiberRootNode(
            containerInfo,
            tag,
            hydrate2,
            identifierPrefix,
            onRecoverableError
          );
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root3.current = uninitializedFiber;
          uninitializedFiber.stateNode = root3;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              // not enabled yet
              transitions: null,
              pendingSuspenseBoundaries: null,
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root3;
        }
        var ReactVersion = '18.3.1';
        function createPortal(children, containerInfo, implementation) {
          var key =
            arguments.length > 3 && arguments[3] !== void 0
              ? arguments[3]
              : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children,
            containerInfo,
            implementation,
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get2(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get2(component);
            if (fiber === void 0) {
              if (typeof component.render === 'function') {
                throw new Error(
                  'Unable to find node on an unmounted component.'
                );
              } else {
                var keys2 = Object.keys(component).join(',');
                throw new Error(
                  'Argument appears to not be a ReactComponent. Keys: ' + keys2
                );
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName =
                getComponentNameFromFiber(fiber) || 'Component';
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error(
                      '%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node',
                      methodName,
                      methodName,
                      componentName
                    );
                  } else {
                    error(
                      '%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node',
                      methodName,
                      methodName,
                      componentName
                    );
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(
          containerInfo,
          tag,
          hydrationCallbacks,
          isStrictMode,
          concurrentUpdatesByDefaultOverride,
          identifierPrefix,
          onRecoverableError,
          transitionCallbacks
        ) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(
            containerInfo,
            tag,
            hydrate2,
            initialChildren,
            hydrationCallbacks,
            isStrictMode,
            concurrentUpdatesByDefaultOverride,
            identifierPrefix,
            onRecoverableError
          );
        }
        function createHydrationContainer(
          initialChildren,
          callback,
          containerInfo,
          tag,
          hydrationCallbacks,
          isStrictMode,
          concurrentUpdatesByDefaultOverride,
          identifierPrefix,
          onRecoverableError,
          transitionCallbacks
        ) {
          var hydrate2 = true;
          var root3 = createFiberRoot(
            containerInfo,
            tag,
            hydrate2,
            initialChildren,
            hydrationCallbacks,
            isStrictMode,
            concurrentUpdatesByDefaultOverride,
            identifierPrefix,
            onRecoverableError
          );
          root3.context = getContextForSubtree(null);
          var current2 = root3.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback =
            callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root3, lane, eventTime);
          return root3;
        }
        function updateContainer(
          element,
          container,
          parentComponent,
          callback
        ) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error(
                'Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.',
                getComponentNameFromFiber(current) || 'Unknown'
              );
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element,
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== 'function') {
                error(
                  'render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.',
                  callback
                );
              }
            }
            update.callback = callback;
          }
          var root3 = enqueueUpdate(current$1, update, lane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
            entangleTransitions(root3, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root3 = fiber.stateNode;
              if (isRootDehydrated(root3)) {
                var lanes = getHighestPriorityPendingLanes(root3);
                flushRoot(root3, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync(function () {
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(
              suspenseState.retryLane,
              retryLane
            );
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root3 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root3 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root3 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root3 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function (fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function (fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function (obj, path, index2) {
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
            if (index2 + 1 === path.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function (obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function (obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(
                // $FlowFixMe number or string is fine here
                obj[oldKey],
                oldPath,
                newPath,
                index2 + 1
              );
            }
            return updated;
          };
          var copyWithRename = function (obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn('copyWithRename() expects paths of the same length');
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn(
                    'copyWithRename() expects paths to be the same except for the deepest key'
                  );
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function (obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function (obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function (fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function (fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign2({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function (fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign2({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(
                hook.memoizedState,
                oldPath,
                newPath
              );
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign2({}, fiber.memoizedProps);
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function (fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function (fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function (fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(
              fiber.memoizedProps,
              oldPath,
              newPath
            );
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function (fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function (newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function (newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 =
            ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance:
              findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion,
          });
        }
        var defaultOnRecoverableError =
          typeof reportError === 'function'
            ? // In modern browsers, reportError will dispatch an error event,
              // emulating an uncaught JavaScript error.
              reportError
            : function (error2) {
                console['error'](error2);
              };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =
          function (children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error('Cannot update an unmounted root.');
            }
            {
              if (typeof arguments[1] === 'function') {
                error(
                  'render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().'
                );
              } else if (isValidContainer(arguments[1])) {
                error(
                  "You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."
                );
              } else if (typeof arguments[1] !== 'undefined') {
                error(
                  'You passed a second argument to root.render(...) but it only accepts one argument.'
                );
              }
              var container = root3.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error(
                      "render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container."
                    );
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
        ReactDOMHydrationRoot.prototype.unmount =
          ReactDOMRoot.prototype.unmount = function () {
            {
              if (typeof arguments[0] === 'function') {
                error(
                  'unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().'
                );
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error(
                    'Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.'
                  );
                }
              }
              flushSync(function () {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
        function createRoot(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error(
              'createRoot(...): Target container is not a DOM element.'
            );
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = '';
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn(
                  'hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.'
                );
              } else {
                if (
                  typeof options2 === 'object' &&
                  options2 !== null &&
                  options2.$$typeof === REACT_ELEMENT_TYPE
                ) {
                  error(
                    'You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);'
                  );
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root3 = createContainer(
            container,
            ConcurrentRoot,
            null,
            isStrictMode,
            concurrentUpdatesByDefaultOverride,
            identifierPrefix,
            onRecoverableError
          );
          markContainerAsRoot(root3.current, container);
          var rootContainerElement =
            container.nodeType === COMMENT_NODE
              ? container.parentNode
              : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root3);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration =
          scheduleHydration;
        function hydrateRoot(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error(
              'hydrateRoot(...): Target container is not a DOM element.'
            );
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error(
                'Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)'
              );
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources =
            (options2 != null && options2.hydratedSources) || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = '';
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root3 = createHydrationContainer(
            initialChildren,
            null,
            container,
            ConcurrentRoot,
            hydrationCallbacks,
            isStrictMode,
            concurrentUpdatesByDefaultOverride,
            identifierPrefix,
            onRecoverableError
          );
          markContainerAsRoot(root3.current, container);
          listenToAllSupportedEvents(container);
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root3, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root3);
        }
        function isValidContainer(node) {
          return !!(
            node &&
            (node.nodeType === ELEMENT_NODE ||
              node.nodeType === DOCUMENT_NODE ||
              node.nodeType === DOCUMENT_FRAGMENT_NODE ||
              !disableCommentsAsDOMContainers)
          );
        }
        function isValidContainerLegacy(node) {
          return !!(
            node &&
            (node.nodeType === ELEMENT_NODE ||
              node.nodeType === DOCUMENT_NODE ||
              node.nodeType === DOCUMENT_FRAGMENT_NODE ||
              (node.nodeType === COMMENT_NODE &&
                node.nodeValue === ' react-mount-point-unstable '))
          );
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (
              container.nodeType === ELEMENT_NODE &&
              container.tagName &&
              container.tagName.toUpperCase() === 'BODY'
            ) {
              error(
                'createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.'
              );
            }
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer) {
                error(
                  'You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.'
                );
              } else {
                error(
                  'You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.'
                );
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function (container) {
            if (
              container._reactRootContainer &&
              container.nodeType !== COMMENT_NODE
            ) {
              var hostInstance = findHostInstanceWithNoPortals(
                container._reactRootContainer.current
              );
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error(
                    'render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.'
                  );
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(
              rootEl && getInstanceFromNode(rootEl)
            );
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error(
                'render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.'
              );
            }
            if (
              container.nodeType === ELEMENT_NODE &&
              container.tagName &&
              container.tagName.toUpperCase() === 'BODY'
            ) {
              error(
                'render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.'
              );
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {}
        function legacyCreateRootFromDOMContainer(
          container,
          initialChildren,
          parentComponent,
          callback,
          isHydrationContainer
        ) {
          if (isHydrationContainer) {
            if (typeof callback === 'function') {
              var originalCallback = callback;
              callback = function () {
                var instance = getPublicRootInstance(root3);
                originalCallback.call(instance);
              };
            }
            var root3 = createHydrationContainer(
              initialChildren,
              callback,
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              '',
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = root3;
            markContainerAsRoot(root3.current, container);
            var rootContainerElement =
              container.nodeType === COMMENT_NODE
                ? container.parentNode
                : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root3;
          } else {
            var rootSibling;
            while ((rootSibling = container.lastChild)) {
              container.removeChild(rootSibling);
            }
            if (typeof callback === 'function') {
              var _originalCallback = callback;
              callback = function () {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              '',
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement =
              container.nodeType === COMMENT_NODE
                ? container.parentNode
                : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync(function () {
              updateContainer(
                initialChildren,
                _root,
                parentComponent,
                callback
              );
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== 'function') {
              error(
                '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.',
                callerName,
                callback
              );
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(
          parentComponent,
          children,
          container,
          forceHydrate,
          callback
        ) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(
              callback === void 0 ? null : callback,
              'render'
            );
          }
          var maybeRoot = container._reactRootContainer;
          var root3;
          if (!maybeRoot) {
            root3 = legacyCreateRootFromDOMContainer(
              container,
              children,
              parentComponent,
              callback,
              forceHydrate
            );
          } else {
            root3 = maybeRoot;
            if (typeof callback === 'function') {
              var originalCallback = callback;
              callback = function () {
                var instance = getPublicRootInstance(root3);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root3, parentComponent, callback);
          }
          return getPublicRootInstance(root3);
        }
        var didWarnAboutFindDOMNode = false;
        function findDOMNode(componentOrElement) {
          {
            if (!didWarnAboutFindDOMNode) {
              didWarnAboutFindDOMNode = true;
              error(
                'findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node'
              );
            }
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender =
                owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error(
                  '%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.',
                  getComponentNameFromType(owner.type) || 'A component'
                );
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(
              componentOrElement,
              'findDOMNode'
            );
          }
        }
        function hydrate(element, container, callback) {
          {
            error(
              "ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"
            );
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error('Target container is not a DOM element.');
          }
          {
            var isModernRoot =
              isContainerMarkedAsRoot(container) &&
              container._reactRootContainer === void 0;
            if (isModernRoot) {
              error(
                'You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?'
              );
            }
          }
          return legacyRenderSubtreeIntoContainer(
            null,
            element,
            container,
            true,
            callback
          );
        }
        function render(element, container, callback) {
          {
            error(
              "ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"
            );
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error('Target container is not a DOM element.');
          }
          {
            var isModernRoot =
              isContainerMarkedAsRoot(container) &&
              container._reactRootContainer === void 0;
            if (isModernRoot) {
              error(
                'You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?'
              );
            }
          }
          return legacyRenderSubtreeIntoContainer(
            null,
            element,
            container,
            false,
            callback
          );
        }
        function unstable_renderSubtreeIntoContainer(
          parentComponent,
          element,
          containerNode,
          callback
        ) {
          {
            error(
              "ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"
            );
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error('Target container is not a DOM element.');
          }
          if (parentComponent == null || !has4(parentComponent)) {
            throw new Error('parentComponent must be a valid React Component');
          }
          return legacyRenderSubtreeIntoContainer(
            parentComponent,
            element,
            containerNode,
            false,
            callback
          );
        }
        var didWarnAboutUnmountComponentAtNode = false;
        function unmountComponentAtNode(container) {
          {
            if (!didWarnAboutUnmountComponentAtNode) {
              didWarnAboutUnmountComponentAtNode = true;
              error(
                'unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot'
              );
            }
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error(
              'unmountComponentAtNode(...): Target container is not a DOM element.'
            );
          }
          {
            var isModernRoot =
              isContainerMarkedAsRoot(container) &&
              container._reactRootContainer === void 0;
            if (isModernRoot) {
              error(
                'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?'
              );
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact =
                rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error(
                  "unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React."
                );
              }
            }
            flushSync(function () {
              legacyRenderSubtreeIntoContainer(
                null,
                null,
                container,
                false,
                function () {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                }
              );
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(
                _rootEl && getInstanceFromNode(_rootEl)
              );
              var isContainerReactRoot =
                container.nodeType === ELEMENT_NODE &&
                isValidContainerLegacy(container.parentNode) &&
                !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error(
                  "unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s",
                  isContainerReactRoot
                    ? 'You may have accidentally passed in a React root node instead of its container.'
                    : 'Instead, have the parent component update its state and rerender in order to remove this component.'
                );
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(
          attemptHydrationAtCurrentPriority$1
        );
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (
            typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null ||
            typeof Map.prototype.forEach !== 'function' ||
            typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null ||
            typeof Set.prototype.clear !== 'function' ||
            typeof Set.prototype.forEach !== 'function'
          ) {
            error(
              'React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills'
            );
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
        function createPortal$1(children, container) {
          var key =
            arguments.length > 2 && arguments[2] !== void 0
              ? arguments[2]
              : null;
          if (!isValidContainer(container)) {
            throw new Error('Target container is not a DOM element.');
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(
          parentComponent,
          element,
          containerNode,
          callback
        ) {
          return unstable_renderSubtreeIntoContainer(
            parentComponent,
            element,
            containerNode,
            callback
          );
        }
        var Internals = {
          usingClientEntryPoint: false,
          // Keep in sync with ReactTestUtils.js.
          // This is an array for better minification.
          Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            batchedUpdates$1,
          ],
        };
        function createRoot$1(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error(
                'You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'
              );
            }
          }
          return createRoot(container, options2);
        }
        function hydrateRoot$1(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error(
                'You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'
              );
            }
          }
          return hydrateRoot(container, initialChildren, options2);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error(
                'flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.'
              );
            }
          }
          return flushSync(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: 'react-dom',
        });
        {
          if (!foundDevTools && canUseDOM2 && window.top === window.self) {
            if (
              (navigator.userAgent.indexOf('Chrome') > -1 &&
                navigator.userAgent.indexOf('Edge') === -1) ||
              navigator.userAgent.indexOf('Firefox') > -1
            ) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info(
                  '%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools' +
                    (protocol === 'file:'
                      ? '\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq'
                      : ''),
                  'font-weight:bold'
                );
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.createRoot = createRoot$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync$1;
        exports.hydrate = hydrate;
        exports.hydrateRoot = hydrateRoot$1;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer =
          renderSubtreeIntoContainer;
        exports.version = ReactVersion;
        if (
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
            'function'
        ) {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(
            new Error()
          );
        }
      })();
    }
  },
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  'node_modules/react-dom/index.js'(exports, module) {
    'use strict';
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  },
});

// node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  'node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js'(
    exports
  ) {
    'use strict';
    if (true) {
      (function () {
        'use strict';
        var hasSymbol = typeof Symbol === 'function' && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol
          ? Symbol.for('react.element')
          : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol
          ? Symbol.for('react.fragment')
          : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol
          ? Symbol.for('react.strict_mode')
          : 60108;
        var REACT_PROFILER_TYPE = hasSymbol
          ? Symbol.for('react.profiler')
          : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol
          ? Symbol.for('react.provider')
          : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol
          ? Symbol.for('react.context')
          : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol
          ? Symbol.for('react.async_mode')
          : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol
          ? Symbol.for('react.concurrent_mode')
          : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol
          ? Symbol.for('react.forward_ref')
          : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol
          ? Symbol.for('react.suspense')
          : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol
          ? Symbol.for('react.suspense_list')
          : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol
          ? Symbol.for('react.fundamental')
          : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol
          ? Symbol.for('react.responder')
          : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 60119;
        function isValidElementType2(type) {
          return (
            typeof type === 'string' ||
            typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE ||
            type === REACT_CONCURRENT_MODE_TYPE ||
            type === REACT_PROFILER_TYPE ||
            type === REACT_STRICT_MODE_TYPE ||
            type === REACT_SUSPENSE_TYPE ||
            type === REACT_SUSPENSE_LIST_TYPE ||
            (typeof type === 'object' &&
              type !== null &&
              (type.$$typeof === REACT_LAZY_TYPE ||
                type.$$typeof === REACT_MEMO_TYPE ||
                type.$$typeof === REACT_PROVIDER_TYPE ||
                type.$$typeof === REACT_CONTEXT_TYPE ||
                type.$$typeof === REACT_FORWARD_REF_TYPE ||
                type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
                type.$$typeof === REACT_RESPONDER_TYPE ||
                type.$$typeof === REACT_SCOPE_TYPE ||
                type.$$typeof === REACT_BLOCK_TYPE))
          );
        }
        function typeOf(object2) {
          if (typeof object2 === 'object' && object2 !== null) {
            var $$typeof = object2.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object2.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object2) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console['warn'](
                'The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.'
              );
            }
          }
          return (
            isConcurrentMode(object2) ||
            typeOf(object2) === REACT_ASYNC_MODE_TYPE
          );
        }
        function isConcurrentMode(object2) {
          return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer2(object2) {
          return typeOf(object2) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object2) {
          return typeOf(object2) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object2) {
          return (
            typeof object2 === 'object' &&
            object2 !== null &&
            object2.$$typeof === REACT_ELEMENT_TYPE
          );
        }
        function isForwardRef(object2) {
          return typeOf(object2) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object2) {
          return typeOf(object2) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object2) {
          return typeOf(object2) === REACT_LAZY_TYPE;
        }
        function isMemo(object2) {
          return typeOf(object2) === REACT_MEMO_TYPE;
        }
        function isPortal(object2) {
          return typeOf(object2) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object2) {
          return typeOf(object2) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object2) {
          return typeOf(object2) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object2) {
          return typeOf(object2) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer2;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  },
});

// node_modules/hoist-non-react-statics/node_modules/react-is/index.js
var require_react_is = __commonJS({
  'node_modules/hoist-non-react-statics/node_modules/react-is/index.js'(
    exports,
    module
  ) {
    'use strict';
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  },
});

// node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  'node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js'(
    exports,
    module
  ) {
    'use strict';
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true,
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true,
    };
    var FORWARD_REF_STATICS = {
      $$typeof: true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
    };
    var MEMO_STATICS = {
      $$typeof: true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true,
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== 'string') {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(
              targetComponent,
              inheritedComponent,
              blacklist
            );
          }
        }
        var keys2 = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys2.length; ++i) {
          var key = keys2[i];
          if (
            !KNOWN_STATICS[key] &&
            !(blacklist && blacklist[key]) &&
            !(sourceStatics && sourceStatics[key]) &&
            !(targetStatics && targetStatics[key])
          ) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {}
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics;
  },
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development2 = __commonJS({
  'node_modules/react-is/cjs/react-is.development.js'(exports) {
    'use strict';
    if (true) {
      (function () {
        'use strict';
        var REACT_ELEMENT_TYPE = Symbol.for('react.element');
        var REACT_PORTAL_TYPE = Symbol.for('react.portal');
        var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
        var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
        var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
        var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
        var REACT_CONTEXT_TYPE = Symbol.for('react.context');
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
        var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
        var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
        var REACT_MEMO_TYPE = Symbol.for('react.memo');
        var REACT_LAZY_TYPE = Symbol.for('react.lazy');
        var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
        }
        function isValidElementType2(type) {
          if (typeof type === 'string' || typeof type === 'function') {
            return true;
          }
          if (
            type === REACT_FRAGMENT_TYPE ||
            type === REACT_PROFILER_TYPE ||
            enableDebugTracing ||
            type === REACT_STRICT_MODE_TYPE ||
            type === REACT_SUSPENSE_TYPE ||
            type === REACT_SUSPENSE_LIST_TYPE ||
            enableLegacyHidden ||
            type === REACT_OFFSCREEN_TYPE ||
            enableScopeAPI ||
            enableCacheElement ||
            enableTransitionTracing
          ) {
            return true;
          }
          if (typeof type === 'object' && type !== null) {
            if (
              type.$$typeof === REACT_LAZY_TYPE ||
              type.$$typeof === REACT_MEMO_TYPE ||
              type.$$typeof === REACT_PROVIDER_TYPE ||
              type.$$typeof === REACT_CONTEXT_TYPE ||
              type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE ||
              type.getModuleId !== void 0
            ) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object2) {
          if (typeof object2 === 'object' && object2 !== null) {
            var $$typeof = object2.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object2.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_SERVER_CONTEXT_TYPE:
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object2) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console['warn'](
                'The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.'
              );
            }
          }
          return false;
        }
        function isConcurrentMode(object2) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console['warn'](
                'The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.'
              );
            }
          }
          return false;
        }
        function isContextConsumer2(object2) {
          return typeOf(object2) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object2) {
          return typeOf(object2) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object2) {
          return (
            typeof object2 === 'object' &&
            object2 !== null &&
            object2.$$typeof === REACT_ELEMENT_TYPE
          );
        }
        function isForwardRef(object2) {
          return typeOf(object2) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object2) {
          return typeOf(object2) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object2) {
          return typeOf(object2) === REACT_LAZY_TYPE;
        }
        function isMemo(object2) {
          return typeOf(object2) === REACT_MEMO_TYPE;
        }
        function isPortal(object2) {
          return typeOf(object2) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object2) {
          return typeOf(object2) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object2) {
          return typeOf(object2) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object2) {
          return typeOf(object2) === REACT_SUSPENSE_TYPE;
        }
        function isSuspenseList(object2) {
          return typeOf(object2) === REACT_SUSPENSE_LIST_TYPE;
        }
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.SuspenseList = SuspenseList;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer2;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isSuspenseList = isSuspenseList;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  },
});

// node_modules/react-is/index.js
var require_react_is2 = __commonJS({
  'node_modules/react-is/index.js'(exports, module) {
    'use strict';
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development2();
    }
  },
});

// node_modules/moment/moment.js
var require_moment = __commonJS({
  'node_modules/moment/moment.js'(exports, module) {
    (function (global2, factory) {
      typeof exports === 'object' && typeof module !== 'undefined'
        ? (module.exports = factory())
        : typeof define === 'function' && define.amd
        ? define(factory)
        : (global2.moment = factory());
    })(exports, function () {
      'use strict';
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray(input) {
        return (
          input instanceof Array ||
          Object.prototype.toString.call(input) === '[object Array]'
        );
      }
      function isObject4(input) {
        return (
          input != null &&
          Object.prototype.toString.call(input) === '[object Object]'
        );
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined2(input) {
        return input === void 0;
      }
      function isNumber(input) {
        return (
          typeof input === 'number' ||
          Object.prototype.toString.call(input) === '[object Number]'
        );
      }
      function isDate2(input) {
        return (
          input instanceof Date ||
          Object.prototype.toString.call(input) === '[object Date]'
        );
      }
      function map2(arr, fn) {
        var res = [],
          i,
          arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
          res.push(fn(arr[i], i));
        }
        return res;
      }
      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }
        if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString;
        }
        if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function createUTC(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, true).utc();
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false,
        };
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }
        return m._pf;
      }
      var some2;
      if (Array.prototype.some) {
        some2 = Array.prototype.some;
      } else {
        some2 = function (fun) {
          var t = Object(this),
            len = t.length >>> 0,
            i;
          for (i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m) {
        var flags = null,
          parsedParts = false,
          isNowValid = m._d && !isNaN(m._d.getTime());
        if (isNowValid) {
          flags = getParsingFlags(m);
          parsedParts = some2.call(flags.parsedDateParts, function (i) {
            return i != null;
          });
          isNowValid =
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidEra &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.weekdayMismatch &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));
          if (m._strict) {
            isNowValid =
              isNowValid &&
              flags.charsLeftOver === 0 &&
              flags.unusedTokens.length === 0 &&
              flags.bigHour === void 0;
          }
        }
        if (Object.isFrozen == null || !Object.isFrozen(m)) {
          m._isValid = isNowValid;
        } else {
          return isNowValid;
        }
        return m._isValid;
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }
        return m;
      }
      var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;
      function copyConfig(to2, from2) {
        var i,
          prop,
          val,
          momentPropertiesLen = momentProperties.length;
        if (!isUndefined2(from2._isAMomentObject)) {
          to2._isAMomentObject = from2._isAMomentObject;
        }
        if (!isUndefined2(from2._i)) {
          to2._i = from2._i;
        }
        if (!isUndefined2(from2._f)) {
          to2._f = from2._f;
        }
        if (!isUndefined2(from2._l)) {
          to2._l = from2._l;
        }
        if (!isUndefined2(from2._strict)) {
          to2._strict = from2._strict;
        }
        if (!isUndefined2(from2._tzm)) {
          to2._tzm = from2._tzm;
        }
        if (!isUndefined2(from2._isUTC)) {
          to2._isUTC = from2._isUTC;
        }
        if (!isUndefined2(from2._offset)) {
          to2._offset = from2._offset;
        }
        if (!isUndefined2(from2._pf)) {
          to2._pf = getParsingFlags(from2);
        }
        if (!isUndefined2(from2._locale)) {
          to2._locale = from2._locale;
        }
        if (momentPropertiesLen > 0) {
          for (i = 0; i < momentPropertiesLen; i++) {
            prop = momentProperties[i];
            val = from2[prop];
            if (!isUndefined2(val)) {
              to2[prop] = val;
            }
          }
        }
        return to2;
      }
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = /* @__PURE__ */ new Date(NaN);
        }
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return (
          obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
      }
      function warn(msg) {
        if (
          hooks.suppressDeprecationWarnings === false &&
          typeof console !== 'undefined' &&
          console.warn
        ) {
          console.warn('Deprecation warning: ' + msg);
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [],
              arg,
              i,
              key,
              argLen = arguments.length;
            for (i = 0; i < argLen; i++) {
              arg = '';
              if (typeof arguments[i] === 'object') {
                arg += '\n[' + i + '] ';
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ': ' + arguments[0][key] + ', ';
                  }
                }
                arg = arg.slice(0, -2);
              } else {
                arg = arguments[i];
              }
              args.push(arg);
            }
            warn(
              msg +
                '\nArguments: ' +
                Array.prototype.slice.call(args).join('') +
                '\n' +
                new Error().stack
            );
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction2(input) {
        return (
          (typeof Function !== 'undefined' && input instanceof Function) ||
          Object.prototype.toString.call(input) === '[object Function]'
        );
      }
      function set(config) {
        var prop, i;
        for (i in config) {
          if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction2(prop)) {
              this[i] = prop;
            } else {
              this['_' + i] = prop;
            }
          }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp(
          (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
            '|' +
            /\d{1,2}/.source
        );
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
          prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject4(parentConfig[prop]) && isObject4(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (
            hasOwnProp(parentConfig, prop) &&
            !hasOwnProp(childConfig, prop) &&
            isObject4(parentConfig[prop])
          ) {
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys2;
      if (Object.keys) {
        keys2 = Object.keys;
      } else {
        keys2 = function (obj) {
          var i,
            res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
      };
      function calendar(key, mom, now2) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction2(output) ? output.call(mom, now2) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
          zerosToFill = targetLength - absNumber.length,
          sign2 = number >= 0;
        return (
          (sign2 ? (forceSign ? '+' : '') : '-') +
          Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
          absNumber
        );
      }
      var formattingTokens =
          /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};
      function addFormatToken(token3, padded, ordinal2, callback) {
        var func = callback;
        if (typeof callback === 'string') {
          func = function () {
            return this[callback]();
          };
        }
        if (token3) {
          formatTokenFunctions[token3] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal2) {
          formatTokenFunctions[ordinal2] = function () {
            return this.localeData().ordinal(
              func.apply(this, arguments),
              token3
            );
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
      }
      function makeFormatFunction(format2) {
        var array = format2.match(formattingTokens),
          i,
          length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }
        return function (mom) {
          var output = '',
            i2;
          for (i2 = 0; i2 < length; i2++) {
            output += isFunction2(array[i2])
              ? array[i2].call(mom, format2)
              : array[i2];
          }
          return output;
        };
      }
      function formatMoment(m, format2) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format2 = expandFormat(format2, m.localeData());
        formatFunctions[format2] =
          formatFunctions[format2] || makeFormatFunction(format2);
        return formatFunctions[format2](m);
      }
      function expandFormat(format2, locale2) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale2.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format2)) {
          format2 = format2.replace(
            localFormattingTokens,
            replaceLongDateFormatTokens
          );
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }
        return format2;
      }
      var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
      };
      function longDateFormat(key) {
        var format2 = this._longDateFormat[key],
          formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format2 || !formatUpper) {
          return format2;
        }
        this._longDateFormat[key] = formatUpper
          .match(formattingTokens)
          .map(function (tok) {
            if (
              tok === 'MMMM' ||
              tok === 'MM' ||
              tok === 'DD' ||
              tok === 'dddd'
            ) {
              return tok.slice(1);
            }
            return tok;
          })
          .join('');
        return this._longDateFormat[key];
      }
      var defaultInvalidDate = 'Invalid date';
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace('%d', number);
      }
      var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction2(output)
          ? output(number, withoutSuffix, string, isFuture)
          : output.replace(/%d/i, number);
      }
      function pastFuture(diff2, output) {
        var format2 = this._relativeTime[diff2 > 0 ? 'future' : 'past'];
        return isFunction2(format2)
          ? format2(output)
          : format2.replace(/%s/i, output);
      }
      var aliases = {
        D: 'date',
        dates: 'date',
        date: 'date',
        d: 'day',
        days: 'day',
        day: 'day',
        e: 'weekday',
        weekdays: 'weekday',
        weekday: 'weekday',
        E: 'isoWeekday',
        isoweekdays: 'isoWeekday',
        isoweekday: 'isoWeekday',
        DDD: 'dayOfYear',
        dayofyears: 'dayOfYear',
        dayofyear: 'dayOfYear',
        h: 'hour',
        hours: 'hour',
        hour: 'hour',
        ms: 'millisecond',
        milliseconds: 'millisecond',
        millisecond: 'millisecond',
        m: 'minute',
        minutes: 'minute',
        minute: 'minute',
        M: 'month',
        months: 'month',
        month: 'month',
        Q: 'quarter',
        quarters: 'quarter',
        quarter: 'quarter',
        s: 'second',
        seconds: 'second',
        second: 'second',
        gg: 'weekYear',
        weekyears: 'weekYear',
        weekyear: 'weekYear',
        GG: 'isoWeekYear',
        isoweekyears: 'isoWeekYear',
        isoweekyear: 'isoWeekYear',
        w: 'week',
        weeks: 'week',
        week: 'week',
        W: 'isoWeek',
        isoweeks: 'isoWeek',
        isoweek: 'isoWeek',
        y: 'year',
        years: 'year',
        year: 'year',
      };
      function normalizeUnits(units) {
        return typeof units === 'string'
          ? aliases[units] || aliases[units.toLowerCase()]
          : void 0;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
          normalizedProp,
          prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {
        date: 9,
        day: 11,
        weekday: 11,
        isoWeekday: 11,
        dayOfYear: 4,
        hour: 13,
        millisecond: 16,
        minute: 14,
        month: 8,
        quarter: 7,
        second: 15,
        weekYear: 1,
        isoWeekYear: 1,
        week: 5,
        isoWeek: 5,
        year: 1,
      };
      function getPrioritizedUnits(unitsObj) {
        var units = [],
          u;
        for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
            units.push({ unit: u, priority: priorities[u] });
          }
        }
        units.sort(function (a, b) {
          return a.priority - b.priority;
        });
        return units;
      }
      var match1 = /\d/,
        match2 = /\d\d/,
        match3 = /\d{3}/,
        match4 = /\d{4}/,
        match6 = /[+-]?\d{6}/,
        match1to2 = /\d\d?/,
        match3to4 = /\d\d\d\d?/,
        match5to6 = /\d\d\d\d\d\d?/,
        match1to3 = /\d{1,3}/,
        match1to4 = /\d{1,4}/,
        match1to6 = /[+-]?\d{1,6}/,
        matchUnsigned = /\d+/,
        matchSigned = /[+-]?\d+/,
        matchOffset = /Z|[+-]\d\d:?\d\d/gi,
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi,
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/,
        matchWord =
          /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        match1to2NoLeadingZero = /^[1-9]\d?/,
        match1to2HasZero = /^([1-9]\d|\d)/,
        regexes;
      regexes = {};
      function addRegexToken(token3, regex, strictRegex) {
        regexes[token3] = isFunction2(regex)
          ? regex
          : function (isStrict, localeData2) {
              return isStrict && strictRegex ? strictRegex : regex;
            };
      }
      function getParseRegexForToken(token3, config) {
        if (!hasOwnProp(regexes, token3)) {
          return new RegExp(unescapeFormat(token3));
        }
        return regexes[token3](config._strict, config._locale);
      }
      function unescapeFormat(s) {
        return regexEscape(
          s
            .replace('\\', '')
            .replace(
              /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
              function (matched, p1, p2, p3, p4) {
                return p1 || p2 || p3 || p4;
              }
            )
        );
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      }
      function absFloor(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
          value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      var tokens = {};
      function addParseToken(token3, callback) {
        var i,
          func = callback,
          tokenLen;
        if (typeof token3 === 'string') {
          token3 = [token3];
        }
        if (isNumber(callback)) {
          func = function (input, array) {
            array[callback] = toInt(input);
          };
        }
        tokenLen = token3.length;
        for (i = 0; i < tokenLen; i++) {
          tokens[token3[i]] = func;
        }
      }
      function addWeekParseToken(token3, callback) {
        addParseToken(token3, function (input, array, config, token4) {
          config._w = config._w || {};
          callback(input, config._w, config, token4);
        });
      }
      function addTimeToArrayFromToken(token3, input, config) {
        if (input != null && hasOwnProp(tokens, token3)) {
          tokens[token3](input, config._a, config, token3);
        }
      }
      function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
      }
      var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;
      addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
      });
      addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
      });
      addFormatToken(0, ['YYYY', 4], 0, 'year');
      addFormatToken(0, ['YYYYY', 5], 0, 'year');
      addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
      addRegexToken('Y', matchSigned);
      addRegexToken('YY', match1to2, match2);
      addRegexToken('YYYY', match1to4, match4);
      addRegexToken('YYYYY', match1to6, match6);
      addRegexToken('YYYYYY', match1to6, match6);
      addParseToken(['YYYYY', 'YYYYYY'], YEAR);
      addParseToken('YYYY', function (input, array) {
        array[YEAR] =
          input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
      });
      function daysInYear2(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear = makeGetSet('FullYear', true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function makeGetSet(unit, keepTime) {
        return function (value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get2(this, unit);
          }
        };
      }
      function get2(mom, unit) {
        if (!mom.isValid()) {
          return NaN;
        }
        var d = mom._d,
          isUTC = mom._isUTC;
        switch (unit) {
          case 'Milliseconds':
            return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
          case 'Seconds':
            return isUTC ? d.getUTCSeconds() : d.getSeconds();
          case 'Minutes':
            return isUTC ? d.getUTCMinutes() : d.getMinutes();
          case 'Hours':
            return isUTC ? d.getUTCHours() : d.getHours();
          case 'Date':
            return isUTC ? d.getUTCDate() : d.getDate();
          case 'Day':
            return isUTC ? d.getUTCDay() : d.getDay();
          case 'Month':
            return isUTC ? d.getUTCMonth() : d.getMonth();
          case 'FullYear':
            return isUTC ? d.getUTCFullYear() : d.getFullYear();
          default:
            return NaN;
        }
      }
      function set$1(mom, unit, value) {
        var d, isUTC, year, month, date;
        if (!mom.isValid() || isNaN(value)) {
          return;
        }
        d = mom._d;
        isUTC = mom._isUTC;
        switch (unit) {
          case 'Milliseconds':
            return void (isUTC
              ? d.setUTCMilliseconds(value)
              : d.setMilliseconds(value));
          case 'Seconds':
            return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
          case 'Minutes':
            return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
          case 'Hours':
            return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
          case 'Date':
            return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
          // case 'Day': // Not real
          //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
          // case 'Month': // Not used because we need to pass two variables
          //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));
          case 'FullYear':
            break;
          // See below ...
          default:
            return;
        }
        year = value;
        month = mom.month();
        date = mom.date();
        date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
        void (isUTC
          ? d.setUTCFullYear(year, month, date)
          : d.setFullYear(year, month, date));
      }
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction2(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (typeof units === 'object') {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units),
            i,
            prioritizedLen = prioritized.length;
          for (i = 0; i < prioritizedLen; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction2(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      function mod(n, x) {
        return ((n % x) + x) % x;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function (o) {
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
          ? isLeapYear(year)
            ? 29
            : 28
          : 31 - ((modMonth % 7) % 2);
      }
      addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
      });
      addFormatToken('MMM', 0, 0, function (format2) {
        return this.localeData().monthsShort(this, format2);
      });
      addFormatToken('MMMM', 0, 0, function (format2) {
        return this.localeData().months(this, format2);
      });
      addRegexToken('M', match1to2, match1to2NoLeadingZero);
      addRegexToken('MM', match1to2, match2);
      addRegexToken('MMM', function (isStrict, locale2) {
        return locale2.monthsShortRegex(isStrict);
      });
      addRegexToken('MMMM', function (isStrict, locale2) {
        return locale2.monthsRegex(isStrict);
      });
      addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(['MMM', 'MMMM'], function (input, array, config, token3) {
        var month = config._locale.monthsParse(input, token3, config._strict);
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });
      var defaultLocaleMonths =
          'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
          ),
        defaultLocaleMonthsShort =
          'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;
      function localeMonths(m, format2) {
        if (!m) {
          return isArray(this._months)
            ? this._months
            : this._months['standalone'];
        }
        return isArray(this._months)
          ? this._months[m.month()]
          : this._months[
              (this._months.isFormat || MONTHS_IN_FORMAT).test(format2)
                ? 'format'
                : 'standalone'
            ][m.month()];
      }
      function localeMonthsShort(m, format2) {
        if (!m) {
          return isArray(this._monthsShort)
            ? this._monthsShort
            : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
          ? this._monthsShort[m.month()]
          : this._monthsShort[
              MONTHS_IN_FORMAT.test(format2) ? 'format' : 'standalone'
            ][m.month()];
      }
      function handleStrictParse(monthName, format2, strict) {
        var i,
          ii,
          mom,
          llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([2e3, i]);
            this._shortMonthsParse[i] = this.monthsShort(
              mom,
              ''
            ).toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse(monthName, format2, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format2, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp(
              '^' + this.months(mom, '').replace('.', '') + '$',
              'i'
            );
            this._shortMonthsParse[i] = new RegExp(
              '^' + this.monthsShort(mom, '').replace('.', '') + '$',
              'i'
            );
          }
          if (!strict && !this._monthsParse[i]) {
            regex =
              '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          if (
            strict &&
            format2 === 'MMMM' &&
            this._longMonthsParse[i].test(monthName)
          ) {
            return i;
          } else if (
            strict &&
            format2 === 'MMM' &&
            this._shortMonthsParse[i].test(monthName)
          ) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      }
      function setMonth(mom, value) {
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === 'string') {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber(value)) {
              return mom;
            }
          }
        }
        var month = value,
          date = mom.date();
        date =
          date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
        void (mom._isUTC
          ? mom._d.setUTCMonth(month, date)
          : mom._d.setMonth(month, date));
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get2(this, 'Month');
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict
            ? this._monthsShortStrictRegex
            : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict
            ? this._monthsStrictRegex
            : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var shortPieces = [],
          longPieces = [],
          mixedPieces = [],
          i,
          mom,
          shortP,
          longP;
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          shortP = regexEscape(this.monthsShort(mom, ''));
          longP = regexEscape(this.months(mom, ''));
          shortPieces.push(shortP);
          longPieces.push(longP);
          mixedPieces.push(longP);
          mixedPieces.push(shortP);
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
          '^(' + longPieces.join('|') + ')',
          'i'
        );
        this._monthsShortStrictRegex = new RegExp(
          '^(' + shortPieces.join('|') + ')',
          'i'
        );
      }
      function createDate(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
      }
      function createUTCDate(y) {
        var date, args;
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy,
          fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
          weekOffset = firstWeekOffset(year, dow, doy),
          dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
          resYear,
          resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear2(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear2(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear2(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear,
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
          week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
          resWeek,
          resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear,
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
          weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear2(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken('w', ['ww', 2], 'wo', 'week');
      addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
      addRegexToken('w', match1to2, match1to2NoLeadingZero);
      addRegexToken('ww', match1to2, match2);
      addRegexToken('W', match1to2, match1to2NoLeadingZero);
      addRegexToken('WW', match1to2, match2);
      addWeekParseToken(
        ['w', 'ww', 'W', 'WW'],
        function (input, week, config, token3) {
          week[token3.substr(0, 1)] = toInt(input);
        }
      );
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        // Sunday is the first day of the week.
        doy: 6,
        // The week that contains Jan 6th is the first week of the year.
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
      }
      addFormatToken('d', 0, 'do', 'day');
      addFormatToken('dd', 0, 0, function (format2) {
        return this.localeData().weekdaysMin(this, format2);
      });
      addFormatToken('ddd', 0, 0, function (format2) {
        return this.localeData().weekdaysShort(this, format2);
      });
      addFormatToken('dddd', 0, 0, function (format2) {
        return this.localeData().weekdays(this, format2);
      });
      addFormatToken('e', 0, 0, 'weekday');
      addFormatToken('E', 0, 0, 'isoWeekday');
      addRegexToken('d', match1to2);
      addRegexToken('e', match1to2);
      addRegexToken('E', match1to2);
      addRegexToken('dd', function (isStrict, locale2) {
        return locale2.weekdaysMinRegex(isStrict);
      });
      addRegexToken('ddd', function (isStrict, locale2) {
        return locale2.weekdaysShortRegex(isStrict);
      });
      addRegexToken('dddd', function (isStrict, locale2) {
        return locale2.weekdaysRegex(isStrict);
      });
      addWeekParseToken(
        ['dd', 'ddd', 'dddd'],
        function (input, week, config, token3) {
          var weekday = config._locale.weekdaysParse(
            input,
            token3,
            config._strict
          );
          if (weekday != null) {
            week.d = weekday;
          } else {
            getParsingFlags(config).invalidWeekday = input;
          }
        }
      );
      addWeekParseToken(
        ['d', 'e', 'E'],
        function (input, week, config, token3) {
          week[token3] = toInt(input);
        }
      );
      function parseWeekday(input, locale2) {
        if (typeof input !== 'string') {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale2.weekdaysParse(input);
        if (typeof input === 'number') {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale2) {
        if (typeof input === 'string') {
          return locale2.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }
      var defaultLocaleWeekdays =
          'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m, format2) {
        var weekdays = isArray(this._weekdays)
          ? this._weekdays
          : this._weekdays[
              m && m !== true && this._weekdays.isFormat.test(format2)
                ? 'format'
                : 'standalone'
            ];
        return m === true
          ? shiftWeekdays(weekdays, this._week.dow)
          : m
          ? weekdays[m.day()]
          : weekdays;
      }
      function localeWeekdaysShort(m) {
        return m === true
          ? shiftWeekdays(this._weekdaysShort, this._week.dow)
          : m
          ? this._weekdaysShort[m.day()]
          : this._weekdaysShort;
      }
      function localeWeekdaysMin(m) {
        return m === true
          ? shiftWeekdays(this._weekdaysMin, this._week.dow)
          : m
          ? this._weekdaysMin[m.day()]
          : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format2, strict) {
        var i,
          ii,
          mom,
          llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC([2e3, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(
              mom,
              ''
            ).toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(
              mom,
              ''
            ).toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format2, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format2, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp(
              '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
              'i'
            );
            this._shortWeekdaysParse[i] = new RegExp(
              '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
              'i'
            );
            this._minWeekdaysParse[i] = new RegExp(
              '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
              'i'
            );
          }
          if (!this._weekdaysParse[i]) {
            regex =
              '^' +
              this.weekdays(mom, '') +
              '|^' +
              this.weekdaysShort(mom, '') +
              '|^' +
              this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          if (
            strict &&
            format2 === 'dddd' &&
            this._fullWeekdaysParse[i].test(weekdayName)
          ) {
            return i;
          } else if (
            strict &&
            format2 === 'ddd' &&
            this._shortWeekdaysParse[i].test(weekdayName)
          ) {
            return i;
          } else if (
            strict &&
            format2 === 'dd' &&
            this._minWeekdaysParse[i].test(weekdayName)
          ) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      }
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = get2(this, 'Day');
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, 'd');
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict
            ? this._weekdaysStrictRegex
            : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict
            ? this._weekdaysShortStrictRegex
            : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict
            ? this._weekdaysMinStrictRegex
            : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var minPieces = [],
          shortPieces = [],
          longPieces = [],
          mixedPieces = [],
          i,
          mom,
          minp,
          shortp,
          longp;
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          minp = regexEscape(this.weekdaysMin(mom, ''));
          shortp = regexEscape(this.weekdaysShort(mom, ''));
          longp = regexEscape(this.weekdays(mom, ''));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp(
          '^(' + mixedPieces.join('|') + ')',
          'i'
        );
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp(
          '^(' + longPieces.join('|') + ')',
          'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
          '^(' + shortPieces.join('|') + ')',
          'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
          '^(' + minPieces.join('|') + ')',
          'i'
        );
      }
      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken('H', ['HH', 2], 0, 'hour');
      addFormatToken('h', ['hh', 2], 0, hFormat);
      addFormatToken('k', ['kk', 2], 0, kFormat);
      addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken('hmmss', 0, 0, function () {
        return (
          '' +
          hFormat.apply(this) +
          zeroFill(this.minutes(), 2) +
          zeroFill(this.seconds(), 2)
        );
      });
      addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken('Hmmss', 0, 0, function () {
        return (
          '' +
          this.hours() +
          zeroFill(this.minutes(), 2) +
          zeroFill(this.seconds(), 2)
        );
      });
      function meridiem(token3, lowercase) {
        addFormatToken(token3, 0, 0, function () {
          return this.localeData().meridiem(
            this.hours(),
            this.minutes(),
            lowercase
          );
        });
      }
      meridiem('a', true);
      meridiem('A', false);
      function matchMeridiem(isStrict, locale2) {
        return locale2._meridiemParse;
      }
      addRegexToken('a', matchMeridiem);
      addRegexToken('A', matchMeridiem);
      addRegexToken('H', match1to2, match1to2HasZero);
      addRegexToken('h', match1to2, match1to2NoLeadingZero);
      addRegexToken('k', match1to2, match1to2NoLeadingZero);
      addRegexToken('HH', match1to2, match2);
      addRegexToken('hh', match1to2, match2);
      addRegexToken('kk', match1to2, match2);
      addRegexToken('hmm', match3to4);
      addRegexToken('hmmss', match5to6);
      addRegexToken('Hmm', match3to4);
      addRegexToken('Hmmss', match5to6);
      addParseToken(['H', 'HH'], HOUR);
      addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
          pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
          pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });
      function localeIsPM(input) {
        return (input + '').toLowerCase().charAt(0) === 'p';
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        getSetHour = makeGetSet('Hours', true);
      function localeMeridiem(hours2, minutes2, isLower) {
        if (hours2 > 11) {
          return isLower ? 'pm' : 'PM';
        } else {
          return isLower ? 'am' : 'AM';
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse,
      };
      var locales = {},
        localeFamilies = {},
        globalLocale;
      function commonPrefix(arr1, arr2) {
        var i,
          minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
            return i;
          }
        }
        return minl;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
      }
      function chooseLocale(names) {
        var i = 0,
          j,
          next,
          locale2,
          split3;
        while (i < names.length) {
          split3 = normalizeLocale(names[i]).split('-');
          j = split3.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;
          while (j > 0) {
            locale2 = loadLocale(split3.slice(0, j).join('-'));
            if (locale2) {
              return locale2;
            }
            if (
              next &&
              next.length >= j &&
              commonPrefix(split3, next) >= j - 1
            ) {
              break;
            }
            j--;
          }
          i++;
        }
        return globalLocale;
      }
      function isLocaleNameSane(name) {
        return !!(name && name.match('^[^/\\\\]*$'));
      }
      function loadLocale(name) {
        var oldLocale = null,
          aliasedRequire;
        if (
          locales[name] === void 0 &&
          typeof module !== 'undefined' &&
          module &&
          module.exports &&
          isLocaleNameSane(name)
        ) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = __require;
            aliasedRequire('./locale/' + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {
            locales[name] = null;
          }
        }
        return locales[name];
      }
      function getSetGlobalLocale(key, values2) {
        var data;
        if (key) {
          if (isUndefined2(values2)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values2);
          }
          if (data) {
            globalLocale = data;
          } else {
            if (typeof console !== 'undefined' && console.warn) {
              console.warn(
                'Locale ' + key + ' not found. Did you forget to load it?'
              );
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var locale2,
            parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple(
              'defineLocaleOverride',
              'use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
            );
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale2 = loadLocale(config.parentLocale);
              if (locale2 != null) {
                parentConfig = locale2._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name,
                  config,
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
              defineLocale(x.name, x.config);
            });
          }
          getSetGlobalLocale(name);
          return locales[name];
        } else {
          delete locales[name];
          return null;
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale2,
            tmpLocale,
            parentConfig = baseConfig;
          if (locales[name] != null && locales[name].parentLocale != null) {
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              config.abbr = name;
            }
            locale2 = new Locale(config);
            locale2.parentLocale = locales[name];
            locales[name] = locale2;
          }
          getSetGlobalLocale(name);
        } else {
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }
      function getLocale(key) {
        var locale2;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale;
        }
        if (!isArray(key)) {
          locale2 = loadLocale(key);
          if (locale2) {
            return locale2;
          }
          key = [key];
        }
        return chooseLocale(key);
      }
      function listLocales() {
        return keys2(locales);
      }
      function checkOverflow(m) {
        var overflow,
          a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow =
            a[MONTH] < 0 || a[MONTH] > 11
              ? MONTH
              : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
              ? DATE
              : a[HOUR] < 0 ||
                a[HOUR] > 24 ||
                (a[HOUR] === 24 &&
                  (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0))
              ? HOUR
              : a[MINUTE] < 0 || a[MINUTE] > 59
              ? MINUTE
              : a[SECOND] < 0 || a[SECOND] > 59
              ? SECOND
              : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
              ? MILLISECOND
              : -1;
          if (
            getParsingFlags(m)._overflowDayOfYear &&
            (overflow < YEAR || overflow > DATE)
          ) {
            overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m).overflow = overflow;
        }
        return m;
      }
      var extendedIsoRegex =
          /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex =
          /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
          ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
          ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
          ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
          ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
          ['YYYY-DDD', /\d{4}-\d{3}/],
          ['YYYY-MM', /\d{4}-\d\d/, false],
          ['YYYYYYMMDD', /[+-]\d{10}/],
          ['YYYYMMDD', /\d{8}/],
          ['GGGG[W]WWE', /\d{4}W\d{3}/],
          ['GGGG[W]WW', /\d{4}W\d{2}/, false],
          ['YYYYDDD', /\d{7}/],
          ['YYYYMM', /\d{6}/, false],
          ['YYYY', /\d{4}/, false],
        ],
        isoTimes = [
          ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
          ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
          ['HH:mm:ss', /\d\d:\d\d:\d\d/],
          ['HH:mm', /\d\d:\d\d/],
          ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
          ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
          ['HHmmss', /\d\d\d\d\d\d/],
          ['HHmm', /\d\d\d\d/],
          ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        rfc2822 =
          /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
          UT: 0,
          GMT: 0,
          EDT: -4 * 60,
          EST: -5 * 60,
          CDT: -5 * 60,
          CST: -6 * 60,
          MDT: -6 * 60,
          MST: -7 * 60,
          PDT: -7 * 60,
          PST: -8 * 60,
        };
      function configFromISO(config) {
        var i,
          l,
          string = config._i,
          match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
          allowTime,
          dateFormat,
          timeFormat,
          tzFormat,
          isoDatesLen = isoDates.length,
          isoTimesLen = isoTimes.length;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i = 0, l = isoDatesLen; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i = 0, l = isoTimesLen; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                timeFormat = (match[2] || ' ') + isoTimes[i][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = 'Z';
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
      ) {
        var result2 = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10),
        ];
        if (secondStr) {
          result2.push(parseInt(secondStr, 10));
        }
        return result2;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s) {
        return s
          .replace(/\([^()]*\)|[\n\t]/g, ' ')
          .replace(/(\s\s+)/g, ' ')
          .replace(/^\s\s*/, '')
          .replace(/\s\s*$/, '');
      }
      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
            weekdayActual = new Date(
              parsedInput[0],
              parsedInput[1],
              parsedInput[2]
            ).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10),
            m = hm % 100,
            h = (hm - m) / 100;
          return h * 60 + m;
        }
      }
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
          parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(
            match[4],
            match[3],
            match[2],
            match[5],
            match[6],
            match[7]
          );
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = /* @__PURE__ */ new Date(+matched[1]);
          return;
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
          config._d = /* @__PURE__ */ new Date(
            config._i + (config._useUTC ? ' UTC' : '')
          );
        }
      );
      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }
      function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate(),
          ];
        }
        return [
          nowValue.getFullYear(),
          nowValue.getMonth(),
          nowValue.getDate(),
        ];
      }
      function configFromArray(config) {
        var i,
          date,
          input = [],
          currentDate,
          expectedWeekday,
          yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (
            config._dayOfYear > daysInYear2(yearToUse) ||
            config._dayOfYear === 0
          ) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
          config._a[i] = input[i] =
            config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }
        if (
          config._a[HOUR] === 24 &&
          config._a[MINUTE] === 0 &&
          config._a[SECOND] === 0 &&
          config._a[MILLISECOND] === 0
        ) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(
          null,
          input
        );
        expectedWeekday = config._useUTC
          ? config._d.getUTCDay()
          : config._d.getDay();
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR] = 24;
        }
        if (
          config._w &&
          typeof config._w.d !== 'undefined' &&
          config._w.d !== expectedWeekday
        ) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w,
          weekYear,
          week,
          weekday,
          dow,
          doy,
          temp,
          weekdayOverflow,
          curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults(
            w.GG,
            config._a[YEAR],
            weekOfYear(createLocal(), 1, 4).year
          );
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
          week = defaults(w.w, curWeek.week);
          if (w.d != null) {
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }
      hooks.ISO_8601 = function () {};
      hooks.RFC_2822 = function () {};
      function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = '' + config._i,
          i,
          parsedInput,
          tokens2,
          token3,
          skipped,
          stringLength = string.length,
          totalParsedInputLength = 0,
          era,
          tokenLen;
        tokens2 =
          expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens2.length;
        for (i = 0; i < tokenLen; i++) {
          token3 = tokens2[i];
          parsedInput = (string.match(getParseRegexForToken(token3, config)) ||
            [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(
              string.indexOf(parsedInput) + parsedInput.length
            );
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token3]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token3);
            }
            addTimeToArrayFromToken(token3, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token3);
          }
        }
        getParsingFlags(config).charsLeftOver =
          stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        }
        if (
          config._a[HOUR] <= 12 &&
          getParsingFlags(config).bigHour === true &&
          config._a[HOUR] > 0
        ) {
          getParsingFlags(config).bigHour = void 0;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(
          config._locale,
          config._a[HOUR],
          config._meridiem
        );
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(
            era,
            config._a[YEAR]
          );
        }
        configFromArray(config);
        checkOverflow(config);
      }
      function meridiemFixWrap(locale2, hour, meridiem2) {
        var isPm;
        if (meridiem2 == null) {
          return hour;
        }
        if (locale2.meridiemHour != null) {
          return locale2.meridiemHour(hour, meridiem2);
        } else if (locale2.isPM != null) {
          isPm = locale2.isPM(meridiem2);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray(config) {
        var tempConfig,
          bestMoment,
          scoreToBeat,
          i,
          currentScore,
          validFormatFound,
          bestFormatIsValid = false,
          configfLen = config._f.length;
        if (configfLen === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = /* @__PURE__ */ new Date(NaN);
          return;
        }
        for (i = 0; i < configfLen; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (
              scoreToBeat == null ||
              currentScore < scoreToBeat ||
              validFormatFound
            ) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend(config, bestMoment || tempConfig);
      }
      function configFromObject(config) {
        if (config._d) {
          return;
        }
        var i = normalizeObjectUnits(config._i),
          dayOrDate = i.day === void 0 ? i.date : i.day;
        config._a = map2(
          [
            i.year,
            i.month,
            dayOrDate,
            i.hour,
            i.minute,
            i.second,
            i.millisecond,
          ],
          function (obj) {
            return obj && parseInt(obj, 10);
          }
        );
        configFromArray(config);
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          res.add(1, 'd');
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig(config) {
        var input = config._i,
          format2 = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || (format2 === void 0 && input === '')) {
          return createInvalid({ nullInput: true });
        }
        if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate2(input)) {
          config._d = input;
        } else if (isArray(format2)) {
          configFromStringAndArray(config);
        } else if (format2) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }
        if (!isValid(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput(config) {
        var input = config._i;
        if (isUndefined2(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate2(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map2(input.slice(0), function (obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject4(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
        var c = {};
        if (format2 === true || format2 === false) {
          strict = format2;
          format2 = void 0;
        }
        if (locale2 === true || locale2 === false) {
          strict = locale2;
          locale2 = void 0;
        }
        if (
          (isObject4(input) && isObjectEmpty(input)) ||
          (isArray(input) && input.length === 0)
        ) {
          input = void 0;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale2;
        c._i = input;
        c._f = format2;
        c._strict = strict;
        return createFromConfig(c);
      }
      function createLocal(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, false);
      }
      var prototypeMin = deprecate(
          'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
          function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other < this ? this : other;
            } else {
              return createInvalid();
            }
          }
        ),
        prototypeMax = deprecate(
          'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
          function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other > this ? this : other;
            } else {
              return createInvalid();
            }
          }
        );
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }
        return res;
      }
      function min2() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args);
      }
      function max2() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args);
      }
      var now = function () {
        return Date.now ? Date.now() : +(/* @__PURE__ */ new Date());
      };
      var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
      ];
      function isDurationValid(m) {
        var key,
          unitHasDecimal = false,
          i,
          orderLen = ordering.length;
        for (key in m) {
          if (
            hasOwnProp(m, key) &&
            !(
              indexOf.call(ordering, key) !== -1 &&
              (m[key] == null || !isNaN(m[key]))
            )
          ) {
            return false;
          }
        }
        for (i = 0; i < orderLen; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
          years2 = normalizedInput.year || 0,
          quarters = normalizedInput.quarter || 0,
          months2 = normalizedInput.month || 0,
          weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0,
          days2 = normalizedInput.day || 0,
          hours2 = normalizedInput.hour || 0,
          minutes2 = normalizedInput.minute || 0,
          seconds2 = normalizedInput.second || 0,
          milliseconds2 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds =
          +milliseconds2 +
          seconds2 * 1e3 + // 1000
          minutes2 * 6e4 + // 1000 * 60
          hours2 * 1e3 * 60 * 60;
        this._days = +days2 + weeks2 * 7;
        this._months = +months2 + quarters * 3 + years2 * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
          lengthDiff = Math.abs(array1.length - array2.length),
          diffs = 0,
          i;
        for (i = 0; i < len; i++) {
          if (
            (dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
          ) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset(token3, separator) {
        addFormatToken(token3, 0, 0, function () {
          var offset2 = this.utcOffset(),
            sign2 = '+';
          if (offset2 < 0) {
            offset2 = -offset2;
            sign2 = '-';
          }
          return (
            sign2 +
            zeroFill(~~(offset2 / 60), 2) +
            separator +
            zeroFill(~~offset2 % 60, 2)
          );
        });
      }
      offset('Z', ':');
      offset('ZZ', '');
      addRegexToken('Z', matchShortOffset);
      addRegexToken('ZZ', matchShortOffset);
      addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher2, string) {
        var matches2 = (string || '').match(matcher2),
          chunk2,
          parts,
          minutes2;
        if (matches2 === null) {
          return null;
        }
        chunk2 = matches2[matches2.length - 1] || [];
        parts = (chunk2 + '').match(chunkOffset) || ['-', 0, 0];
        minutes2 = +(parts[1] * 60) + toInt(parts[2]);
        return minutes2 === 0 ? 0 : parts[0] === '+' ? minutes2 : -minutes2;
      }
      function cloneWithOffset(input, model) {
        var res, diff2;
        if (model._isUTC) {
          res = model.clone();
          diff2 =
            (isMoment(input) || isDate2(input)
              ? input.valueOf()
              : createLocal(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff2);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset());
      }
      hooks.updateOffset = function () {};
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset2 = this._offset || 0,
          localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, 'm');
          }
          if (offset2 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset2, 'm'), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset2 : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== 'string') {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return (
          this.utcOffset() > this.clone().month(0).utcOffset() ||
          this.utcOffset() > this.clone().month(5).utcOffset()
        );
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined2(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c = {},
          other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted =
            this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        isoRegex =
          /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input,
          match = null,
          sign2,
          ret,
          diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months,
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if ((match = aspNetRegex.exec(input))) {
          sign2 = match[1] === '-' ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign2,
            h: toInt(match[HOUR]) * sign2,
            m: toInt(match[MINUTE]) * sign2,
            s: toInt(match[SECOND]) * sign2,
            ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2,
            // the millisecond decimal point is included in the match
          };
        } else if ((match = isoRegex.exec(input))) {
          sign2 = match[1] === '-' ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign2),
            M: parseIso(match[3], sign2),
            w: parseIso(match[4], sign2),
            d: parseIso(match[5], sign2),
            h: parseIso(match[6], sign2),
            m: parseIso(match[7], sign2),
            s: parseIso(match[8], sign2),
          };
        } else if (duration == null) {
          duration = {};
        } else if (
          typeof duration === 'object' &&
          ('from' in duration || 'to' in duration)
        ) {
          diffRes = momentsDifference(
            createLocal(duration.from),
            createLocal(duration.to)
          );
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign2) {
        var res = inp && parseFloat(inp.replace(',', '.'));
        return (isNaN(res) ? 0 : res) * sign2;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months =
          other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name) {
        return function (val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(
              name,
              'moment().' +
                name +
                '(period, number) is deprecated. Please use moment().' +
                name +
                '(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
            );
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds2 = duration._milliseconds,
          days2 = absRound(duration._days),
          months2 = absRound(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months2) {
          setMonth(mom, get2(mom, 'Month') + months2 * isAdding);
        }
        if (days2) {
          set$1(mom, 'Date', get2(mom, 'Date') + days2 * isAdding);
        }
        if (milliseconds2) {
          mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days2 || months2);
        }
      }
      var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');
      function isString(input) {
        return typeof input === 'string' || input instanceof String;
      }
      function isMomentInput(input) {
        return (
          isMoment(input) ||
          isDate2(input) ||
          isString(input) ||
          isNumber(input) ||
          isNumberOrStringArray(input) ||
          isMomentInputObject(input) ||
          input === null ||
          input === void 0
        );
      }
      function isMomentInputObject(input) {
        var objectTest = isObject4(input) && !isObjectEmpty(input),
          propertyTest = false,
          properties = [
            'years',
            'year',
            'y',
            'months',
            'month',
            'M',
            'days',
            'day',
            'd',
            'dates',
            'date',
            'D',
            'hours',
            'hour',
            'h',
            'minutes',
            'minute',
            'm',
            'seconds',
            'second',
            's',
            'milliseconds',
            'millisecond',
            'ms',
          ],
          i,
          property2,
          propertyLen = properties.length;
        for (i = 0; i < propertyLen; i += 1) {
          property2 = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property2);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
          dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest =
            input.filter(function (item) {
              return !isNumber(item) && isString(input);
            }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject4(input) && !isObjectEmpty(input),
          propertyTest = false,
          properties = [
            'sameDay',
            'nextDay',
            'lastDay',
            'nextWeek',
            'lastWeek',
            'sameElse',
          ],
          i,
          property2;
        for (i = 0; i < properties.length; i += 1) {
          property2 = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property2);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now2) {
        var diff2 = myMoment.diff(now2, 'days', true);
        return diff2 < -6
          ? 'sameElse'
          : diff2 < -1
          ? 'lastWeek'
          : diff2 < 0
          ? 'lastDay'
          : diff2 < 1
          ? 'sameDay'
          : diff2 < 2
          ? 'nextDay'
          : diff2 < 7
          ? 'nextWeek'
          : 'sameElse';
      }
      function calendar$1(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now2 = time || createLocal(),
          sod = cloneWithOffset(now2, this).startOf('day'),
          format2 = hooks.calendarFormat(this, sod) || 'sameElse',
          output =
            formats &&
            (isFunction2(formats[format2])
              ? formats[format2].call(this, now2)
              : formats[format2]);
        return this.format(
          output || this.localeData().calendar(format2, this, createLocal(now2))
        );
      }
      function clone2() {
        return new Moment(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from2, to2, units, inclusivity) {
        var localFrom = isMoment(from2) ? from2 : createLocal(from2),
          localTo = isMoment(to2) ? to2 : createLocal(to2);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || '()';
        return (
          (inclusivity[0] === '('
            ? this.isAfter(localFrom, units)
            : !this.isBefore(localFrom, units)) &&
          (inclusivity[1] === ')'
            ? this.isBefore(localTo, units)
            : !this.isAfter(localTo, units))
        );
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
          inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return (
            this.clone().startOf(units).valueOf() <= inputMs &&
            inputMs <= this.clone().endOf(units).valueOf()
          );
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case 'year':
            output = monthDiff(this, that) / 12;
            break;
          case 'month':
            output = monthDiff(this, that);
            break;
          case 'quarter':
            output = monthDiff(this, that) / 3;
            break;
          case 'second':
            output = (this - that) / 1e3;
            break;
          // 1000
          case 'minute':
            output = (this - that) / 6e4;
            break;
          // 1000 * 60
          case 'hour':
            output = (this - that) / 36e5;
            break;
          // 1000 * 60 * 60
          case 'day':
            output = (this - that - zoneDelta) / 864e5;
            break;
          // 1000 * 60 * 60 * 24, negate dst
          case 'week':
            output = (this - that - zoneDelta) / 6048e5;
            break;
          // 1000 * 60 * 60 * 24 * 7, negate dst
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a, b) {
        if (a.date() < b.date()) {
          return -monthDiff(b, a);
        }
        var wholeMonthDiff =
            (b.year() - a.year()) * 12 + (b.month() - a.month()),
          anchor = a.clone().add(wholeMonthDiff, 'months'),
          anchor2,
          adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
          adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
      hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
      function toString2() {
        return this.clone()
          .locale('en')
          .format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true,
          m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(
            m,
            utc
              ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
              : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
          );
        }
        if (isFunction2(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3)
              .toISOString()
              .replace('Z', formatMoment(m, 'Z'));
          }
        }
        return formatMoment(
          m,
          utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
      }
      function inspect() {
        if (!this.isValid()) {
          return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
          zone = '',
          prefix,
          year,
          datetime,
          suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
          zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc()
            ? hooks.defaultFormatUtc
            : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (
          this.isValid() &&
          ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
          return createDuration({ to: this, from: time })
            .locale(this.locale())
            .humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (
          this.isValid() &&
          ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
          return createDuration({ from: this, to: time })
            .locale(this.locale())
            .humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }
      function locale(key) {
        var newLocaleData;
        if (key === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
          if (key === void 0) {
            return this.localeData();
          } else {
            return this.locale(key);
          }
        }
      );
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1e3,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
      function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
      }
      function localStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }
      function utcStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === 'millisecond' || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case 'year':
            time = startOfDate(this.year(), 0, 1);
            break;
          case 'quarter':
            time = startOfDate(
              this.year(),
              this.month() - (this.month() % 3),
              1
            );
            break;
          case 'month':
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case 'week':
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - this.weekday()
            );
            break;
          case 'isoWeek':
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - (this.isoWeekday() - 1)
            );
            break;
          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case 'hour':
            time = this._d.valueOf();
            time -= mod$1(
              time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
              MS_PER_HOUR
            );
            break;
          case 'minute':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case 'second':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === 'millisecond' || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case 'year':
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case 'quarter':
            time =
              startOfDate(
                this.year(),
                this.month() - (this.month() % 3) + 3,
                1
              ) - 1;
            break;
          case 'month':
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case 'week':
            time =
              startOfDate(
                this.year(),
                this.month(),
                this.date() - this.weekday() + 7
              ) - 1;
            break;
          case 'isoWeek':
            time =
              startOfDate(
                this.year(),
                this.month(),
                this.date() - (this.isoWeekday() - 1) + 7
              ) - 1;
            break;
          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case 'hour':
            time = this._d.valueOf();
            time +=
              MS_PER_HOUR -
              mod$1(
                time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                MS_PER_HOUR
              ) -
              1;
            break;
          case 'minute':
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case 'second':
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate2() {
        return new Date(this.valueOf());
      }
      function toArray2() {
        var m = this;
        return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond(),
        ];
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds(),
        };
      }
      function toJSON() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict,
        };
      }
      addFormatToken('N', 0, 0, 'eraAbbr');
      addFormatToken('NN', 0, 0, 'eraAbbr');
      addFormatToken('NNN', 0, 0, 'eraAbbr');
      addFormatToken('NNNN', 0, 0, 'eraName');
      addFormatToken('NNNNN', 0, 0, 'eraNarrow');
      addFormatToken('y', ['y', 1], 'yo', 'eraYear');
      addFormatToken('y', ['yy', 2], 0, 'eraYear');
      addFormatToken('y', ['yyy', 3], 0, 'eraYear');
      addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
      addRegexToken('N', matchEraAbbr);
      addRegexToken('NN', matchEraAbbr);
      addRegexToken('NNN', matchEraAbbr);
      addRegexToken('NNNN', matchEraName);
      addRegexToken('NNNNN', matchEraNarrow);
      addParseToken(
        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
        function (input, array, config, token3) {
          var era = config._locale.erasParse(input, token3, config._strict);
          if (era) {
            getParsingFlags(config).era = era;
          } else {
            getParsingFlags(config).invalidEra = input;
          }
        }
      );
      addRegexToken('y', matchUnsigned);
      addRegexToken('yy', matchUnsigned);
      addRegexToken('yyy', matchUnsigned);
      addRegexToken('yyyy', matchUnsigned);
      addRegexToken('yo', matchEraYearOrdinal);
      addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
      addParseToken(['yo'], function (input, array, config, token3) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m, format2) {
        var i,
          l,
          date,
          eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
          switch (typeof eras[i].since) {
            case 'string':
              date = hooks(eras[i].since).startOf('day');
              eras[i].since = date.valueOf();
              break;
          }
          switch (typeof eras[i].until) {
            case 'undefined':
              eras[i].until = Infinity;
              break;
            case 'string':
              date = hooks(eras[i].until).startOf('day').valueOf();
              eras[i].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format2, strict) {
        var i,
          l,
          eras = this.eras(),
          name,
          abbr,
          narrow;
        eraName = eraName.toUpperCase();
        for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();
          if (strict) {
            switch (format2) {
              case 'N':
              case 'NN':
              case 'NNN':
                if (abbr === eraName) {
                  return eras[i];
                }
                break;
              case 'NNNN':
                if (name === eraName) {
                  return eras[i];
                }
                break;
              case 'NNNNN':
                if (narrow === eraName) {
                  return eras[i];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i,
          l,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf('day').valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].name;
          }
        }
        return '';
      }
      function getEraNarrow() {
        var i,
          l,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf('day').valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].narrow;
          }
        }
        return '';
      }
      function getEraAbbr() {
        var i,
          l,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf('day').valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].abbr;
          }
        }
        return '';
      }
      function getEraYear() {
        var i,
          l,
          dir,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? 1 : -1;
          val = this.clone().startOf('day').valueOf();
          if (
            (eras[i].since <= val && val <= eras[i].until) ||
            (eras[i].until <= val && val <= eras[i].since)
          ) {
            return (
              (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset
            );
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale2) {
        return locale2.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale2) {
        return locale2.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale2) {
        return locale2.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale2) {
        return locale2._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [],
          namePieces = [],
          narrowPieces = [],
          mixedPieces = [],
          i,
          l,
          erasName,
          erasAbbr,
          erasNarrow,
          eras = this.eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          erasName = regexEscape(eras[i].name);
          erasAbbr = regexEscape(eras[i].abbr);
          erasNarrow = regexEscape(eras[i].narrow);
          namePieces.push(erasName);
          abbrPieces.push(erasAbbr);
          narrowPieces.push(erasNarrow);
          mixedPieces.push(erasName);
          mixedPieces.push(erasAbbr);
          mixedPieces.push(erasNarrow);
        }
        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp(
          '^(' + namePieces.join('|') + ')',
          'i'
        );
        this._erasAbbrRegex = new RegExp(
          '^(' + abbrPieces.join('|') + ')',
          'i'
        );
        this._erasNarrowRegex = new RegExp(
          '^(' + narrowPieces.join('|') + ')',
          'i'
        );
      }
      addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token3, getter) {
        addFormatToken(0, [token3, token3.length], 0, getter);
      }
      addWeekYearFormatToken('gggg', 'weekYear');
      addWeekYearFormatToken('ggggg', 'weekYear');
      addWeekYearFormatToken('GGGG', 'isoWeekYear');
      addWeekYearFormatToken('GGGGG', 'isoWeekYear');
      addRegexToken('G', matchSigned);
      addRegexToken('g', matchSigned);
      addRegexToken('GG', match1to2, match2);
      addRegexToken('gg', match1to2, match2);
      addRegexToken('GGGG', match1to4, match4);
      addRegexToken('gggg', match1to4, match4);
      addRegexToken('GGGGG', match1to6, match6);
      addRegexToken('ggggg', match1to6, match6);
      addWeekParseToken(
        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
        function (input, week, config, token3) {
          week[token3.substr(0, 2)] = toInt(input);
        }
      );
      addWeekParseToken(['gg', 'GG'], function (input, week, config, token3) {
        week[token3] = hooks.parseTwoDigitYear(input);
      });
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
          this,
          input,
          this.week(),
          this.weekday() + this.localeData()._week.dow,
          this.localeData()._week.dow,
          this.localeData()._week.doy
        );
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
          this,
          input,
          this.isoWeek(),
          this.isoWeekday(),
          1,
          4
        );
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(
            weekYear,
            week,
            weekday,
            dow,
            doy
          ),
          date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken('Q', 0, 'Qo', 'quarter');
      addRegexToken('Q', match1);
      addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });
      function getSetQuarter(input) {
        return input == null
          ? Math.ceil((this.month() + 1) / 3)
          : this.month((input - 1) * 3 + (this.month() % 3));
      }
      addFormatToken('D', ['DD', 2], 'Do', 'date');
      addRegexToken('D', match1to2, match1to2NoLeadingZero);
      addRegexToken('DD', match1to2, match2);
      addRegexToken('Do', function (isStrict, locale2) {
        return isStrict
          ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse
          : locale2._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(['D', 'DD'], DATE);
      addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });
      var getSetDayOfMonth = makeGetSet('Date', true);
      addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
      addRegexToken('DDD', match1to3);
      addRegexToken('DDDD', match3);
      addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
      });
      function getSetDayOfYear(input) {
        var dayOfYear =
          Math.round(
            (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
          ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
      }
      addFormatToken('m', ['mm', 2], 0, 'minute');
      addRegexToken('m', match1to2, match1to2HasZero);
      addRegexToken('mm', match1to2, match2);
      addParseToken(['m', 'mm'], MINUTE);
      var getSetMinute = makeGetSet('Minutes', false);
      addFormatToken('s', ['ss', 2], 0, 'second');
      addRegexToken('s', match1to2, match1to2HasZero);
      addRegexToken('ss', match1to2, match2);
      addParseToken(['s', 'ss'], SECOND);
      var getSetSecond = makeGetSet('Seconds', false);
      addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ['SSS', 3], 0, 'millisecond');
      addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1e3;
      });
      addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 1e4;
      });
      addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 1e5;
      });
      addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1e6;
      });
      addRegexToken('S', match1to3, match1);
      addRegexToken('SS', match1to3, match2);
      addRegexToken('SSS', match1to3, match3);
      var token2, getSetMillisecond;
      for (token2 = 'SSSS'; token2.length <= 9; token2 += 'S') {
        addRegexToken(token2, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1e3);
      }
      for (token2 = 'S'; token2.length <= 9; token2 += 'S') {
        addParseToken(token2, parseMs);
      }
      getSetMillisecond = makeGetSet('Milliseconds', false);
      addFormatToken('z', 0, 0, 'zoneAbbr');
      addFormatToken('zz', 0, 0, 'zoneName');
      function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
      }
      function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone2;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray2;
      proto.toObject = toObject;
      proto.toDate = toDate2;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
          return 'Moment<' + this.format() + '>';
        };
      }
      proto.toJSON = toJSON;
      proto.toString = toString2;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
      );
      proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
      );
      proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
      );
      proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
      );
      proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
      );
      function createUnix(input) {
        return createLocal(input * 1e3);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string) {
        return string;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format2, index, field, setter) {
        var locale2 = getLocale(),
          utc = createUTC().set(setter, index);
        return locale2[field](utc, format2);
      }
      function listMonthsImpl(format2, index, field) {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || '';
        if (index != null) {
          return get$1(format2, index, field, 'month');
        }
        var i,
          out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format2, i, field, 'month');
        }
        return out;
      }
      function listWeekdaysImpl(localeSorted, format2, index, field) {
        if (typeof localeSorted === 'boolean') {
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || '';
        } else {
          format2 = localeSorted;
          index = format2;
          localeSorted = false;
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || '';
        }
        var locale2 = getLocale(),
          shift = localeSorted ? locale2._week.dow : 0,
          i,
          out = [];
        if (index != null) {
          return get$1(format2, (index + shift) % 7, field, 'day');
        }
        for (i = 0; i < 7; i++) {
          out[i] = get$1(format2, (i + shift) % 7, field, 'day');
        }
        return out;
      }
      function listMonths(format2, index) {
        return listMonthsImpl(format2, index, 'months');
      }
      function listMonthsShort(format2, index) {
        return listMonthsImpl(format2, index, 'monthsShort');
      }
      function listWeekdays(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, 'weekdays');
      }
      function listWeekdaysShort(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, 'weekdaysShort');
      }
      function listWeekdaysMin(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, 'weekdaysMin');
      }
      getSetGlobalLocale('en', {
        eras: [
          {
            since: '0001-01-01',
            until: Infinity,
            offset: 1,
            name: 'Anno Domini',
            narrow: 'AD',
            abbr: 'AD',
          },
          {
            since: '0000-12-31',
            until: -Infinity,
            offset: 1,
            name: 'Before Christ',
            narrow: 'BC',
            abbr: 'BC',
          },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
          var b = number % 10,
            output =
              toInt((number % 100) / 10) === 1
                ? 'th'
                : b === 1
                ? 'st'
                : b === 2
                ? 'nd'
                : b === 3
                ? 'rd'
                : 'th';
          return number + output;
        },
      });
      hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
      );
      hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
      );
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds2 = this._milliseconds,
          days2 = this._days,
          months2 = this._months,
          data = this._data,
          seconds2,
          minutes2,
          hours2,
          years2,
          monthsFromDays;
        if (
          !(
            (milliseconds2 >= 0 && days2 >= 0 && months2 >= 0) ||
            (milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)
          )
        ) {
          milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
          days2 = 0;
          months2 = 0;
        }
        data.milliseconds = milliseconds2 % 1e3;
        seconds2 = absFloor(milliseconds2 / 1e3);
        data.seconds = seconds2 % 60;
        minutes2 = absFloor(seconds2 / 60);
        data.minutes = minutes2 % 60;
        hours2 = absFloor(minutes2 / 60);
        data.hours = hours2 % 24;
        days2 += absFloor(hours2 / 24);
        monthsFromDays = absFloor(daysToMonths(days2));
        months2 += monthsFromDays;
        days2 -= absCeil(monthsToDays(monthsFromDays));
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        data.days = days2;
        data.months = months2;
        data.years = years2;
        return this;
      }
      function daysToMonths(days2) {
        return (days2 * 4800) / 146097;
      }
      function monthsToDays(months2) {
        return (months2 * 146097) / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days2,
          months2,
          milliseconds2 = this._milliseconds;
        units = normalizeUnits(units);
        if (units === 'month' || units === 'quarter' || units === 'year') {
          days2 = this._days + milliseconds2 / 864e5;
          months2 = this._months + daysToMonths(days2);
          switch (units) {
            case 'month':
              return months2;
            case 'quarter':
              return months2 / 3;
            case 'year':
              return months2 / 12;
          }
        } else {
          days2 = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case 'week':
              return days2 / 7 + milliseconds2 / 6048e5;
            case 'day':
              return days2 + milliseconds2 / 864e5;
            case 'hour':
              return days2 * 24 + milliseconds2 / 36e5;
            case 'minute':
              return days2 * 1440 + milliseconds2 / 6e4;
            case 'second':
              return days2 * 86400 + milliseconds2 / 1e3;
            // Math.floor prevents floating point math errors here
            case 'millisecond':
              return Math.floor(days2 * 864e5) + milliseconds2;
            default:
              throw new Error('Unknown unit ' + units);
          }
        }
      }
      function makeAs(alias) {
        return function () {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y'),
        valueOf$1 = asMilliseconds;
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
      }
      function makeGetter(name) {
        return function () {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round,
        thresholds = {
          ss: 44,
          // a few seconds to seconds
          s: 45,
          // seconds to minute
          m: 45,
          // minutes to hour
          h: 22,
          // hours to day
          d: 26,
          // days to month/week
          w: null,
          // weeks to month
          M: 11,
          // months to year
        };
      function substituteTimeAgo(
        string,
        number,
        withoutSuffix,
        isFuture,
        locale2
      ) {
        return locale2.relativeTime(
          number || 1,
          !!withoutSuffix,
          string,
          isFuture
        );
      }
      function relativeTime$1(
        posNegDuration,
        withoutSuffix,
        thresholds2,
        locale2
      ) {
        var duration = createDuration(posNegDuration).abs(),
          seconds2 = round(duration.as('s')),
          minutes2 = round(duration.as('m')),
          hours2 = round(duration.as('h')),
          days2 = round(duration.as('d')),
          months2 = round(duration.as('M')),
          weeks2 = round(duration.as('w')),
          years2 = round(duration.as('y')),
          a =
            (seconds2 <= thresholds2.ss && ['s', seconds2]) ||
            (seconds2 < thresholds2.s && ['ss', seconds2]) ||
            (minutes2 <= 1 && ['m']) ||
            (minutes2 < thresholds2.m && ['mm', minutes2]) ||
            (hours2 <= 1 && ['h']) ||
            (hours2 < thresholds2.h && ['hh', hours2]) ||
            (days2 <= 1 && ['d']) ||
            (days2 < thresholds2.d && ['dd', days2]);
        if (thresholds2.w != null) {
          a =
            a ||
            (weeks2 <= 1 && ['w']) ||
            (weeks2 < thresholds2.w && ['ww', weeks2]);
        }
        a = a ||
          (months2 <= 1 && ['M']) ||
          (months2 < thresholds2.M && ['MM', months2]) ||
          (years2 <= 1 && ['y']) || ['yy', years2];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale2;
        return substituteTimeAgo.apply(null, a);
      }
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === void 0) {
          return round;
        }
        if (typeof roundingFunction === 'function') {
          round = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false,
          th = thresholds,
          locale2,
          output;
        if (typeof argWithSuffix === 'object') {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale2 = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale2);
        if (withSuffix) {
          output = locale2.pastFuture(+this, output);
        }
        return locale2.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$1() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds2 = abs$1(this._milliseconds) / 1e3,
          days2 = abs$1(this._days),
          months2 = abs$1(this._months),
          minutes2,
          hours2,
          years2,
          s,
          total = this.asSeconds(),
          totalSign,
          ymSign,
          daysSign,
          hmsSign;
        if (!total) {
          return 'P0D';
        }
        minutes2 = absFloor(seconds2 / 60);
        hours2 = absFloor(minutes2 / 60);
        seconds2 %= 60;
        minutes2 %= 60;
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, '') : '';
        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
        return (
          totalSign +
          'P' +
          (years2 ? ymSign + years2 + 'Y' : '') +
          (months2 ? ymSign + months2 + 'M' : '') +
          (days2 ? daysSign + days2 + 'D' : '') +
          (hours2 || minutes2 || seconds2 ? 'T' : '') +
          (hours2 ? hmsSign + hours2 + 'H' : '') +
          (minutes2 ? hmsSign + minutes2 + 'M' : '') +
          (seconds2 ? hmsSign + s + 'S' : '')
        );
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
      );
      proto$2.lang = lang;
      addFormatToken('X', 0, 0, 'unix');
      addFormatToken('x', 0, 0, 'valueOf');
      addRegexToken('x', matchSigned);
      addRegexToken('X', matchTimestamp);
      addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
      });
      hooks.version = '2.30.1';
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min2;
      hooks.max = max2;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate2;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
        // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
        // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
        // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',
        // <input type="date" />
        TIME: 'HH:mm',
        // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',
        // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',
        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',
        // <input type="week" />
        MONTH: 'YYYY-MM',
        // <input type="month" />
      };
      return hooks;
    });
  },
});

// node_modules/object-path/index.js
var require_object_path = __commonJS({
  'node_modules/object-path/index.js'(exports, module) {
    (function (root2, factory) {
      'use strict';
      if (typeof module === 'object' && typeof module.exports === 'object') {
        module.exports = factory();
      } else if (typeof define === 'function' && define.amd) {
        define([], factory);
      } else {
        root2.objectPath = factory();
      }
    })(exports, function () {
      'use strict';
      var toStr = Object.prototype.toString,
        _hasOwnProperty = Object.prototype.hasOwnProperty;
      function isEmpty2(value) {
        if (!value) {
          return true;
        }
        if (isArray(value) && value.length === 0) {
          return true;
        } else {
          for (var i in value) {
            if (_hasOwnProperty.call(value, i)) {
              return false;
            }
          }
          return true;
        }
      }
      function toString2(type) {
        return toStr.call(type);
      }
      function isNumber(value) {
        return (
          typeof value === 'number' || toString2(value) === '[object Number]'
        );
      }
      function isString(obj) {
        return typeof obj === 'string' || toString2(obj) === '[object String]';
      }
      function isObject4(obj) {
        return typeof obj === 'object' && toString2(obj) === '[object Object]';
      }
      function isArray(obj) {
        return (
          typeof obj === 'object' &&
          typeof obj.length === 'number' &&
          toString2(obj) === '[object Array]'
        );
      }
      function isBoolean3(obj) {
        return (
          typeof obj === 'boolean' || toString2(obj) === '[object Boolean]'
        );
      }
      function getKey(key) {
        var intKey = parseInt(key);
        if (intKey.toString() === key) {
          return intKey;
        }
        return key;
      }
      function set(obj, path, value, doNotReplace) {
        if (isNumber(path)) {
          path = [path];
        }
        if (isEmpty2(path)) {
          return obj;
        }
        if (isString(path)) {
          return set(obj, path.split('.'), value, doNotReplace);
        }
        var currentPath = getKey(path[0]);
        if (path.length === 1) {
          var oldVal = obj[currentPath];
          if (oldVal === void 0 || !doNotReplace) {
            obj[currentPath] = value;
          }
          return oldVal;
        }
        if (obj[currentPath] === void 0) {
          if (isNumber(currentPath)) {
            obj[currentPath] = [];
          } else {
            obj[currentPath] = {};
          }
        }
        return set(obj[currentPath], path.slice(1), value, doNotReplace);
      }
      function del(obj, path) {
        if (isNumber(path)) {
          path = [path];
        }
        if (isEmpty2(obj)) {
          return void 0;
        }
        if (isEmpty2(path)) {
          return obj;
        }
        if (isString(path)) {
          return del(obj, path.split('.'));
        }
        var currentPath = getKey(path[0]);
        var oldVal = obj[currentPath];
        if (path.length === 1) {
          if (oldVal !== void 0) {
            if (isArray(obj)) {
              obj.splice(currentPath, 1);
            } else {
              delete obj[currentPath];
            }
          }
        } else {
          if (obj[currentPath] !== void 0) {
            return del(obj[currentPath], path.slice(1));
          }
        }
        return obj;
      }
      var objectPath = {};
      objectPath.ensureExists = function (obj, path, value) {
        return set(obj, path, value, true);
      };
      objectPath.set = function (obj, path, value, doNotReplace) {
        return set(obj, path, value, doNotReplace);
      };
      objectPath.insert = function (obj, path, value, at) {
        var arr = objectPath.get(obj, path);
        at = ~~at;
        if (!isArray(arr)) {
          arr = [];
          objectPath.set(obj, path, arr);
        }
        arr.splice(at, 0, value);
      };
      objectPath.empty = function (obj, path) {
        if (isEmpty2(path)) {
          return obj;
        }
        if (isEmpty2(obj)) {
          return void 0;
        }
        var value, i;
        if (!(value = objectPath.get(obj, path))) {
          return obj;
        }
        if (isString(value)) {
          return objectPath.set(obj, path, '');
        } else if (isBoolean3(value)) {
          return objectPath.set(obj, path, false);
        } else if (isNumber(value)) {
          return objectPath.set(obj, path, 0);
        } else if (isArray(value)) {
          value.length = 0;
        } else if (isObject4(value)) {
          for (i in value) {
            if (_hasOwnProperty.call(value, i)) {
              delete value[i];
            }
          }
        } else {
          return objectPath.set(obj, path, null);
        }
      };
      objectPath.push = function (obj, path) {
        var arr = objectPath.get(obj, path);
        if (!isArray(arr)) {
          arr = [];
          objectPath.set(obj, path, arr);
        }
        arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));
      };
      objectPath.coalesce = function (obj, paths, defaultValue) {
        var value;
        for (var i = 0, len = paths.length; i < len; i++) {
          if ((value = objectPath.get(obj, paths[i])) !== void 0) {
            return value;
          }
        }
        return defaultValue;
      };
      objectPath.get = function (obj, path, defaultValue) {
        if (isNumber(path)) {
          path = [path];
        }
        if (isEmpty2(path)) {
          return obj;
        }
        if (isEmpty2(obj)) {
          return defaultValue;
        }
        if (isString(path)) {
          return objectPath.get(obj, path.split('.'), defaultValue);
        }
        var currentPath = getKey(path[0]);
        if (path.length === 1) {
          if (obj[currentPath] === void 0) {
            return defaultValue;
          }
          return obj[currentPath];
        }
        return objectPath.get(obj[currentPath], path.slice(1), defaultValue);
      };
      objectPath.del = function (obj, path) {
        return del(obj, path);
      };
      return objectPath;
    });
  },
});

// node_modules/sort-by/index.js
var require_sort_by = __commonJS({
  'node_modules/sort-by/index.js'(exports, module) {
    var objectPath = require_object_path();
    var sortBy3;
    var sort;
    var type;
    type = function (type2) {
      return function (arg) {
        return typeof arg === type2;
      };
    };
    sort = function sort2(property2, map2) {
      var sortOrder = 1;
      var apply =
        map2 ||
        function (_15, value) {
          return value;
        };
      if (property2[0] === '-') {
        sortOrder = -1;
        property2 = property2.substr(1);
      }
      return function fn(a, b) {
        var result2;
        var am = apply(property2, objectPath.get(a, property2));
        var bm = apply(property2, objectPath.get(b, property2));
        if (am < bm) result2 = -1;
        if (am > bm) result2 = 1;
        if (am === bm) result2 = 0;
        return result2 * sortOrder;
      };
    };
    sortBy3 = function sortBy4() {
      var args = Array.prototype.slice.call(arguments);
      var properties = args.filter(type('string'));
      var map2 = args.filter(type('function'))[0];
      return function fn(obj1, obj2) {
        var numberOfProperties = properties.length,
          result2 = 0,
          i = 0;
        while (result2 === 0 && i < numberOfProperties) {
          result2 = sort(properties[i], map2)(obj1, obj2);
          i++;
        }
        return result2;
      };
    };
    module.exports = sortBy3;
  },
});

// src/actions/index.js
var actions_exports = {};
__export(actions_exports, {
  ACKNOWLEDGE_NOTIFICATION_REQUEST: () => ACKNOWLEDGE_NOTIFICATION_REQUEST,
  ACKNOWLEDGE_NOTIFICATION_RESPONSE: () => ACKNOWLEDGE_NOTIFICATION_RESPONSE,
  ADD_FEEDOPS_FEEDBACK_REQUEST: () => ADD_FEEDOPS_FEEDBACK_REQUEST,
  ADD_FEEDOPS_FEEDBACK_RESPONSE: () => ADD_FEEDOPS_FEEDBACK_RESPONSE,
  ADD_MEMBERSHIP_REQUEST: () => ADD_MEMBERSHIP_REQUEST,
  ADD_MEMBERSHIP_RESPONSE: () => ADD_MEMBERSHIP_RESPONSE,
  ADWORDS_ACCOUNT_LINKING_STATUS_REQUEST: () =>
    ADWORDS_ACCOUNT_LINKING_STATUS_REQUEST,
  ADWORDS_ACCOUNT_LINKING_STATUS_RESPONSE: () =>
    ADWORDS_ACCOUNT_LINKING_STATUS_RESPONSE,
  APPLY_PENDING_KEYWORD_SUGGESTIONS_ERROR: () =>
    APPLY_PENDING_KEYWORD_SUGGESTIONS_ERROR,
  APPLY_PENDING_KEYWORD_SUGGESTIONS_REQUEST: () =>
    APPLY_PENDING_KEYWORD_SUGGESTIONS_REQUEST,
  APPLY_PENDING_KEYWORD_SUGGESTIONS_SUCCESS: () =>
    APPLY_PENDING_KEYWORD_SUGGESTIONS_SUCCESS,
  APPLY_SEARCH_TERM_REQUESTS_ACTION_ERROR: () =>
    APPLY_SEARCH_TERM_REQUESTS_ACTION_ERROR,
  APPLY_SEARCH_TERM_REQUESTS_ACTION_REQUEST: () =>
    APPLY_SEARCH_TERM_REQUESTS_ACTION_REQUEST,
  APPLY_SEARCH_TERM_REQUESTS_ACTION_SUCCESS: () =>
    APPLY_SEARCH_TERM_REQUESTS_ACTION_SUCCESS,
  APPLY_SHOPPING_MAPPING_SHEET_ERROR: () => APPLY_SHOPPING_MAPPING_SHEET_ERROR,
  APPLY_SHOPPING_MAPPING_SHEET_REQUEST: () =>
    APPLY_SHOPPING_MAPPING_SHEET_REQUEST,
  APPLY_SHOPPING_MAPPING_SHEET_SUCCESS: () =>
    APPLY_SHOPPING_MAPPING_SHEET_SUCCESS,
  APPLY_VARIATIONS_SHEET_REQUEST: () => APPLY_VARIATIONS_SHEET_REQUEST,
  APPLY_VARIATIONS_SHEET_SUCCESS: () => APPLY_VARIATIONS_SHEET_SUCCESS,
  CHECK_PUBLICATION_ACCOUNT_TYPES_REQUEST: () =>
    CHECK_PUBLICATION_ACCOUNT_TYPES_REQUEST,
  CHECK_PUBLICATION_ACCOUNT_TYPES_SUCCESS: () =>
    CHECK_PUBLICATION_ACCOUNT_TYPES_SUCCESS,
  CLAIM_FEED_REQUEST: () => CLAIM_FEED_REQUEST,
  CLAIM_FEED_RESPONSE: () => CLAIM_FEED_RESPONSE,
  CLEAR_INVENTORY_ATTRIBUTE_REPLACEMENTS: () =>
    CLEAR_INVENTORY_ATTRIBUTE_REPLACEMENTS,
  CLEAR_REQUEST_QUEUE: () => CLEAR_REQUEST_QUEUE,
  CLEAR_UPDATED_INVENTORY_ATTRIBUTE_REPLACEMENTS: () =>
    CLEAR_UPDATED_INVENTORY_ATTRIBUTE_REPLACEMENTS,
  CLEAR_UPDATED_ITEMS_AND_REPLACEMENTS: () =>
    CLEAR_UPDATED_ITEMS_AND_REPLACEMENTS,
  COMPLETE_PLAYBOOK_ITEM_REQUEST: () => COMPLETE_PLAYBOOK_ITEM_REQUEST,
  COMPLETE_PLAYBOOK_ITEM_RESPONSE: () => COMPLETE_PLAYBOOK_ITEM_RESPONSE,
  CREATE_ACCOUNT_REQUEST: () => CREATE_ACCOUNT_REQUEST,
  CREATE_ACCOUNT_RESPONSE: () => CREATE_ACCOUNT_RESPONSE,
  CREATE_ACCOUNT_SUBSCRIPTION_REQUEST: () =>
    CREATE_ACCOUNT_SUBSCRIPTION_REQUEST,
  CREATE_ACCOUNT_SUBSCRIPTION_RESPONSE: () =>
    CREATE_ACCOUNT_SUBSCRIPTION_RESPONSE,
  CREATE_ADWORDS_ACCOUNT_AND_SEND_INVITATION_REQUEST: () =>
    CREATE_ADWORDS_ACCOUNT_AND_SEND_INVITATION_REQUEST,
  CREATE_ADWORDS_ACCOUNT_AND_SEND_INVITATION_RESPONSE: () =>
    CREATE_ADWORDS_ACCOUNT_AND_SEND_INVITATION_RESPONSE,
  CREATE_ANALYTICS_ACCOUNT_REQUEST: () => CREATE_ANALYTICS_ACCOUNT_REQUEST,
  CREATE_ANALYTICS_ACCOUNT_RESPONSE: () => CREATE_ANALYTICS_ACCOUNT_RESPONSE,
  CREATE_ANALYTICS_PROPERTY_REQUEST: () => CREATE_ANALYTICS_PROPERTY_REQUEST,
  CREATE_ANALYTICS_PROPERTY_RESPONSE: () => CREATE_ANALYTICS_PROPERTY_RESPONSE,
  CREATE_BUDGET_CATEGORY_REQUEST: () => CREATE_BUDGET_CATEGORY_REQUEST,
  CREATE_BUDGET_CATEGORY_SUCCESS: () => CREATE_BUDGET_CATEGORY_SUCCESS,
  CREATE_BUILD_REQUEST: () => CREATE_BUILD_REQUEST,
  CREATE_BUILD_RESPONSE: () => CREATE_BUILD_RESPONSE,
  CREATE_CUSTOM_FEED_REQUEST: () => CREATE_CUSTOM_FEED_REQUEST,
  CREATE_CUSTOM_FEED_RESPONSE: () => CREATE_CUSTOM_FEED_RESPONSE,
  CREATE_DEMO_WEBSITE_REQUEST: () => CREATE_DEMO_WEBSITE_REQUEST,
  CREATE_DEMO_WEBSITE_RESPONSE: () => CREATE_DEMO_WEBSITE_RESPONSE,
  CREATE_FEED_REQUEST: () => CREATE_FEED_REQUEST,
  CREATE_FEED_RESPONSE: () => CREATE_FEED_RESPONSE,
  CREATE_MERCHANT_CENTER_ACCOUNT_REQUEST: () =>
    CREATE_MERCHANT_CENTER_ACCOUNT_REQUEST,
  CREATE_MERCHANT_CENTER_ACCOUNT_RESPONSE: () =>
    CREATE_MERCHANT_CENTER_ACCOUNT_RESPONSE,
  CREATE_NEW_MERCHANT_CENTER_ACCOUNT_REQUEST: () =>
    CREATE_NEW_MERCHANT_CENTER_ACCOUNT_REQUEST,
  CREATE_NEW_MERCHANT_CENTER_ACCOUNT_RESPONSE: () =>
    CREATE_NEW_MERCHANT_CENTER_ACCOUNT_RESPONSE,
  CREATE_OR_UPDATE_WEBSITE_CONTACTS_REQUEST: () =>
    CREATE_OR_UPDATE_WEBSITE_CONTACTS_REQUEST,
  CREATE_OR_UPDATE_WEBSITE_CONTACTS_RESPONSE: () =>
    CREATE_OR_UPDATE_WEBSITE_CONTACTS_RESPONSE,
  CREATE_RULE_MODAL_STATUS: () => CREATE_RULE_MODAL_STATUS,
  CREATE_SHOPPING_MAPPING_SHEET_REQUEST: () =>
    CREATE_SHOPPING_MAPPING_SHEET_REQUEST,
  CREATE_SHOPPING_MAPPING_SHEET_SUCCESS: () =>
    CREATE_SHOPPING_MAPPING_SHEET_SUCCESS,
  CREATE_VARIATIONS_SHEET_REQUEST: () => CREATE_VARIATIONS_SHEET_REQUEST,
  CREATE_VARIATIONS_SHEET_SUCCESS: () => CREATE_VARIATIONS_SHEET_SUCCESS,
  CREATE_WEBSITE_BUDGET_REQUEST: () => CREATE_WEBSITE_BUDGET_REQUEST,
  CREATE_WEBSITE_BUDGET_RESPONSE: () => CREATE_WEBSITE_BUDGET_RESPONSE,
  CREATE_WEBSITE_CUSTOMER_REQUEST: () => CREATE_WEBSITE_CUSTOMER_REQUEST,
  CREATE_WEBSITE_CUSTOMER_RESPONSE: () => CREATE_WEBSITE_CUSTOMER_RESPONSE,
  CREATE_WEBSITE_DEFAULT_SHARED_BUDGET_REQUEST: () =>
    CREATE_WEBSITE_DEFAULT_SHARED_BUDGET_REQUEST,
  CREATE_WEBSITE_DEFAULT_SHARED_BUDGET_RESPONSE: () =>
    CREATE_WEBSITE_DEFAULT_SHARED_BUDGET_RESPONSE,
  CREATE_WEBSITE_REQUEST: () => CREATE_WEBSITE_REQUEST,
  CREATE_WEBSITE_RESPONSE: () => CREATE_WEBSITE_RESPONSE,
  CREATE_WEBSITE_RETAIL_SCENARIO_REQUEST: () =>
    CREATE_WEBSITE_RETAIL_SCENARIO_REQUEST,
  CREATE_WEBSITE_RETAIL_SCENARIO_RESPONSE: () =>
    CREATE_WEBSITE_RETAIL_SCENARIO_RESPONSE,
  CREATE_WEBSITE_SHOPPING_BUDGET_REQUEST: () =>
    CREATE_WEBSITE_SHOPPING_BUDGET_REQUEST,
  CREATE_WEBSITE_SHOPPING_BUDGET_RESPONSE: () =>
    CREATE_WEBSITE_SHOPPING_BUDGET_RESPONSE,
  DELETE_BUILD_ERROR: () => DELETE_BUILD_ERROR,
  DELETE_BUILD_REQUEST: () => DELETE_BUILD_REQUEST,
  DELETE_BUILD_SUCCESS: () => DELETE_BUILD_SUCCESS,
  DELETE_INVENTORY_ERROR: () => DELETE_INVENTORY_ERROR,
  DELETE_INVENTORY_REQUEST: () => DELETE_INVENTORY_REQUEST,
  DELETE_INVENTORY_RESPONSE: () => DELETE_INVENTORY_RESPONSE,
  DELETE_MERCHANT_CENTER_REQUEST: () => DELETE_MERCHANT_CENTER_REQUEST,
  DELETE_MERCHANT_CENTER_RESPONSE: () => DELETE_MERCHANT_CENTER_RESPONSE,
  DELETE_MICROSOFT_MERCHANT_CENTER_ACCOUNT_REQUEST: () =>
    DELETE_MICROSOFT_MERCHANT_CENTER_ACCOUNT_REQUEST,
  DELETE_MICROSOFT_MERCHANT_CENTER_ACCOUNT_RESPONSE: () =>
    DELETE_MICROSOFT_MERCHANT_CENTER_ACCOUNT_RESPONSE,
  DELETE_WEBSITE_REQUEST: () => DELETE_WEBSITE_REQUEST,
  DELETE_WEBSITE_RESPONSE: () => DELETE_WEBSITE_RESPONSE,
  DESTROY_BUDGET_CATEGORY_REQUEST: () => DESTROY_BUDGET_CATEGORY_REQUEST,
  DESTROY_BUDGET_CATEGORY_SUCCESS: () => DESTROY_BUDGET_CATEGORY_SUCCESS,
  DISMISS_PLAYBOOK_PROGRESS_REQUEST: () => DISMISS_PLAYBOOK_PROGRESS_REQUEST,
  DISMISS_PLAYBOOK_PROGRESS_RESPONSE: () => DISMISS_PLAYBOOK_PROGRESS_RESPONSE,
  DOWNLOAD_WEBSITE_KEYWORD_REPORT_REQUEST: () =>
    DOWNLOAD_WEBSITE_KEYWORD_REPORT_REQUEST,
  DOWNLOAD_WEBSITE_KEYWORD_REPORT_RESPONSE: () =>
    DOWNLOAD_WEBSITE_KEYWORD_REPORT_RESPONSE,
  ENABLE_DISABLE_CHANNEL_SETTINGS_REQUEST: () =>
    ENABLE_DISABLE_CHANNEL_SETTINGS_REQUEST,
  ENABLE_DISABLE_CHANNEL_SETTINGS_RESPONSE: () =>
    ENABLE_DISABLE_CHANNEL_SETTINGS_RESPONSE,
  EXPORT_RULES_PREVIEW_REQUEST: () => EXPORT_RULES_PREVIEW_REQUEST,
  EXPORT_RULES_PREVIEW_RESPONSE: () => EXPORT_RULES_PREVIEW_RESPONSE,
  FEED_STATUS_REQUEST: () => FEED_STATUS_REQUEST,
  FEED_STATUS_RESPONSE: () => FEED_STATUS_RESPONSE,
  FETCH_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_REQUEST: () =>
    FETCH_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_REQUEST,
  FETCH_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_RESPONSE: () =>
    FETCH_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_RESPONSE,
  FETCH_ACCOUNT_MERCHANT_CENTER_STATUS_REQUEST: () =>
    FETCH_ACCOUNT_MERCHANT_CENTER_STATUS_REQUEST,
  FETCH_ACCOUNT_MERCHANT_CENTER_STATUS_SUCCESS: () =>
    FETCH_ACCOUNT_MERCHANT_CENTER_STATUS_SUCCESS,
  FETCH_ACCOUNT_SUBSCRIPTION_REQUEST: () => FETCH_ACCOUNT_SUBSCRIPTION_REQUEST,
  FETCH_ACCOUNT_SUBSCRIPTION_RESPONSE: () =>
    FETCH_ACCOUNT_SUBSCRIPTION_RESPONSE,
  FETCH_ACCOUNT_USERS_REQUEST: () => FETCH_ACCOUNT_USERS_REQUEST,
  FETCH_ACCOUNT_USERS_RESPONSE: () => FETCH_ACCOUNT_USERS_RESPONSE,
  FETCH_ADDON_REQUEST: () => FETCH_ADDON_REQUEST,
  FETCH_ADDON_RESPONSE: () => FETCH_ADDON_RESPONSE,
  FETCH_ADVERTISING_BUDGETS_REQUEST: () => FETCH_ADVERTISING_BUDGETS_REQUEST,
  FETCH_ADVERTISING_BUDGETS_SUCCESS: () => FETCH_ADVERTISING_BUDGETS_SUCCESS,
  FETCH_ADVERTISING_GOALS_REQUEST: () => FETCH_ADVERTISING_GOALS_REQUEST,
  FETCH_ADVERTISING_GOALS_SUCCESS: () => FETCH_ADVERTISING_GOALS_SUCCESS,
  FETCH_ADVERTISING_GOAL_TYPES_REQUEST: () =>
    FETCH_ADVERTISING_GOAL_TYPES_REQUEST,
  FETCH_ADVERTISING_GOAL_TYPES_SUCCESS: () =>
    FETCH_ADVERTISING_GOAL_TYPES_SUCCESS,
  FETCH_ADVERTISING_GOAL_TYPE_REQUEST: () =>
    FETCH_ADVERTISING_GOAL_TYPE_REQUEST,
  FETCH_ADVERTISING_GOAL_TYPE_SUCCESS: () =>
    FETCH_ADVERTISING_GOAL_TYPE_SUCCESS,
  FETCH_ADVERTISING_PLAN_REQUEST: () => FETCH_ADVERTISING_PLAN_REQUEST,
  FETCH_ADVERTISING_PLAN_SUCCESS: () => FETCH_ADVERTISING_PLAN_SUCCESS,
  FETCH_ADVERTISING_STATUS_REQUEST: () => FETCH_ADVERTISING_STATUS_REQUEST,
  FETCH_ADVERTISING_STATUS_SUCCESS: () => FETCH_ADVERTISING_STATUS_SUCCESS,
  FETCH_AI_CREDITS_HISTORY_REQUEST: () => FETCH_AI_CREDITS_HISTORY_REQUEST,
  FETCH_AI_CREDITS_HISTORY_RESPONSE: () => FETCH_AI_CREDITS_HISTORY_RESPONSE,
  FETCH_ANALYTICS_ACCESS_TOKEN_REQUEST: () =>
    FETCH_ANALYTICS_ACCESS_TOKEN_REQUEST,
  FETCH_ANALYTICS_ACCESS_TOKEN_SUCCESS: () =>
    FETCH_ANALYTICS_ACCESS_TOKEN_SUCCESS,
  FETCH_ANALYTICS_FEEDOPS_REPORT_ERROR: () =>
    FETCH_ANALYTICS_FEEDOPS_REPORT_ERROR,
  FETCH_ANALYTICS_FEEDOPS_REPORT_REQUEST: () =>
    FETCH_ANALYTICS_FEEDOPS_REPORT_REQUEST,
  FETCH_ANALYTICS_FEEDOPS_REPORT_SUCCESS: () =>
    FETCH_ANALYTICS_FEEDOPS_REPORT_SUCCESS,
  FETCH_ANALYTICS_REPORT_ERROR: () => FETCH_ANALYTICS_REPORT_ERROR,
  FETCH_ANALYTICS_REPORT_REQUEST: () => FETCH_ANALYTICS_REPORT_REQUEST,
  FETCH_ANALYTICS_REPORT_SUCCESS: () => FETCH_ANALYTICS_REPORT_SUCCESS,
  FETCH_ANALYTICS_VIEWS_ERROR: () => FETCH_ANALYTICS_VIEWS_ERROR,
  FETCH_ANALYTICS_VIEWS_REQUEST: () => FETCH_ANALYTICS_VIEWS_REQUEST,
  FETCH_ANALYTICS_VIEWS_SUCCESS: () => FETCH_ANALYTICS_VIEWS_SUCCESS,
  FETCH_API_IMPORT_SOURCE_HEADERS_REQUEST: () =>
    FETCH_API_IMPORT_SOURCE_HEADERS_REQUEST,
  FETCH_API_IMPORT_SOURCE_HEADERS_RESPONSE: () =>
    FETCH_API_IMPORT_SOURCE_HEADERS_RESPONSE,
  FETCH_AVERAGE_QUALITY_SCORE_COMPONENTS_REQUEST: () =>
    FETCH_AVERAGE_QUALITY_SCORE_COMPONENTS_REQUEST,
  FETCH_AVERAGE_QUALITY_SCORE_COMPONENTS_SUCCESS: () =>
    FETCH_AVERAGE_QUALITY_SCORE_COMPONENTS_SUCCESS,
  FETCH_BUDGET_CATEGORY_ADVERTISING_BUDGETS_REQUEST: () =>
    FETCH_BUDGET_CATEGORY_ADVERTISING_BUDGETS_REQUEST,
  FETCH_BUDGET_CATEGORY_ADVERTISING_BUDGETS_SUCCESS: () =>
    FETCH_BUDGET_CATEGORY_ADVERTISING_BUDGETS_SUCCESS,
  FETCH_BUDGET_CATEGORY_ADVERTISING_GOALS_REQUEST: () =>
    FETCH_BUDGET_CATEGORY_ADVERTISING_GOALS_REQUEST,
  FETCH_BUDGET_CATEGORY_ADVERTISING_GOALS_SUCCESS: () =>
    FETCH_BUDGET_CATEGORY_ADVERTISING_GOALS_SUCCESS,
  FETCH_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_REQUEST: () =>
    FETCH_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_REQUEST,
  FETCH_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_SUCCESS: () =>
    FETCH_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_SUCCESS,
  FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_CAMPAIGN_TYPE_REQUEST: () =>
    FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_CAMPAIGN_TYPE_REQUEST,
  FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_CAMPAIGN_TYPE_SUCCESS: () =>
    FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_CAMPAIGN_TYPE_SUCCESS,
  FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_DAY_REQUEST: () =>
    FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_DAY_REQUEST,
  FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_DAY_SUCCESS: () =>
    FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_DAY_SUCCESS,
  FETCH_BUILDS: () => FETCH_BUILDS,
  FETCH_CAMPAIGN_TYPES_REQUEST: () => FETCH_CAMPAIGN_TYPES_REQUEST,
  FETCH_CAMPAIGN_TYPES_SUCCESS: () => FETCH_CAMPAIGN_TYPES_SUCCESS,
  FETCH_CAMPAIGN_TYPE_DETAILS_REQUEST: () =>
    FETCH_CAMPAIGN_TYPE_DETAILS_REQUEST,
  FETCH_CAMPAIGN_TYPE_DETAILS_SUCCESS: () =>
    FETCH_CAMPAIGN_TYPE_DETAILS_SUCCESS,
  FETCH_CAMPAIGN_TYPE_DETAIL_REQUEST: () => FETCH_CAMPAIGN_TYPE_DETAIL_REQUEST,
  FETCH_CAMPAIGN_TYPE_DETAIL_SUCCESS: () => FETCH_CAMPAIGN_TYPE_DETAIL_SUCCESS,
  FETCH_COMPLETED_PLAYBOOK_ITEMS_REQUEST: () =>
    FETCH_COMPLETED_PLAYBOOK_ITEMS_REQUEST,
  FETCH_COMPLETED_PLAYBOOK_ITEMS_RESPONSE: () =>
    FETCH_COMPLETED_PLAYBOOK_ITEMS_RESPONSE,
  FETCH_COUNTRY_GEO_TARGET_REQUEST: () => FETCH_COUNTRY_GEO_TARGET_REQUEST,
  FETCH_COUNTRY_GEO_TARGET_RESPONSE: () => FETCH_COUNTRY_GEO_TARGET_RESPONSE,
  FETCH_CURRENCIES_ERROR: () => FETCH_CURRENCIES_ERROR,
  FETCH_CURRENCIES_REQUEST: () => FETCH_CURRENCIES_REQUEST,
  FETCH_CURRENCIES_SUCCESS: () => FETCH_CURRENCIES_SUCCESS,
  FETCH_DRIVE_DOC_REQUEST: () => FETCH_DRIVE_DOC_REQUEST,
  FETCH_DRIVE_DOC_RESPONSE: () => FETCH_DRIVE_DOC_RESPONSE,
  FETCH_EXISTING_ACCOUNT_CUSTOMER_REQUEST: () =>
    FETCH_EXISTING_ACCOUNT_CUSTOMER_REQUEST,
  FETCH_EXISTING_ACCOUNT_CUSTOMER_RESPONSE: () =>
    FETCH_EXISTING_ACCOUNT_CUSTOMER_RESPONSE,
  FETCH_EXISTING_MASTER_ACCOUNT_CUSTOMER_REQUEST: () =>
    FETCH_EXISTING_MASTER_ACCOUNT_CUSTOMER_REQUEST,
  FETCH_EXISTING_MASTER_ACCOUNT_CUSTOMER_RESPONSE: () =>
    FETCH_EXISTING_MASTER_ACCOUNT_CUSTOMER_RESPONSE,
  FETCH_EXISTING_WEBSITE_CUSTOMER_REQUEST: () =>
    FETCH_EXISTING_WEBSITE_CUSTOMER_REQUEST,
  FETCH_EXISTING_WEBSITE_CUSTOMER_RESPONSE: () =>
    FETCH_EXISTING_WEBSITE_CUSTOMER_RESPONSE,
  FETCH_FEEDOPS_TESTIMONIALS_REQUEST: () => FETCH_FEEDOPS_TESTIMONIALS_REQUEST,
  FETCH_FEEDOPS_TESTIMONIALS_RESPONSE: () =>
    FETCH_FEEDOPS_TESTIMONIALS_RESPONSE,
  FETCH_FEED_CHAMPION_REQUEST: () => FETCH_FEED_CHAMPION_REQUEST,
  FETCH_FEED_CHAMPION_RESPONSE: () => FETCH_FEED_CHAMPION_RESPONSE,
  FETCH_FEED_DETAILS_BY_ID_REQUEST: () => FETCH_FEED_DETAILS_BY_ID_REQUEST,
  FETCH_FEED_DETAILS_BY_ID_RESPONSE: () => FETCH_FEED_DETAILS_BY_ID_RESPONSE,
  FETCH_FEED_DETAIL_REQUEST: () => FETCH_FEED_DETAIL_REQUEST,
  FETCH_FEED_DETAIL_RESPONSE: () => FETCH_FEED_DETAIL_RESPONSE,
  FETCH_FILE_IMPORT_SOURCE_HEADERS_REQUEST: () =>
    FETCH_FILE_IMPORT_SOURCE_HEADERS_REQUEST,
  FETCH_FILE_IMPORT_SOURCE_HEADERS_RESPONSE: () =>
    FETCH_FILE_IMPORT_SOURCE_HEADERS_RESPONSE,
  FETCH_FULL_WEBSITE_LIST_REQUEST: () => FETCH_FULL_WEBSITE_LIST_REQUEST,
  FETCH_FULL_WEBSITE_LIST_RESPONSE: () => FETCH_FULL_WEBSITE_LIST_RESPONSE,
  FETCH_GOOGLE_TAXONOMIES_REQUEST: () => FETCH_GOOGLE_TAXONOMIES_REQUEST,
  FETCH_GOOGLE_TAXONOMIES_RESPONSE: () => FETCH_GOOGLE_TAXONOMIES_RESPONSE,
  FETCH_HAS_BUDGET_CATEGORIES_REQUEST: () =>
    FETCH_HAS_BUDGET_CATEGORIES_REQUEST,
  FETCH_HAS_BUDGET_CATEGORIES_SUCCESS: () =>
    FETCH_HAS_BUDGET_CATEGORIES_SUCCESS,
  FETCH_INVENTORIES_LIST: () => FETCH_INVENTORIES_LIST,
  FETCH_INVENTORY_ATTRIBUTES_REQUEST: () => FETCH_INVENTORY_ATTRIBUTES_REQUEST,
  FETCH_INVENTORY_ATTRIBUTES_RESPONSE: () =>
    FETCH_INVENTORY_ATTRIBUTES_RESPONSE,
  FETCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST: () =>
    FETCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST,
  FETCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE: () =>
    FETCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE,
  FETCH_INVENTORY_CATEGORIES_REQUEST: () => FETCH_INVENTORY_CATEGORIES_REQUEST,
  FETCH_INVENTORY_CATEGORIES_RESPONSE: () =>
    FETCH_INVENTORY_CATEGORIES_RESPONSE,
  FETCH_INVENTORY_CATEGORY_REPLACEMENTS_REQUEST: () =>
    FETCH_INVENTORY_CATEGORY_REPLACEMENTS_REQUEST,
  FETCH_INVENTORY_CATEGORY_REPLACEMENTS_RESPONSE: () =>
    FETCH_INVENTORY_CATEGORY_REPLACEMENTS_RESPONSE,
  FETCH_INVENTORY_DETAIL_REQUEST: () => FETCH_INVENTORY_DETAIL_REQUEST,
  FETCH_INVENTORY_DETAIL_RESPONSE: () => FETCH_INVENTORY_DETAIL_RESPONSE,
  FETCH_INVENTORY_FC_ATTRIBUTES_REQUEST: () =>
    FETCH_INVENTORY_FC_ATTRIBUTES_REQUEST,
  FETCH_INVENTORY_FC_ATTRIBUTES_RESPONSE: () =>
    FETCH_INVENTORY_FC_ATTRIBUTES_RESPONSE,
  FETCH_INVENTORY_FEED_CATEGORIES_REQUEST: () =>
    FETCH_INVENTORY_FEED_CATEGORIES_REQUEST,
  FETCH_INVENTORY_FEED_CATEGORIES_RESPONSE: () =>
    FETCH_INVENTORY_FEED_CATEGORIES_RESPONSE,
  FETCH_INVENTORY_FO_CATEGORIES_REQUEST: () =>
    FETCH_INVENTORY_FO_CATEGORIES_REQUEST,
  FETCH_INVENTORY_FO_CATEGORIES_RESPONSE: () =>
    FETCH_INVENTORY_FO_CATEGORIES_RESPONSE,
  FETCH_INVENTORY_PROCESSING_STATUS_REQUEST: () =>
    FETCH_INVENTORY_PROCESSING_STATUS_REQUEST,
  FETCH_INVENTORY_PROCESSING_STATUS_RESPONSE: () =>
    FETCH_INVENTORY_PROCESSING_STATUS_RESPONSE,
  FETCH_KEYWORD_IDEAS_REQUEST: () => FETCH_KEYWORD_IDEAS_REQUEST,
  FETCH_KEYWORD_IDEAS_RESPONSE: () => FETCH_KEYWORD_IDEAS_RESPONSE,
  FETCH_KEYWORD_SUGGESTIONS_ERROR: () => FETCH_KEYWORD_SUGGESTIONS_ERROR,
  FETCH_KEYWORD_SUGGESTIONS_REQUEST: () => FETCH_KEYWORD_SUGGESTIONS_REQUEST,
  FETCH_KEYWORD_SUGGESTIONS_SUCCESS: () => FETCH_KEYWORD_SUGGESTIONS_SUCCESS,
  FETCH_MERCHANT_CENTER_ERROR_CATEGORIES_REQUEST: () =>
    FETCH_MERCHANT_CENTER_ERROR_CATEGORIES_REQUEST,
  FETCH_MERCHANT_CENTER_ERROR_CATEGORIES_RESPONSE: () =>
    FETCH_MERCHANT_CENTER_ERROR_CATEGORIES_RESPONSE,
  FETCH_MERCHANT_CENTER_ERROR_TYPES_REQUEST: () =>
    FETCH_MERCHANT_CENTER_ERROR_TYPES_REQUEST,
  FETCH_MERCHANT_CENTER_ERROR_TYPES_RESPONSE: () =>
    FETCH_MERCHANT_CENTER_ERROR_TYPES_RESPONSE,
  FETCH_MERCHANT_CENTER_PRODUCT_ERRORS_REQUEST: () =>
    FETCH_MERCHANT_CENTER_PRODUCT_ERRORS_REQUEST,
  FETCH_MERCHANT_CENTER_PRODUCT_ERRORS_SUCCESS: () =>
    FETCH_MERCHANT_CENTER_PRODUCT_ERRORS_SUCCESS,
  FETCH_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_REQUEST: () =>
    FETCH_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_REQUEST,
  FETCH_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_SUCCESS: () =>
    FETCH_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_SUCCESS,
  FETCH_PERFORMANCE_BY_CAMPAIGN_TYPE_REQUEST: () =>
    FETCH_PERFORMANCE_BY_CAMPAIGN_TYPE_REQUEST,
  FETCH_PERFORMANCE_BY_CAMPAIGN_TYPE_SUCCESS: () =>
    FETCH_PERFORMANCE_BY_CAMPAIGN_TYPE_SUCCESS,
  FETCH_PERFORMANCE_BY_DAY_REQUEST: () => FETCH_PERFORMANCE_BY_DAY_REQUEST,
  FETCH_PERFORMANCE_BY_DAY_SUCCESS: () => FETCH_PERFORMANCE_BY_DAY_SUCCESS,
  FETCH_PERFORMANCE_BY_SUB_ACCOUNT_TYPE_REQUEST: () =>
    FETCH_PERFORMANCE_BY_SUB_ACCOUNT_TYPE_REQUEST,
  FETCH_PERFORMANCE_BY_SUB_ACCOUNT_TYPE_SUCCESS: () =>
    FETCH_PERFORMANCE_BY_SUB_ACCOUNT_TYPE_SUCCESS,
  FETCH_PLANS_REQUEST: () => FETCH_PLANS_REQUEST,
  FETCH_PLANS_RESPONSE: () => FETCH_PLANS_RESPONSE,
  FETCH_PLAN_REQUEST: () => FETCH_PLAN_REQUEST,
  FETCH_PLAN_RESPONSE: () => FETCH_PLAN_RESPONSE,
  FETCH_PLAYBOOK_PROGRESS_BY_ITEM_REQUEST: () =>
    FETCH_PLAYBOOK_PROGRESS_BY_ITEM_REQUEST,
  FETCH_PLAYBOOK_PROGRESS_BY_ITEM_RESPONSE: () =>
    FETCH_PLAYBOOK_PROGRESS_BY_ITEM_RESPONSE,
  FETCH_PLAYBOOK_PROGRESS_REQUEST: () => FETCH_PLAYBOOK_PROGRESS_REQUEST,
  FETCH_PLAYBOOK_PROGRESS_RESPONSE: () => FETCH_PLAYBOOK_PROGRESS_RESPONSE,
  FETCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST: () =>
    FETCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST,
  FETCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE: () =>
    FETCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE,
  FETCH_PRODUCT_DATA_AUDITS_REQUEST: () => FETCH_PRODUCT_DATA_AUDITS_REQUEST,
  FETCH_PRODUCT_DATA_AUDITS_RESPONSE: () => FETCH_PRODUCT_DATA_AUDITS_RESPONSE,
  FETCH_PRODUCT_FEED_TITLES_REQUEST: () => FETCH_PRODUCT_FEED_TITLES_REQUEST,
  FETCH_PRODUCT_FEED_TITLES_RESPONSE: () => FETCH_PRODUCT_FEED_TITLES_RESPONSE,
  FETCH_PRODUCT_URL_SETTING_REQUEST: () => FETCH_PRODUCT_URL_SETTING_REQUEST,
  FETCH_PRODUCT_URL_SETTING_RESPONSE: () => FETCH_PRODUCT_URL_SETTING_RESPONSE,
  FETCH_RULES_REQUEST: () => FETCH_RULES_REQUEST,
  FETCH_RULES_RESPONSE: () => FETCH_RULES_RESPONSE,
  FETCH_RULE_ACTION_TYPES_REQUEST: () => FETCH_RULE_ACTION_TYPES_REQUEST,
  FETCH_RULE_ACTION_TYPES_RESPONSE: () => FETCH_RULE_ACTION_TYPES_RESPONSE,
  FETCH_SCENARIO_STATUS_ERROR: () => FETCH_SCENARIO_STATUS_ERROR,
  FETCH_SCENARIO_STATUS_REQUEST: () => FETCH_SCENARIO_STATUS_REQUEST,
  FETCH_SCENARIO_STATUS_SUCCESS: () => FETCH_SCENARIO_STATUS_SUCCESS,
  FETCH_SEARCH_DIAGNOSTICS_REPORT_URL_REQUEST: () =>
    FETCH_SEARCH_DIAGNOSTICS_REPORT_URL_REQUEST,
  FETCH_SEARCH_DIAGNOSTICS_REPORT_URL_RESPONSE: () =>
    FETCH_SEARCH_DIAGNOSTICS_REPORT_URL_RESPONSE,
  FETCH_SEARCH_TERM_REQUESTS_ERROR: () => FETCH_SEARCH_TERM_REQUESTS_ERROR,
  FETCH_SEARCH_TERM_REQUESTS_REQUEST: () => FETCH_SEARCH_TERM_REQUESTS_REQUEST,
  FETCH_SEARCH_TERM_REQUESTS_SUCCESS: () => FETCH_SEARCH_TERM_REQUESTS_SUCCESS,
  FETCH_SYSTEM_AVERAGE_QUALITY_SCORE_COMPONENTS_REQUEST: () =>
    FETCH_SYSTEM_AVERAGE_QUALITY_SCORE_COMPONENTS_REQUEST,
  FETCH_SYSTEM_AVERAGE_QUALITY_SCORE_COMPONENTS_SUCCESS: () =>
    FETCH_SYSTEM_AVERAGE_QUALITY_SCORE_COMPONENTS_SUCCESS,
  FETCH_SYSTEM_WIDE_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_REQUEST: () =>
    FETCH_SYSTEM_WIDE_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_REQUEST,
  FETCH_SYSTEM_WIDE_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_SUCCESS: () =>
    FETCH_SYSTEM_WIDE_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_SUCCESS,
  FETCH_USER_ACCOUNTS_REQUEST: () => FETCH_USER_ACCOUNTS_REQUEST,
  FETCH_USER_ACCOUNTS_RESPONSE: () => FETCH_USER_ACCOUNTS_RESPONSE,
  FETCH_VALUE_FORMATS_REQUEST: () => FETCH_VALUE_FORMATS_REQUEST,
  FETCH_VALUE_FORMATS_RESPONSE: () => FETCH_VALUE_FORMATS_RESPONSE,
  FETCH_VALUE_OPERATORS_REQUEST: () => FETCH_VALUE_OPERATORS_REQUEST,
  FETCH_VALUE_OPERATORS_RESPONSE: () => FETCH_VALUE_OPERATORS_RESPONSE,
  FETCH_VENDORS_REQUEST: () => FETCH_VENDORS_REQUEST,
  FETCH_VENDORS_RESPONSE: () => FETCH_VENDORS_RESPONSE,
  FETCH_VERTICAL_FIELDS_REQUEST: () => FETCH_VERTICAL_FIELDS_REQUEST,
  FETCH_VERTICAL_FIELDS_RESPONSE: () => FETCH_VERTICAL_FIELDS_RESPONSE,
  FETCH_WEBSITES_REQUEST: () => FETCH_WEBSITES_REQUEST,
  FETCH_WEBSITES_RESPONSE: () => FETCH_WEBSITES_RESPONSE,
  FETCH_WEBSITE_CAMPAIGN_IDS_REQUEST: () => FETCH_WEBSITE_CAMPAIGN_IDS_REQUEST,
  FETCH_WEBSITE_CAMPAIGN_IDS_RESPONSE: () =>
    FETCH_WEBSITE_CAMPAIGN_IDS_RESPONSE,
  FETCH_WEBSITE_CONTACTS_REQUEST: () => FETCH_WEBSITE_CONTACTS_REQUEST,
  FETCH_WEBSITE_CONTACTS_RESPONSE: () => FETCH_WEBSITE_CONTACTS_RESPONSE,
  FETCH_WEBSITE_CUSTOMER_REQUEST: () => FETCH_WEBSITE_CUSTOMER_REQUEST,
  FETCH_WEBSITE_CUSTOMER_RESPONSE: () => FETCH_WEBSITE_CUSTOMER_RESPONSE,
  FETCH_WEBSITE_DETAILS_REQUEST: () => FETCH_WEBSITE_DETAILS_REQUEST,
  FETCH_WEBSITE_DETAILS_SUCCESS: () => FETCH_WEBSITE_DETAILS_SUCCESS,
  FETCH_WEBSITE_DETAIL_REQUEST: () => FETCH_WEBSITE_DETAIL_REQUEST,
  FETCH_WEBSITE_DETAIL_RESPONSE: () => FETCH_WEBSITE_DETAIL_RESPONSE,
  FETCH_WEBSITE_MERCHANT_CENTER_ERRORS_REQUEST: () =>
    FETCH_WEBSITE_MERCHANT_CENTER_ERRORS_REQUEST,
  FETCH_WEBSITE_MERCHANT_CENTER_ERRORS_RESPONSE: () =>
    FETCH_WEBSITE_MERCHANT_CENTER_ERRORS_RESPONSE,
  FETCH_WEBSITE_MERCHANT_CENTER_ERROR_CATEGORIES_REQUEST: () =>
    FETCH_WEBSITE_MERCHANT_CENTER_ERROR_CATEGORIES_REQUEST,
  FETCH_WEBSITE_MERCHANT_CENTER_ERROR_CATEGORIES_RESPONSE: () =>
    FETCH_WEBSITE_MERCHANT_CENTER_ERROR_CATEGORIES_RESPONSE,
  FETCH_WEBSITE_MERCHANT_CENTER_STATUS_REQUEST: () =>
    FETCH_WEBSITE_MERCHANT_CENTER_STATUS_REQUEST,
  FETCH_WEBSITE_MERCHANT_CENTER_STATUS_SUCCESS: () =>
    FETCH_WEBSITE_MERCHANT_CENTER_STATUS_SUCCESS,
  FETCH_WEBSITE_PERFORMANCE_BY_BUDGET_CATEGORY_REQUEST: () =>
    FETCH_WEBSITE_PERFORMANCE_BY_BUDGET_CATEGORY_REQUEST,
  FETCH_WEBSITE_PERFORMANCE_BY_BUDGET_CATEGORY_SUCCESS: () =>
    FETCH_WEBSITE_PERFORMANCE_BY_BUDGET_CATEGORY_SUCCESS,
  FETCH_WEBSITE_PERFORMANCE_BY_FEEDOPS_CAMPAIGNS_REQUEST: () =>
    FETCH_WEBSITE_PERFORMANCE_BY_FEEDOPS_CAMPAIGNS_REQUEST,
  FETCH_WEBSITE_PERFORMANCE_BY_FEEDOPS_CAMPAIGNS_RESPONSE: () =>
    FETCH_WEBSITE_PERFORMANCE_BY_FEEDOPS_CAMPAIGNS_RESPONSE,
  FETCH_WEBSITE_PRIMARY_FEEDS_REQUEST: () =>
    FETCH_WEBSITE_PRIMARY_FEEDS_REQUEST,
  FETCH_WEBSITE_PRIMARY_FEEDS_RESPONSE: () =>
    FETCH_WEBSITE_PRIMARY_FEEDS_RESPONSE,
  FETCH_WEBSITE_SAVINGS_VALUES_REQUEST: () =>
    FETCH_WEBSITE_SAVINGS_VALUES_REQUEST,
  FETCH_WEBSITE_SAVINGS_VALUES_RESPONSE: () =>
    FETCH_WEBSITE_SAVINGS_VALUES_RESPONSE,
  FETCH_WEBSITE_SUBSCRIPTION_REQUEST: () => FETCH_WEBSITE_SUBSCRIPTION_REQUEST,
  FETCH_WEBSITE_SUBSCRIPTION_RESPONSE: () =>
    FETCH_WEBSITE_SUBSCRIPTION_RESPONSE,
  FETCH_WEBSITE_WIDE_QS_SCORES_REQUEST: () =>
    FETCH_WEBSITE_WIDE_QS_SCORES_REQUEST,
  FETCH_WEBSITE_WIDE_QS_SCORES_SUCCESS: () =>
    FETCH_WEBSITE_WIDE_QS_SCORES_SUCCESS,
  GENERATE_FEED_REQUEST: () => GENERATE_FEED_REQUEST,
  GENERATE_FEED_RESPONSE: () => GENERATE_FEED_RESPONSE,
  GEN_PRODUCT_DATA_AUDIT_REQUEST: () => GEN_PRODUCT_DATA_AUDIT_REQUEST,
  GEN_PRODUCT_DATA_AUDIT_RESPONSE: () => GEN_PRODUCT_DATA_AUDIT_RESPONSE,
  GET_FEED_FIELDS_REQUEST: () => GET_FEED_FIELDS_REQUEST,
  GET_FEED_FIELDS_RESPONSE: () => GET_FEED_FIELDS_RESPONSE,
  GET_FEED_REQUEST: () => GET_FEED_REQUEST,
  GET_FEED_RESPONSE: () => GET_FEED_RESPONSE,
  GET_NOTIFICATIONS_REQUEST: () => GET_NOTIFICATIONS_REQUEST,
  GET_NOTIFICATIONS_RESPONSE: () => GET_NOTIFICATIONS_RESPONSE,
  GET_OPERATION_STATUS_REQUEST: () => GET_OPERATION_STATUS_REQUEST,
  GET_OPERATION_STATUS_RESPONSE: () => GET_OPERATION_STATUS_RESPONSE,
  HIDE_FEEDOPS_FEEDBACK_MODAL: () => HIDE_FEEDOPS_FEEDBACK_MODAL,
  INVITATION_ERROR: () => INVITATION_ERROR,
  INVITATION_REQUEST: () => INVITATION_REQUEST,
  INVITATION_RESPONSE: () => INVITATION_RESPONSE,
  LIST_ADWORDS_ACCOUNTS_REQUEST: () => LIST_ADWORDS_ACCOUNTS_REQUEST,
  LIST_ADWORDS_ACCOUNTS_RESPONSE: () => LIST_ADWORDS_ACCOUNTS_RESPONSE,
  LIST_ANALYTICS_ACCOUNTS_REQUEST: () => LIST_ANALYTICS_ACCOUNTS_REQUEST,
  LIST_ANALYTICS_ACCOUNTS_RESPONSE: () => LIST_ANALYTICS_ACCOUNTS_RESPONSE,
  LIST_FEEDS_REQUEST: () => LIST_FEEDS_REQUEST,
  LIST_FEEDS_RESPONSE: () => LIST_FEEDS_RESPONSE,
  LIST_GOOGLE_SPREADSHEETS_REQUEST: () => LIST_GOOGLE_SPREADSHEETS_REQUEST,
  LIST_GOOGLE_SPREADSHEETS_RESPONSE: () => LIST_GOOGLE_SPREADSHEETS_RESPONSE,
  LIST_GOOGLE_SPREADSHHET_SHEETS_REQUEST: () =>
    LIST_GOOGLE_SPREADSHHET_SHEETS_REQUEST,
  LIST_GOOGLE_SPREADSHHET_SHEETS_RESPONSE: () =>
    LIST_GOOGLE_SPREADSHHET_SHEETS_RESPONSE,
  LIST_MC_CATALOGS_REQUEST: () => LIST_MC_CATALOGS_REQUEST,
  LIST_MC_CATALOGS_RESPONSE: () => LIST_MC_CATALOGS_RESPONSE,
  LIST_MERCHANT_CENTER_ACCOUNTS_REQUEST: () =>
    LIST_MERCHANT_CENTER_ACCOUNTS_REQUEST,
  LIST_MERCHANT_CENTER_ACCOUNTS_RESPONSE: () =>
    LIST_MERCHANT_CENTER_ACCOUNTS_RESPONSE,
  LIST_MICROSOFT_ADS_ACCOUNTS_REQUEST: () =>
    LIST_MICROSOFT_ADS_ACCOUNTS_REQUEST,
  LIST_MICROSOFT_ADS_ACCOUNTS_RESPONSE: () =>
    LIST_MICROSOFT_ADS_ACCOUNTS_RESPONSE,
  LIST_MICROSOFT_MERCHANT_CENTER_ACCOUNTS_REQUEST: () =>
    LIST_MICROSOFT_MERCHANT_CENTER_ACCOUNTS_REQUEST,
  LIST_MICROSOFT_MERCHANT_CENTER_ACCOUNTS_RESPONSE: () =>
    LIST_MICROSOFT_MERCHANT_CENTER_ACCOUNTS_RESPONSE,
  LOAD_ADWORDS_ACCOUNT_REQUEST: () => LOAD_ADWORDS_ACCOUNT_REQUEST,
  LOAD_ADWORDS_ACCOUNT_SUCCESS: () => LOAD_ADWORDS_ACCOUNT_SUCCESS,
  LOAD_AD_HEADLINE_LIST_ITEMS_ERROR: () => LOAD_AD_HEADLINE_LIST_ITEMS_ERROR,
  LOAD_AD_HEADLINE_LIST_ITEMS_SUCCESS: () =>
    LOAD_AD_HEADLINE_LIST_ITEMS_SUCCESS,
  LOAD_BUILD_REQUEST: () => LOAD_BUILD_REQUEST,
  LOAD_BUILD_RESPONSE: () => LOAD_BUILD_RESPONSE,
  LOAD_KEYWORD_LIST_ITEMS_ERROR: () => LOAD_KEYWORD_LIST_ITEMS_ERROR,
  LOAD_KEYWORD_LIST_ITEMS_REQUEST: () => LOAD_KEYWORD_LIST_ITEMS_REQUEST,
  LOAD_KEYWORD_LIST_ITEMS_SUCCESS: () => LOAD_KEYWORD_LIST_ITEMS_SUCCESS,
  LOAD_MERCHANT_CENTER_SETTING_SUCCESS: () =>
    LOAD_MERCHANT_CENTER_SETTING_SUCCESS,
  LOAD_PROMOTIONS_ERROR: () => LOAD_PROMOTIONS_ERROR,
  LOAD_PROMOTIONS_REQUEST: () => LOAD_PROMOTIONS_REQUEST,
  LOAD_PROMOTIONS_SUCCESS: () => LOAD_PROMOTIONS_SUCCESS,
  LOAD_PROMOTION_DETAIL_ERROR: () => LOAD_PROMOTION_DETAIL_ERROR,
  LOAD_PROMOTION_DETAIL_REQUEST: () => LOAD_PROMOTION_DETAIL_REQUEST,
  LOAD_PROMOTION_DETAIL_SUCCESS: () => LOAD_PROMOTION_DETAIL_SUCCESS,
  LOAD_PROMOTION_FEED_URL_ERROR: () => LOAD_PROMOTION_FEED_URL_ERROR,
  LOAD_PROMOTION_FEED_URL_REQUEST: () => LOAD_PROMOTION_FEED_URL_REQUEST,
  LOAD_PROMOTION_FEED_URL_SUCCESS: () => LOAD_PROMOTION_FEED_URL_SUCCESS,
  LOAD_STRUCTURED_SNIPPETS: () => LOAD_STRUCTURED_SNIPPETS,
  LOGIN_USER_REQUEST: () => LOGIN_USER_REQUEST,
  LOGIN_USER_RESPONSE: () => LOGIN_USER_RESPONSE,
  LOGOUT_USER_REQUEST: () => LOGOUT_USER_REQUEST,
  LOGOUT_USER_RESPONSE: () => LOGOUT_USER_RESPONSE,
  OPEN_INVENTORY_SHEET_REQUEST: () => OPEN_INVENTORY_SHEET_REQUEST,
  OPEN_INVENTORY_SHEET_SUCCESS: () => OPEN_INVENTORY_SHEET_SUCCESS,
  ORDER_CUSTOM_INVENTORY_REQUEST: () => ORDER_CUSTOM_INVENTORY_REQUEST,
  ORDER_CUSTOM_INVENTORY_RESPONSE: () => ORDER_CUSTOM_INVENTORY_RESPONSE,
  PREVIEW_RULES_REQUEST: () => PREVIEW_RULES_REQUEST,
  PREVIEW_RULES_RESPONSE: () => PREVIEW_RULES_RESPONSE,
  PRODUCT_ATTRIBUTE_REPLACEMENTS_QUERY_CHANGED_STATUS: () =>
    PRODUCT_ATTRIBUTE_REPLACEMENTS_QUERY_CHANGED_STATUS,
  PUBLISH_BUILD_REQUEST: () => PUBLISH_BUILD_REQUEST,
  PUBLISH_BUILD_RESPONSE: () => PUBLISH_BUILD_RESPONSE,
  RECEIVE_EXPORT_KEYWORDS: () => RECEIVE_EXPORT_KEYWORDS,
  RECEIVE_INVENTORY_DOWNLOAD: () => RECEIVE_INVENTORY_DOWNLOAD,
  RECEIVE_INVENTORY_FIRST_RECONCILE_STATUS: () =>
    RECEIVE_INVENTORY_FIRST_RECONCILE_STATUS,
  RECEIVE_INVENTORY_OUTBOUND_FEEDS_GENERATION_STATUS: () =>
    RECEIVE_INVENTORY_OUTBOUND_FEEDS_GENERATION_STATUS,
  RECEIVE_INVENTORY_STATUS: () => RECEIVE_INVENTORY_STATUS,
  RECEIVE_LOAD_ADS: () => RECEIVE_LOAD_ADS,
  RECEIVE_LOAD_KEYWORDS: () => RECEIVE_LOAD_KEYWORDS,
  RECEIVE_LOAD_PRODUCTS: () => RECEIVE_LOAD_PRODUCTS,
  RECEIVE_LOAD_PRODUCT_IDS: () => RECEIVE_LOAD_PRODUCT_IDS,
  RECEIVE_MERCHANT_CENTER_FEED: () => RECEIVE_MERCHANT_CENTER_FEED,
  RECEIVE_SAVE_INVENTORY_CURRENCY: () => RECEIVE_SAVE_INVENTORY_CURRENCY,
  REFRESH_MERCHANT_CENTER_PRODUCT_ERRORS_REQUEST: () =>
    REFRESH_MERCHANT_CENTER_PRODUCT_ERRORS_REQUEST,
  REFRESH_MERCHANT_CENTER_PRODUCT_ERRORS_SUCCESS: () =>
    REFRESH_MERCHANT_CENTER_PRODUCT_ERRORS_SUCCESS,
  REMOVE_INVITAION_REQUEST: () => REMOVE_INVITAION_REQUEST,
  REMOVE_INVITAION_RESPONSE: () => REMOVE_INVITAION_RESPONSE,
  REMOVE_MEMBERSHIP_REQUEST: () => REMOVE_MEMBERSHIP_REQUEST,
  REMOVE_MEMBERSHIP_RESPONSE: () => REMOVE_MEMBERSHIP_RESPONSE,
  REQUEST_EXPORT_KEYWORDS: () => REQUEST_EXPORT_KEYWORDS,
  REQUEST_INVENTORY_DOWNLOAD: () => REQUEST_INVENTORY_DOWNLOAD,
  REQUEST_INVENTORY_FIRST_RECONCILE_STATUS: () =>
    REQUEST_INVENTORY_FIRST_RECONCILE_STATUS,
  REQUEST_INVENTORY_OUTBOUND_FEEDS_GENERATION_STATUS: () =>
    REQUEST_INVENTORY_OUTBOUND_FEEDS_GENERATION_STATUS,
  REQUEST_INVENTORY_STATUS: () => REQUEST_INVENTORY_STATUS,
  REQUEST_LOAD_ADS: () => REQUEST_LOAD_ADS,
  REQUEST_LOAD_KEYWORDS: () => REQUEST_LOAD_KEYWORDS,
  REQUEST_LOAD_PRODUCTS: () => REQUEST_LOAD_PRODUCTS,
  REQUEST_LOAD_PRODUCT_IDS: () => REQUEST_LOAD_PRODUCT_IDS,
  REQUEST_MERCHANT_CENTER_FEED: () => REQUEST_MERCHANT_CENTER_FEED,
  REQUEST_SAVE_INVENTORY_CURRENCY: () => REQUEST_SAVE_INVENTORY_CURRENCY,
  RESPONSE_ERROR: () => RESPONSE_ERROR,
  SAMPLE_ADS_REQUEST: () => SAMPLE_ADS_REQUEST,
  SAMPLE_ADS_RESPONSE: () => SAMPLE_ADS_RESPONSE,
  SAMPLE_PRODUCTS_REQUEST: () => SAMPLE_PRODUCTS_REQUEST,
  SAMPLE_PRODUCTS_RESPONSE: () => SAMPLE_PRODUCTS_RESPONSE,
  SAVE_AD_HEADLINE_LIST_ITEMS_ERROR: () => SAVE_AD_HEADLINE_LIST_ITEMS_ERROR,
  SAVE_AD_HEADLINE_LIST_ITEMS_SUCCESS: () =>
    SAVE_AD_HEADLINE_LIST_ITEMS_SUCCESS,
  SAVE_API_IMPORT_PRODUCTS_REQUEST: () => SAVE_API_IMPORT_PRODUCTS_REQUEST,
  SAVE_API_IMPORT_PRODUCTS_RESPONSE: () => SAVE_API_IMPORT_PRODUCTS_RESPONSE,
  SAVE_FEED_REQUEST: () => SAVE_FEED_REQUEST,
  SAVE_FEED_RESPONSE: () => SAVE_FEED_RESPONSE,
  SAVE_FEED_SETTINGS_REQUEST: () => SAVE_FEED_SETTINGS_REQUEST,
  SAVE_FEED_SETTINGS_RESPONSE: () => SAVE_FEED_SETTINGS_RESPONSE,
  SAVE_FEED_TAXONOMY_MAPPINGS_REQUEST: () =>
    SAVE_FEED_TAXONOMY_MAPPINGS_REQUEST,
  SAVE_FEED_TAXONOMY_MAPPINGS_RESPONSE: () =>
    SAVE_FEED_TAXONOMY_MAPPINGS_RESPONSE,
  SAVE_FILE_IMPORT_PRODUCTS_REQUEST: () => SAVE_FILE_IMPORT_PRODUCTS_REQUEST,
  SAVE_FILE_IMPORT_PRODUCTS_RESPONSE: () => SAVE_FILE_IMPORT_PRODUCTS_RESPONSE,
  SAVE_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST: () =>
    SAVE_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST,
  SAVE_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE: () =>
    SAVE_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE,
  SAVE_INVENTORY_CATEGORY_REPLACEMENTS_REQUEST: () =>
    SAVE_INVENTORY_CATEGORY_REPLACEMENTS_REQUEST,
  SAVE_INVENTORY_CATEGORY_REPLACEMENTS_RESPONSE: () =>
    SAVE_INVENTORY_CATEGORY_REPLACEMENTS_RESPONSE,
  SAVE_INVENTORY_FC_ATTRIBUTES_REQUEST: () =>
    SAVE_INVENTORY_FC_ATTRIBUTES_REQUEST,
  SAVE_INVENTORY_FC_ATTRIBUTES_RESPONSE: () =>
    SAVE_INVENTORY_FC_ATTRIBUTES_RESPONSE,
  SAVE_KEYWORD_LIST_ITEMS_ERROR: () => SAVE_KEYWORD_LIST_ITEMS_ERROR,
  SAVE_KEYWORD_LIST_ITEMS_REQUEST: () => SAVE_KEYWORD_LIST_ITEMS_REQUEST,
  SAVE_KEYWORD_LIST_ITEMS_SUCCESS: () => SAVE_KEYWORD_LIST_ITEMS_SUCCESS,
  SAVE_MERCHANT_CENTER_SETTING_SUCCESS: () =>
    SAVE_MERCHANT_CENTER_SETTING_SUCCESS,
  SAVE_NEW_FEED_ERROR: () => SAVE_NEW_FEED_ERROR,
  SAVE_NEW_FEED_REQUEST: () => SAVE_NEW_FEED_REQUEST,
  SAVE_NEW_FEED_SUCCESS: () => SAVE_NEW_FEED_SUCCESS,
  SAVE_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST: () =>
    SAVE_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST,
  SAVE_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE: () =>
    SAVE_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE,
  SAVE_PRODUCT_URL_SETTING_REQUEST: () => SAVE_PRODUCT_URL_SETTING_REQUEST,
  SAVE_PRODUCT_URL_SETTING_RESPONSE: () => SAVE_PRODUCT_URL_SETTING_RESPONSE,
  SAVE_PROMOTIONS_ERROR: () => SAVE_PROMOTIONS_ERROR,
  SAVE_PROMOTIONS_REQUEST: () => SAVE_PROMOTIONS_REQUEST,
  SAVE_PROMOTIONS_SUCCESS: () => SAVE_PROMOTIONS_SUCCESS,
  SAVE_SELECTED_INVENTORY_ERROR: () => SAVE_SELECTED_INVENTORY_ERROR,
  SAVE_SELECTED_INVENTORY_REQUEST: () => SAVE_SELECTED_INVENTORY_REQUEST,
  SAVE_SELECTED_INVENTORY_SUCCESS: () => SAVE_SELECTED_INVENTORY_SUCCESS,
  SAVE_STRUCTURED_SNIPPETS: () => SAVE_STRUCTURED_SNIPPETS,
  SEARCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST: () =>
    SEARCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST,
  SEARCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE: () =>
    SEARCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE,
  SEARCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST: () =>
    SEARCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST,
  SEARCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE: () =>
    SEARCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE,
  SELECT_ADWORDS_ACCOUNT_REQUEST: () => SELECT_ADWORDS_ACCOUNT_REQUEST,
  SELECT_ADWORDS_ACCOUNT_RESPONSE: () => SELECT_ADWORDS_ACCOUNT_RESPONSE,
  SELECT_ANALYTICS_PROPERTY_ERROR: () => SELECT_ANALYTICS_PROPERTY_ERROR,
  SELECT_ANALYTICS_PROPERTY_REQUEST: () => SELECT_ANALYTICS_PROPERTY_REQUEST,
  SELECT_ANALYTICS_PROPERTY_RESPONSE: () => SELECT_ANALYTICS_PROPERTY_RESPONSE,
  SELECT_MASTER_ACCOUNT: () => SELECT_MASTER_ACCOUNT,
  SELECT_MERCHANT_CENTER_ACCOUNT_REQUEST: () =>
    SELECT_MERCHANT_CENTER_ACCOUNT_REQUEST,
  SELECT_MERCHANT_CENTER_ACCOUNT_RESPONSE: () =>
    SELECT_MERCHANT_CENTER_ACCOUNT_RESPONSE,
  SELECT_MICROSOFT_ADS_ACCOUNT_REQUEST: () =>
    SELECT_MICROSOFT_ADS_ACCOUNT_REQUEST,
  SELECT_MICROSOFT_ADS_ACCOUNT_RESPONSE: () =>
    SELECT_MICROSOFT_ADS_ACCOUNT_RESPONSE,
  SELECT_MICROSOFT_MERCHANT_CENTER_ACCOUNT_REQUEST: () =>
    SELECT_MICROSOFT_MERCHANT_CENTER_ACCOUNT_REQUEST,
  SELECT_MICROSOFT_MERCHANT_CENTER_ACCOUNT_RESPONSE: () =>
    SELECT_MICROSOFT_MERCHANT_CENTER_ACCOUNT_RESPONSE,
  SELECT_SCENARIO: () => SELECT_SCENARIO,
  SEND_ADWORDS_ACCOUNT_LINK_REQUEST: () => SEND_ADWORDS_ACCOUNT_LINK_REQUEST,
  SEND_ADWORDS_ACCOUNT_LINK_RESPONSE: () => SEND_ADWORDS_ACCOUNT_LINK_RESPONSE,
  SET_ADWORDS_ACCOUNT_ID_REQUEST: () => SET_ADWORDS_ACCOUNT_ID_REQUEST,
  SET_ADWORDS_ACCOUNT_ID_RESPONSE: () => SET_ADWORDS_ACCOUNT_ID_RESPONSE,
  SET_ANALYTICS_API_READY: () => SET_ANALYTICS_API_READY,
  SET_BOOK_A_MEETING_MODAL_OPEN: () => SET_BOOK_A_MEETING_MODAL_OPEN,
  SET_CHANNEL_FILTER_MODAL_OPEN: () => SET_CHANNEL_FILTER_MODAL_OPEN,
  SET_CHANNEL_SETTINGS_MODAL_OPEN: () => SET_CHANNEL_SETTINGS_MODAL_OPEN,
  SET_DATE_RANGE: () => SET_DATE_RANGE,
  SET_EXISTING_ACCOUNT_FOR_CONTACT_DETAILS: () =>
    SET_EXISTING_ACCOUNT_FOR_CONTACT_DETAILS,
  SET_FEED_BILLING_REQUEST: () => SET_FEED_BILLING_REQUEST,
  SET_FEED_BILLING_RESPONSE: () => SET_FEED_BILLING_RESPONSE,
  SET_GOOGLE_USER: () => SET_GOOGLE_USER,
  SET_ITEM_SORT_COLUMN: () => SET_ITEM_SORT_COLUMN,
  SET_MICROSOFT_USER: () => SET_MICROSOFT_USER,
  SET_PLAYBOOK_ACTIVE_TAB: () => SET_PLAYBOOK_ACTIVE_TAB,
  SET_PLAYBOOK_DISMISS_SWITCH: () => SET_PLAYBOOK_DISMISS_SWITCH,
  SET_SELECTED_VIEW_ACTION: () => SET_SELECTED_VIEW_ACTION,
  SET_SIDE_NAV_OPEN: () => SET_SIDE_NAV_OPEN,
  SET_SORT_COLUMN: () => SET_SORT_COLUMN,
  SET_WATCHING_REQUEST: () => SET_WATCHING_REQUEST,
  SET_WATCHING_RESPONSE: () => SET_WATCHING_RESPONSE,
  SET_WORK_EMAIL_MODAL_OPEN: () => SET_WORK_EMAIL_MODAL_OPEN,
  SHOW_FEEDOPS_FEEDBACK_MODAL: () => SHOW_FEEDOPS_FEEDBACK_MODAL,
  SHOW_HIDE_ALL_AUDITS_MODAL: () => SHOW_HIDE_ALL_AUDITS_MODAL,
  TEST_FEED_ENQUEUE_REQUEST: () => TEST_FEED_ENQUEUE_REQUEST,
  TEST_FEED_ENQUEUE_RESPONSE: () => TEST_FEED_ENQUEUE_RESPONSE,
  TEST_FEED_STATUS_REQUEST: () => TEST_FEED_STATUS_REQUEST,
  TEST_FEED_STATUS_RESPONSE: () => TEST_FEED_STATUS_RESPONSE,
  TOGGLE_DISPLAY_CONVERSION_VALUE_ON_COST_REQUEST: () =>
    TOGGLE_DISPLAY_CONVERSION_VALUE_ON_COST_REQUEST,
  TOGGLE_DISPLAY_CONVERSION_VALUE_ON_COST_SUCCESS: () =>
    TOGGLE_DISPLAY_CONVERSION_VALUE_ON_COST_SUCCESS,
  TRACK_AFFILIATE_SIGN_UP_REQUEST: () => TRACK_AFFILIATE_SIGN_UP_REQUEST,
  TRACK_AFFILIATE_SIGN_UP_RESPONSE: () => TRACK_AFFILIATE_SIGN_UP_RESPONSE,
  TRIGGER_AI_SUGGESTIONS_REQUEST: () => TRIGGER_AI_SUGGESTIONS_REQUEST,
  TRIGGER_AI_SUGGESTIONS_RESPONSE: () => TRIGGER_AI_SUGGESTIONS_RESPONSE,
  UNDISMISS_PLAYBOOK_PROGRESS_REQUEST: () =>
    UNDISMISS_PLAYBOOK_PROGRESS_REQUEST,
  UNDISMISS_PLAYBOOK_PROGRESS_RESPONSE: () =>
    UNDISMISS_PLAYBOOK_PROGRESS_RESPONSE,
  UPDATE_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_REQUEST: () =>
    UPDATE_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_REQUEST,
  UPDATE_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_RESPONSE: () =>
    UPDATE_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_RESPONSE,
  UPDATE_ACCOUNT_OVERVIEW_FILTERS: () => UPDATE_ACCOUNT_OVERVIEW_FILTERS,
  UPDATE_ACCOUNT_REQUEST: () => UPDATE_ACCOUNT_REQUEST,
  UPDATE_ACCOUNT_RESPONSE: () => UPDATE_ACCOUNT_RESPONSE,
  UPDATE_ACCOUNT_SUBSCRIPTION_REQUEST: () =>
    UPDATE_ACCOUNT_SUBSCRIPTION_REQUEST,
  UPDATE_ACCOUNT_SUBSCRIPTION_RESPONSE: () =>
    UPDATE_ACCOUNT_SUBSCRIPTION_RESPONSE,
  UPDATE_ADVERTISING_BUDGETS_REQUEST: () => UPDATE_ADVERTISING_BUDGETS_REQUEST,
  UPDATE_ADVERTISING_BUDGETS_SUCCESS: () => UPDATE_ADVERTISING_BUDGETS_SUCCESS,
  UPDATE_ADVERTISING_GOALS_REQUEST: () => UPDATE_ADVERTISING_GOALS_REQUEST,
  UPDATE_ADVERTISING_GOALS_SUCCESS: () => UPDATE_ADVERTISING_GOALS_SUCCESS,
  UPDATE_ADVERTISING_GOAL_TYPE_REQUEST: () =>
    UPDATE_ADVERTISING_GOAL_TYPE_REQUEST,
  UPDATE_ADVERTISING_GOAL_TYPE_SUCCESS: () =>
    UPDATE_ADVERTISING_GOAL_TYPE_SUCCESS,
  UPDATE_ADWORDS_ACCOUNT_ERROR: () => UPDATE_ADWORDS_ACCOUNT_ERROR,
  UPDATE_ADWORDS_ACCOUNT_REQUEST: () => UPDATE_ADWORDS_ACCOUNT_REQUEST,
  UPDATE_ADWORDS_ACCOUNT_SUCCESS: () => UPDATE_ADWORDS_ACCOUNT_SUCCESS,
  UPDATE_ALL_RULES_REQUEST: () => UPDATE_ALL_RULES_REQUEST,
  UPDATE_ALL_RULES_RESPONSE: () => UPDATE_ALL_RULES_RESPONSE,
  UPDATE_ATTRIBUTE_FILTERS: () => UPDATE_ATTRIBUTE_FILTERS,
  UPDATE_AUDIT_SCHEDULE_REQUEST: () => UPDATE_AUDIT_SCHEDULE_REQUEST,
  UPDATE_AUDIT_SCHEDULE_RESPONSE: () => UPDATE_AUDIT_SCHEDULE_RESPONSE,
  UPDATE_BID_SETTING_ERROR: () => UPDATE_BID_SETTING_ERROR,
  UPDATE_BID_SETTING_REQUEST: () => UPDATE_BID_SETTING_REQUEST,
  UPDATE_BID_SETTING_SUCCESS: () => UPDATE_BID_SETTING_SUCCESS,
  UPDATE_BUDGET_CATEGORY_ADVERTISING_BUDGETS_REQUEST: () =>
    UPDATE_BUDGET_CATEGORY_ADVERTISING_BUDGETS_REQUEST,
  UPDATE_BUDGET_CATEGORY_ADVERTISING_BUDGETS_RESPONSE: () =>
    UPDATE_BUDGET_CATEGORY_ADVERTISING_BUDGETS_RESPONSE,
  UPDATE_BUDGET_CATEGORY_ADVERTISING_GOALS_REQUEST: () =>
    UPDATE_BUDGET_CATEGORY_ADVERTISING_GOALS_REQUEST,
  UPDATE_BUDGET_CATEGORY_ADVERTISING_GOALS_RESPONSE: () =>
    UPDATE_BUDGET_CATEGORY_ADVERTISING_GOALS_RESPONSE,
  UPDATE_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_REQUEST: () =>
    UPDATE_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_REQUEST,
  UPDATE_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_SUCCESS: () =>
    UPDATE_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_SUCCESS,
  UPDATE_CUSTOM_FEED_REQUEST: () => UPDATE_CUSTOM_FEED_REQUEST,
  UPDATE_CUSTOM_FEED_RESPONSE: () => UPDATE_CUSTOM_FEED_RESPONSE,
  UPDATE_DISABLED_INVENTORY_ITEMS: () => UPDATE_DISABLED_INVENTORY_ITEMS,
  UPDATE_FEED_REQUEST: () => UPDATE_FEED_REQUEST,
  UPDATE_FEED_RESPONSE: () => UPDATE_FEED_RESPONSE,
  UPDATE_INVENTORY_ATTRIBUTE_REPLACEMENTS: () =>
    UPDATE_INVENTORY_ATTRIBUTE_REPLACEMENTS,
  UPDATE_INVENTORY_DETAIL_REQUEST: () => UPDATE_INVENTORY_DETAIL_REQUEST,
  UPDATE_INVENTORY_DETAIL_RESPONSE: () => UPDATE_INVENTORY_DETAIL_RESPONSE,
  UPDATE_KEYWORD_SUGGESTIONS_ERROR: () => UPDATE_KEYWORD_SUGGESTIONS_ERROR,
  UPDATE_KEYWORD_SUGGESTIONS_REQUEST: () => UPDATE_KEYWORD_SUGGESTIONS_REQUEST,
  UPDATE_KEYWORD_SUGGESTIONS_SUCCESS: () => UPDATE_KEYWORD_SUGGESTIONS_SUCCESS,
  UPDATE_MERCHANT_CENTER_ACCOUNT_REQUEST: () =>
    UPDATE_MERCHANT_CENTER_ACCOUNT_REQUEST,
  UPDATE_MERCHANT_CENTER_ACCOUNT_RESPONSE: () =>
    UPDATE_MERCHANT_CENTER_ACCOUNT_RESPONSE,
  UPDATE_PAYMENT_METHOD_REQUEST: () => UPDATE_PAYMENT_METHOD_REQUEST,
  UPDATE_PAYMENT_METHOD_RESPONSE: () => UPDATE_PAYMENT_METHOD_RESPONSE,
  UPDATE_PRODUCT_ATTRIBUTE_OPTIMISATION_SUGGESTIONS_REQUEST: () =>
    UPDATE_PRODUCT_ATTRIBUTE_OPTIMISATION_SUGGESTIONS_REQUEST,
  UPDATE_PRODUCT_ATTRIBUTE_OPTIMISATION_SUGGESTIONS_RESPONSE: () =>
    UPDATE_PRODUCT_ATTRIBUTE_OPTIMISATION_SUGGESTIONS_RESPONSE,
  UPDATE_PRODUCT_ATTRIBUTE_REPLACEMENTS: () =>
    UPDATE_PRODUCT_ATTRIBUTE_REPLACEMENTS,
  UPDATE_PRODUCT_ROW_SELECTION_STATUS: () =>
    UPDATE_PRODUCT_ROW_SELECTION_STATUS,
  UPDATE_SELECTED_SUGGESTION_COLUMNS: () => UPDATE_SELECTED_SUGGESTION_COLUMNS,
  UPDATE_SETTINGS: () => UPDATE_SETTINGS,
  UPDATE_USER_REQUEST: () => UPDATE_USER_REQUEST,
  UPDATE_USER_RESPONSE: () => UPDATE_USER_RESPONSE,
  UPDATE_WEBSITE_BUDGET_REQUEST: () => UPDATE_WEBSITE_BUDGET_REQUEST,
  UPDATE_WEBSITE_BUDGET_RESPONSE: () => UPDATE_WEBSITE_BUDGET_RESPONSE,
  UPDATE_WEBSITE_CUSTOMER_REQUEST: () => UPDATE_WEBSITE_CUSTOMER_REQUEST,
  UPDATE_WEBSITE_CUSTOMER_RESPONSE: () => UPDATE_WEBSITE_CUSTOMER_RESPONSE,
  UPDATE_WEBSITE_DETAILS_REQUEST: () => UPDATE_WEBSITE_DETAILS_REQUEST,
  UPDATE_WEBSITE_DETAILS_SUCCESS: () => UPDATE_WEBSITE_DETAILS_SUCCESS,
  UPDATE_WEBSITE_REQUEST: () => UPDATE_WEBSITE_REQUEST,
  UPDATE_WEBSITE_RESPONSE: () => UPDATE_WEBSITE_RESPONSE,
  UPDATE_WEBSITE_SUBSCRIPTION_REQUEST: () =>
    UPDATE_WEBSITE_SUBSCRIPTION_REQUEST,
  UPDATE_WEBSITE_SUBSCRIPTION_RESPONSE: () =>
    UPDATE_WEBSITE_SUBSCRIPTION_RESPONSE,
  UPLOAD_IMPORT_FILE_REQUEST: () => UPLOAD_IMPORT_FILE_REQUEST,
  UPLOAD_IMPORT_FILE_RESPONSE: () => UPLOAD_IMPORT_FILE_RESPONSE,
  USER_MASTER_ACCOUNT_LIST_REQUEST: () => USER_MASTER_ACCOUNT_LIST_REQUEST,
  USER_MASTER_ACCOUNT_LIST_RESPONSE: () => USER_MASTER_ACCOUNT_LIST_RESPONSE,
  USE_EXISTING_CONTACT_DETAILS_REQUEST: () =>
    USE_EXISTING_CONTACT_DETAILS_REQUEST,
  USE_EXISTING_CONTACT_DETAILS_RESPONSE: () =>
    USE_EXISTING_CONTACT_DETAILS_RESPONSE,
  acknowledgeNotification: () => acknowledgeNotification,
  addFeedOpsFeedback: () => addFeedOpsFeedback,
  addMembership: () => addMembership,
  adwordsAccountLinkingStatus: () => adwordsAccountLinkingStatus,
  applyPendingKeywordSuggestions: () => applyPendingKeywordSuggestions,
  applySearchTermRequestsAction: () => applySearchTermRequestsAction,
  applyShoppingMappingsSheet: () => applyShoppingMappingsSheet,
  applyShoppingMappingsSheetByInventoryId: () =>
    applyShoppingMappingsSheetByInventoryId,
  applyVariationsSheet: () => applyVariationsSheet,
  buildScenario: () => buildScenario,
  checkAccountPublicationAccountTypes: () =>
    checkAccountPublicationAccountTypes,
  checkMasterAccountPublicationAccountTypes: () =>
    checkMasterAccountPublicationAccountTypes,
  checkPublicationAccountTypes: () => checkPublicationAccountTypes,
  checkWebsitePublicationAccountTypes: () =>
    checkWebsitePublicationAccountTypes,
  clearInventoryAttributeReplacements: () =>
    clearInventoryAttributeReplacements,
  clearRequestQueue: () => clearRequestQueue,
  clearUpdatedInventoryAttributeReplacements: () =>
    clearUpdatedInventoryAttributeReplacements,
  clearUpdatedItemsAndReplacements: () => clearUpdatedItemsAndReplacements,
  completePlaybookItem: () => completePlaybookItem,
  createAccount: () => createAccount,
  createAccountSubscription: () => createAccountSubscription,
  createAdwordsAccountAndSendInvitation: () =>
    createAdwordsAccountAndSendInvitation,
  createAnalyticsAccount: () => createAnalyticsAccount,
  createAnalyticsAccountRequest: () => createAnalyticsAccountRequest,
  createAnalyticsAccountResponse: () => createAnalyticsAccountResponse,
  createAnalyticsProperty: () => createAnalyticsProperty,
  createAnalyticsPropertyRequest: () => createAnalyticsPropertyRequest,
  createAnalyticsPropertyResponse: () => createAnalyticsPropertyResponse,
  createBudgetCategory: () => createBudgetCategory,
  createBuild: () => createBuild,
  createCustomFeed: () => createCustomFeed,
  createDemoWebsite: () => createDemoWebsite,
  createFeed: () => createFeed2,
  createMerchantCenterAccount: () => createMerchantCenterAccount,
  createNewMerchantCenterAccount: () => createNewMerchantCenterAccount,
  createOrUpdateSettings: () => createOrUpdateSettings,
  createOrUpdateWebsiteContacts: () => createOrUpdateWebsiteContacts,
  createRuleModalStatus: () => createRuleModalStatus,
  createShoppingMappingsSheet: () => createShoppingMappingsSheet,
  createShoppingMappingsSheetByInventoryId: () =>
    createShoppingMappingsSheetByInventoryId,
  createVariationsSheet: () => createVariationsSheet,
  createWebsite: () => createWebsite,
  createWebsiteBudget: () => createWebsiteBudget,
  createWebsiteCustomer: () => createWebsiteCustomer,
  createWebsiteDefaultSharedBudget: () => createWebsiteDefaultSharedBudget,
  createWebsiteRetailScenario: () => createWebsiteRetailScenario,
  createWebsiteShoppingBudget: () => createWebsiteShoppingBudget,
  deleteBuild: () => deleteBuild,
  deleteInventory: () => deleteInventory,
  deleteWebsite: () => deleteWebsite,
  destroyBudgetCategory: () => destroyBudgetCategory,
  dismissPlaybookProgress: () => dismissPlaybookProgress,
  downloadWebsiteKeywordReport: () => downloadWebsiteKeywordReport,
  enableDisableChannelSettings: () => enableDisableChannelSettings,
  exportKeywords: () => exportKeywords,
  exportProductAttributeReplacements: () => exportProductAttributeReplacements,
  exportRulesPreview: () => exportRulesPreview,
  fetchAccountAdvertisingBudgets: () => fetchAccountAdvertisingBudgets,
  fetchAccountAdvertisingGoalType: () => fetchAccountAdvertisingGoalType,
  fetchAccountAndWebsiteSubscription: () => fetchAccountAndWebsiteSubscription,
  fetchAccountMerchantCenterStatus: () => fetchAccountMerchantCenterStatus,
  fetchAccountPerformanceByDay: () => fetchAccountPerformanceByDay,
  fetchAccountPerformanceByWebsite: () => fetchAccountPerformanceByWebsite,
  fetchAccountSubscription: () => fetchAccountSubscription,
  fetchAccountUsers: () => fetchAccountUsers,
  fetchAddon: () => fetchAddon,
  fetchAdvertisingBudgets: () => fetchAdvertisingBudgets,
  fetchAdvertisingGoalType: () => fetchAdvertisingGoalType,
  fetchAdvertisingGoalTypes: () => fetchAdvertisingGoalTypes,
  fetchAdvertisingGoals: () => fetchAdvertisingGoals,
  fetchAdvertisingStatus: () => fetchAdvertisingStatus,
  fetchAiCreditsHistory: () => fetchAiCreditsHistory,
  fetchAnalyticsAccessToken: () => fetchAnalyticsAccessToken,
  fetchAnalyticsAccessTokenRequest: () => fetchAnalyticsAccessTokenRequest,
  fetchAnalyticsAccessTokenSuccess: () => fetchAnalyticsAccessTokenSuccess,
  fetchAnalyticsFeedopsReport: () => fetchAnalyticsFeedopsReport,
  fetchAnalyticsReport: () => fetchAnalyticsReport,
  fetchAnalyticsViews: () => fetchAnalyticsViews,
  fetchApiImportSourceHeaders: () => fetchApiImportSourceHeaders,
  fetchAverageQualityScoreComponents: () => fetchAverageQualityScoreComponents,
  fetchBudgetCategoryAdvertisingBudgets: () =>
    fetchBudgetCategoryAdvertisingBudgets,
  fetchBudgetCategoryAdvertisingGoalType: () =>
    fetchBudgetCategoryAdvertisingGoalType,
  fetchBudgetCategoryAdvertisingGoals: () =>
    fetchBudgetCategoryAdvertisingGoals,
  fetchBudgetCategoryPerformanceByCampaignType: () =>
    fetchBudgetCategoryPerformanceByCampaignType,
  fetchBudgetCategoryPerformanceByCampaignTypeSuccess: () =>
    fetchBudgetCategoryPerformanceByCampaignTypeSuccess,
  fetchBudgetCategoryPerformanceByDay: () =>
    fetchBudgetCategoryPerformanceByDay,
  fetchCampaignTypeDetail: () => fetchCampaignTypeDetail,
  fetchCampaignTypeDetails: () => fetchCampaignTypeDetails,
  fetchCampaignTypes: () => fetchCampaignTypes,
  fetchCompletedPlaybookItems: () => fetchCompletedPlaybookItems,
  fetchCountryGeoTargets: () => fetchCountryGeoTargets,
  fetchDailyPerformance: () => fetchDailyPerformance,
  fetchDriveDocs: () => fetchDriveDocs,
  fetchExistingAccountCustomer: () => fetchExistingAccountCustomer,
  fetchExistingMasterAccountCustomer: () => fetchExistingMasterAccountCustomer,
  fetchExistingWebsiteCustomer: () => fetchExistingWebsiteCustomer,
  fetchFeedDetail: () => fetchFeedDetail,
  fetchFeedDetailsById: () => fetchFeedDetailsById,
  fetchFeedStatus: () => fetchFeedStatus,
  fetchFeedopsTestimonials: () => fetchFeedopsTestimonials,
  fetchFileImportSourceHeaders: () => fetchFileImportSourceHeaders,
  fetchFullWebsiteList: () => fetchFullWebsiteList,
  fetchGoogleTaxonomies: () => fetchGoogleTaxonomies,
  fetchHasBudgetCategories: () => fetchHasBudgetCategories,
  fetchIfNeeded: () => fetchIfNeeded,
  fetchInventoriesList: () => fetchInventoriesList,
  fetchInventoriesListByWebsiteId: () => fetchInventoriesListByWebsiteId,
  fetchInventoryAttributeReplacements: () =>
    fetchInventoryAttributeReplacements,
  fetchInventoryAttributes: () => fetchInventoryAttributes,
  fetchInventoryCategories: () => fetchInventoryCategories,
  fetchInventoryCategoryReplacements: () => fetchInventoryCategoryReplacements,
  fetchInventoryDetail: () => fetchInventoryDetail,
  fetchInventoryFcAttributes: () => fetchInventoryFcAttributes,
  fetchInventoryFeedOpsCategories: () => fetchInventoryFeedOpsCategories,
  fetchInventoryFirstReconcileStatus: () => fetchInventoryFirstReconcileStatus,
  fetchInventoryOutboundFeedsGenerationStatus: () =>
    fetchInventoryOutboundFeedsGenerationStatus,
  fetchInventoryProcessingStatus: () => fetchInventoryProcessingStatus,
  fetchInventoryStatus: () => fetchInventoryStatus,
  fetchKeywordIdeas: () => fetchKeywordIdeas,
  fetchKeywordSuggestions: () => fetchKeywordSuggestions,
  fetchMasterAccountAdvertisingBudgets: () =>
    fetchMasterAccountAdvertisingBudgets,
  fetchMasterAccountAdvertisingGoalType: () =>
    fetchMasterAccountAdvertisingGoalType,
  fetchMasterAccountPerformanceByDay: () => fetchMasterAccountPerformanceByDay,
  fetchMasterAccountPerformanceByWebsite: () =>
    fetchMasterAccountPerformanceByWebsite,
  fetchMerchantCenterErrorCategories: () => fetchMerchantCenterErrorCategories,
  fetchMerchantCenterErrorTypes: () => fetchMerchantCenterErrorTypes,
  fetchMerchantCenterFeedData: () => fetchMerchantCenterFeedData,
  fetchMerchantCenterProductErrors: () => fetchMerchantCenterProductErrors,
  fetchMerchantCenterProductInfoAndMeasures: () =>
    fetchMerchantCenterProductInfoAndMeasures,
  fetchPerformanceSummary: () => fetchPerformanceSummary,
  fetchPlan: () => fetchPlan,
  fetchPlans: () => fetchPlans,
  fetchPlaybookProgress: () => fetchPlaybookProgress,
  fetchPlaybookProgressByItem: () => fetchPlaybookProgressByItem,
  fetchProductAttributeReplacements: () => fetchProductAttributeReplacements,
  fetchProductDataAudits: () => fetchProductDataAudits,
  fetchProductTitles: () => fetchProductTitles,
  fetchProductUrlSetting: () => fetchProductUrlSetting,
  fetchPromotionDetails: () => fetchPromotionDetails,
  fetchPromotionFeedUrl: () => fetchPromotionFeedUrl,
  fetchPromotionsSettings: () => fetchPromotionsSettings,
  fetchRuleActionTypes: () => fetchRuleActionTypes,
  fetchRules: () => fetchRules,
  fetchScenarioStatus: () => fetchScenarioStatus,
  fetchSearchDiagnosticsReportUrl: () => fetchSearchDiagnosticsReportUrl,
  fetchSearchTermRequests: () => fetchSearchTermRequests,
  fetchSystemAverageQualityScoreComponents: () =>
    fetchSystemAverageQualityScoreComponents,
  fetchSystemWideMerchantCenterProductInfoAndMeasures: () =>
    fetchSystemWideMerchantCenterProductInfoAndMeasures,
  fetchUserAccounts: () => fetchUserAccounts,
  fetchUserMasterAccounts: () => fetchUserMasterAccounts,
  fetchValueFormats: () => fetchValueFormats,
  fetchValueOperators: () => fetchValueOperators,
  fetchVendors: () => fetchVendors,
  fetchVerticalFields: () => fetchVerticalFields,
  fetchWebsiteAdvertisingBudgets: () => fetchWebsiteAdvertisingBudgets,
  fetchWebsiteAdvertisingGoalType: () => fetchWebsiteAdvertisingGoalType,
  fetchWebsiteAdvertisingGoals: () => fetchWebsiteAdvertisingGoals,
  fetchWebsiteAdvertisingPlan: () => fetchWebsiteAdvertisingPlan,
  fetchWebsiteCampaignIds: () => fetchWebsiteCampaignIds,
  fetchWebsiteContacts: () => fetchWebsiteContacts,
  fetchWebsiteCustomer: () => fetchWebsiteCustomer,
  fetchWebsiteDailyPerformance: () => fetchWebsiteDailyPerformance,
  fetchWebsiteDetail: () => fetchWebsiteDetail,
  fetchWebsiteDetails: () => fetchWebsiteDetails,
  fetchWebsiteDetailsIfNeeded: () => fetchWebsiteDetailsIfNeeded,
  fetchWebsiteMerchantCenterErrorCategories: () =>
    fetchWebsiteMerchantCenterErrorCategories,
  fetchWebsiteMerchantCenterErrors: () => fetchWebsiteMerchantCenterErrors,
  fetchWebsiteMerchantCenterStatus: () => fetchWebsiteMerchantCenterStatus,
  fetchWebsitePerformanceByBudgetCategories: () =>
    fetchWebsitePerformanceByBudgetCategories,
  fetchWebsitePerformanceByCampaignType: () =>
    fetchWebsitePerformanceByCampaignType,
  fetchWebsitePerformanceByFeedopsCampaigns: () =>
    fetchWebsitePerformanceByFeedopsCampaigns,
  fetchWebsitePrimaryFeeds: () => fetchWebsitePrimaryFeeds,
  fetchWebsiteSavingsValues: () => fetchWebsiteSavingsValues,
  fetchWebsiteSubscription: () => fetchWebsiteSubscription,
  fetchWebsiteWideQsScores: () => fetchWebsiteWideQsScores,
  fetchWebsites: () => fetchWebsites,
  genProductDataAudit: () => genProductDataAudit,
  generateScenario: () => generateScenario,
  generateScenariobyBuildId: () => generateScenariobyBuildId,
  getFeed: () => getFeed,
  getFeedFields: () => getFeedFields,
  getNotifications: () => getNotifications,
  getOperationStatus: () => getOperationStatus,
  hideFeedOpsFeedbackModal: () => hideFeedOpsFeedbackModal,
  listAdsAccounts: () => listAdsAccounts,
  listAdsAccountsRequest: () => listAdsAccountsRequest,
  listAdsAccountsResponse: () => listAdsAccountsResponse,
  listAdwordsAccounts: () => listAdwordsAccounts,
  listAnalyticsAccounts: () => listAnalyticsAccounts,
  listAnalyticsAccountsRequest: () => listAnalyticsAccountsRequest,
  listAnalyticsAccountsResponse: () => listAnalyticsAccountsResponse,
  listFeeds: () => listFeeds,
  listGoogleSpreadsheetSheets: () => listGoogleSpreadsheetSheets,
  listGoogleSpreadsheets: () => listGoogleSpreadsheets,
  listMcCatalogs: () => listMcCatalogs,
  listMcCatalogsRequest: () => listMcCatalogsRequest,
  listMcCatalogsResponse: () => listMcCatalogsResponse,
  loadAdHeadlineListItems: () => loadAdHeadlineListItems,
  loadAds: () => loadAds,
  loadAdwordsAccount: () => loadAdwordsAccount,
  loadBuild: () => loadBuild,
  loadKeywordListItems: () => loadKeywordListItems,
  loadKeywords: () => loadKeywords,
  loadMerchantCenterSetting: () => loadMerchantCenterSetting,
  loadProducts: () => loadProducts,
  loadProductsIds: () => loadProductsIds,
  loadSampleAds: () => loadSampleAds,
  loadSampleProducts: () => loadSampleProducts,
  loadStructuredSnippets: () => loadStructuredSnippets,
  loginUser: () => loginUser,
  logoutUser: () => logoutUser,
  openErrorsSheet: () => openErrorsSheet,
  orderCustomInventory: () => orderCustomInventory,
  previewRules: () => previewRules,
  productAttributeReplacementsQueryChangedStatus: () =>
    productAttributeReplacementsQueryChangedStatus,
  publishBuild: () => publishBuild,
  publishScenario: () => publishScenario,
  refreshKeywordSuggestions: () => refreshKeywordSuggestions,
  refreshMerchantCenterProductErrors: () => refreshMerchantCenterProductErrors,
  removeInvitation: () => removeInvitation,
  removeMembership: () => removeMembership,
  requestCurrencies: () => requestCurrencies,
  saveAdHeadlineListItems: () => saveAdHeadlineListItems,
  saveApiImportProducts: () => saveApiImportProducts,
  saveFeed: () => saveFeed,
  saveFeedSettings: () => saveFeedSettings,
  saveFileImportProducts: () => saveFileImportProducts,
  saveInventoryAttributeReplacements: () => saveInventoryAttributeReplacements,
  saveInventoryCategoryReplacements: () => saveInventoryCategoryReplacements,
  saveInventoryFcAttributes: () => saveInventoryFcAttributes,
  saveKeywordListItems: () => saveKeywordListItems,
  saveMerchantCenterSetting: () => saveMerchantCenterSetting,
  saveNewFeed: () => saveNewFeed,
  saveProductAttributeReplacements: () => saveProductAttributeReplacements,
  saveProductUrlSetting: () => saveProductUrlSetting,
  savePromotionsSettings: () => savePromotionsSettings,
  saveSelectedInventory: () => saveSelectedInventory,
  saveStructuredSnippets: () => saveStructuredSnippets,
  saveWebsiteDetails: () => saveWebsiteDetails,
  searchInventoryAttributeReplacements: () =>
    searchInventoryAttributeReplacements,
  searchProductAttributeReplacements: () => searchProductAttributeReplacements,
  selectAdsAccount: () => selectAdsAccount,
  selectAdsAccountRequest: () => selectAdsAccountRequest,
  selectAdsAccountResponse: () => selectAdsAccountResponse,
  selectAdwordsAccount: () => selectAdwordsAccount,
  selectAnalyticsProperty: () => selectAnalyticsProperty,
  selectAnalyticsPropertyError: () => selectAnalyticsPropertyError,
  selectAnalyticsPropertyRequest: () => selectAnalyticsPropertyRequest,
  selectAnalyticsPropertyResponse: () => selectAnalyticsPropertyResponse,
  selectMasterAccount: () => selectMasterAccount,
  selectScenario: () => selectScenario,
  sendAdwordsAccountLink: () => sendAdwordsAccountLink,
  sendInvitation: () => sendInvitation,
  setAnalyticsApiReady: () => setAnalyticsApiReady,
  setBookAMeetingModalOpen: () => setBookAMeetingModalOpen,
  setChannelFilterModalOpen: () => setChannelFilterModalOpen,
  setDateRange: () => setDateRange,
  setDismissSwitch: () => setDismissSwitch,
  setExistingAccount: () => setExistingAccount,
  setGoogleUser: () => setGoogleUser,
  setInventoryCurrency: () => setInventoryCurrency,
  setItemSortColumn: () => setItemSortColumn,
  setMicrosoftUser: () => setMicrosoftUser,
  setPlaybookActiveTab: () => setPlaybookActiveTab,
  setSelectedView: () => setSelectedView,
  setSideNavOpen: () => setSideNavOpen,
  setSortColumn: () => setSortColumn,
  setWebsiteWatching: () => setWebsiteWatching,
  setWorkEmailModalOpen: () => setWorkEmailModalOpen,
  showFeedOpsFeedbackModal: () => showFeedOpsFeedbackModal,
  showHideAllAuditsModal: () => showHideAllAuditsModal,
  testFeed: () => testFeed,
  testFeedEnqueue: () => testFeedEnqueue,
  testFeedStatus: () => testFeedStatus,
  toggleDisplayConversionValueOnCost: () => toggleDisplayConversionValueOnCost,
  trackAffiliateSignUp: () => trackAffiliateSignUp,
  triggerAiSuggestions: () => triggerAiSuggestions,
  triggerFeedGenerationById: () => triggerFeedGenerationById,
  triggerInventoryDownload: () => triggerInventoryDownload,
  triggerInventoryDownloadByInventoryId: () =>
    triggerInventoryDownloadByInventoryId,
  undismissPlaybookProgress: () => undismissPlaybookProgress,
  updateAccount: () => updateAccount,
  updateAccountAndWebsiteSubscription: () =>
    updateAccountAndWebsiteSubscription,
  updateAccountOverviewFilters: () => updateAccountOverviewFilters,
  updateAccountSubscription: () => updateAccountSubscription,
  updateAdvertisingBudgets: () => updateAdvertisingBudgets,
  updateAdvertisingGoalType: () => updateAdvertisingGoalType,
  updateAdvertisingGoals: () => updateAdvertisingGoals,
  updateAdwordsAccount: () => updateAdwordsAccount,
  updateAllKeywordListItems: () => updateAllKeywordListItems,
  updateAllRules: () => updateAllRules,
  updateAttributeFilters: () => updateAttributeFilters,
  updateAuditSchedule: () => updateAuditSchedule,
  updateBidSettings: () => updateBidSettings,
  updateBudgetCategoryAdvertisingBudgets: () =>
    updateBudgetCategoryAdvertisingBudgets,
  updateBudgetCategoryAdvertisingGoalType: () =>
    updateBudgetCategoryAdvertisingGoalType,
  updateBudgetCategoryAdvertisingGoals: () =>
    updateBudgetCategoryAdvertisingGoals,
  updateCustomFeed: () => updateCustomFeed,
  updateDisableInventoryItems: () => updateDisableInventoryItems,
  updateFeed: () => updateFeed2,
  updateInventoryAttributeReplacements: () =>
    updateInventoryAttributeReplacements,
  updateInventoryDetail: () => updateInventoryDetail,
  updateKeywordSuggestions: () => updateKeywordSuggestions,
  updateMerchantCenterAccount: () => updateMerchantCenterAccount,
  updateProductAttributeOptimisationSuggestions: () =>
    updateProductAttributeOptimisationSuggestions,
  updateProductAttributeReplacements: () => updateProductAttributeReplacements,
  updateRowSelectionStatus: () => updateRowSelectionStatus,
  updateScenarioSettings: () => updateScenarioSettings,
  updateSelectedSuggestionColumns: () => updateSelectedSuggestionColumns,
  updateUser: () => updateUser,
  updateWebsite: () => updateWebsite,
  updateWebsiteAdvertisingBudgets: () => updateWebsiteAdvertisingBudgets,
  updateWebsiteAdvertisingGoalType: () => updateWebsiteAdvertisingGoalType,
  updateWebsiteAdvertisingGoals: () => updateWebsiteAdvertisingGoals,
  updateWebsiteBudget: () => updateWebsiteBudget,
  updateWebsiteCustomer: () => updateWebsiteCustomer,
  updateWebsitePaymentMethod: () => updateWebsitePaymentMethod,
  updateWebsiteSubscription: () => updateWebsiteSubscription,
  uploadImportFile: () => uploadImportFile,
  useExistingContactDetails: () => useExistingContactDetails,
});

// node_modules/map-obj/index.js
var isObject = (value) => typeof value === 'object' && value !== null;
var isObjectCustom = (value) =>
  isObject(value) &&
  !(value instanceof RegExp) &&
  !(value instanceof Error) &&
  !(value instanceof Date);
var mapObjectSkip = Symbol('mapObjectSkip');
var _mapObject = (
  object2,
  mapper,
  options,
  isSeen = /* @__PURE__ */ new WeakMap()
) => {
  options = {
    deep: false,
    target: {},
    ...options,
  };
  if (isSeen.has(object2)) {
    return isSeen.get(object2);
  }
  isSeen.set(object2, options.target);
  const { target } = options;
  delete options.target;
  const mapArray = (array) =>
    array.map((element) =>
      isObjectCustom(element)
        ? _mapObject(element, mapper, options, isSeen)
        : element
    );
  if (Array.isArray(object2)) {
    return mapArray(object2);
  }
  for (const [key, value] of Object.entries(object2)) {
    const mapResult = mapper(key, value, object2);
    if (mapResult === mapObjectSkip) {
      continue;
    }
    let [newKey, newValue, { shouldRecurse = true } = {}] = mapResult;
    if (newKey === '__proto__') {
      continue;
    }
    if (options.deep && shouldRecurse && isObjectCustom(newValue)) {
      newValue = Array.isArray(newValue)
        ? mapArray(newValue)
        : _mapObject(newValue, mapper, options, isSeen);
    }
    target[newKey] = newValue;
  }
  return target;
};
function mapObject(object2, mapper, options) {
  if (!isObject(object2)) {
    throw new TypeError(
      `Expected an object, got \`${object2}\` (${typeof object2})`
    );
  }
  return _mapObject(object2, mapper, options);
}

// node_modules/camelcase/index.js
var UPPERCASE = /[\p{Lu}]/u;
var LOWERCASE = /[\p{Ll}]/u;
var LEADING_CAPITAL = /^[\p{Lu}](?![\p{Lu}])/gu;
var IDENTIFIER = /([\p{Alpha}\p{N}_]|$)/u;
var SEPARATORS = /[_.\- ]+/;
var LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);
var SEPARATORS_AND_IDENTIFIER = new RegExp(
  SEPARATORS.source + IDENTIFIER.source,
  'gu'
);
var NUMBERS_AND_IDENTIFIER = new RegExp('\\d+' + IDENTIFIER.source, 'gu');
var preserveCamelCase = (
  string,
  toLowerCase,
  toUpperCase,
  preserveConsecutiveUppercase2
) => {
  let isLastCharLower = false;
  let isLastCharUpper = false;
  let isLastLastCharUpper = false;
  let isLastLastCharPreserved = false;
  for (let index = 0; index < string.length; index++) {
    const character = string[index];
    isLastLastCharPreserved = index > 2 ? string[index - 3] === '-' : true;
    if (isLastCharLower && UPPERCASE.test(character)) {
      string = string.slice(0, index) + '-' + string.slice(index);
      isLastCharLower = false;
      isLastLastCharUpper = isLastCharUpper;
      isLastCharUpper = true;
      index++;
    } else if (
      isLastCharUpper &&
      isLastLastCharUpper &&
      LOWERCASE.test(character) &&
      (!isLastLastCharPreserved || preserveConsecutiveUppercase2)
    ) {
      string = string.slice(0, index - 1) + '-' + string.slice(index - 1);
      isLastLastCharUpper = isLastCharUpper;
      isLastCharUpper = false;
      isLastCharLower = true;
    } else {
      isLastCharLower =
        toLowerCase(character) === character &&
        toUpperCase(character) !== character;
      isLastLastCharUpper = isLastCharUpper;
      isLastCharUpper =
        toUpperCase(character) === character &&
        toLowerCase(character) !== character;
    }
  }
  return string;
};
var preserveConsecutiveUppercase = (input, toLowerCase) => {
  LEADING_CAPITAL.lastIndex = 0;
  return input.replaceAll(LEADING_CAPITAL, (match) => toLowerCase(match));
};
var postProcess = (input, toUpperCase) => {
  SEPARATORS_AND_IDENTIFIER.lastIndex = 0;
  NUMBERS_AND_IDENTIFIER.lastIndex = 0;
  return input
    .replaceAll(NUMBERS_AND_IDENTIFIER, (match, pattern, offset) =>
      ['_', '-'].includes(input.charAt(offset + match.length))
        ? match
        : toUpperCase(match)
    )
    .replaceAll(SEPARATORS_AND_IDENTIFIER, (_15, identifier) =>
      toUpperCase(identifier)
    );
};
function camelCase(input, options) {
  if (!(typeof input === 'string' || Array.isArray(input))) {
    throw new TypeError('Expected the input to be `string | string[]`');
  }
  options = {
    pascalCase: false,
    preserveConsecutiveUppercase: false,
    ...options,
  };
  if (Array.isArray(input)) {
    input = input
      .map((x) => x.trim())
      .filter((x) => x.length)
      .join('-');
  } else {
    input = input.trim();
  }
  if (input.length === 0) {
    return '';
  }
  const toLowerCase =
    options.locale === false
      ? (string) => string.toLowerCase()
      : (string) => string.toLocaleLowerCase(options.locale);
  const toUpperCase =
    options.locale === false
      ? (string) => string.toUpperCase()
      : (string) => string.toLocaleUpperCase(options.locale);
  if (input.length === 1) {
    if (SEPARATORS.test(input)) {
      return '';
    }
    return options.pascalCase ? toUpperCase(input) : toLowerCase(input);
  }
  const hasUpperCase = input !== toLowerCase(input);
  if (hasUpperCase) {
    input = preserveCamelCase(
      input,
      toLowerCase,
      toUpperCase,
      options.preserveConsecutiveUppercase
    );
  }
  input = input.replace(LEADING_SEPARATORS, '');
  input = options.preserveConsecutiveUppercase
    ? preserveConsecutiveUppercase(input, toLowerCase)
    : toLowerCase(input);
  if (options.pascalCase) {
    input = toUpperCase(input.charAt(0)) + input.slice(1);
  }
  return postProcess(input, toUpperCase);
}

// node_modules/quick-lru/index.js
var QuickLRU = class extends Map {
  constructor(options = {}) {
    super();
    if (!(options.maxSize && options.maxSize > 0)) {
      throw new TypeError('`maxSize` must be a number greater than 0');
    }
    if (typeof options.maxAge === 'number' && options.maxAge === 0) {
      throw new TypeError('`maxAge` must be a number greater than 0');
    }
    this.maxSize = options.maxSize;
    this.maxAge = options.maxAge || Number.POSITIVE_INFINITY;
    this.onEviction = options.onEviction;
    this.cache = /* @__PURE__ */ new Map();
    this.oldCache = /* @__PURE__ */ new Map();
    this._size = 0;
  }
  // TODO: Use private class methods when targeting Node.js 16.
  _emitEvictions(cache2) {
    if (typeof this.onEviction !== 'function') {
      return;
    }
    for (const [key, item] of cache2) {
      this.onEviction(key, item.value);
    }
  }
  _deleteIfExpired(key, item) {
    if (typeof item.expiry === 'number' && item.expiry <= Date.now()) {
      if (typeof this.onEviction === 'function') {
        this.onEviction(key, item.value);
      }
      return this.delete(key);
    }
    return false;
  }
  _getOrDeleteIfExpired(key, item) {
    const deleted = this._deleteIfExpired(key, item);
    if (deleted === false) {
      return item.value;
    }
  }
  _getItemValue(key, item) {
    return item.expiry ? this._getOrDeleteIfExpired(key, item) : item.value;
  }
  _peek(key, cache2) {
    const item = cache2.get(key);
    return this._getItemValue(key, item);
  }
  _set(key, value) {
    this.cache.set(key, value);
    this._size++;
    if (this._size >= this.maxSize) {
      this._size = 0;
      this._emitEvictions(this.oldCache);
      this.oldCache = this.cache;
      this.cache = /* @__PURE__ */ new Map();
    }
  }
  _moveToRecent(key, item) {
    this.oldCache.delete(key);
    this._set(key, item);
  }
  *_entriesAscending() {
    for (const item of this.oldCache) {
      const [key, value] = item;
      if (!this.cache.has(key)) {
        const deleted = this._deleteIfExpired(key, value);
        if (deleted === false) {
          yield item;
        }
      }
    }
    for (const item of this.cache) {
      const [key, value] = item;
      const deleted = this._deleteIfExpired(key, value);
      if (deleted === false) {
        yield item;
      }
    }
  }
  get(key) {
    if (this.cache.has(key)) {
      const item = this.cache.get(key);
      return this._getItemValue(key, item);
    }
    if (this.oldCache.has(key)) {
      const item = this.oldCache.get(key);
      if (this._deleteIfExpired(key, item) === false) {
        this._moveToRecent(key, item);
        return item.value;
      }
    }
  }
  set(key, value, { maxAge = this.maxAge } = {}) {
    const expiry =
      typeof maxAge === 'number' && maxAge !== Number.POSITIVE_INFINITY
        ? Date.now() + maxAge
        : void 0;
    if (this.cache.has(key)) {
      this.cache.set(key, {
        value,
        expiry,
      });
    } else {
      this._set(key, { value, expiry });
    }
    return this;
  }
  has(key) {
    if (this.cache.has(key)) {
      return !this._deleteIfExpired(key, this.cache.get(key));
    }
    if (this.oldCache.has(key)) {
      return !this._deleteIfExpired(key, this.oldCache.get(key));
    }
    return false;
  }
  peek(key) {
    if (this.cache.has(key)) {
      return this._peek(key, this.cache);
    }
    if (this.oldCache.has(key)) {
      return this._peek(key, this.oldCache);
    }
  }
  delete(key) {
    const deleted = this.cache.delete(key);
    if (deleted) {
      this._size--;
    }
    return this.oldCache.delete(key) || deleted;
  }
  clear() {
    this.cache.clear();
    this.oldCache.clear();
    this._size = 0;
  }
  resize(newSize) {
    if (!(newSize && newSize > 0)) {
      throw new TypeError('`maxSize` must be a number greater than 0');
    }
    const items = [...this._entriesAscending()];
    const removeCount = items.length - newSize;
    if (removeCount < 0) {
      this.cache = new Map(items);
      this.oldCache = /* @__PURE__ */ new Map();
      this._size = items.length;
    } else {
      if (removeCount > 0) {
        this._emitEvictions(items.slice(0, removeCount));
      }
      this.oldCache = new Map(items.slice(removeCount));
      this.cache = /* @__PURE__ */ new Map();
      this._size = 0;
    }
    this.maxSize = newSize;
  }
  *keys() {
    for (const [key] of this) {
      yield key;
    }
  }
  *values() {
    for (const [, value] of this) {
      yield value;
    }
  }
  *[Symbol.iterator]() {
    for (const item of this.cache) {
      const [key, value] = item;
      const deleted = this._deleteIfExpired(key, value);
      if (deleted === false) {
        yield [key, value.value];
      }
    }
    for (const item of this.oldCache) {
      const [key, value] = item;
      if (!this.cache.has(key)) {
        const deleted = this._deleteIfExpired(key, value);
        if (deleted === false) {
          yield [key, value.value];
        }
      }
    }
  }
  *entriesDescending() {
    let items = [...this.cache];
    for (let i = items.length - 1; i >= 0; --i) {
      const item = items[i];
      const [key, value] = item;
      const deleted = this._deleteIfExpired(key, value);
      if (deleted === false) {
        yield [key, value.value];
      }
    }
    items = [...this.oldCache];
    for (let i = items.length - 1; i >= 0; --i) {
      const item = items[i];
      const [key, value] = item;
      if (!this.cache.has(key)) {
        const deleted = this._deleteIfExpired(key, value);
        if (deleted === false) {
          yield [key, value.value];
        }
      }
    }
  }
  *entriesAscending() {
    for (const [key, value] of this._entriesAscending()) {
      yield [key, value.value];
    }
  }
  get size() {
    if (!this._size) {
      return this.oldCache.size;
    }
    let oldCacheSize = 0;
    for (const key of this.oldCache.keys()) {
      if (!this.cache.has(key)) {
        oldCacheSize++;
      }
    }
    return Math.min(this._size + oldCacheSize, this.maxSize);
  }
  entries() {
    return this.entriesAscending();
  }
  forEach(callbackFunction, thisArgument = this) {
    for (const [key, value] of this.entriesAscending()) {
      callbackFunction.call(thisArgument, value, key, this);
    }
  }
  get [Symbol.toStringTag]() {
    return JSON.stringify([...this.entriesAscending()]);
  }
};

// node_modules/camelcase-keys/index.js
var has = (array, key) =>
  array.some((element) => {
    if (typeof element === 'string') {
      return element === key;
    }
    element.lastIndex = 0;
    return element.test(key);
  });
var cache = new QuickLRU({ maxSize: 1e5 });
var isObject2 = (value) =>
  typeof value === 'object' &&
  value !== null &&
  !(value instanceof RegExp) &&
  !(value instanceof Error) &&
  !(value instanceof Date);
var transform = (input, options = {}) => {
  if (!isObject2(input)) {
    return input;
  }
  const {
    exclude: exclude2,
    pascalCase = false,
    stopPaths,
    deep = false,
    preserveConsecutiveUppercase: preserveConsecutiveUppercase2 = false,
  } = options;
  const stopPathsSet = new Set(stopPaths);
  const makeMapper = (parentPath) => (key, value) => {
    if (deep && isObject2(value)) {
      const path = parentPath === void 0 ? key : `${parentPath}.${key}`;
      if (!stopPathsSet.has(path)) {
        value = mapObject(value, makeMapper(path));
      }
    }
    if (!(exclude2 && has(exclude2, key))) {
      const cacheKey = pascalCase ? `${key}_` : key;
      if (cache.has(cacheKey)) {
        key = cache.get(cacheKey);
      } else {
        const returnValue = camelCase(key, {
          pascalCase,
          locale: false,
          preserveConsecutiveUppercase: preserveConsecutiveUppercase2,
        });
        if (key.length < 100) {
          cache.set(cacheKey, returnValue);
        }
        key = returnValue;
      }
    }
    return [key, value];
  };
  return mapObject(input, makeMapper(void 0));
};
function camelcaseKeys(input, options) {
  if (Array.isArray(input)) {
    return Object.keys(input).map((key) => transform(input[key], options));
  }
  return transform(input, options);
}

// src/actions/_advertising/accounts.jsx
var import_snakecase_keys4 = __toESM(require_snakecase_keys());

// src/util/build_type.jsx
var SEARCH = 'search';
var SHOPPING = 'shopping';
var SMART_SHOPPING = 'retailSmartShopping';
var BRAND_SEARCH = 'retailBrandSearch';

// src/selectors/build_initilalizer.jsx
var import_reselect = __toESM(require_lib());
var buildScheme = {
  [SEARCH]: '',
  [SHOPPING]: 'Retail::Shopping::V201709',
  [SMART_SHOPPING]: 'Retail::SmartShopping::V202104',
  [BRAND_SEARCH]: 'Retail::Search::V202107Brand',
  smart_shopping: 'Retail::SmartShopping::V202104',
};
var scheme = (_state, type) => buildScheme[type];
var schemeSelector = (0, import_reselect.createSelector)(scheme, (scheme2) => {
  return scheme2;
});

// src/actions/_advertising/budget_categories.jsx
var import_snakecase_keys = __toESM(require_snakecase_keys());
var FETCH_BUDGET_CATEGORY_ADVERTISING_BUDGETS_REQUEST =
  'FETCH_BUDGET_CATEGORY_ADVERTISING_BUDGETS_REQUEST';
var FETCH_BUDGET_CATEGORY_ADVERTISING_BUDGETS_SUCCESS =
  'FETCH_BUDGET_CATEGORY_ADVERTISING_BUDGETS_SUCCESS';
var FETCH_BUDGET_CATEGORY_ADVERTISING_GOALS_REQUEST =
  'FETCH_BUDGET_CATEGORY_ADVERTISING_GOALS_REQUEST';
var FETCH_BUDGET_CATEGORY_ADVERTISING_GOALS_SUCCESS =
  'FETCH_BUDGET_CATEGORY_ADVERTISING_GOALS_SUCCESS';
var UPDATE_BUDGET_CATEGORY_ADVERTISING_BUDGETS_REQUEST =
  'UPDATE_BUDGET_CATEGORY_ADVERTISING_BUDGETS_REQUEST';
var UPDATE_BUDGET_CATEGORY_ADVERTISING_BUDGETS_RESPONSE =
  'UPDATE_BUDGET_CATEGORY_ADVERTISING_BUDGETS_RESPONSE';
var UPDATE_BUDGET_CATEGORY_ADVERTISING_GOALS_REQUEST =
  'UPDATE_BUDGET_CATEGORY_ADVERTISING_GOALS_REQUEST';
var UPDATE_BUDGET_CATEGORY_ADVERTISING_GOALS_RESPONSE =
  'UPDATE_BUDGET_CATEGORY_ADVERTISING_GOALS_RESPONSE';
var FETCH_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_REQUEST =
  'FETCH_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_REQUEST';
var FETCH_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_SUCCESS =
  'FETCH_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_SUCCESS';
var UPDATE_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_REQUEST =
  'UPDATE_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_REQUEST';
var UPDATE_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_SUCCESS =
  'UPDATE_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_SUCCESS';
var fetchBudgetCategoryAdvertisingBudgetsRequest = (budgetCategoryId) => ({
  type: FETCH_BUDGET_CATEGORY_ADVERTISING_BUDGETS_REQUEST,
  budgetCategoryId,
});
var fetchBudgetCategoryAdvertisingGoalsRequest = (
  budgetCategoryId,
  goalType
) => ({
  type: FETCH_BUDGET_CATEGORY_ADVERTISING_GOALS_REQUEST,
  budgetCategoryId,
  goalType,
});
var fetchBudgetCategoryAdvertisingBudgetsSuccess = (
  budgetCategoryId,
  advertisingBudgets
) => ({
  type: FETCH_BUDGET_CATEGORY_ADVERTISING_BUDGETS_SUCCESS,
  budgetCategoryId,
  ...advertisingBudgets,
});
var fetchBudgetCategoryAdvertisingGoalsSuccess = (
  budgetCategoryId,
  goalType,
  advertisingGoals
) => ({
  type: FETCH_BUDGET_CATEGORY_ADVERTISING_GOALS_SUCCESS,
  budgetCategoryId,
  goalType,
  ...advertisingGoals,
});
var fetchBudgetCategoryAdvertisingBudgets =
  (budgetCategoryId) => async (dispatch) => {
    dispatch(fetchBudgetCategoryAdvertisingBudgetsRequest(budgetCategoryId));
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/budget_categories/${budgetCategoryId}/advertising/load_budgets`,
      dataType: 'json',
    });
    dispatch(
      fetchBudgetCategoryAdvertisingBudgetsSuccess(
        budgetCategoryId,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchBudgetCategoryAdvertisingGoals =
  (budgetCategoryId, goalType) => async (dispatch) => {
    dispatch(
      fetchBudgetCategoryAdvertisingGoalsRequest(budgetCategoryId, goalType)
    );
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/budget_categories/${budgetCategoryId}/advertising/load_goals`,
      data: { goal_type: goalType },
    });
    dispatch(
      fetchBudgetCategoryAdvertisingGoalsSuccess(
        budgetCategoryId,
        goalType,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var updateBudgetCategoryAdvertisingBudgetsRequest = (
  budgetCategoryId,
  budgets
) => ({
  type: UPDATE_BUDGET_CATEGORY_ADVERTISING_BUDGETS_REQUEST,
  budgetCategoryId,
  budgets,
});
var updateBudgetCategoryAdvertisingBudgetsResponse = (
  budgetCategoryId,
  budgets,
  response
) => ({
  type: UPDATE_BUDGET_CATEGORY_ADVERTISING_BUDGETS_RESPONSE,
  budgetCategoryId,
  budgets,
  response,
});
var updateBudgetCategoryAdvertisingBudgets =
  (budgetCategoryId, budgets) => async (dispatch) => {
    dispatch(
      updateBudgetCategoryAdvertisingBudgetsRequest(budgetCategoryId, budgets)
    );
    var response = await $.ajax({
      method: 'PUT',
      url: `/ad_champion/budget_categories/${budgetCategoryId}/advertising/update_budgets`,
      data: (0, import_snakecase_keys.default)(
        { advertising_budget: budgets },
        { deep: true }
      ),
    });
    var camelCaseResponse = camelcaseKeys(response, { deep: true });
    dispatch(
      updateBudgetCategoryAdvertisingBudgetsResponse(
        budgetCategoryId,
        budgets,
        camelCaseResponse
      )
    );
    return camelCaseResponse;
  };
var updateBudgetCategoryAdvertisingGoalsRequest = (
  budgetCategoryId,
  goalType,
  goals
) => ({
  type: UPDATE_BUDGET_CATEGORY_ADVERTISING_GOALS_REQUEST,
  budgetCategoryId,
  goalType,
  goals,
});
var updateBudgetCategoryAdvertisingGoalsResponse = (
  budgetCategoryId,
  goalType,
  goals,
  response
) => ({
  type: UPDATE_BUDGET_CATEGORY_ADVERTISING_GOALS_RESPONSE,
  budgetCategoryId,
  goalType,
  goals,
  response,
});
var updateBudgetCategoryAdvertisingGoals =
  (budgetCategoryId, goalType, goals) => async (dispatch) => {
    dispatch(
      updateBudgetCategoryAdvertisingGoalsRequest(
        budgetCategoryId,
        goalType,
        goals
      )
    );
    var response = await $.ajax({
      method: 'PUT',
      url: `/ad_champion/budget_categories/${budgetCategoryId}/advertising/update_goals`,
      data: (0, import_snakecase_keys.default)({
        goalType,
        advertising_goal: goals,
      }),
    });
    var camelCaseResponse = camelcaseKeys(response, { deep: true });
    dispatch(
      updateBudgetCategoryAdvertisingGoalsResponse(
        budgetCategoryId,
        goalType,
        goals,
        camelCaseResponse
      )
    );
  };
var fetchBudgetCategoryAdvertisingGoalTypeRequest = (budgetCategoryId) => ({
  type: FETCH_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_REQUEST,
  budgetCategoryId,
});
var fetchBudgetCategoryAdvertisingGoalTypeSuccess = (
  budgetCategoryId,
  advertisingGoalType
) => ({
  type: FETCH_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_SUCCESS,
  budgetCategoryId,
  advertisingGoalType,
});
var fetchBudgetCategoryAdvertisingGoalType =
  (budgetCategoryId) => async (dispatch) => {
    dispatch(fetchBudgetCategoryAdvertisingGoalTypeRequest(budgetCategoryId));
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/budget_categories/${budgetCategoryId}/advertising/load_goal_type`,
    });
    dispatch(
      fetchBudgetCategoryAdvertisingGoalTypeSuccess(
        budgetCategoryId,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var updateBudgetCategoryAdvertisingGoalTypeRequest = (
  budgetCategoryId,
  goalType
) => ({
  type: UPDATE_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_REQUEST,
  budgetCategoryId,
  goalType,
});
var updateBudgetCategoryAdvertisingGoalTypeSuccess = (
  budgetCategoryId,
  goalType,
  response
) => ({
  type: UPDATE_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_SUCCESS,
  budgetCategoryId,
  goalType,
  response,
});
var updateBudgetCategoryAdvertisingGoalType =
  (budgetCategoryId, goalType) => async (dispatch) => {
    dispatch(
      updateBudgetCategoryAdvertisingGoalTypeRequest(budgetCategoryId, goalType)
    );
    var response = await $.ajax({
      method: 'PUT',
      url: `/ad_champion/budget_categories/${budgetCategoryId}/advertising/update_goal_type`,
      data: { goal_type: goalType },
      dataType: 'json',
    });
    dispatch(
      updateBudgetCategoryAdvertisingGoalTypeSuccess(
        budgetCategoryId,
        goalType,
        response
      )
    );
  };

// src/actions/_advertising/master_accounts.jsx
var import_snakecase_keys2 = __toESM(require_snakecase_keys());
var fetchMasterAccountAdvertisingBudgetsRequest = (
  accountType,
  masterAccountId,
  channel
) => ({
  type: FETCH_ADVERTISING_BUDGETS_REQUEST,
  accountType,
  id: masterAccountId,
  channel,
});
var fetchMasterAccountAdvertisingBudgetsSuccess = (
  accountType,
  masterAccountId,
  channel,
  advertisingBudgets
) => ({
  type: FETCH_ADVERTISING_BUDGETS_SUCCESS,
  accountType,
  id: masterAccountId,
  channel,
  ...advertisingBudgets,
});
var fetchMasterAccountAdvertisingBudgets =
  (accountType, masterAccountId, channel) => async (dispatch) => {
    dispatch(
      fetchMasterAccountAdvertisingBudgetsRequest(
        accountType,
        masterAccountId,
        channel
      )
    );
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/master_accounts/${masterAccountId}/advertising/load_budgets`,
      data: (0, import_snakecase_keys2.default)({ channel }, { deep: true }),
      dataType: 'json',
    });
    dispatch(
      fetchMasterAccountAdvertisingBudgetsSuccess(
        accountType,
        masterAccountId,
        channel,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchMasterAccountAdvertisingGoalTypeRequest = (
  accountType,
  masterAccountId,
  channel
) => ({
  type: FETCH_ADVERTISING_GOAL_TYPE_REQUEST,
  accountType,
  id: masterAccountId,
  channel,
});
var fetchMasterAccountAdvertisingGoalTypeSuccess = (
  accountType,
  masterAccountId,
  channel,
  advertisingGoalType
) => ({
  type: FETCH_ADVERTISING_GOAL_TYPE_SUCCESS,
  accountType,
  id: masterAccountId,
  channel,
  advertisingGoalType,
});
var fetchMasterAccountAdvertisingGoalType =
  (accountType, masterAccountId, channel) => async (dispatch) => {
    dispatch(
      fetchMasterAccountAdvertisingGoalTypeRequest(
        accountType,
        masterAccountId,
        channel
      )
    );
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/master_accounts/${masterAccountId}/advertising/load_goal_type`,
      data: (0, import_snakecase_keys2.default)({ channel }, { deep: true }),
      dataType: 'json',
    });
    dispatch(
      fetchMasterAccountAdvertisingGoalTypeSuccess(
        accountType,
        masterAccountId,
        channel,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var checkMasterAccountPublicationAccountTypesRequest = (
  accountType,
  masterAccountId
) => ({
  type: CHECK_PUBLICATION_ACCOUNT_TYPES_REQUEST,
  accountType,
  id: masterAccountId,
});
var checkMasterAccountPublicationAccountTypesSuccess = (
  accountType,
  masterAccountId,
  publicationAccountTypes
) => ({
  type: CHECK_PUBLICATION_ACCOUNT_TYPES_SUCCESS,
  accountType,
  id: masterAccountId,
  ...publicationAccountTypes,
});
var checkMasterAccountPublicationAccountTypes =
  (accountType, masterAccountId) => async (dispatch) => {
    dispatch(
      checkMasterAccountPublicationAccountTypesRequest(
        accountType,
        masterAccountId
      )
    );
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/master_accounts/${masterAccountId}/advertising/load_goal_type`,
      dataType: 'json',
    });
    dispatch(
      checkMasterAccountPublicationAccountTypesSuccess(
        accountType,
        masterAccountId,
        camelcaseKeys(response, { deep: true })
      )
    );
  };

// src/actions/_advertising/websites.jsx
var import_snakecase_keys3 = __toESM(require_snakecase_keys());
var FETCH_ADVERTISING_PLAN_REQUEST = 'FETCH_ADVERTISING_PLAN_REQUEST';
var FETCH_ADVERTISING_PLAN_SUCCESS = 'FETCH_ADVERTISING_PLAN_SUCCESS';
var FETCH_HAS_BUDGET_CATEGORIES_REQUEST = 'FETCH_HAS_BUDGET_CATEGORIES_REQUEST';
var FETCH_HAS_BUDGET_CATEGORIES_SUCCESS = 'FETCH_HAS_BUDGET_CATEGORIES_SUCCESS';
var CREATE_WEBSITE_DEFAULT_SHARED_BUDGET_REQUEST =
  'CREATE_WEBSITE_DEFAULT_SHARED_BUDGET_REQUEST';
var CREATE_WEBSITE_DEFAULT_SHARED_BUDGET_RESPONSE =
  'CREATE_WEBSITE_DEFAULT_SHARED_BUDGET_RESPONSE';
var FETCH_WEBSITE_BUDGET_RESPONSE = 'FETCH_WEBSITE_BUDGET_RESPONSE';
var FETCH_WEBSITE_CAMPAIGN_IDS_REQUEST = 'FETCH_WEBSITE_CAMPAIGN_IDS_REQUEST';
var FETCH_WEBSITE_CAMPAIGN_IDS_RESPONSE = 'FETCH_WEBSITE_CAMPAIGN_IDS_RESPONSE';
var fetchWebsiteAdvertisingBudgetsRequest = (
  accountType,
  websiteId,
  channel
) => ({
  type: FETCH_ADVERTISING_BUDGETS_REQUEST,
  accountType,
  id: websiteId,
  channel,
});
var fetchWebsiteAdvertisingGoalsRequest = (websiteId, goalType, channel) => ({
  type: FETCH_ADVERTISING_GOALS_REQUEST,
  websiteId,
  goalType,
  channel,
});
var fetchWebsiteAdvertisingBudgetsSuccess = (
  accountType,
  websiteId,
  channel,
  advertisingBudgets
) => ({
  type: FETCH_ADVERTISING_BUDGETS_SUCCESS,
  accountType,
  id: websiteId,
  channel,
  ...advertisingBudgets,
});
var fetchWebsiteAdvertisingGoalsSuccess = (
  websiteId,
  goalType,
  channel,
  advertisingGoals
) => ({
  type: FETCH_ADVERTISING_GOALS_SUCCESS,
  accountType: 'websites',
  id: websiteId,
  goalType,
  channel,
  ...advertisingGoals,
});
var fetchWebsiteAdvertisingBudgets =
  (accountType, websiteId, channel) => async (dispatch) => {
    dispatch(
      fetchWebsiteAdvertisingBudgetsRequest(accountType, websiteId, channel)
    );
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/websites/${websiteId}/advertising/load_budgets`,
      data: (0, import_snakecase_keys3.default)({ channel }, { deep: true }),
      dataType: 'json',
    });
    dispatch(
      fetchWebsiteAdvertisingBudgetsSuccess(
        accountType,
        websiteId,
        channel,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchWebsiteAdvertisingGoals =
  (websiteId, goalType, channel) => async (dispatch) => {
    dispatch(fetchWebsiteAdvertisingGoalsRequest(websiteId, goalType, channel));
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/websites/${websiteId}/advertising/load_goals`,
      data: (0, import_snakecase_keys3.default)(
        { goalType, channel },
        { deep: true }
      ),
      dataType: 'json',
    });
    dispatch(
      fetchWebsiteAdvertisingGoalsSuccess(
        websiteId,
        goalType,
        channel,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchWebsiteAdvertisingPlanRequest = (websiteId) => ({
  type: FETCH_ADVERTISING_PLAN_REQUEST,
  websiteId,
});
var fetchWebsiteAdvertisingPlanSuccess = (websiteId, advertisingPlan) => ({
  type: FETCH_ADVERTISING_PLAN_SUCCESS,
  websiteId,
  ...advertisingPlan,
});
var fetchWebsiteAdvertisingPlan = (websiteId) => async (dispatch) => {
  dispatch(fetchWebsiteAdvertisingPlanRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/advertising/load_advertising_plan`,
    dataType: 'json',
  });
  dispatch(
    fetchWebsiteAdvertisingPlanSuccess(
      websiteId,
      camelcaseKeys(response, { deep: true })
    )
  );
};
var updateWebsiteAdvertisingBudgetsRequest = (websiteId, budgets, channel) => ({
  type: UPDATE_ADVERTISING_BUDGETS_REQUEST,
  id: websiteId,
  budgets,
  channel,
});
var updateWebsiteAdvertisingBudgetsResponse = (
  websiteId,
  budgets,
  channel,
  response
) => ({
  type: UPDATE_ADVERTISING_BUDGETS_SUCCESS,
  id: websiteId,
  budgets,
  channel,
  response,
});
var updateWebsiteAdvertisingBudgets =
  (websiteId, budgets, channel) => (dispatch) => {
    dispatch(
      updateWebsiteAdvertisingBudgetsRequest(websiteId, budgets, channel)
    );
    return $.ajax({
      method: 'PUT',
      url: `/ad_champion/websites/${websiteId}/advertising/update_budgets`,
      data: (0, import_snakecase_keys3.default)(
        { advertisingBudget: budgets, channel },
        { deep: true }
      ),
      dataType: 'json',
      success: (response) => {
        var camelCaseResponse = camelcaseKeys(response, { deep: true });
        dispatch(
          updateWebsiteAdvertisingBudgetsResponse(
            websiteId,
            budgets,
            channel,
            camelCaseResponse
          )
        );
        return camelCaseResponse;
      },
    });
  };
var updateWebsiteAdvertisingGoalsRequest = (
  websiteId,
  goalType,
  goals,
  channel
) => ({
  type: UPDATE_ADVERTISING_GOALS_REQUEST,
  id: websiteId,
  goalType,
  goals,
  channel,
});
var updateWebsiteAdvertisingGoalsResponse = (
  websiteId,
  goalType,
  goals,
  channel,
  response
) => ({
  type: UPDATE_ADVERTISING_GOALS_SUCCESS,
  id: websiteId,
  goalType,
  goals,
  channel,
  response,
});
var updateWebsiteAdvertisingGoals =
  (websiteId, goalType, goals, channel) => (dispatch) => {
    dispatch(
      updateWebsiteAdvertisingGoalsRequest(websiteId, goalType, goals, channel)
    );
    return $.ajax({
      method: 'PUT',
      url: `/ad_champion/websites/${websiteId}/advertising/update_goals`,
      data: (0, import_snakecase_keys3.default)(
        { goalType, goals, channel },
        { deep: true }
      ),
      dataType: 'json',
      success: (response) => {
        var camelCaseResponse = camelcaseKeys(response, { deep: true });
        dispatch(
          updateWebsiteAdvertisingGoalsResponse(
            websiteId,
            goalType,
            goals,
            channel,
            camelCaseResponse
          )
        );
        return camelCaseResponse;
      },
    });
  };
var fetchWebsiteAdvertisingGoalTypeRequest = (
  accountType,
  websiteId,
  channel
) => ({
  type: FETCH_ADVERTISING_GOAL_TYPE_REQUEST,
  accountType,
  id: websiteId,
  channel,
});
var fetchWebsiteAdvertisingGoalTypeResponse = (
  accountType,
  websiteId,
  channel,
  advertisingGoalType
) => ({
  type: FETCH_ADVERTISING_GOAL_TYPE_SUCCESS,
  accountType,
  id: websiteId,
  channel,
  advertisingGoalType,
});
var fetchWebsiteAdvertisingGoalType =
  (accountType, websiteId, channel) => async (dispatch) => {
    dispatch(
      fetchWebsiteAdvertisingGoalTypeRequest(accountType, websiteId, channel)
    );
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/websites/${websiteId}/advertising/load_goal_type`,
      data: (0, import_snakecase_keys3.default)({ channel }, { deep: true }),
      dataType: 'json',
    });
    dispatch(
      fetchWebsiteAdvertisingGoalTypeResponse(
        accountType,
        websiteId,
        channel,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var updateWebsiteAdvertisingGoalTypeRequest = (
  websiteId,
  goalType,
  channel
) => ({
  type: UPDATE_ADVERTISING_GOAL_TYPE_REQUEST,
  id: websiteId,
  goalType,
  channel,
});
var updateWebsiteAdvertisingGoalTypeSuccess = (
  websiteId,
  goalType,
  channel,
  response
) => ({
  type: UPDATE_ADVERTISING_GOAL_TYPE_SUCCESS,
  id: websiteId,
  goalType,
  channel,
  response,
});
var updateWebsiteAdvertisingGoalType =
  (websiteId, goalType, channel) => async (dispatch) => {
    dispatch(
      updateWebsiteAdvertisingGoalTypeRequest(websiteId, goalType, channel)
    );
    var response = await $.ajax({
      method: 'PUT',
      url: `/ad_champion/websites/${websiteId}/advertising/update_goal_type`,
      data: (0, import_snakecase_keys3.default)(
        { goalType, channel },
        { deep: true }
      ),
      dataType: 'json',
    });
    dispatch(
      updateWebsiteAdvertisingGoalTypeSuccess(
        websiteId,
        goalType,
        channel,
        response
      )
    );
  };
var fetchHasBudgetCategoriesRequest = (websiteId) => ({
  type: FETCH_HAS_BUDGET_CATEGORIES_REQUEST,
  websiteId,
});
var fetchHasBudgetCategoriesSuccess = (websiteId, response) => ({
  type: FETCH_HAS_BUDGET_CATEGORIES_SUCCESS,
  websiteId,
  ...response,
});
var fetchHasBudgetCategories = (websiteId) => async (dispatch) => {
  dispatch(fetchHasBudgetCategoriesRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/advertising/has_budget_categories`,
    dataType: 'json',
  });
  dispatch(
    fetchHasBudgetCategoriesSuccess(
      websiteId,
      camelcaseKeys(response, { deep: true })
    )
  );
};
var checkWebsitePublicationAccountTypesRequest = (accountType, websiteId) => ({
  type: CHECK_PUBLICATION_ACCOUNT_TYPES_REQUEST,
  accountType,
  id: websiteId,
});
var checkWebsitePublicationAccountTypesSuccess = (
  accountType,
  websiteId,
  publicationAccountTypes
) => ({
  type: CHECK_PUBLICATION_ACCOUNT_TYPES_SUCCESS,
  accountType,
  id: websiteId,
  ...publicationAccountTypes,
});
var checkWebsitePublicationAccountTypes =
  (accountType, websiteId) => async (dispatch) => {
    dispatch(
      checkWebsitePublicationAccountTypesRequest(accountType, websiteId)
    );
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/websites/${websiteId}/advertising/check_publication_account_types`,
      dataType: 'json',
    });
    dispatch(
      checkWebsitePublicationAccountTypesSuccess(
        accountType,
        websiteId,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var createWebsiteDefaultSharedBudgetRequest = (websiteId) => ({
  type: CREATE_WEBSITE_DEFAULT_SHARED_BUDGET_REQUEST,
  websiteId,
});
var createWebsiteDefaultSharedBudgetResponse = (websiteId, response) => ({
  type: CREATE_WEBSITE_DEFAULT_SHARED_BUDGET_RESPONSE,
  websiteId,
  response,
});
var createWebsiteDefaultSharedBudget = (websiteId) => async (dispatch) => {
  dispatch(createWebsiteDefaultSharedBudgetRequest(websiteId));
  var response = await $.ajax({
    method: 'POST',
    url: `/ad_champion/websites/${websiteId}/advertising/create_default_shared_budget`,
    dataType: 'json',
  });
  dispatch(createWebsiteDefaultSharedBudgetResponse(websiteId, response));
  return response;
};
var fetchWebsiteCampaignIdsRequest = (websiteId, buildType) => ({
  type: FETCH_WEBSITE_CAMPAIGN_IDS_REQUEST,
  websiteId,
  buildType,
});
var fetchWebsiteCampaignIdsResponse = (websiteId, buildType, response) => ({
  type: FETCH_WEBSITE_CAMPAIGN_IDS_RESPONSE,
  websiteId,
  buildType,
  response,
});
var fetchWebsiteCampaignIds =
  (websiteId, buildType, getSchemeId = schemeSelector) =>
  async (dispatch) => {
    const schemeId = getSchemeId({}, buildType);
    dispatch(fetchWebsiteCampaignIdsRequest(websiteId, buildType));
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/websites/${websiteId}/advertising/load_campaign_ids?scheme_id=${schemeId}`,
      dataType: 'json',
    });
    dispatch(
      fetchWebsiteCampaignIdsResponse(
        websiteId,
        buildType,
        camelcaseKeys(response, { deep: true })
      )
    );
  };

// src/actions/advertising.jsx
var FETCH_ADVERTISING_GOAL_TYPE_REQUEST = 'FETCH_ADVERTISING_GOAL_TYPE_REQUEST';
var FETCH_ADVERTISING_GOAL_TYPE_SUCCESS = 'FETCH_ADVERTISING_GOAL_TYPE_SUCCESS';
var UPDATE_ADVERTISING_GOAL_TYPE_REQUEST =
  'UPDATE_ADVERTISING_GOAL_TYPE_REQUEST';
var UPDATE_ADVERTISING_GOAL_TYPE_SUCCESS =
  'UPDATE_ADVERTISING_GOAL_TYPE_SUCCESS';
var FETCH_ADVERTISING_BUDGETS_REQUEST = 'FETCH_ADVERTISING_BUDGETS_REQUEST';
var FETCH_ADVERTISING_BUDGETS_SUCCESS = 'FETCH_ADVERTISING_BUDGETS_SUCCESS';
var UPDATE_ADVERTISING_BUDGETS_REQUEST = 'UPDATE_ADVERTISING_BUDGETS_REQUEST';
var UPDATE_ADVERTISING_BUDGETS_SUCCESS = 'UPDATE_ADVERTISING_BUDGETS_RESPONSE';
var FETCH_ADVERTISING_GOALS_REQUEST = 'FETCH_ADVERTISING_GOALS_REQUEST';
var FETCH_ADVERTISING_GOALS_SUCCESS = 'FETCH_ADVERTISING_GOALS_SUCCESS';
var UPDATE_ADVERTISING_GOALS_REQUEST = 'UPDATE_ADVERTISING_GOALS_REQUEST';
var UPDATE_ADVERTISING_GOALS_SUCCESS = 'UPDATE_ADVERTISING_GOALS_RESPONSE';
var CHECK_PUBLICATION_ACCOUNT_TYPES_REQUEST =
  'CHECK_PUBLICATION_ACCOUNT_TYPES_REQUEST';
var CHECK_PUBLICATION_ACCOUNT_TYPES_SUCCESS =
  'CHECK_PUBLICATION_ACCOUNT_TYPES_SUCCESS';
var FETCH_ADVERTISING_STATUS_REQUEST = 'FETCH_ADVERTISING_STATUS_REQUEST';
var FETCH_ADVERTISING_STATUS_SUCCESS = 'FETCH_ADVERTISING_STATUS_SUCCESS';
var throwUnhandledAccountType = (accountType) => {
  throw new Error(`unhandled accountType ${accountType}`);
};
var fetchAdvertisingBudgets = (accountType, id, channel) => {
  switch (accountType) {
    case 'accounts':
      return fetchAccountAdvertisingBudgets(accountType, id, channel);
    case 'budget_categories':
      return fetchBudgetCategoryAdvertisingBudgets(id);
    case 'master_accounts':
      return fetchMasterAccountAdvertisingBudgets(accountType, id, channel);
    case 'websites':
      return fetchWebsiteAdvertisingBudgets(accountType, id, channel);
    default:
      throwUnhandledAccountType(accountType);
  }
};
var fetchAdvertisingGoals = (accountType, id, goalType, channel) => {
  switch (accountType) {
    case 'budget_categories':
      return fetchBudgetCategoryAdvertisingGoals(id, goalType);
    case 'websites':
      return fetchWebsiteAdvertisingGoals(id, goalType, channel);
    default:
      throwUnhandledAccountType(accountType);
  }
};
var fetchAdvertisingGoalType = (accountType, id, channel) => {
  switch (accountType) {
    case 'accounts':
      return fetchAccountAdvertisingGoalType(accountType, id, channel);
    case 'budget_categories':
      return fetchBudgetCategoryAdvertisingGoalType(id);
    case 'master_accounts':
      return fetchMasterAccountAdvertisingGoalType(accountType, id, channel);
    case 'websites':
      return fetchWebsiteAdvertisingGoalType(accountType, id, channel);
    default:
      throwUnhandledAccountType(accountType);
  }
};
var updateAdvertisingBudgets = (accountType, id, budgets, channel) => {
  switch (accountType) {
    case 'budget_categories':
      return updateBudgetCategoryAdvertisingBudgets(id, budgets);
    case 'websites':
      return updateWebsiteAdvertisingBudgets(id, budgets, channel);
    default:
      throwUnhandledAccountType(accountType);
  }
};
var updateAdvertisingGoals = (accountType, id, goalType, goals, channel) => {
  switch (accountType) {
    case 'budget_categories':
      return updateBudgetCategoryAdvertisingGoals(id, goalType, goals);
    case 'websites':
      return updateWebsiteAdvertisingGoals(id, goalType, goals, channel);
    default:
      throwUnhandledAccountType(accountType);
  }
};
var updateAdvertisingGoalType = (accountType, id, goalType, channel) => {
  switch (accountType) {
    case 'budget_categories':
      return updateBudgetCategoryAdvertisingGoalType(id, goalType);
    case 'websites':
      return updateWebsiteAdvertisingGoalType(id, goalType, channel);
    default:
      throwUnhandledAccountType(accountType);
  }
};
var checkPublicationAccountTypes = (accountType, id) => {
  switch (accountType) {
    case 'websites':
      return checkWebsitePublicationAccountTypes(accountType, id);
    case 'accounts':
      return checkAccountPublicationAccountTypes(accountType, id);
    case 'master_accounts':
      return checkMasterAccountPublicationAccountTypes(accountType, id);
    default:
      throwUnhandledAccountType(accountType);
  }
};
var requestAdvertisingStatus = (websiteId, buildType) => ({
  type: FETCH_ADVERTISING_STATUS_REQUEST,
  websiteId,
  buildType,
});
var receiveAdvertisingStatusSuccess = (
  websiteId,
  buildType,
  advertisingStatus
) => ({
  type: FETCH_ADVERTISING_STATUS_SUCCESS,
  websiteId,
  buildType,
  advertisingStatus,
});
var fetchAdvertisingStatus =
  (websiteId, buildType, getSchemeId = schemeSelector) =>
  (dispatch) => {
    const schemeId = getSchemeId({}, buildType);
    dispatch(requestAdvertisingStatus(websiteId, buildType));
    return $.ajax({
      method: 'GET',
      url: `/ad_champion/advertising/${websiteId}/status?scheme_id=${schemeId}`,
      dataType: 'json',
      success: (response) => {
        return dispatch(
          receiveAdvertisingStatusSuccess(
            websiteId,
            buildType,
            camelcaseKeys(response, { deep: true })
          )
        );
      },
    });
  };

// src/actions/_advertising/accounts.jsx
var fetchAccountAdvertisingBudgetsRequest = (
  accountType,
  accountId,
  channel
) => ({
  type: FETCH_ADVERTISING_BUDGETS_REQUEST,
  accountType,
  id: accountId,
  channel,
});
var fetchAccountAdvertisingBudgetsSuccess = (
  accountType,
  accountId,
  channel,
  advertisingBudgets
) => ({
  type: FETCH_ADVERTISING_BUDGETS_SUCCESS,
  accountType,
  id: accountId,
  channel,
  ...advertisingBudgets,
});
var fetchAccountAdvertisingBudgets =
  (accountType, accountId, channel) => async (dispatch) => {
    dispatch(
      fetchAccountAdvertisingBudgetsRequest(accountType, accountId, channel)
    );
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/accounts/${accountId}/advertising/load_budgets`,
      data: (0, import_snakecase_keys4.default)({ channel }, { deep: true }),
      dataType: 'json',
    });
    dispatch(
      fetchAccountAdvertisingBudgetsSuccess(
        accountType,
        accountId,
        channel,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchAccountAdvertisingGoalTypeRequest = (
  accountType,
  accountId,
  channel
) => ({
  type: FETCH_ADVERTISING_GOAL_TYPE_REQUEST,
  accountType,
  id: accountId,
  channel,
});
var fetchAccountAdvertisingGoalTypeSuccess = (
  accountType,
  accountId,
  channel,
  advertisingGoalType
) => ({
  type: FETCH_ADVERTISING_GOAL_TYPE_SUCCESS,
  accountType,
  id: accountId,
  channel,
  advertisingGoalType,
});
var fetchAccountAdvertisingGoalType =
  (accountType, accountId, channel) => async (dispatch) => {
    dispatch(
      fetchAccountAdvertisingGoalTypeRequest(accountType, accountId, channel)
    );
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/accounts/${accountId}/advertising/load_goal_type`,
      data: (0, import_snakecase_keys4.default)({ channel }, { deep: true }),
      dataType: 'json',
    });
    dispatch(
      fetchAccountAdvertisingGoalTypeSuccess(
        accountType,
        accountId,
        channel,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var checkAccountPublicationAccountTypesRequest = (accountType, accountId) => ({
  type: CHECK_PUBLICATION_ACCOUNT_TYPES_REQUEST,
  accountType,
  id: accountId,
});
var checkAccountPublicationAccountTypesSuccess = (
  accountType,
  accountId,
  publicationAccountTypes
) => ({
  type: CHECK_PUBLICATION_ACCOUNT_TYPES_SUCCESS,
  accountType,
  id: accountId,
  ...publicationAccountTypes,
});
var checkAccountPublicationAccountTypes =
  (accountType, accountId) => async (dispatch) => {
    dispatch(
      checkAccountPublicationAccountTypesRequest(accountType, accountId)
    );
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/accounts/${accountId}/advertising/check_publication_account_types`,
      dataType: 'json',
    });
    dispatch(
      checkAccountPublicationAccountTypesSuccess(
        accountType,
        accountId,
        camelcaseKeys(response, { deep: true })
      )
    );
  };

// src/actions/_budget_categories/management.jsx
var CREATE_BUDGET_CATEGORY_REQUEST = 'ADD_BUDGET_CATEGORY_REQUEST';
var CREATE_BUDGET_CATEGORY_SUCCESS = 'ADD_BUDGET_CATEGORY_SUCCESS';
var DESTROY_BUDGET_CATEGORY_REQUEST = 'DESTROY_BUDGET_CATEGORY_REQUEST';
var DESTROY_BUDGET_CATEGORY_SUCCESS = 'DESTROY_BUDGET_CATEGORY_SUCCESS';
var createBudgetCategoryRequest = (
  websiteId,
  budgetCategoryName,
  budgetCategoryLabel
) => ({
  type: CREATE_BUDGET_CATEGORY_REQUEST,
  websiteId,
  budgetCategoryName,
  budgetCategoryLabel,
});
var createBudgetCategorySuccess = (
  websiteId,
  budgetCategoryName,
  budgetCategoryLabel,
  response
) => ({
  type: CREATE_BUDGET_CATEGORY_SUCCESS,
  websiteId,
  budgetCategoryName,
  budgetCategoryLabel,
  ...response,
});
var createBudgetCategory =
  (websiteId, budgetCategoryName, budgetCategoryLabel) => async (dispatch) => {
    dispatch(
      createBudgetCategoryRequest(
        websiteId,
        budgetCategoryName,
        budgetCategoryLabel
      )
    );
    var response = await $.ajax({
      method: 'POST',
      url: `/ad_champion/websites/${websiteId}/budget_categories`,
      data: {
        name: budgetCategoryName,
        label: budgetCategoryLabel,
      },
      dataType: 'json',
    });
    dispatch(
      createBudgetCategorySuccess(
        websiteId,
        budgetCategoryName,
        budgetCategoryLabel,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var destroyBudgetCategoryRequest = (websiteId, budgetCategoryId) => ({
  type: DESTROY_BUDGET_CATEGORY_REQUEST,
  websiteId,
  budgetCategoryId,
});
var destroyBudgetCategorySuccess = (websiteId, budgetCategoryId, response) => ({
  type: DESTROY_BUDGET_CATEGORY_SUCCESS,
  websiteId,
  budgetCategoryId,
  ...response,
});
var destroyBudgetCategory =
  (websiteId, budgetCategoryId) => async (dispatch) => {
    dispatch(destroyBudgetCategoryRequest(websiteId, budgetCategoryId));
    var response = await $.ajax({
      method: 'DELETE',
      url: `/ad_champion/websites/${websiteId}/budget_categories/${budgetCategoryId}`,
      dataType: 'json',
    });
    dispatch(
      destroyBudgetCategorySuccess(
        websiteId,
        budgetCategoryId,
        camelcaseKeys(response, { deep: true })
      )
    );
  };

// src/actions/_websites/_budget.jsx
var import_snakecase_keys5 = __toESM(require_snakecase_keys());
var FETCH_WEBSITE_BUDGET_RESPONSE2 = 'FETCH_WEBSITE_BUDGET_RESPONSE';
var CREATE_WEBSITE_BUDGET_REQUEST = 'CREATE_WEBSITE_BUDGET_REQUEST';
var CREATE_WEBSITE_BUDGET_RESPONSE = 'CREATE_WEBSITE_BUDGET_RESPONSE';
var UPDATE_WEBSITE_BUDGET_REQUEST = 'UPDATE_WEBSITE_BUDGET_REQUEST';
var UPDATE_WEBSITE_BUDGET_RESPONSE = 'UPDATE_WEBSITE_BUDGET_RESPONSE';
var createWebsiteBudgetRequest = (websiteId) => ({
  type: CREATE_WEBSITE_BUDGET_REQUEST,
  websiteId,
});
var createWebsiteBudgetResponse = (websiteId) => ({
  type: CREATE_WEBSITE_BUDGET_RESPONSE,
  websiteId,
});
var createWebsiteBudget = (websiteId, payload) => (dispatch) => {
  dispatch(createWebsiteBudgetRequest(websiteId));
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/websites/${websiteId}/budget`,
    dataType: 'json',
    data: (0, import_snakecase_keys5.default)({ budget: payload }),
    success: (response) => {
      return dispatch(createWebsiteBudgetResponse(websiteId));
    },
  });
};
var updateWebsiteBudgetRequest = (websiteId) => ({
  type: UPDATE_WEBSITE_BUDGET_REQUEST,
  websiteId,
});
var updateWebsiteBudgetResponse = (websiteId) => ({
  type: UPDATE_WEBSITE_BUDGET_RESPONSE,
  websiteId,
});
var updateWebsiteBudget = (websiteId, payload, id) => (dispatch) => {
  dispatch(updateWebsiteBudgetRequest(websiteId));
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/websites/${websiteId}/budget/${id}`,
    dataType: 'json',
    data: (0, import_snakecase_keys5.default)({ budget: payload }),
    success: (response) => {
      return dispatch(updateWebsiteBudgetResponse(websiteId));
    },
  });
};

// src/actions/_websites/_contacts.jsx
var import_snakecase_keys6 = __toESM(require_snakecase_keys());
var FETCH_WEBSITE_CONTACTS_REQUEST = 'FETCH_WEBSITE_CONTACTS_REQUEST';
var FETCH_WEBSITE_CONTACTS_RESPONSE = 'FETCH_WEBSITE_CONTACTS_RESPONSE';
var CREATE_OR_UPDATE_WEBSITE_CONTACTS_REQUEST =
  'CREATE_OR_UPDATE_WEBSITE_CONTACTS_REQUEST';
var CREATE_OR_UPDATE_WEBSITE_CONTACTS_RESPONSE =
  'CREATE_OR_UPDATE_WEBSITE_CONTACTS_RESPONSE';
var fetchWebsiteContactsRequest = (websiteId) => ({
  type: FETCH_WEBSITE_CONTACTS_REQUEST,
  websiteId,
});
var fetchWebsiteContactsResponse = (websiteId, response) => ({
  type: FETCH_WEBSITE_CONTACTS_RESPONSE,
  websiteId,
  contacts: response,
});
var fetchWebsiteContacts = (websiteId) => (dispatch) => {
  dispatch(fetchWebsiteContactsRequest(websiteId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/contacts`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        fetchWebsiteContactsResponse(websiteId, camelcaseKeys(response))
      );
    },
  });
};
var createOrUpdateWebsiteContactsRequest = (websiteId) => ({
  type: CREATE_OR_UPDATE_WEBSITE_CONTACTS_REQUEST,
  websiteId,
});
var createOrUpdateWebsiteContactsResponse = (websiteId) => ({
  type: CREATE_OR_UPDATE_WEBSITE_CONTACTS_RESPONSE,
  websiteId,
});
var createOrUpdateWebsiteContacts = (websiteId, payload) => (dispatch) => {
  dispatch(createOrUpdateWebsiteContactsRequest(websiteId));
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/websites/${websiteId}/contacts`,
    dataType: 'json',
    data: (0, import_snakecase_keys6.default)(payload),
    success: (response) => {
      return dispatch(createOrUpdateWebsiteContactsResponse(websiteId));
    },
  });
};

// src/actions/_websites/_status.jsx
var FETCH_WEBSITE_PRIMARY_FEEDS_REQUEST = 'FETCH_WEBSITE_PRIMARY_FEEDS_REQUEST';
var FETCH_WEBSITE_PRIMARY_FEEDS_RESPONSE =
  'FETCH_WEBSITE_PRIMARY_FEEDS_RESPONSE';
var FETCH_WEBSITE_MERCHANT_CENTER_STATUS_REQUEST =
  'FETCH_WEBSITE_MERCHANT_CENTER_STATUS_REQUEST';
var FETCH_WEBSITE_MERCHANT_CENTER_STATUS_SUCCESS =
  'FETCH_WEBSITE_MERCHANT_CENTER_STATUS_SUCCESS';
var SET_WATCHING_REQUEST = 'SET_WATCHING_REQUEST';
var SET_WATCHING_RESPONSE = 'SET_WATCHING_RESPONSE';
var fetchWebsitePrimaryFeedsRequest = (websiteId) => ({
  type: FETCH_WEBSITE_PRIMARY_FEEDS_REQUEST,
  websiteId,
});
var fetchWebsitePrimaryFeedsResponse = (websiteId, response) => ({
  type: FETCH_WEBSITE_PRIMARY_FEEDS_RESPONSE,
  primaryFeeds: response.primaryFeeds,
  websiteId,
});
var fetchWebsitePrimaryFeeds = (websiteId) => (dispatch) => {
  dispatch(fetchWebsitePrimaryFeedsRequest(websiteId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/status/load_primary_feeds`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        fetchWebsitePrimaryFeedsResponse(websiteId, camelcaseKeys(response))
      );
    },
  });
};
var fetchWebsiteMerchantCenterStatusRequest = (websiteId) => ({
  type: FETCH_WEBSITE_MERCHANT_CENTER_STATUS_REQUEST,
  websiteId,
});
var fetchWebsiteMerchantCenterStatusSuccess = (
  websiteId,
  websiteMerchantCenterStatus
) => ({
  type: FETCH_WEBSITE_MERCHANT_CENTER_STATUS_SUCCESS,
  websiteId,
  websiteMerchantCenterStatus: websiteMerchantCenterStatus.merchantCenterStatus,
});
var fetchWebsiteMerchantCenterStatus = (websiteId) => async (dispatch) => {
  dispatch(fetchWebsiteMerchantCenterStatusRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/status/load_merchant_center_status`,
    dataType: 'json',
  });
  dispatch(
    fetchWebsiteMerchantCenterStatusSuccess(
      websiteId,
      camelcaseKeys(response, { deep: true })
    )
  );
};
var setWebsiteWatchingRequest = (websiteId, watching) => ({
  type: SET_WATCHING_REQUEST,
  websiteId,
  watching,
});
var setWebsiteWatchingResponse = (websiteId, watching, response) => ({
  type: SET_WATCHING_RESPONSE,
  websiteId,
  watching,
  response,
});
var setWebsiteWatching = (websiteId, watching) => async (dispatch) => {
  dispatch(setWebsiteWatchingRequest(websiteId, watching));
  var response = await $.ajax({
    method: 'POST',
    url: `/ad_champion/websites/${websiteId}/set_watching`,
    data: {
      watching,
    },
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(setWebsiteWatchingResponse(websiteId, watching, response));
  return response;
};

// src/actions/accounts.jsx
var import_snakecase_keys7 = __toESM(require_snakecase_keys());

// src/util/tag_manager.jsx
var ACCOUNT_CREATED = 'Account Created';
var FIRST_SIGN_IN = 'First Sign In';
var USER_SIGN_IN = 'Signed In';
var USER_PROFILE_COMPLETED = 'User Profile Completed';
var USER_IDENTIFIED = 'User Identified';
var trackEvent = (event, data = {}) => {
  global.dataLayer.push({
    event,
    ...data,
  });
};

// src/actions/accounts.jsx
var CREATE_ACCOUNT_REQUEST = 'CREATE_ACCOUNT_REQUEST';
var CREATE_ACCOUNT_RESPONSE = 'CREATE_ACCOUNT_RESPONSE';
var UPDATE_ACCOUNT_REQUEST = 'UPDATE_ACCOUNT_REQUEST';
var UPDATE_ACCOUNT_RESPONSE = 'UPDATE_ACCOUNT_RESPONSE';
var FETCH_ACCOUNT_USERS_REQUEST = 'FETCH_ACCOUNT_USERS_REQUEST';
var FETCH_ACCOUNT_USERS_RESPONSE = 'FETCH_ACCOUNT_USERS_RESPONSE';
var createAccountRequest = (accountName) => ({
  type: CREATE_ACCOUNT_REQUEST,
  accountName,
});
var createAccountResponse = (accountName, response) => ({
  type: CREATE_ACCOUNT_RESPONSE,
  accountName,
  response,
});
var createAccount = (accountName) => async (dispatch) => {
  dispatch(createAccountRequest(accountName));
  var response = await $.ajax({
    method: 'POST',
    url: `/ad_champion/accounts`,
    dataType: 'json',
    data: (0, import_snakecase_keys7.default)({ accountName }),
  });
  const camelCaseResponse = camelcaseKeys(response);
  trackEvent(ACCOUNT_CREATED);
  dispatch(createAccountResponse(accountName, camelCaseResponse));
  return camelCaseResponse;
};
var updateAccountRequest = (accountId, accountName, companyUrl) => ({
  type: UPDATE_ACCOUNT_REQUEST,
  accountId,
  accountName,
  companyUrl,
});
var updateAccountResponse = (accountId, response) => ({
  type: UPDATE_ACCOUNT_RESPONSE,
  accountId,
  ...response,
});
var updateAccount =
  (accountId, accountName, companyUrl) => async (dispatch) => {
    dispatch(updateAccountRequest(accountId, accountName, companyUrl));
    var response = await $.ajax({
      method: 'PUT',
      url: `/ad_champion/accounts/${accountId}`,
      dataType: 'json',
      data: (0, import_snakecase_keys7.default)({ accountName, companyUrl }),
    });
    response = camelcaseKeys(response, { deep: true });
    dispatch(updateAccountResponse(accountId, response));
    return response;
  };
var fetchAccountUsersRequest = (accountId) => ({
  type: FETCH_ACCOUNT_USERS_REQUEST,
  accountId,
});
var fetchAccountUsersResponse = (accountId, response) => ({
  type: FETCH_ACCOUNT_USERS_RESPONSE,
  accountId,
  ...response,
});
var fetchAccountUsers = (accountId) => async (dispatch) => {
  dispatch(fetchAccountUsersRequest(accountId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/accounts/${accountId}/users`,
    dataType: 'json',
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(fetchAccountUsersResponse(accountId, response));
  return response;
};

// src/actions/ad_headline_list.jsx
var SAVE_AD_HEADLINE_LIST_ITEMS_SUCCESS = 'SAVE_AD_HEADLINE_LIST_ITEMS_SUCCESS';
var SAVE_AD_HEADLINE_LIST_ITEMS_ERROR = 'SAVE_AD_HEADLINE_LIST_ITEMS_ERROR';
var LOAD_AD_HEADLINE_LIST_ITEMS_SUCCESS = 'LOAD_AD_HEADLINE_LIST_ITEMS_SUCCESS';
var LOAD_AD_HEADLINE_LIST_ITEMS_ERROR = 'LOAD_AD_HEADLINE_LIST_ITEMS_ERROR';
var updateAllAdHeadlineListItems = (items) => ({
  type: LOAD_AD_HEADLINE_LIST_ITEMS_SUCCESS,
  items,
});
var loadAdHeadlineListItems = (scenarioId) => (dispatch) => {
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/ad_headline_list/edit`,
    dataType: 'json',
    success: (response) => {
      return dispatch(updateAllAdHeadlineListItems(response.items));
    },
  });
};
var saveAdHeadlineListItems = (scenarioId, items) => (dispatch) => {
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/scenarios/${scenarioId}/ad_headline_list`,
    data: { items: JSON.stringify(items) },
    dataType: 'json',
    success: (response) => {
      return dispatch(saveAdHeadlineListItemsSuccess(items));
    },
    error: (response) => {
      return dispatch(ajaxErrorMessage('save'));
    },
  });
};
var ajaxErrorMessage = (messageType) => ({
  type:
    messageType === 'save'
      ? SAVE_AD_HEADLINE_LIST_ITEMS_ERROR
      : LOAD_AD_HEADLINE_LIST_ITEMS_ERROR,
  errorMessage: `A connection error has occurred while trying to ${messageType} the ad headline list items.`,
});
var saveAdHeadlineListItemsSuccess = (items) => ({
  type: SAVE_AD_HEADLINE_LIST_ITEMS_SUCCESS,
  items,
});

// src/actions/advertising_goal_types.jsx
var FETCH_ADVERTISING_GOAL_TYPES_REQUEST =
  'FETCH_ADVERTISING_GOAL_TYPES_REQUEST';
var FETCH_ADVERTISING_GOAL_TYPES_SUCCESS =
  'FETCH_ADVERTISING_GOAL_TYPES_SUCCESS';
var TOGGLE_DISPLAY_CONVERSION_VALUE_ON_COST_REQUEST =
  'TOGGLE_DISPLAY_CONVERSION_VALUE_ON_COST_REQUEST';
var TOGGLE_DISPLAY_CONVERSION_VALUE_ON_COST_SUCCESS =
  'TOGGLE_DISPLAY_CONVERSION_VALUE_ON_COST_SUCCESS';
var fetchAdvertisingGoalTypesRequest = () => ({
  type: FETCH_ADVERTISING_GOAL_TYPES_REQUEST,
});
var fetchAdvertisingGoalTypesSuccess = (advertisingGoalTypes) => ({
  type: FETCH_ADVERTISING_GOAL_TYPES_SUCCESS,
  advertisingGoalTypes,
});
var fetchAdvertisingGoalTypes = () => async (dispatch) => {
  dispatch(fetchAdvertisingGoalTypesRequest());
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/advertising_goal_types`,
    dataType: 'json',
  });
  dispatch(
    fetchAdvertisingGoalTypesSuccess(camelcaseKeys(response, { deep: true }))
  );
};
var toggleDisplayConversionValueOnCostRequest = () => ({
  type: TOGGLE_DISPLAY_CONVERSION_VALUE_ON_COST_REQUEST,
});
var toggleDisplayConversionValueOnCostSuccess = () => ({
  type: TOGGLE_DISPLAY_CONVERSION_VALUE_ON_COST_SUCCESS,
});
var toggleDisplayConversionValueOnCost = () => (dispatch) => {
  dispatch(toggleDisplayConversionValueOnCostRequest());
  return dispatch(toggleDisplayConversionValueOnCostSuccess());
};

// src/actions/adwords_account.jsx
var import_snakecase_keys8 = __toESM(require_snakecase_keys());

// src/selectors/google/user.jsx
var import_reselect2 = __toESM(require_lib());
var getGoogleUser = (getState) => {
  const state = getState();
  const { user } = state.google;
  return user;
};
var getAccessToken = (getState) => {
  const { accessToken } = getGoogleUser(getState);
  return accessToken;
};
var getRefreshToken = (getState) => {
  const { refreshToken } = getGoogleUser(getState);
  return refreshToken;
};
var googleSelector = (state) => state.google || {};
var googleUserAccessTokenSelector = (0, import_reselect2.createSelector)(
  googleSelector,
  (google) => {
    const { accessToken } = google.user || {};
    return accessToken;
  }
);

// src/actions/adwords_account.jsx
var SET_ADWORDS_ACCOUNT_ID_REQUEST = 'SET_ADWORDS_ACCOUNT_ID_REQUEST';
var SET_ADWORDS_ACCOUNT_ID_RESPONSE = 'SET_ADWORDS_ACCOUNT_ID_RESPONSE';
var LIST_ADWORDS_ACCOUNTS_REQUEST = 'LIST_ADWORDS_ACCOUNTS_REQUEST';
var LIST_ADWORDS_ACCOUNTS_RESPONSE = 'LIST_ADWORDS_ACCOUNTS_RESPONSE';
var LOAD_ADWORDS_ACCOUNT_REQUEST = 'LOAD_ADWORDS_ACCOUNT_REQUEST';
var LOAD_ADWORDS_ACCOUNT_SUCCESS = 'LOAD_ADWORDS_ACCOUNT_SUCCESS';
var UPDATE_ADWORDS_ACCOUNT_REQUEST = 'UPDATE_ADWORDS_ACCOUNT_REQUEST';
var UPDATE_ADWORDS_ACCOUNT_ERROR = 'UPDATE_ADWORDS_ACCOUNT_ERROR';
var UPDATE_ADWORDS_ACCOUNT_SUCCESS = 'UPDATE_ADWORDS_ACCOUNT_SUCCESS';
var CREATE_ADWORDS_ACCOUNT_AND_SEND_INVITATION_REQUEST =
  'CREATE_ADWORDS_ACCOUNT_AND_SEND_INVITATION_REQUEST';
var CREATE_ADWORDS_ACCOUNT_AND_SEND_INVITATION_RESPONSE =
  'CREATE_ADWORDS_ACCOUNT_AND_SEND_INVITATION_RESPONSE';
var ADWORDS_ACCOUNT_LINKING_STATUS_REQUEST =
  'ADWORDS_ACCOUNT_LINKING_STATUS_REQUEST';
var ADWORDS_ACCOUNT_LINKING_STATUS_RESPONSE =
  'ADWORDS_ACCOUNT_LINKING_STATUS_RESPONSE';
var loadAdwordsAccountRequest = (scenarioId) => ({
  type: LOAD_ADWORDS_ACCOUNT_REQUEST,
  scenarioId,
});
var loadAdwordsAccountSuccess = (scenarioId, adwordsAccount) => ({
  type: LOAD_ADWORDS_ACCOUNT_SUCCESS,
  scenarioId,
  adwordsAccount,
});
var loadAdwordsAccount = (scenarioId) => (dispatch) => {
  dispatch(loadAdwordsAccountRequest(scenarioId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/adwords_account/edit`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        loadAdwordsAccountSuccess(
          scenarioId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};
var updateAdwordsAccountRequest = (scenarioId, adwordsAccount) => ({
  type: UPDATE_ADWORDS_ACCOUNT_REQUEST,
  scenarioId,
  adwordsAccount,
});
var updateAdwordsAccountError = (scenarioId, adwordsAccount) => ({
  type: UPDATE_ADWORDS_ACCOUNT_ERROR,
  scenarioId,
  adwordsAccount,
});
var updateAdwordsAccountSuccess = (scenarioId, adwordsAccount) => ({
  type: UPDATE_ADWORDS_ACCOUNT_SUCCESS,
  scenarioId,
  adwordsAccount,
});
var mergeResponse = (adwordsAccount, response) => {
  var newData = camelcaseKeys(response, { deep: true });
  return {
    ...adwordsAccount,
    ...newData,
  };
};
var updateAdwordsAccount = (scenarioId, adwordsAccount) => (dispatch) => {
  dispatch(updateAdwordsAccountRequest(scenarioId, adwordsAccount));
  var payload = {
    publication_account: (0, import_snakecase_keys8.default)(adwordsAccount),
  };
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/scenarios/${scenarioId}/adwords_account`,
    data: payload,
    success: (response) => {
      return dispatch(
        updateAdwordsAccountSuccess(
          scenarioId,
          mergeResponse(adwordsAccount, response)
        )
      );
    },
    error: (response) => {
      return dispatch(
        updateAdwordsAccountError(
          scenarioId,
          mergeResponse(adwordsAccount, response.responseJSON)
        )
      );
    },
  });
};
var listAdwordsAccountsRequest = () => ({
  type: LIST_ADWORDS_ACCOUNTS_REQUEST,
});
var listAdwordsAccountsResponse = (adwordsAccounts) => ({
  type: LIST_ADWORDS_ACCOUNTS_RESPONSE,
  adwordsAccounts,
});
var listAdwordsAccounts =
  (getToken = getRefreshToken) =>
  async (dispatch, getState) => {
    const refreshToken = getToken(getState);
    if (refreshToken) {
      dispatch(listAdwordsAccountsRequest());
      var accounts = await $.ajax({
        method: 'GET',
        url: `/ad_champion/google/adwords/accounts?refresh_token=${refreshToken}`,
      });
      dispatch(listAdwordsAccountsResponse(accounts));
      return accounts;
    }
  };
var createAdwordsAccountAndSendInvitationRequest = (
  websiteId,
  adwordsAccountId
) => ({
  type: CREATE_ADWORDS_ACCOUNT_AND_SEND_INVITATION_REQUEST,
  websiteId,
  adwordsAccountId,
});
var createAdwordsAccountAndSendInvitationResponse = (
  websiteId,
  adwordsAccountId,
  response
) => ({
  type: CREATE_ADWORDS_ACCOUNT_AND_SEND_INVITATION_RESPONSE,
  websiteId,
  adwordsAccountId,
  response,
});
var createAdwordsAccountAndSendInvitation =
  (websiteId, adwordsAccountId, getToken = getRefreshToken) =>
  async (dispatch, getState) => {
    dispatch(
      createAdwordsAccountAndSendInvitationRequest(websiteId, adwordsAccountId)
    );
    const refreshToken = getToken(getState);
    var response = await $.ajax({
      method: 'POST',
      url: '/ad_champion/google/adwords/accounts/create_adwords_account_and_send_invitation',
      data: {
        website_id: websiteId,
        adwords_account_id: adwordsAccountId,
        refreshToken,
      },
    });
    const camelCaseResponse = camelcaseKeys(response, { deep: true });
    dispatch(
      createAdwordsAccountAndSendInvitationResponse(
        websiteId,
        adwordsAccountId,
        camelCaseResponse
      )
    );
    return camelCaseResponse;
  };
var adwordsAccountLinkingStatusRequest = (websiteId) => ({
  type: ADWORDS_ACCOUNT_LINKING_STATUS_REQUEST,
  websiteId,
});
var adwordsAccountLinkingStatusResponse = (websiteId, response) => ({
  type: ADWORDS_ACCOUNT_LINKING_STATUS_RESPONSE,
  websiteId,
  ...response,
});
var adwordsAccountLinkingStatus = (websiteId) => async (dispatch) => {
  dispatch(adwordsAccountLinkingStatusRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: '/ad_champion/google/adwords/accounts/adwords_account_linking_status',
    data: {
      website_id: websiteId,
    },
  });
  const camelCaseResponse = camelcaseKeys(response, { deep: true });
  dispatch(adwordsAccountLinkingStatusResponse(websiteId, camelCaseResponse));
  return camelCaseResponse;
};

// src/actions/affiliates.jsx
var import_snakecase_keys9 = __toESM(require_snakecase_keys());
var TRACK_AFFILIATE_SIGN_UP_REQUEST = 'TRACK_AFFILIATE_SIGN_UP_REQUEST';
var TRACK_AFFILIATE_SIGN_UP_RESPONSE = 'TRACK_AFFILIATE_SIGN_UP_RESPONSE';
var trackAffiliateSignUpRequest = (userId, trackingId) => ({
  type: TRACK_AFFILIATE_SIGN_UP_REQUEST,
  userId,
  trackingId,
});
var trackAffiliateSignUpResponse = (userId, trackingId, response) => ({
  type: TRACK_AFFILIATE_SIGN_UP_RESPONSE,
  userId,
  trackingId,
  response,
});
var trackAffiliateSignUp = (userId, trackingId) => async (dispatch) => {
  dispatch(trackAffiliateSignUpRequest(userId, trackingId));
  var response = await $.ajax({
    method: 'POST',
    url: `/ad_champion/affiliates/track_signup`,
    data: (0, import_snakecase_keys9.default)(
      { userId, trackingId },
      { deep: true }
    ),
    dataType: 'json',
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(trackAffiliateSignUpResponse(userId, trackingId, response));
  return response;
};

// src/actions/app.jsx
var CLEAR_REQUEST_QUEUE = 'CLEAR_REQUEST_QUEUE';
var SET_SIDE_NAV_OPEN = 'SET_SIDE_NAV_OPEN';
var SET_BOOK_A_MEETING_MODAL_OPEN = 'SET_BOOK_A_MEETING_MODAL_OPEN';
var SET_CHANNEL_FILTER_MODAL_OPEN = 'SET_CHANNEL_FILTER_MODAL_OPEN';
var SET_CHANNEL_SETTINGS_MODAL_OPEN = 'SET_CHANNEL_SETTINGS_MODAL_OPEN';
var SET_WORK_EMAIL_MODAL_OPEN = 'SET_WORK_EMAIL_MODAL_OPEN';
var clearRequestQueue = () => ({ type: CLEAR_REQUEST_QUEUE });
var setSideNavOpen = (open) => ({
  type: SET_SIDE_NAV_OPEN,
  open,
});
var setBookAMeetingModalOpen = (open, meetingType, jsonData = void 0) => ({
  type: SET_BOOK_A_MEETING_MODAL_OPEN,
  open,
  meetingType,
  jsonData,
});
var setChannelFilterModalOpen = (open) => ({
  type: SET_CHANNEL_FILTER_MODAL_OPEN,
  open,
});
var setWorkEmailModalOpen = (open) => ({
  type: SET_WORK_EMAIL_MODAL_OPEN,
  open,
});

// src/actions/async_operations.jsx
var GET_OPERATION_STATUS_REQUEST = 'GET_OPERATION_STATUS_REQUEST';
var GET_OPERATION_STATUS_RESPONSE = 'GET_OPERATION_STATUS_RESPONSE';
var getOperationStatusRequest = (operationId) => ({
  type: GET_OPERATION_STATUS_REQUEST,
  operationId,
});
var getOperationStatusResponse = (operationId, status2) => ({
  type: GET_OPERATION_STATUS_RESPONSE,
  operationId,
  ...status2,
});
var getOperationStatus = (operationId) => async (dispatch) => {
  dispatch(getOperationStatusRequest(operationId));
  var response = await $.ajax({
    url: `/ad_champion/async_operations/${operationId}`,
  });
  var camelResponse = camelcaseKeys(response, { deep: true });
  dispatch(getOperationStatusResponse(operationId, camelResponse));
  return camelResponse;
};

// src/actions/billing.jsx
var import_snakecase_keys10 = __toESM(require_snakecase_keys());
var FETCH_WEBSITE_CUSTOMER_REQUEST = 'FETCH_WEBSITE_CUSTOMER_REQUEST';
var FETCH_WEBSITE_CUSTOMER_RESPONSE = 'FETCH_WEBSITE_CUSTOMER_RESPONSE';
var CREATE_WEBSITE_CUSTOMER_REQUEST = 'CREATE_WEBSITE_CUSTOMER_REQUEST';
var CREATE_WEBSITE_CUSTOMER_RESPONSE = 'CREATE_WEBSITE_CUSTOMER_RESPONSE';
var UPDATE_WEBSITE_CUSTOMER_REQUEST = 'UPDATE_WEBSITE_CUSTOMER_REQUEST';
var UPDATE_WEBSITE_CUSTOMER_RESPONSE = 'UPDATE_WEBSITE_CUSTOMER_RESPONSE';
var USE_EXISTING_CONTACT_DETAILS_REQUEST =
  'USE_EXISTING_CONTACT_DETAILS_REQUEST';
var USE_EXISTING_CONTACT_DETAILS_RESPONSE =
  'USE_EXISTING_CONTACT_DETAILS_RESPONSE';
var FETCH_PLANS_REQUEST = 'FETCH_PLANS_REQUEST';
var FETCH_PLANS_RESPONSE = 'FETCH_PLANS_RESPONSE';
var FETCH_PLAN_REQUEST = 'FETCH_PLAN_REQUEST';
var FETCH_PLAN_RESPONSE = 'FETCH_PLAN_RESPONSE';
var FETCH_ADDON_REQUEST = 'FETCH_ADDON_REQUEST';
var FETCH_ADDON_RESPONSE = 'FETCH_ADDON_RESPONSE';
var FETCH_WEBSITE_SUBSCRIPTION_REQUEST = 'FETCH_WEBSITE_SUBSCRIPTION_REQUEST';
var FETCH_WEBSITE_SUBSCRIPTION_RESPONSE = 'FETCH_WEBSITE_SUBSCRIPTION_RESPONSE';
var FETCH_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_REQUEST =
  'FETCH_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_REQUEST';
var FETCH_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_RESPONSE =
  'FETCH_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_RESPONSE';
var FETCH_ACCOUNT_SUBSCRIPTION_REQUEST = 'FETCH_ACCOUNT_SUBSCRIPTION_REQUEST';
var FETCH_ACCOUNT_SUBSCRIPTION_RESPONSE = 'FETCH_ACCOUNT_SUBSCRIPTION_RESPONSE';
var CREATE_ACCOUNT_SUBSCRIPTION_REQUEST = 'CREATE_ACCOUNT_SUBSCRIPTION_REQUEST';
var CREATE_ACCOUNT_SUBSCRIPTION_RESPONSE =
  'CREATE_ACCOUNT_SUBSCRIPTION_RESPONSE';
var UPDATE_ACCOUNT_SUBSCRIPTION_REQUEST = 'UPDATE_ACCOUNT_SUBSCRIPTION_REQUEST';
var UPDATE_ACCOUNT_SUBSCRIPTION_RESPONSE =
  'UPDATE_ACCOUNT_SUBSCRIPTION_RESPONSE';
var UPDATE_WEBSITE_SUBSCRIPTION_REQUEST = 'UPDATE_WEBSITE_SUBSCRIPTION_REQUEST';
var UPDATE_WEBSITE_SUBSCRIPTION_RESPONSE =
  'UPDATE_WEBSITE_SUBSCRIPTION_RESPONSE';
var UPDATE_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_REQUEST =
  'UPDATE_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_REQUEST';
var UPDATE_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_RESPONSE =
  'UPDATE_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_RESPONSE';
var SET_EXISTING_ACCOUNT_FOR_CONTACT_DETAILS =
  'SET_EXISTING_ACCOUNT_FOR_CONTACT_DETAILS';
var FETCH_EXISTING_WEBSITE_CUSTOMER_REQUEST =
  'FETCH_EXISTING_WEBSITE_CUSTOMER_REQUEST';
var FETCH_EXISTING_WEBSITE_CUSTOMER_RESPONSE =
  'FETCH_EXISTING_WEBSITE_CUSTOMER_RESPONSE';
var FETCH_EXISTING_ACCOUNT_CUSTOMER_REQUEST =
  'FETCH_EXISTING_ACCOUNT_CUSTOMER_REQUEST';
var FETCH_EXISTING_ACCOUNT_CUSTOMER_RESPONSE =
  'FETCH_EXISTING_ACCOUNT_CUSTOMER_RESPONSE';
var FETCH_EXISTING_MASTER_ACCOUNT_CUSTOMER_REQUEST =
  'FETCH_EXISTING_MASTER_ACCOUNT_CUSTOMER_REQUEST';
var FETCH_EXISTING_MASTER_ACCOUNT_CUSTOMER_RESPONSE =
  'FETCH_EXISTING_MASTER_ACCOUNT_CUSTOMER_RESPONSE';
var fetchWebsiteCustomerRequest = (websiteId) => ({
  type: FETCH_WEBSITE_CUSTOMER_REQUEST,
  websiteId,
});
var fetchWebsiteCustomerResponse = (websiteId, response) => ({
  type: FETCH_WEBSITE_CUSTOMER_RESPONSE,
  customer: response.customer,
  sharedDetails: response.sharedDetails,
  websiteId,
});
var fetchWebsiteCustomer = (websiteId) => async (dispatch) => {
  if (!websiteId) {
    return Promise.resolve();
  }
  dispatch(fetchWebsiteCustomerRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/customer`,
    dataType: 'json',
  });
  dispatch(
    fetchWebsiteCustomerResponse(
      websiteId,
      camelcaseKeys(response, { deep: true })
    )
  );
};
var createWebsiteCustomerRequest = (websiteId) => ({
  type: CREATE_WEBSITE_CUSTOMER_REQUEST,
  websiteId,
});
var createWebsiteCustomerResponse = (websiteId) => ({
  type: CREATE_WEBSITE_CUSTOMER_RESPONSE,
  websiteId,
});
var createWebsiteCustomer = (websiteId, payload) => (dispatch) => {
  dispatch(createWebsiteCustomerRequest(websiteId));
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/websites/${websiteId}/customer`,
    dataType: 'json',
    data: (0, import_snakecase_keys10.default)({ customer: payload }),
    success: (response) => {
      return dispatch(createWebsiteCustomerResponse(websiteId));
    },
  });
};
var updateWebsiteCustomerRequest = (websiteId) => ({
  type: UPDATE_WEBSITE_CUSTOMER_REQUEST,
  websiteId,
});
var updateWebsiteCustomerResponse = (websiteId, response) => ({
  type: UPDATE_WEBSITE_CUSTOMER_RESPONSE,
  websiteId,
  response,
});
var updateWebsiteCustomer = (websiteId, payload) => (dispatch) => {
  dispatch(updateWebsiteCustomerRequest(websiteId));
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/websites/${websiteId}/customer`,
    dataType: 'json',
    data: (0, import_snakecase_keys10.default)({ customer: payload }),
    success: (response) => {
      return dispatch(
        updateWebsiteCustomerResponse(
          websiteId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};
var useExistingContactDetailsRequest = (
  websiteId,
  accountType,
  accountTypeId
) => ({
  type: USE_EXISTING_CONTACT_DETAILS_REQUEST,
  websiteId,
  accountType,
  accountTypeId,
});
var useExistingContactDetailsResponse = (
  websiteId,
  accountType,
  accountTypeId,
  response
) => ({
  type: USE_EXISTING_CONTACT_DETAILS_RESPONSE,
  websiteId,
  accountType,
  accountTypeId,
  response,
});
var useExistingContactDetails =
  (websiteId, accountType, accountTypeId) => (dispatch) => {
    dispatch(
      useExistingContactDetailsRequest(websiteId, accountType, accountTypeId)
    );
    return $.ajax({
      method: 'PUT',
      url: `/ad_champion/websites/${websiteId}/customer/use_existing_contact_details`,
      dataType: 'json',
      data: (0, import_snakecase_keys10.default)({
        websiteId,
        accountType,
        accountTypeId,
      }),
      success: (response) => {
        return dispatch(
          useExistingContactDetailsResponse(
            websiteId,
            accountType,
            accountTypeId,
            camelcaseKeys(response, { deep: true })
          )
        );
      },
    });
  };
var fetchPlansRequest = () => ({
  type: FETCH_PLANS_REQUEST,
});
var fetchPlansResponse = (plans) => ({
  type: FETCH_PLANS_RESPONSE,
  plans,
});
var fetchPlans = () => (dispatch) => {
  dispatch(fetchPlansRequest());
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/chargebee/plans`,
    success: (response) => {
      return dispatch(
        fetchPlansResponse(
          response.plans.map((p) => camelcaseKeys(p, { deep: true }))
        )
      );
    },
  });
};
var fetchPlanRequest = (planId) => ({
  type: FETCH_PLAN_REQUEST,
  planId,
});
var fetchPlanResponse = (planId, plan2) => ({
  type: FETCH_PLAN_RESPONSE,
  planId,
  plan: plan2,
});
var fetchPlan = (planId) => (dispatch) => {
  dispatch(fetchPlanRequest(planId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/chargebee/plans/${planId}`,
    success: (response) => {
      return dispatch(
        fetchPlanResponse(planId, camelcaseKeys(response.plan, { deep: true }))
      );
    },
  });
};
var fetchAddonRequest = (addonId) => ({
  type: FETCH_ADDON_REQUEST,
  addonId,
});
var fetchAddonResponse = (addonId, addon) => ({
  type: FETCH_ADDON_RESPONSE,
  addonId,
  addon,
});
var fetchAddon = (addonId) => (dispatch) => {
  dispatch(fetchAddonRequest(addonId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/chargebee/addons/${addonId}`,
    success: (response) => {
      return dispatch(
        fetchAddonResponse(addonId, camelcaseKeys(response, { deep: true }))
      );
    },
  });
};
var fetchWebsiteSubscriptionRequest = (websiteId) => ({
  type: FETCH_WEBSITE_SUBSCRIPTION_REQUEST,
  websiteId,
});
var fetchWebsiteSubscriptionResponse = (websiteId, subscription) => ({
  type: FETCH_WEBSITE_SUBSCRIPTION_RESPONSE,
  websiteId,
  subscription,
});
var fetchWebsiteSubscription = (websiteId) => (dispatch) => {
  if (!websiteId) {
    return Promise.resolve();
  }
  dispatch(fetchWebsiteSubscriptionRequest(websiteId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/subscription`,
    success: (response) => {
      return dispatch(
        fetchWebsiteSubscriptionResponse(
          websiteId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};
var fetchAccountAndWebsiteSubscriptionRequest = (websiteId) => ({
  type: FETCH_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_REQUEST,
  websiteId,
});
var fetchAccountAndWebsiteSubscriptionResponse = (
  websiteId,
  subscriptions
) => ({
  type: FETCH_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_RESPONSE,
  websiteId,
  ...subscriptions,
});
var fetchAccountAndWebsiteSubscription = (websiteId) => (dispatch) => {
  if (!websiteId) {
    return Promise.resolve();
  }
  dispatch(fetchAccountAndWebsiteSubscriptionRequest(websiteId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/subscription?both=true`,
    success: (response) => {
      var camelCaseResponse = camelcaseKeys(response, { deep: true });
      dispatch(
        fetchAccountAndWebsiteSubscriptionResponse(websiteId, camelCaseResponse)
      );
      return camelCaseResponse;
    },
  });
};
var fetchAccountSubscriptionRequest = (accountId) => ({
  type: FETCH_ACCOUNT_SUBSCRIPTION_REQUEST,
  accountId,
});
var fetchAccountSubscriptionResponse = (accountId, response) => ({
  type: FETCH_ACCOUNT_SUBSCRIPTION_RESPONSE,
  accountId,
  response,
});
var fetchAccountSubscription = (accountId) => (dispatch) => {
  if (!accountId) {
    return Promise.resolve();
  }
  dispatch(fetchAccountSubscriptionRequest(accountId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/accounts/${accountId}/subscriptions`,
    success: (response) => {
      return dispatch(
        fetchAccountSubscriptionResponse(
          accountId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};
var createAccountSubscriptionRequest = (
  accountId,
  appId,
  planId,
  managedService
) => ({
  type: CREATE_ACCOUNT_SUBSCRIPTION_REQUEST,
  accountId,
  appId,
  planId,
  managedService,
});
var createAccountSubscriptionResponse = (
  accountId,
  appId,
  planId,
  managedService,
  response
) => ({
  type: CREATE_ACCOUNT_SUBSCRIPTION_RESPONSE,
  accountId,
  appId,
  planId,
  managedService,
  response,
});
var createAccountSubscription =
  (accountId, appId, planId, managedService) => (dispatch) => {
    dispatch(
      createAccountSubscriptionRequest(accountId, appId, planId, managedService)
    );
    return $.ajax({
      method: 'POST',
      url: `/ad_champion/accounts/${accountId}/subscriptions`,
      dataType: 'json',
      data: (0, import_snakecase_keys10.default)(
        { appId, planId, managedService },
        { deep: true }
      ),
      success: (response) => {
        var camelCaseResponse = camelcaseKeys(response, { deep: true });
        dispatch(
          createAccountSubscriptionResponse(
            accountId,
            appId,
            planId,
            managedService,
            camelCaseResponse
          )
        );
        return camelCaseResponse;
      },
    });
  };
var updateAccountSubscriptionRequest = (accountId, data) => ({
  type: UPDATE_ACCOUNT_SUBSCRIPTION_REQUEST,
  accountId,
  data,
});
var updateAccountSubscriptionResponse = (accountId, data, response) => ({
  type: UPDATE_ACCOUNT_SUBSCRIPTION_RESPONSE,
  accountId,
  data,
  response,
});
var updateAccountSubscription = (accountId, data) => (dispatch) => {
  dispatch(updateAccountSubscriptionRequest(accountId, data));
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/accounts/${accountId}/subscriptions`,
    data: (0, import_snakecase_keys10.default)(data, { deep: true }),
    success: (response) => {
      var camelCaseResponse = camelcaseKeys(response, { deep: true });
      dispatch(
        updateAccountSubscriptionResponse(accountId, data, camelCaseResponse)
      );
      return camelCaseResponse;
    },
  });
};
var updateWebsiteSubscriptionRequest = (websiteId, data) => ({
  type: UPDATE_WEBSITE_SUBSCRIPTION_REQUEST,
  websiteId,
  data,
});
var updateWebsiteSubscriptionResponse = (websiteId, data, response) => ({
  type: UPDATE_WEBSITE_SUBSCRIPTION_RESPONSE,
  websiteId,
  data,
  response,
});
var updateWebsiteSubscription = (websiteId, data) => (dispatch) => {
  dispatch(updateWebsiteSubscriptionRequest(websiteId, data));
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/websites/${websiteId}/subscription`,
    data: (0, import_snakecase_keys10.default)(data, { deep: true }),
    success: (response) => {
      var camelCaseResponse = camelcaseKeys(response, { deep: true });
      dispatch(
        updateWebsiteSubscriptionResponse(websiteId, data, camelCaseResponse)
      );
      return camelCaseResponse;
    },
  });
};
var updateAccountAndWebsiteSubscriptionRequest = (
  websiteId,
  accountSubscription,
  websiteSubscription
) => ({
  type: UPDATE_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_REQUEST,
  websiteId,
  accountSubscription,
  websiteSubscription,
});
var updateAccountAndWebsiteSubscriptionResponse = (
  websiteId,
  accountSubscription,
  websiteSubscription,
  response
) => ({
  type: UPDATE_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_RESPONSE,
  websiteId,
  accountSubscription,
  websiteSubscription,
  response,
});
var updateAccountAndWebsiteSubscription =
  (websiteId, accountSubscription, websiteSubscription) => (dispatch) => {
    dispatch(
      updateAccountAndWebsiteSubscriptionRequest(
        websiteId,
        accountSubscription,
        websiteSubscription
      )
    );
    return $.ajax({
      method: 'POST',
      url: `/ad_champion/websites/${websiteId}/subscription/update_subscriptions`,
      data: {
        account_subscription: (0, import_snakecase_keys10.default)(
          accountSubscription,
          {
            deep: true,
          }
        ),
        website_subscription: (0, import_snakecase_keys10.default)(
          websiteSubscription,
          { deep: true }
        ),
      },
      dataType: 'json',
      success: (response) => {
        var camelCaseResponse = camelcaseKeys(response, { deep: true });
        dispatch(
          updateAccountAndWebsiteSubscriptionResponse(
            websiteId,
            accountSubscription,
            websiteSubscription,
            camelCaseResponse
          )
        );
        return camelCaseResponse;
      },
    });
  };
var setExistingAccountForContactDetails = (accountType, accountTypeId) => ({
  type: SET_EXISTING_ACCOUNT_FOR_CONTACT_DETAILS,
  accountType,
  accountTypeId,
});
var setExistingAccount = (accountType, accountTypeId) => (dispatch) => {
  dispatch(setExistingAccountForContactDetails(accountType, accountTypeId));
};
var fetchExistingWebsiteCustomerRequest = (websiteId) => ({
  type: FETCH_EXISTING_WEBSITE_CUSTOMER_REQUEST,
  websiteId,
});
var fetchExistingWebsiteCustomerResponse = (websiteId, response) => ({
  type: FETCH_EXISTING_WEBSITE_CUSTOMER_RESPONSE,
  customer: response,
  websiteId,
});
var fetchExistingWebsiteCustomer = (websiteId) => (dispatch) => {
  if (!websiteId) {
    return Promise.resolve();
  }
  dispatch(fetchExistingWebsiteCustomerRequest(websiteId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/customer`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        fetchExistingWebsiteCustomerResponse(
          websiteId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};
var fetchExistingAccountCustomerRequest = (accountId) => ({
  type: FETCH_EXISTING_ACCOUNT_CUSTOMER_REQUEST,
  accountId,
});
var fetchExistingAccountCustomerResponse = (accountId, response) => ({
  type: FETCH_EXISTING_ACCOUNT_CUSTOMER_RESPONSE,
  customer: response,
  accountId,
});
var fetchExistingAccountCustomer = (accountId) => (dispatch) => {
  if (!accountId) {
    return Promise.resolve();
  }
  dispatch(fetchExistingAccountCustomerRequest(accountId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/accounts/${accountId}/customer`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        fetchExistingAccountCustomerResponse(
          accountId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};
var fetchExistingMasterAccountCustomerRequest = (masterAccountId) => ({
  type: FETCH_EXISTING_MASTER_ACCOUNT_CUSTOMER_REQUEST,
  masterAccountId,
});
var fetchExistingMasterAccountCustomerResponse = (
  masterAccountId,
  response
) => ({
  type: FETCH_EXISTING_MASTER_ACCOUNT_CUSTOMER_RESPONSE,
  customer: response,
  masterAccountId,
});
var fetchExistingMasterAccountCustomer = (masterAccountId) => (dispatch) => {
  if (!masterAccountId) {
    return Promise.resolve();
  }
  dispatch(fetchExistingMasterAccountCustomerRequest(masterAccountId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/master_accounts/${masterAccountId}/customer`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        fetchExistingMasterAccountCustomerResponse(
          masterAccountId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};
var UPDATE_PAYMENT_METHOD_REQUEST = 'UPDATE_PAYMENT_METHOD_REQUEST';
var UPDATE_PAYMENT_METHOD_RESPONSE = 'UPDATE_PAYMENT_METHOD_RESPONSE';
var updateWebsitePaymentMethodRequest = (websiteId, token2) => ({
  type: UPDATE_PAYMENT_METHOD_REQUEST,
  websiteId,
  token: token2,
});
var updateWebsitePaymentMethodResponse = (websiteId, token2, response) => ({
  type: UPDATE_PAYMENT_METHOD_RESPONSE,
  websiteId,
  token: token2,
  response,
});
var updateWebsitePaymentMethod = (websiteId, token2) => async (dispatch) => {
  dispatch(updateWebsitePaymentMethodRequest(websiteId, token2));
  var response = await $.ajax({
    url: `/ad_champion/websites/${websiteId}/customer/update_payment_method`,
    method: 'POST',
    data: (0, import_snakecase_keys10.default)({
      token: token2,
    }),
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(updateWebsitePaymentMethodResponse(websiteId, token2, response));
  return response;
};

// src/actions/builds.jsx
var import_snakecase_keys11 = __toESM(require_snakecase_keys());
var FETCH_BUILDS = 'FETCH_BUILDS';
var RESPONSE_ERROR = 'RESPONSE_ERROR';
var LOAD_BUILD_REQUEST = 'LOAD_BUILD_REQUEST';
var LOAD_BUILD_RESPONSE = 'LOAD_BUILD_RESPONSE';
var DELETE_BUILD_REQUEST = 'DELETE_BUILD_REQUEST';
var DELETE_BUILD_SUCCESS = 'DELETE_BUILD_SUCCESS';
var DELETE_BUILD_ERROR = 'DELETE_BUILD_ERROR';
var CREATE_BUILD_REQUEST = 'CREATE_BUILD_REQUEST';
var CREATE_BUILD_RESPONSE = 'CREATE_BUILD_RESPONSE';
var PUBLISH_BUILD_REQUEST = 'PUBLISH_BUILD_REQUEST';
var PUBLISH_BUILD_RESPONSE = 'PUBLISH_BUILD_RESPONSE';
var loadBuildRequest = (buildId) => ({
  type: LOAD_BUILD_REQUEST,
  buildId,
});
var loadBuildResponse = (buildId, build) => ({
  type: LOAD_BUILD_RESPONSE,
  buildId,
  build,
});
var createBuildRequest = () => ({
  type: CREATE_BUILD_REQUEST,
});
var createBuildResponse = () => ({
  type: CREATE_BUILD_RESPONSE,
});
var loadBuild = (buildId) => (dispatch) => {
  dispatch(loadBuildRequest(buildId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/builds/${buildId}`,
    success: (response) => {
      dispatch(
        loadBuildResponse(buildId, camelcaseKeys(response, { deep: true }))
      );
    },
  });
};
var deleteBuildRequest = (id) => ({
  type: DELETE_BUILD_REQUEST,
  id,
});
var deleteBuildSuccess = (id) => ({
  type: DELETE_BUILD_SUCCESS,
  id,
});
var deleteBuildError = (response) => ({
  type: DELETE_BUILD_ERROR,
  error: response.error,
});
var deleteBuild = (buildId) => (dispatch) => {
  dispatch(deleteBuildRequest(buildId));
  return $.ajax({
    method: 'DELETE',
    url: `/ad_champion/builds/${buildId}`,
    dataType: 'json',
    success: (response) => {
      dispatch(deleteBuildSuccess(buildId));
    },
    error: (response) => {
      dispatch(deleteBuildError(response));
    },
  });
};
var createBuild = (payload) => (dispatch) => {
  dispatch(createBuildRequest());
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/builds`,
    data: (0, import_snakecase_keys11.default)(payload, { deep: true }),
    success: (response) => {
      dispatch(createBuildResponse());
    },
  });
};
var publishBuild = (buildId, data) => (dispatch) => {
  dispatch(publishBuildRequest());
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/builds/${buildId}/publish`,
    dataType: 'json',
    data: (0, import_snakecase_keys11.default)(data),
    error: (response) => {
      dispatch(responseError2(camelcaseKeys(response, { deep: true })));
    },
    success: () => {
      dispatch(publishBuildResponse());
    },
  });
};
var responseError2 = (response) => ({
  type: RESPONSE_ERROR,
  error: response.error || null,
});
var publishBuildRequest = () => ({
  type: PUBLISH_BUILD_REQUEST,
});
var publishBuildResponse = () => ({
  type: PUBLISH_BUILD_RESPONSE,
});

// src/actions/campaign_types.jsx
var FETCH_CAMPAIGN_TYPES_REQUEST = 'FETCH_CAMPAIGN_TYPES_REQUEST';
var FETCH_CAMPAIGN_TYPES_SUCCESS = 'FETCH_CAMPAIGN_TYPES_SUCCESS';
var FETCH_CAMPAIGN_TYPE_DETAIL_REQUEST = 'FETCH_CAMPAIGN_TYPE_DETAIL_REQUEST';
var FETCH_CAMPAIGN_TYPE_DETAIL_SUCCESS = 'FETCH_CAMPAIGN_TYPE_DETAIL_SUCCESS';
var FETCH_CAMPAIGN_TYPE_DETAILS_REQUEST = 'FETCH_CAMPAIGN_TYPE_DETAILS_REQUEST';
var FETCH_CAMPAIGN_TYPE_DETAILS_SUCCESS = 'FETCH_CAMPAIGN_TYPE_DETAILS_SUCCESS';
var requestCampaignTypes = (scenarioId) => ({
  type: FETCH_CAMPAIGN_TYPES_REQUEST,
  scenarioId,
});
var receiveCampaignTypes = (scenarioId, json) => ({
  type: FETCH_CAMPAIGN_TYPES_SUCCESS,
  scenarioId,
  campaignTypes: json,
});
var fetchCampaignTypes = (scenarioId) => (dispatch) => {
  dispatch(requestCampaignTypes(scenarioId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/campaign_types`,
    dataType: 'json',
    success: (response) => {
      dispatch(
        receiveCampaignTypes(
          scenarioId,
          response.campaign_types.map((ct) => camelcaseKeys(ct, { deep: true }))
        )
      );
    },
  });
};
var requestCampaignTypeDetail = (scenarioId) => ({
  type: FETCH_CAMPAIGN_TYPE_DETAIL_REQUEST,
  scenarioId,
});
var receiveCampaignTypeDetail = (scenarioId, json) => ({
  type: FETCH_CAMPAIGN_TYPE_DETAIL_SUCCESS,
  scenarioId,
  campaignTypeDetail: json,
});
var fetchCampaignTypeDetail = (scenarioId, campaignTypeId) => (dispatch) => {
  dispatch(requestCampaignTypeDetail(scenarioId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/campaign_types/${campaignTypeId}`,
    dataType: 'json',
    success: (response) => {
      dispatch(
        receiveCampaignTypeDetail(
          scenarioId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};
var requestCampaignTypeDetails = (scenarioId) => ({
  type: FETCH_CAMPAIGN_TYPE_DETAILS_REQUEST,
  scenarioId,
});
var receiveCampaignTypeDetails = (scenarioId, json) => ({
  type: FETCH_CAMPAIGN_TYPE_DETAILS_SUCCESS,
  scenarioId,
  campaignTypeDetails: json,
});
var fetchCampaignTypeDetails = (scenarioId) => (dispatch) => {
  dispatch(requestCampaignTypeDetails(scenarioId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/campaign_types/details`,
    dataType: 'json',
    success: (response) => {
      dispatch(
        receiveCampaignTypeDetails(
          scenarioId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};

// src/actions/channel_settings.jsx
var ENABLE_DISABLE_CHANNEL_SETTINGS_REQUEST =
  'ENABLE_DISABLE_CHANNEL_SETTINGS_REQUEST';
var ENABLE_DISABLE_CHANNEL_SETTINGS_RESPONSE =
  'ENABLE_DISABLE_CHANNEL_SETTINGS_RESPONSE';
var enableDisableChannelSettingsRequest = (websiteId, channel, enable) => ({
  type: ENABLE_DISABLE_CHANNEL_SETTINGS_REQUEST,
  websiteId,
  channel,
  enable,
});
var enableDisableChannelSettingsReponse = (
  websiteId,
  channel,
  enable,
  response
) => ({
  type: ENABLE_DISABLE_CHANNEL_SETTINGS_RESPONSE,
  websiteId,
  channel,
  enable,
  ...response,
});
var enableDisableChannelSettings =
  (websiteId, channel, enable) => async (dispatch) => {
    dispatch(enableDisableChannelSettingsRequest(websiteId, channel, enable));
    var response = await $.ajax({
      method: 'POST',
      url: `/ad_champion/websites/${websiteId}/channel_settings/enable_disable_channel?channel=${channel}&enable_channel=${enable}`,
      dataType: 'json',
    });
    response = camelcaseKeys(response, { deep: true });
    dispatch(
      enableDisableChannelSettingsReponse(websiteId, channel, enable, response)
    );
    return response;
  };

// src/actions/currencies.jsx
var FETCH_CURRENCIES_REQUEST = 'FETCH_CURRENCIES_REQUEST';
var FETCH_CURRENCIES_SUCCESS = 'FETCH_CURRENCIES_SUCCESS';
var FETCH_CURRENCIES_ERROR = 'FETCH_CURRENCIES_ERROR';
var fetchCurrenciesRequest = () => ({
  type: FETCH_CURRENCIES_REQUEST,
});
var receiveCurrencies = (currencies) => ({
  type: FETCH_CURRENCIES_SUCCESS,
  currencies,
});
var receiveCurrenciesError = () => ({
  type: FETCH_CURRENCIES_ERROR,
  errorMessage: 'An error occurred while fetching the currencies list.',
});
var requestCurrencies = () => (dispatch) => {
  dispatch(fetchCurrenciesRequest());
  return $.ajax({
    method: 'GET',
    url: '/currencies',
    dataType: 'json',
    success: (response) => {
      dispatch(receiveCurrencies(response));
    },
    error: (response) => {
      dispatch(receiveCurrenciesError());
    },
  });
};

// src/actions/date_ranges.jsx
var SET_DATE_RANGE = 'SET_DATE_RANGE';
var setDateRangeAction = (keyName, dateRange) => ({
  type: SET_DATE_RANGE,
  keyName,
  dateRange,
});
var setDateRange = (keyName, dateRange) => async (dispatch) => {
  dispatch(setDateRangeAction(keyName, dateRange));
};

// src/actions/demo_websites.jsx
var import_snakecase_keys12 = __toESM(require_snakecase_keys());
var CREATE_DEMO_WEBSITE_REQUEST = 'CREATE_DEMO_WEBSITE_REQUEST';
var CREATE_DEMO_WEBSITE_RESPONSE = 'CREATE_DEMO_WEBSITE_RESPONSE';
var createDemoWebsiteRequest = (accountId) => ({
  type: CREATE_DEMO_WEBSITE_REQUEST,
  accountId,
});
var createDemoWebsiteResponse = (accountId, response) => ({
  type: CREATE_DEMO_WEBSITE_RESPONSE,
  accountId,
  ...response,
});
var createDemoWebsite = (accountId) => async (dispatch) => {
  dispatch(createDemoWebsiteRequest(accountId));
  var response = await $.ajax({
    method: 'POST',
    url: `/ad_champion/demo_websites`,
    dataType: 'json',
    data: (0, import_snakecase_keys12.default)({ accountId }),
  });
  const camelCaseResponse = camelcaseKeys(response);
  dispatch(createDemoWebsiteResponse(accountId, camelCaseResponse));
  return camelCaseResponse;
};

// src/actions/feed_app/api.jsx
var import_snakecase_keys13 = __toESM(require_snakecase_keys());

// src/util/sleep.jsx
var sleep = async (ms) => {
  try {
    await new Promise((resolve) => setTimeout(resolve, ms));
  } catch (ex) {}
};
var sleep_default = sleep;

// src/actions/feed_app/api.jsx
var LIST_FEEDS_REQUEST = 'LIST_FEEDS_REQUEST';
var LIST_FEEDS_RESPONSE = 'LIST_FEEDS_RESPONSE';
var GET_FEED_FIELDS_REQUEST = 'GET_FEED_FIELDS_REQUEST';
var GET_FEED_FIELDS_RESPONSE = 'GET_FEED_FIELDS_RESPONSE';
var GET_FEED_REQUEST = 'GET_FEED_REQUEST';
var GET_FEED_RESPONSE = 'GET_FEED_RESPONSE';
var SAVE_FEED_REQUEST = 'SAVE_FEED_REQUEST';
var SAVE_FEED_RESPONSE = 'SAVE_FEED_RESPONSE';
var CLAIM_FEED_REQUEST = 'CLAIM_FEED_REQUEST';
var CLAIM_FEED_RESPONSE = 'CLAIM_FEED_RESPONSE';
var TEST_FEED_ENQUEUE_REQUEST = 'TEST_FEED_REQUEST';
var TEST_FEED_ENQUEUE_RESPONSE = 'TEST_FEED_RESPONSE';
var TEST_FEED_STATUS_REQUEST = 'TEST_FEED_STATUS_REQUEST';
var TEST_FEED_STATUS_RESPONSE = 'TEST_FEED_STATUS_RESPONSE';
var SET_FEED_BILLING_REQUEST = 'SET_FEED_BILLING_REQUEST';
var SET_FEED_BILLING_RESPONSE = 'SET_FEED_BILLING_RESPONSE';
var CREATE_CUSTOM_FEED_REQUEST = 'CREATE_CUSTOM_FEED_REQUEST';
var CREATE_CUSTOM_FEED_RESPONSE = 'CREATE_CUSTOM_FEED_RESPONSE';
var UPDATE_CUSTOM_FEED_REQUEST = 'UPDATE_CUSTOM_FEED_REQUEST';
var UPDATE_CUSTOM_FEED_RESPONSE = 'UPDATE_CUSTOM_FEED_RESPONSE';
var FEED_STATUS_REQUEST = 'FEED_STATUS_REQUEST';
var FEED_STATUS_RESPONSE = 'FEED_STATUS_RESPONSE';
var listFeedsRequest = () => ({
  type: LIST_FEEDS_REQUEST,
});
var listFeedsResponse = (feeds) => ({
  type: LIST_FEEDS_RESPONSE,
  feeds,
});
var listFeeds = () => (dispatch) => {
  dispatch(listFeedsRequest());
  return $.ajax({
    method: 'GET',
    dataType: 'json',
    url: `/ad_champion/feed_app/feeds`,
    success: (response) =>
      dispatch(
        listFeedsResponse(response.map((f) => camelcaseKeys(f, { deep: true })))
      ),
  });
};
var newFeedRequest = (platform) => ({
  type: GET_FEED_FIELDS_REQUEST,
  platform,
});
var newFeedResponse = (platform, payload) => ({
  type: GET_FEED_FIELDS_RESPONSE,
  platform,
  payload,
});
var getFeedFields = (platform) => (dispatch) => {
  dispatch(newFeedRequest(platform));
  return $.ajax({
    method: 'GET',
    dataType: 'json',
    url: `/ad_champion/feed_app/feeds/${platform}/fields`,
    success: (response) =>
      dispatch(
        newFeedResponse(platform, camelcaseKeys(response, { deep: true }))
      ),
  });
};
var getFeedRequest = (id) => ({
  type: GET_FEED_REQUEST,
  id,
});
var getFeedResponse = (id, feed) => ({
  type: GET_FEED_RESPONSE,
  id,
  feed,
});
var getFeed = (id) => (dispatch) => {
  dispatch(getFeedRequest(id));
  return $.ajax({
    method: 'GET',
    dataType: 'json',
    url: `/ad_champion/feed_app/feeds/${id}`,
    success: (response) => {
      dispatch(getFeedResponse(id, camelcaseKeys(response, { deep: true })));
    },
  });
};
var createFeed = (platform, channel, feed) => {
  return $.ajax({
    method: 'POST',
    dataType: 'json',
    data: (0, import_snakecase_keys13.default)(
      { ...feed, channel },
      { deep: true }
    ),
    url: `/ad_champion/feed_app/feeds/${platform}`,
  });
};
var updateFeed = (feed) => {
  return $.ajax({
    method: 'PUT',
    dataType: 'json',
    data: (0, import_snakecase_keys13.default)(feed, { deep: true }),
    url: `/ad_champion/feed_app/feeds/${feed.id}`,
  });
};
var saveFeedRequest = (platform, feed) => ({
  type: SAVE_FEED_REQUEST,
  platform,
  feed,
});
var saveFeedResponse = (platform, feed, response) => ({
  type: SAVE_FEED_RESPONSE,
  platform,
  feed,
  response,
});
var saveFeed = (platform, feed, channel) => (dispatch) => {
  dispatch(saveFeedRequest(platform, feed));
  var action = null;
  if (feed.id) {
    action = updateFeed(feed);
  } else {
    action = createFeed(platform, channel, feed);
  }
  return action.then((response) => {
    dispatch(
      saveFeedResponse(platform, feed, camelcaseKeys(response, { deep: true }))
    );
  });
};
var testFeedEnqueueRequest = (platform, data) => ({
  type: TEST_FEED_ENQUEUE_REQUEST,
  platform,
  data,
});
var testFeedEnqueueResponse = (platform, data, response) => ({
  type: TEST_FEED_ENQUEUE_RESPONSE,
  platform,
  data,
  response,
});
var testFeedEnqueue = (platform, data) => (dispatch) => {
  dispatch(testFeedEnqueueRequest(platform, data));
  return $.ajax({
    method: 'POST',
    dataType: 'json',
    data: (0, import_snakecase_keys13.default)(data, { deep: true }),
    url: `/ad_champion/feed_app/test_connection/${platform}/enqueue`,
    success: (response) =>
      dispatch(
        testFeedEnqueueResponse(
          platform,
          data,
          camelcaseKeys(response, { deep: true })
        )
      ),
  });
};
var testFeedStatusRequest = (token2) => ({
  type: TEST_FEED_STATUS_REQUEST,
  token: token2,
});
var testFeedStatusResponse = (token2, status2) => ({
  type: TEST_FEED_STATUS_RESPONSE,
  token: token2,
  status: status2,
});
var testFeedStatus = (token2) => (dispatch) => {
  dispatch(testFeedStatusRequest(token2));
  return $.ajax({
    method: 'POST',
    dataType: 'json',
    data: { connection_token: token2 },
    url: '/ad_champion/feed_app/test_connection/status',
    success: (response) =>
      dispatch(
        testFeedStatusResponse(token2, camelcaseKeys(response, { deep: true }))
      ),
  });
};
var testFeed = (platform, data) => async (dispatch) => {
  var response = await testFeedEnqueue(platform, data)(dispatch);
  var token2 = response.connection_token;
  do {
    await sleep_default(500);
    response = await testFeedStatus(token2)(dispatch);
    var canConnect = response.can_connect;
    if (canConnect) {
      return canConnect;
    }
  } while (token2);
};
var createCustomFeedRequest = (feedUrl, websiteId, channel) => ({
  type: CREATE_CUSTOM_FEED_REQUEST,
  feedUrl,
  websiteId,
  channel,
});
var createCustomFeedResponse = (feedUrl, websiteId, channel, response) => ({
  type: CREATE_CUSTOM_FEED_RESPONSE,
  feedUrl,
  websiteId,
  channel,
  response,
});
var createCustomFeed = (feedUrl, websiteId, channel) => async (dispatch) => {
  dispatch(createCustomFeedRequest(feedUrl, websiteId, channel));
  var response = await $.ajax({
    method: 'POST',
    datatType: 'json',
    data: (0, import_snakecase_keys13.default)(
      { feedUrl, websiteId, channel },
      { deep: true }
    ),
    url: `/ad_champion/feed_app/feeds/create_custom_feed`,
  });
  var camelCaseResponse = camelcaseKeys(response, { deep: true });
  dispatch(createCustomFeedResponse(feedUrl, websiteId, channel, response));
  return camelCaseResponse;
};
var updateCustomFeedRequest = (inventoryId, feedUrl) => ({
  type: UPDATE_CUSTOM_FEED_REQUEST,
  inventoryId,
  feedUrl,
});
var updateCustomFeedResponse = (inventoryId, feedUrl, response) => ({
  type: UPDATE_CUSTOM_FEED_RESPONSE,
  inventoryId,
  feedUrl,
  response,
});
var updateCustomFeed = (inventoryId, feedUrl) => async (dispatch) => {
  dispatch(updateCustomFeedRequest(inventoryId, feedUrl));
  var response = await $.ajax({
    method: 'PUT',
    datatType: 'json',
    data: (0, import_snakecase_keys13.default)(
      { inventoryId, feedUrl },
      { deep: true }
    ),
    url: `/ad_champion/feed_app/feeds/update_custom_feed`,
  });
  var camelCaseResponse = camelcaseKeys(response, { deep: true });
  dispatch(updateCustomFeedResponse(inventoryId, feedUrl, response));
  return camelCaseResponse;
};
var feedStatusRequest = (feedChampionFeedId) => ({
  type: FEED_STATUS_REQUEST,
  feedChampionFeedId,
});
var feedStatusResponse = (feedChampionFeedId, response) => ({
  type: FEED_STATUS_RESPONSE,
  feedChampionFeedId,
  response,
});
var fetchFeedStatus = (feedChampionFeedId) => async (dispatch) => {
  dispatch(feedStatusRequest(feedChampionFeedId));
  var response = await $.ajax({
    method: 'GET',
    datatType: 'json',
    data: (0, import_snakecase_keys13.default)(
      { id: feedChampionFeedId },
      { deep: true }
    ),
    url: `/ad_champion/feed_app/feeds/feed_status`,
  });
  var camelCaseResponse = camelcaseKeys(response, { deep: true });
  dispatch(feedStatusResponse(feedChampionFeedId, response));
  return camelCaseResponse;
};

// src/actions/feed_ops/feedbacks.jsx
var import_snakecase_keys14 = __toESM(require_snakecase_keys());
var ADD_FEEDOPS_FEEDBACK_REQUEST = 'ADD_FEEDOPS_FEEDBACK_REQUEST';
var ADD_FEEDOPS_FEEDBACK_RESPONSE = 'ADD_FEEDOPS_FEEDBACK_RESPONSE';
var SHOW_FEEDOPS_FEEDBACK_MODAL = 'SHOW_FEEDOPS_FEEDBACK_MODAL';
var HIDE_FEEDOPS_FEEDBACK_MODAL = 'HIDE_FEEDOPS_FEEDBACK_MODAL';
var addFeedOpsFeedbackRequest = (
  websiteId,
  feedbackFor,
  feedbackForId,
  feedback
) => ({
  type: ADD_FEEDOPS_FEEDBACK_REQUEST,
  websiteId,
  feedbackFor,
  feedbackForId,
  feedback,
});
var addFeedOpsFeedbackResponse = (
  websiteId,
  feedbackFor,
  feedbackForId,
  feedback,
  response
) => ({
  type: ADD_FEEDOPS_FEEDBACK_RESPONSE,
  websiteId,
  feedbackFor,
  feedbackForId,
  feedback,
  response,
});
var addFeedOpsFeedback =
  (websiteId, feedbackFor, feedbackForId, feedback) => async (dispatch) => {
    dispatch(
      addFeedOpsFeedbackRequest(websiteId, feedbackFor, feedbackForId, feedback)
    );
    var response = await $.ajax({
      method: 'POST',
      url: `/feed_ops/feedbacks/add_feedback`,
      data: (0, import_snakecase_keys14.default)(
        { websiteId, feedbackFor, feedbackForId, feedback },
        { deep: true }
      ),
      dataType: 'json',
    });
    dispatch(
      addFeedOpsFeedbackResponse(
        websiteId,
        feedbackFor,
        feedbackForId,
        feedback,
        response
      )
    );
    return response;
  };
var showFeedOpsFeedbackModal =
  (feedbackFor, feedbackForId) => async (dispatch) => {
    dispatch({
      type: SHOW_FEEDOPS_FEEDBACK_MODAL,
      isOpen: true,
      feedbackFor,
      feedbackForId,
    });
  };
var hideFeedOpsFeedbackModal = () => async (dispatch) => {
  dispatch({ type: HIDE_FEEDOPS_FEEDBACK_MODAL, isOpen: false });
};

// src/actions/feedops_testimonials.jsx
var FETCH_FEEDOPS_TESTIMONIALS_REQUEST = 'FETCH_FEEDOPS_TESTIMONIALS_REQUEST';
var FETCH_FEEDOPS_TESTIMONIALS_RESPONSE = 'FETCH_FEEDOPS_TESTIMONIALS_RESPONSE';
var fetchFeedopsTestimonialsRequest = () => ({
  type: FETCH_FEEDOPS_TESTIMONIALS_REQUEST,
});
var fetchFeedopsTestimonialsResponse = (response) => ({
  type: FETCH_FEEDOPS_TESTIMONIALS_RESPONSE,
  ...response,
});
var fetchFeedopsTestimonials = () => async (dispatch) => {
  dispatch(fetchFeedopsTestimonialsRequest());
  var response = await $.ajax({
    method: 'GET',
    url: `/feedops_testimonials`,
    dataType: 'json',
  });
  var camelResponse = camelcaseKeys(response, { deep: true });
  dispatch(fetchFeedopsTestimonialsResponse(camelResponse));
  return camelResponse.feedopsTestimonials;
};

// src/actions/feeds.jsx
var import_snakecase_keys15 = __toESM(require_snakecase_keys());
var CREATE_FEED_REQUEST = 'CREATE_FEED_REQUEST';
var CREATE_FEED_RESPONSE = 'CREATE_FEED_RESPONSE';
var UPDATE_FEED_REQUEST = 'UPDATE_FEED_REQUEST';
var UPDATE_FEED_RESPONSE = 'UPDATE_FEED_RESPONSE';
var GENERATE_FEED_REQUEST = 'GENERATE_FEED_REQUEST';
var GENERATE_FEED_RESPONSE = 'GENERATE_FEED_RESPONSE';
var FETCH_FEED_DETAIL_REQUEST = 'FETCH_FEED_DETAIL_REQUEST';
var FETCH_FEED_DETAIL_RESPONSE = 'FETCH_FEED_DETAIL_RESPONSE';
var FETCH_FEED_DETAILS_BY_ID_REQUEST = 'FETCH_FEED_DETAILS_BY_ID_REQUEST';
var FETCH_FEED_DETAILS_BY_ID_RESPONSE = 'FETCH_FEED_DETAILS_BY_ID_RESPONSE';
var fetchFeedDetailRequest = (feedId) => ({
  type: FETCH_FEED_DETAIL_REQUEST,
  feedId,
});
var fetchFeedDetailResponse = (feedId, feedDetail) => ({
  type: FETCH_FEED_DETAIL_RESPONSE,
  feedId,
  feedDetail,
});
var feedGenerationRequest = () => ({
  type: GENERATE_FEED_REQUEST,
});
var feedGenerationResponse = (response) => ({
  type: GENERATE_FEED_RESPONSE,
  response,
});
var triggerFeedGenerationById = (feedId) => (dispatch) => {
  dispatch(feedGenerationRequest());
  return $.ajax({
    url: `/ad_champion/feeds/${feedId}/trigger_generation`,
    method: 'POST',
    dataType: 'json',
    success: (response) => {
      dispatch(feedGenerationResponse(camelcaseKeys(response)));
    },
  });
};
var fetchFeedDetail =
  (feedId, refresh = false) =>
  (dispatch) => {
    if (feedId <= 0) {
      return;
    }
    if (!refresh) {
      dispatch(fetchFeedDetailRequest(feedId));
    }
    return $.ajax({
      method: 'GET',
      url: `/ad_champion/feeds/${feedId}`,
      dataType: 'json',
      success: (response) => {
        return dispatch(
          fetchFeedDetailResponse(feedId, camelcaseKeys(response))
        );
      },
    });
  };
var createFeedRequest = () => ({
  type: CREATE_FEED_REQUEST,
});
var createFeedResponse = (response) => ({
  type: CREATE_FEED_RESPONSE,
  response,
});
var createFeed2 = (payload) => (dispatch) => {
  dispatch(createFeedRequest());
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/feeds`,
    dataType: 'json',
    data: (0, import_snakecase_keys15.default)(payload),
    success: (response) => {
      return dispatch(createFeedResponse(camelcaseKeys(response)));
    },
  });
};
var updateFeedRequest = (id) => ({
  type: UPDATE_FEED_REQUEST,
  id,
});
var updateFeedResponse = (id) => ({
  type: UPDATE_FEED_RESPONSE,
  id,
});
var updateFeed2 = (id, payload) => (dispatch) => {
  dispatch(updateFeedRequest(id));
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/feeds/${id}`,
    dataType: 'json',
    data: (0, import_snakecase_keys15.default)(payload),
    success: () => {
      return dispatch(updateFeedResponse(id));
    },
  });
};
var fetchFeedDetailsByIdRequest = (feedIds) => ({
  type: FETCH_FEED_DETAILS_BY_ID_REQUEST,
  feedIds,
});
var fetchFeedDetailsByIdResponse = (feedIds, response) => ({
  type: FETCH_FEED_DETAILS_BY_ID_RESPONSE,
  feedIds,
  ...response,
});
var fetchFeedDetailsById = (feedIds) => async (dispatch) => {
  dispatch(fetchFeedDetailsByIdRequest(feedIds));
  var response = await $.ajax(`/ad_champion/feeds?ids=${feedIds.join(',')}`);
  dispatch(
    fetchFeedDetailsByIdResponse(
      feedIds,
      camelcaseKeys(response, { deep: true })
    )
  );
};

// src/actions/geo_targets.jsx
var FETCH_COUNTRY_GEO_TARGET_REQUEST = 'FETCH_COUNTRY_GEO_TARGET_REQUEST';
var FETCH_COUNTRY_GEO_TARGET_RESPONSE = 'FETCH_COUNTRY_GEO_TARGET_RESPONSE';
var fetchCountryGeoTargetsRequest = () => ({
  type: FETCH_COUNTRY_GEO_TARGET_REQUEST,
});
var fetchCountryGeoTargetsResponse = (response) => ({
  type: FETCH_COUNTRY_GEO_TARGET_RESPONSE,
  ...response,
});
var fetchCountryGeoTargets = () => async (dispatch) => {
  dispatch(fetchCountryGeoTargetsRequest());
  var response = await $.ajax({
    method: 'GET',
    url: `/geo_targets/countries`,
    dataType: 'json',
  });
  var camelResponse = camelcaseKeys(response, { deep: true });
  dispatch(fetchCountryGeoTargetsResponse(camelResponse));
  return camelResponse.countries;
};

// src/actions/google/_performance/budget_categories.jsx
var import_snakecase_keys16 = __toESM(require_snakecase_keys());
var FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_DAY_REQUEST =
  'FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_DAY_REQUEST';
var FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_DAY_SUCCESS =
  'FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_DAY_SUCCESS';
var FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_CAMPAIGN_TYPE_REQUEST =
  'FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_CAMPAIGN_TYPE_REQUEST';
var FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_CAMPAIGN_TYPE_SUCCESS =
  'FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_CAMPAIGN_TYPE_SUCCESS';
var fetchBudgetCategoryPerformanceByDayRequest = (
  budgetCategoryId,
  dateRange
) => ({
  type: FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_DAY_REQUEST,
  budgetCategoryId,
  dateRange,
});
var fetchBudgetCategoryPerformanceByDaySuccess = (
  budgetCategoryId,
  dateRange,
  dailyPerformance
) => ({
  type: FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_DAY_SUCCESS,
  budgetCategoryId,
  dateRange,
  ...dailyPerformance,
});
var fetchBudgetCategoryPerformanceByDay =
  (budgetCategoryId, dateRange) => async (dispatch) => {
    dispatch(
      fetchBudgetCategoryPerformanceByDayRequest(budgetCategoryId, dateRange)
    );
    var status2 = 202;
    var response;
    var statusCode2 = {
      200: () => {
        status2 = 200;
      },
      202: () => {
        status2 = 202;
      },
    };
    while (status2 === 202) {
      response = await $.ajax({
        method: 'GET',
        url: `/ad_champion/budget_categories/${budgetCategoryId}/performance`,
        data: (0, import_snakecase_keys16.default)(dateRange, { deep: true }),
        dataType: 'json',
        statusCode: statusCode2,
      });
      if (status2 === 202) {
        await sleep_default(1e3);
      }
    }
    dispatch(
      fetchBudgetCategoryPerformanceByDaySuccess(
        budgetCategoryId,
        dateRange,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchBudgetCategoryPerformanceByCampaignTypeRequest = (
  budgetCategoryId,
  dateRange
) => ({
  type: FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_CAMPAIGN_TYPE_REQUEST,
  budgetCategoryId,
  dateRange,
});
var fetchBudgetCategoryPerformanceByCampaignTypeSuccess = (
  budgetCategoryId,
  dateRange,
  performanceReport
) => ({
  type: FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_CAMPAIGN_TYPE_SUCCESS,
  budgetCategoryId,
  dateRange,
  ...performanceReport,
});
var fetchBudgetCategoryPerformanceByCampaignType =
  (budgetCategoryId, dateRange) => async (dispatch) => {
    dispatch(
      fetchBudgetCategoryPerformanceByCampaignTypeRequest(
        budgetCategoryId,
        dateRange
      )
    );
    var status2 = 202;
    var response;
    var statusCode2 = {
      200: () => {
        status2 = 200;
      },
      202: () => {
        status2 = 202;
      },
    };
    while (status2 === 202) {
      response = await $.ajax({
        method: 'GET',
        url: `/ad_champion/budget_categories/${budgetCategoryId}/performance/show_budget_category_performance_by_campaign_type`,
        data: (0, import_snakecase_keys16.default)(dateRange, { deep: true }),
        dataType: 'json',
        statusCode: statusCode2,
      });
      if (status2 === 202) {
        await sleep_default(1e3);
      }
    }
    dispatch(
      fetchBudgetCategoryPerformanceByCampaignTypeSuccess(
        budgetCategoryId,
        dateRange,
        camelcaseKeys(response, { deep: true })
      )
    );
  };

// src/actions/google/adwords.jsx
var SELECT_ADWORDS_ACCOUNT_REQUEST = 'SELECT_ADWORDS_ACCOUNT_REQUEST';
var SELECT_ADWORDS_ACCOUNT_RESPONSE = 'SELECT_ADWORDS_ACCOUNT_RESPONSE';
var selectAdwordsAccountRequest = (
  websiteId,
  { adwordsAccountId, createAccount: createAccount2 }
) => ({
  type: SELECT_ADWORDS_ACCOUNT_REQUEST,
  websiteId,
  adwordsAccountId,
  createAccount: createAccount2,
});
var selectAdwordsAccountResponse = (
  websiteId,
  { adwordsAccountId, createAccount: createAccount2 },
  response
) => ({
  type: SELECT_ADWORDS_ACCOUNT_RESPONSE,
  websiteId,
  adwordsAccountId,
  createAccount: createAccount2,
  response,
});
var selectAdwordsAccount =
  (websiteId, { adwordsAccountId, createAccount: createAccount2 }) =>
  async (dispatch) => {
    dispatch(
      selectAdwordsAccountRequest(websiteId, {
        adwordsAccountId,
        createAccount: createAccount2,
      })
    );
    var response = await $.ajax({
      method: 'POST',
      url: '/ad_champion/google/adwords/accounts/select',
      data: {
        website_id: websiteId,
        adwords_account_id: adwordsAccountId,
        create_account: createAccount2,
      },
    });
    dispatch(
      selectAdwordsAccountResponse(
        websiteId,
        { adwordsAccountId, createAccount: createAccount2 },
        camelcaseKeys(response, { deep: true })
      )
    );
  };

// src/actions/google/analytics.jsx
var LIST_ANALYTICS_ACCOUNTS_REQUEST = 'LIST_ANALYTICS_ACCOUNTS_REQUEST';
var LIST_ANALYTICS_ACCOUNTS_RESPONSE = 'LIST_ANALYTICS_ACCOUNTS_RESPONSE';
var CREATE_ANALYTICS_ACCOUNT_REQUEST = 'CREATE_ANALYTICS_ACCOUNT_REQUEST';
var CREATE_ANALYTICS_ACCOUNT_RESPONSE = 'CREATE_ANALYTICS_ACCOUNT_RESPONSE';
var FETCH_ANALYTICS_ACCESS_TOKEN_REQUEST =
  'FETCH_ANALYTICS_ACCESS_TOKEN_REQUEST';
var FETCH_ANALYTICS_ACCESS_TOKEN_SUCCESS =
  'FETCH_ANALYTICS_ACCESS_TOKEN_SUCCESS';
var FETCH_ANALYTICS_REPORT_REQUEST = 'FETCH_ANALYTICS_REPORT_REQUEST';
var FETCH_ANALYTICS_REPORT_SUCCESS = 'FETCH_ANALYTICS_REPORT_SUCCESS';
var FETCH_ANALYTICS_REPORT_ERROR = 'FETCH_ANALYTICS_REPORT_ERROR';
var SET_ANALYTICS_API_READY = 'SET_ANALYTICS_API_READY';
var FETCH_ANALYTICS_VIEWS_REQUEST = 'FETCH_ANALYTICS_VIEWS_REQUEST';
var FETCH_ANALYTICS_VIEWS_SUCCESS = 'FETCH_ANALYTICS_VIEWS_SUCCESS';
var FETCH_ANALYTICS_VIEWS_ERROR = 'FETCH_ANALYTICS_VIEWS_ERROR';
var SET_SELECTED_VIEW_ACTION = 'SET_SELECTED_VIEW_ACTION';
var FETCH_ANALYTICS_FEEDOPS_REPORT_REQUEST =
  'FETCH_ANALYTICS_FEEDOPS_REPORT_REQUEST';
var FETCH_ANALYTICS_FEEDOPS_REPORT_SUCCESS =
  'FETCH_ANALYTICS_FEEDOPS_REPORT_SUCCESS';
var FETCH_ANALYTICS_FEEDOPS_REPORT_ERROR =
  'FETCH_ANALYTICS_FEEDOPS_REPORT_ERROR';
var listAnalyticsAccountsRequest = () => ({
  type: LIST_ANALYTICS_ACCOUNTS_REQUEST,
});
var listAnalyticsAccountsResponse = (accounts) => ({
  type: LIST_ANALYTICS_ACCOUNTS_RESPONSE,
  accounts,
});
var listAnalyticsAccounts = () => (dispatch, getState) => {
  const accessToken = getAccessToken(getState);
  if (!accessToken) {
    return Promise.resolve();
  }
  dispatch(listAnalyticsAccountsRequest());
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/google/analytics/accounts?access_token=${accessToken}`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        listAnalyticsAccountsResponse(
          response.accounts.map((a) => camelcaseKeys(a, { deep: true }))
        )
      );
    },
  });
};
var createAnalyticsAccountRequest = (websiteId) => ({
  type: CREATE_ANALYTICS_ACCOUNT_REQUEST,
  websiteId,
});
var createAnalyticsAccountResponse = (websiteId, response) => ({
  type: CREATE_ANALYTICS_ACCOUNT_RESPONSE,
  websiteId,
  response,
});
var createAnalyticsAccount = (websiteId) => (dispatch) => {
  dispatch(createAnalyticsAccountRequest(websiteId));
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/google/analytics/accounts/create_account`,
    data: {
      website_id: websiteId,
    },
    dataType: 'json',
    success: (response) => {
      return dispatch(createAnalyticsAccountResponse(websiteId, response));
    },
  });
};
var fetchAnalyticsAccessTokenRequest = (websiteId) => ({
  type: FETCH_ANALYTICS_ACCESS_TOKEN_REQUEST,
  websiteId,
});
var fetchAnalyticsAccessTokenSuccess = (websiteId, response) => ({
  type: FETCH_ANALYTICS_ACCESS_TOKEN_SUCCESS,
  websiteId,
  accessToken: response.accessToken,
});
var fetchAnalyticsAccessToken = (websiteId) => async (dispatch) => {
  dispatch(fetchAnalyticsAccessTokenRequest(websiteId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/google/analytics/general/fetch_report_access_token`,
    data: {
      website_id: websiteId,
    },
    dataType: 'json',
    success: (response) => {
      return dispatch(
        fetchAnalyticsAccessTokenSuccess(
          websiteId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};
var setAnalyticsApiReadyAction = () => ({
  type: SET_ANALYTICS_API_READY,
  analyticsApiReady: true,
});
var setAnalyticsApiReady = () => (dispatch) => {
  dispatch(setAnalyticsApiReadyAction());
};
var fetchAnalyticsReportRequest = () => ({
  type: FETCH_ANALYTICS_REPORT_REQUEST,
});
var fetchAnalyticsReportSuccess = (report) => ({
  type: FETCH_ANALYTICS_REPORT_SUCCESS,
  headers: report.columnHeaders,
  totals: report.totalsForAllResults,
  rows: report.rows,
});
var fetchAnalyticsReportError = (response) => ({
  type: FETCH_ANALYTICS_REPORT_ERROR,
  error: response.error.status,
});
var analyticsQuery = (accessToken, query) => {
  return new Promise((resolve, reject2) => {
    global.gapi.analytics.auth.authorize({
      serverAuth: {
        access_token: accessToken,
      },
    });
    var data = new global.gapi.analytics.report.Data({ query });
    data
      .once('success', (response) => {
        resolve(response);
      })
      .once('error', (response) => {
        reject2(response);
      })
      .execute();
  });
};
var getDateString = (date) =>
  `${date.getFullYear()}-${('0' + (date.getMonth() + 1)).slice(-2)}-${(
    '0' + date.getDate()
  ).slice(-2)}`;
var fetchAnalyticsReport =
  (accessToken, analyticsViewId, startDate, endDate) => async (dispatch) => {
    dispatch(fetchAnalyticsReportRequest());
    const query = {
      'ids': `ga:${analyticsViewId}`,
      'start-date': getDateString(startDate),
      'end-date': getDateString(endDate),
      'metrics': 'ga:sessions,ga:transactions,ga:transactionRevenue',
      'dimensions': 'ga:channelGrouping',
    };
    try {
      var response = await analyticsQuery(accessToken, query);
      dispatch(fetchAnalyticsReportSuccess(response));
    } catch (error) {
      dispatch(fetchAnalyticsReportError(error));
    }
  };
var fetchAnalyticsViewsRequest = () => ({
  type: FETCH_ANALYTICS_VIEWS_REQUEST,
});
var fetchAnalyticsViewsSuccess = (response) => ({
  type: FETCH_ANALYTICS_VIEWS_SUCCESS,
  views: response.views,
});
var fetchAnalyticsViewsError = (response) => ({
  type: FETCH_ANALYTICS_VIEWS_ERROR,
  error: response.error,
});
var fetchAnalyticsViews = (websiteId) => async (dispatch) => {
  dispatch(fetchAnalyticsViewsRequest());
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/google/analytics/general/fetch_analytics_views`,
    data: {
      website_id: websiteId,
    },
    dataType: 'json',
    success: (response) => {
      return dispatch(
        fetchAnalyticsViewsSuccess(camelcaseKeys(response, { deep: true }))
      );
    },
    error: (response) => {
      return dispatch(
        fetchAnalyticsViewsError(camelcaseKeys(response, { deep: true }))
      );
    },
  });
};
var setSelectedViewAction = (selectedView) => ({
  type: SET_SELECTED_VIEW_ACTION,
  selectedView,
});
var setSelectedView = (selectedView) => (dispatch) => {
  dispatch(setSelectedViewAction(selectedView));
};
var fetchAnalyticsFeedopsReportRequest = (
  utmSource,
  utmMedium,
  startDate,
  endDate
) => ({
  type: FETCH_ANALYTICS_FEEDOPS_REPORT_REQUEST,
  utmSource,
  utmMedium,
  startDate,
  endDate,
});
var fetchAnalyticsFeedopsReportSuccess = (utmSource, utmMedium, report) => ({
  type: FETCH_ANALYTICS_FEEDOPS_REPORT_SUCCESS,
  utmSource,
  utmMedium,
  headers: report.columnHeaders,
  rows: report.rows,
});
var fetchAnalyticsFeedopsReportError = (response) => ({
  type: FETCH_ANALYTICS_FEEDOPS_REPORT_ERROR,
  error: response.error.status,
});
var fetchAnalyticsFeedopsReport =
  (accessToken, analyticsViewId, startDate, endDate, utmSource, utmMedium) =>
  async (dispatch) => {
    dispatch(
      fetchAnalyticsFeedopsReportRequest(
        utmSource,
        utmMedium,
        startDate,
        endDate
      )
    );
    const filters = `ga:source==${utmSource},ga:medium==${utmMedium}`;
    const query = {
      'ids': `ga:${analyticsViewId}`,
      'start-date': getDateString(startDate),
      'end-date': getDateString(endDate),
      'metrics': 'ga:sessions',
      'dimensions': 'ga:date',
    };
    try {
      var totalResponse = {};
      var segmentResponse = await analyticsQuery(accessToken, {
        ...query,
        filters,
      });
      totalResponse = await analyticsQuery(accessToken, query);
      const response = {
        ...totalResponse,
        rows: [
          ...segmentResponse.rows.map((row, i) => [
            ...row,
            totalResponse.rows[i][1],
          ]),
        ],
      };
      dispatch(
        fetchAnalyticsFeedopsReportSuccess(utmSource, utmMedium, response)
      );
    } catch (error) {
      dispatch(fetchAnalyticsFeedopsReportError(error));
      throw error;
    }
  };

// src/actions/google/analytics_property.jsx
var import_snakecase_keys17 = __toESM(require_snakecase_keys());
var SELECT_ANALYTICS_PROPERTY_REQUEST = 'SELECT_ANALYTICS_PROPERTY_REQUEST';
var SELECT_ANALYTICS_PROPERTY_RESPONSE = 'SELECT_ANALYTICS_PROPERTY_RESPONSE';
var SELECT_ANALYTICS_PROPERTY_ERROR = 'SELECT_ANALYTICS_PROPERTY_ERROR';
var CREATE_ANALYTICS_PROPERTY_REQUEST = 'CREATE_ANALYTICS_PROPERTY_REQUEST';
var CREATE_ANALYTICS_PROPERTY_RESPONSE = 'CREATE_ANALYTICS_PROPERTY_RESPONSE';
var selectAnalyticsPropertyRequest = (websiteId, formValues) => ({
  type: SELECT_ANALYTICS_PROPERTY_REQUEST,
  websiteId,
  ...formValues,
});
var selectAnalyticsPropertyResponse = (websiteId, formValues, response) => ({
  type: SELECT_ANALYTICS_PROPERTY_RESPONSE,
  websiteId,
  ...formValues,
});
var selectAnalyticsPropertyError = (error) => ({
  type: SELECT_ANALYTICS_PROPERTY_ERROR,
  error,
});
var selectAnalyticsPropertyAjax = (
  websiteId,
  formValues,
  accessToken,
  email,
  refreshToken
) => {
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/google/analytics/accounts/select_property`,
    data: {
      ...(0, import_snakecase_keys17.default)({
        ...formValues,
        accessToken,
        websiteId,
        refreshToken,
        email,
      }),
    },
    dataType: 'json',
  });
};
var selectAnalyticsProperty =
  (websiteId, formValues) => async (dispatch, getState) => {
    dispatch(selectAnalyticsPropertyRequest(websiteId, formValues));
    try {
      const { refreshToken, email, accessToken } = getGoogleUser(getState);
      var response = await selectAnalyticsPropertyAjax(
        websiteId,
        formValues,
        accessToken,
        email,
        refreshToken
      );
      dispatch(
        selectAnalyticsPropertyResponse(websiteId, formValues, response)
      );
    } catch (error) {
      dispatch(selectAnalyticsPropertyError(error.responseJSON.error));
      throw error;
    }
  };
var createAnalyticsPropertyRequest = (analyticsAccountId, webPropertyName) => ({
  type: CREATE_ANALYTICS_PROPERTY_REQUEST,
  analyticsAccountId,
  webPropertyName,
});
var createAnalyticsPropertyResponse = (
  analyticsAccountId,
  webPropertyName,
  response
) => ({
  type: CREATE_ANALYTICS_PROPERTY_RESPONSE,
  analyticsAccountId,
  webPropertyName,
  response,
});
var createAnalyticsProperty =
  (analyticsAccountId, webPropertyName) => (dispatch, getState) => {
    const accessToken = getAccessToken(getState);
    dispatch(
      createAnalyticsPropertyRequest(analyticsAccountId, webPropertyName)
    );
    return $.ajax({
      method: 'POST',
      url: `/ad_champion/google/analytics/accounts/create_property`,
      data: {
        access_token: accessToken,
        account_id: analyticsAccountId,
        web_property_name: webPropertyName,
      },
      dataType: 'json',
      success: (response) => {
        return dispatch(
          createAnalyticsPropertyResponse(
            analyticsAccountId,
            webPropertyName,
            response
          )
        );
      },
    });
  };

// src/actions/google/drive_docs.jsx
var import_snakecase_keys18 = __toESM(require_snakecase_keys());
var FETCH_DRIVE_DOC_REQUEST = 'FETCH_DRIVE_DOC_REQUEST';
var FETCH_DRIVE_DOC_RESPONSE = 'FETCH_DRIVE_DOC_RESPONSE';
var fetchDriveDocRequest = (articleId) => ({
  type: FETCH_DRIVE_DOC_REQUEST,
  articleId,
});
var fetchDriveDocResponse = (articleId, response) => ({
  type: FETCH_DRIVE_DOC_RESPONSE,
  articleId,
  ...response,
});
var fetchDriveDocs = (articleId) => async (dispatch) => {
  dispatch(fetchDriveDocRequest(articleId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/google/drive/docs`,
    data: (0, import_snakecase_keys18.default)({ articleId }, { deep: true }),
    dataType: 'json',
  });
  var camelResponse = camelcaseKeys(response, { deep: true });
  dispatch(fetchDriveDocResponse(articleId, camelResponse));
  return { title: camelResponse.title, description: camelResponse.description };
};

// src/actions/google/merchant_center.jsx
var LIST_MERCHANT_CENTER_ACCOUNTS_REQUEST =
  'LIST_MERCHANT_CENTER_ACCOUNTS_REQUEST';
var LIST_MERCHANT_CENTER_ACCOUNTS_RESPONSE =
  'LIST_MERCHANT_CENTER_ACCOUNTS_RESPONSE';
var SELECT_MERCHANT_CENTER_ACCOUNT_REQUEST =
  'SELECT_MERCHANT_CENTER_ACCOUNT_REQUEST';
var SELECT_MERCHANT_CENTER_ACCOUNT_RESPONSE =
  'SELECT_MERCHANT_CENTER_ACCOUNT_RESPONSE';
var CREATE_MERCHANT_CENTER_ACCOUNT_REQUEST =
  'CREATE_MERCHANT_CENTER_ACCOUNT_REQUEST';
var CREATE_MERCHANT_CENTER_ACCOUNT_RESPONSE =
  'CREATE_MERCHANT_CENTER_ACCOUNT_RESPONSE';
var CREATE_NEW_MERCHANT_CENTER_ACCOUNT_REQUEST =
  'CREATE_NEW_MERCHANT_CENTER_ACCOUNT_REQUEST';
var CREATE_NEW_MERCHANT_CENTER_ACCOUNT_RESPONSE =
  'CREATE_NEW_MERCHANT_CENTER_ACCOUNT_RESPONSE';
var DELETE_MERCHANT_CENTER_REQUEST = 'DELETE_MERCHANT_CENTER_REQUEST';
var DELETE_MERCHANT_CENTER_RESPONSE = 'DELETE_MERCHANT_CENTER_RESPONSE';
var UPDATE_MERCHANT_CENTER_ACCOUNT_REQUEST =
  'UPDATE_MERCHANT_CENTER_ACCOUNT_REQUEST';
var UPDATE_MERCHANT_CENTER_ACCOUNT_RESPONSE =
  'UPDATE_MERCHANT_CENTER_ACCOUNT_RESPONSE';
var SEND_ADWORDS_ACCOUNT_LINK_REQUEST = 'SEND_ADWORDS_ACCOUNT_LINK_REQUEST';
var SEND_ADWORDS_ACCOUNT_LINK_RESPONSE = 'SEND_ADWORDS_ACCOUNT_LINK_RESPONSE';
var createMerchantCenterAccountRequest = (websiteId) => ({
  type: CREATE_MERCHANT_CENTER_ACCOUNT_REQUEST,
  websiteId,
});
var createMerchantCenterAccountResponse = (websiteId, response) => ({
  type: CREATE_MERCHANT_CENTER_ACCOUNT_RESPONSE,
  websiteId,
  response,
});
var createMerchantCenterAccount = (websiteId) => (dispatch) => {
  dispatch(createMerchantCenterAccountRequest(websiteId));
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/google/merchant_center/accounts`,
    data: {
      website_id: websiteId,
    },
    dataType: 'json',
    success: (response) =>
      dispatch(
        createMerchantCenterAccountResponse(
          websiteId,
          camelcaseKeys(response, { deep: true })
        )
      ),
  });
};
var deleteMerchantCenterAccountRequest = (websiteId) => ({
  type: DELETE_MERCHANT_CENTER_REQUEST,
  websiteId,
});
var deleteMerchantCenterAccountResponse = (websiteId, response) => ({
  type: DELETE_MERCHANT_CENTER_RESPONSE,
  websiteId,
  response,
});
var deleteMerchantCenterAccount = (websiteId) => (dispatch) => {
  dispatch(deleteMerchantCenterAccountRequest(websiteId));
  return $.ajax({
    url: `/ad_champion/google/merchant_center/accounts/${websiteId}`,
    method: 'DELETE',
    dataType: 'json',
    success: (response) => {
      dispatch(
        deleteMerchantCenterAccountResponse(websiteId, camelcaseKeys(response))
      );
    },
  });
};
var createNewMerchantCenterAccountRequest = (websiteId, countryCode) => ({
  type: CREATE_NEW_MERCHANT_CENTER_ACCOUNT_REQUEST,
  websiteId,
  countryCode,
});
var createNewMerchantCenterAccountResponse = (
  websiteId,
  countryCode,
  response
) => ({
  type: CREATE_NEW_MERCHANT_CENTER_ACCOUNT_RESPONSE,
  websiteId,
  countryCode,
  response,
});
var createNewMerchantCenterAccount = (websiteId, countryCode) => (dispatch) => {
  dispatch(createNewMerchantCenterAccountRequest(websiteId, countryCode));
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/google/merchant_center/accounts/create_mc_account`,
    data: {
      website_id: websiteId,
      country_of_sale: countryCode,
    },
    dataType: 'json',
    success: (response) =>
      dispatch(
        createNewMerchantCenterAccountResponse(
          websiteId,
          countryCode,
          camelcaseKeys(response, { deep: true })
        )
      ),
  });
};
var updateMerchantCenterAccountRequest = (
  websiteId,
  removeExistingPrimaryFeeds,
  countryCode,
  language
) => ({
  type: UPDATE_MERCHANT_CENTER_ACCOUNT_REQUEST,
  websiteId,
  removeExistingPrimaryFeeds,
  countryCode,
  language,
});
var updateMerchantCenterAccountResponse = (
  websiteId,
  removeExistingPrimaryFeeds,
  countryCode,
  language,
  response
) => ({
  type: UPDATE_MERCHANT_CENTER_ACCOUNT_RESPONSE,
  websiteId,
  removeExistingPrimaryFeeds,
  countryCode,
  language,
  response,
});
var updateMerchantCenterAccount =
  (websiteId, removeExistingPrimaryFeeds = false, countryCode, language) =>
  (dispatch) => {
    dispatch(
      updateMerchantCenterAccountRequest(
        websiteId,
        removeExistingPrimaryFeeds,
        countryCode,
        language
      )
    );
    return $.ajax({
      method: 'POST',
      url: `/ad_champion/google/merchant_center/accounts/update_merchant_center_account`,
      data: {
        website_id: websiteId,
        remove_existing_primary_feeds: removeExistingPrimaryFeeds,
        country_of_sale: countryCode,
        language,
      },
      dataType: 'json',
      success: (response) =>
        dispatch(
          updateMerchantCenterAccountResponse(
            websiteId,
            removeExistingPrimaryFeeds,
            countryCode,
            language,
            camelcaseKeys(response, { deep: true })
          )
        ),
    });
  };
var sendAdwordsAccountLinkRequest = (websiteId) => ({
  type: SEND_ADWORDS_ACCOUNT_LINK_REQUEST,
  websiteId,
});
var sendAdwordsAccountLinkResponse = (websiteId, response) => ({
  type: SEND_ADWORDS_ACCOUNT_LINK_RESPONSE,
  websiteId,
  response,
});
var sendAdwordsAccountLink = (websiteId) => async (dispatch) => {
  dispatch(sendAdwordsAccountLinkRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/google/merchant_center/accounts/link_adwords_account`,
    data: { website_id: websiteId },
    dataType: 'json',
  });
  var camelResponse = camelcaseKeys(response, { deep: true });
  dispatch(sendAdwordsAccountLinkResponse(websiteId, camelResponse));
  return camelResponse;
};

// src/actions/google/sheets.jsx
var LIST_GOOGLE_SPREADSHEETS_REQUEST = 'LIST_GOOGLE_SPREADSHEETS_REQUEST';
var LIST_GOOGLE_SPREADSHEETS_RESPONSE = 'LIST_GOOGLE_SPREADSHEETS_RESPONSE';
var LIST_GOOGLE_SPREADSHHET_SHEETS_REQUEST =
  'LIST_GOOGLE_SPREADSHHET_SHEETS_REQUEST';
var LIST_GOOGLE_SPREADSHHET_SHEETS_RESPONSE =
  'LIST_GOOGLE_SPREADSHHET_SHEETS_RESPONSE';
var listGoogleSpreadsheetsRequest = () => ({
  type: LIST_GOOGLE_SPREADSHEETS_REQUEST,
});
var listGoogleSpreadsheetsResponse = (spreadsheets) => ({
  type: LIST_GOOGLE_SPREADSHEETS_RESPONSE,
  spreadsheets,
});
var listGoogleSpreadsheets = (fileName) => async (dispatch, getState) => {
  const accessToken = getAccessToken(getState);
  dispatch(listGoogleSpreadsheetsRequest());
  const response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/google/spreadsheets?access_token=${accessToken}&file_name=${fileName}`,
  });
  const spreadsheets = camelcaseKeys(response.spreadsheets, { deep: true });
  dispatch(listGoogleSpreadsheetsResponse(spreadsheets));
  return spreadsheets;
};
var listGoogleSpreadsheetSheetsRequest = (spreadsheetId) => ({
  type: LIST_GOOGLE_SPREADSHHET_SHEETS_REQUEST,
  spreadsheetId,
});
var listGoogleSpreadsheetSheetsResponse = (spreadsheetId, sheets) => ({
  type: LIST_GOOGLE_SPREADSHHET_SHEETS_RESPONSE,
  spreadsheetId,
  sheets,
});
var listGoogleSpreadsheetSheets =
  (spreadsheetId) => async (dispatch, getState) => {
    const accessToken = getAccessToken(getState);
    dispatch(listGoogleSpreadsheetSheetsRequest(spreadsheetId));
    const response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/google/spreadsheets/sheets?access_token=${accessToken}&spreadsheet_id=${spreadsheetId}`,
    });
    const sheets = camelcaseKeys(response.sheets, { deep: true });
    dispatch(listGoogleSpreadsheetSheetsResponse(spreadsheetId, sheets));
    return sheets;
  };

// src/actions/google/taxonomies.jsx
var FETCH_GOOGLE_TAXONOMIES_REQUEST = 'FETCH_GOOGLE_TAXONOMIES_REQUEST';
var FETCH_GOOGLE_TAXONOMIES_RESPONSE = 'FETCH_GOOGLE_TAXONOMIES_RESPONSE';
var fetchGoogleTaxonomiesRequest = () => ({
  type: FETCH_GOOGLE_TAXONOMIES_REQUEST,
});
var fetchGoogleTaxonomiesResponse = (response) => ({
  type: FETCH_GOOGLE_TAXONOMIES_RESPONSE,
  ...response,
});
var fetchGoogleTaxonomies =
  (feedId = null) =>
  async (dispatch) => {
    dispatch(fetchGoogleTaxonomiesRequest());
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/google/taxonomies?feed_id=${feedId}`,
      dataType: 'json',
    });
    var camelResponse = camelcaseKeys(response, { deep: true });
    dispatch(fetchGoogleTaxonomiesResponse(camelResponse));
    return camelResponse.taxonomies;
  };

// src/actions/google/user.jsx
var SET_GOOGLE_USER = 'SET_GOOGLE_USER';
var setGoogleUser = (user) => ({
  type: SET_GOOGLE_USER,
  user,
});

// src/actions/inventories/attributes.jsx
var import_snakecase_keys19 = __toESM(require_snakecase_keys());
var FETCH_INVENTORY_FC_ATTRIBUTES_REQUEST =
  'FETCH_INVENTORY_FC_ATTRIBUTES_REQUEST';
var FETCH_INVENTORY_FC_ATTRIBUTES_RESPONSE =
  'FETCH_INVENTORY_FC_ATTRIBUTES_RESPONSE';
var SAVE_INVENTORY_FC_ATTRIBUTES_REQUEST =
  'SAVE_INVENTORY_FC_ATTRIBUTES_REQUEST';
var SAVE_INVENTORY_FC_ATTRIBUTES_RESPONSE =
  'SAVE_INVENTORY_FC_ATTRIBUTES_RESPONSE';
var fetchInventoryFcAttributesRequest = (websiteId, feedId) => ({
  type: FETCH_INVENTORY_FC_ATTRIBUTES_REQUEST,
  websiteId,
  feedId,
});
var fetchInventoryFcAttributesResponse = (
  websiteId,
  feedId,
  fcAttributes,
  inventoryId
) => ({
  type: FETCH_INVENTORY_FC_ATTRIBUTES_RESPONSE,
  websiteId,
  feedId,
  fcAttributes,
  inventoryId,
});
var fetchInventoryFcAttributes =
  (websiteId, feedId = null) =>
  async (dispatch) => {
    dispatch(fetchInventoryFcAttributesRequest(websiteId, feedId));
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/websites/${websiteId}/inventories/fc_attributes`,
      data: (0, import_snakecase_keys19.default)({ feedId }),
      dataType: 'json',
    });
    var fcAttributes = camelcaseKeys(response.fc_attributes, { deep: true });
    var inventoryIdByFeed = response.inventory_id;
    dispatch(
      fetchInventoryFcAttributesResponse(
        websiteId,
        feedId,
        fcAttributes,
        inventoryIdByFeed
      )
    );
    return fcAttributes;
  };
var saveInventoryFcAttributesRequest = (websiteId, feedId, mappings) => ({
  type: SAVE_INVENTORY_FC_ATTRIBUTES_REQUEST,
  websiteId,
  feedId,
  mappings,
});
var saveInventoryFcAttributesResponse = (
  websiteId,
  feedId,
  mappings,
  response
) => ({
  type: SAVE_INVENTORY_FC_ATTRIBUTES_RESPONSE,
  websiteId,
  feedId,
  mappings,
  response,
});
var saveInventoryFcAttributes =
  (websiteId, feedId = null, mappings) =>
  async (dispatch) => {
    dispatch(saveInventoryFcAttributesRequest(websiteId, feedId, mappings));
    var response = await $.ajax({
      method: 'POST',
      url: `/ad_champion/websites/${websiteId}/inventories/save_fc_attributes`,
      data: (0, import_snakecase_keys19.default)(
        { feedId, mappings: JSON.stringify(mappings) },
        { deep: true }
      ),
      dataType: 'json',
    });
    dispatch(
      saveInventoryFcAttributesResponse(websiteId, feedId, mappings, response)
    );
    return response;
  };

// src/actions/inventories/categories.jsx
var FETCH_INVENTORY_FO_CATEGORIES_REQUEST =
  'FETCH_INVENTORY_FO_CATEGORIES_REQUEST';
var FETCH_INVENTORY_FO_CATEGORIES_RESPONSE =
  'FETCH_INVENTORY_FO_CATEGORIES_RESPONSE';
var fetchInventoryFeedOpsCategoriesRequest = (websiteId) => ({
  type: FETCH_INVENTORY_FO_CATEGORIES_REQUEST,
  websiteId,
});
var fetchInventoryFeedOpsCategoriesResponse = (
  websiteId,
  categories,
  inventoryId
) => ({
  type: FETCH_INVENTORY_FO_CATEGORIES_RESPONSE,
  websiteId,
  categories,
  inventoryId,
});
var fetchInventoryFeedOpsCategories = (websiteId) => async (dispatch) => {
  dispatch(fetchInventoryFeedOpsCategoriesRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/inventories/feed_ops_categories`,
    dataType: 'json',
  });
  var categories = camelcaseKeys(JSON.parse(response.categories), {
    deep: true,
  });
  var inventoryIdByFeed = response.inventory_id;
  dispatch(
    fetchInventoryFeedOpsCategoriesResponse(
      websiteId,
      categories,
      inventoryIdByFeed
    )
  );
  return categories;
};

// src/actions/inventories/processing_status.jsx
var FETCH_INVENTORY_PROCESSING_STATUS_REQUEST =
  'FETCH_INVENTORY_PROCESSING_STATUS_REQUEST';
var FETCH_INVENTORY_PROCESSING_STATUS_RESPONSE =
  'FETCH_INVENTORY_PROCESSING_STATUS_RESPONSE';
var fetchInventoryProcessingStatusResponse = (inventoryId, response) => ({
  type: FETCH_INVENTORY_PROCESSING_STATUS_RESPONSE,
  inventoryId,
  ...response,
});
var fetchInventoryProcessingStatus = (inventoryId) => async (dispatch) => {
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/inventories/${inventoryId}/processing_status`,
    dataType: 'json',
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(fetchInventoryProcessingStatusResponse(inventoryId, response));
};

// src/actions/inventories/product_data_audits.jsx
var GEN_PRODUCT_DATA_AUDIT_REQUEST = 'GEN_PRODUCT_DATA_AUDIT_REQUEST';
var GEN_PRODUCT_DATA_AUDIT_RESPONSE = 'GEN_PRODUCT_DATA_AUDIT_RESPONSE';
var FETCH_PRODUCT_DATA_AUDITS_REQUEST = 'FETCH_PRODUCT_DATA_AUDITS_REQUEST';
var FETCH_PRODUCT_DATA_AUDITS_RESPONSE = 'FETCH_PRODUCT_DATA_AUDITS_RESPONSE';
var SHOW_HIDE_ALL_AUDITS_MODAL = 'SHOW_HIDE_ALL_AUDITS_MODAL';
var UPDATE_AUDIT_SCHEDULE_REQUEST = 'UPDATE_AUDIT_SCHEDULE_REQUEST';
var UPDATE_AUDIT_SCHEDULE_RESPONSE = 'UPDATE_AUDIT_SCHEDULE_RESPONSE';
var genProductDataAuditRequest = (inventoryId) => ({
  type: GEN_PRODUCT_DATA_AUDIT_REQUEST,
  inventoryId,
});
var genProductDataAuditResponse = (inventoryId, response) => ({
  type: GEN_PRODUCT_DATA_AUDIT_RESPONSE,
  inventoryId,
  ...response,
});
var genProductDataAudit =
  (inventoryId, autoGenerated = false) =>
  async (dispatch) => {
    dispatch(genProductDataAuditRequest(inventoryId));
    var status2 = 202;
    var statusCode2 = {
      200: () => {
        status2 = 200;
      },
      202: () => {
        status2 = 202;
      },
    };
    const url2 = `/ad_champion/inventories/${inventoryId}/product_data_audits/gen_audit?auto_generated=${autoGenerated}`;
    var response = await $.ajax({
      method: 'GET',
      url: url2,
      statusCode: statusCode2,
    });
    var camelResponse = null;
    while (status2 === 202) {
      camelResponse = camelcaseKeys(response, { deep: true });
      dispatch(genProductDataAuditResponse(inventoryId, camelResponse));
      await sleep_default(3e3);
      response = await $.ajax({
        method: 'GET',
        url: url2,
        statusCode: statusCode2,
      });
    }
    camelResponse = camelcaseKeys(response, { deep: true });
    dispatch(genProductDataAuditResponse(inventoryId, camelResponse));
    return camelResponse.inventoryAuditUrl;
  };
var fetchProductDataAuditsRequest = (inventoryId) => ({
  type: FETCH_PRODUCT_DATA_AUDITS_REQUEST,
  inventoryId,
});
var fetchProductDataAuditsResponse = (inventoryId, response) => ({
  type: FETCH_PRODUCT_DATA_AUDITS_RESPONSE,
  inventoryId,
  ...response,
});
var fetchProductDataAudits = (inventoryId) => async (dispatch) => {
  dispatch(fetchProductDataAuditsRequest(inventoryId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/inventories/${inventoryId}/product_data_audits`,
    dataType: 'json',
  });
  var camelResponse = camelcaseKeys(response, { deep: true });
  dispatch(fetchProductDataAuditsResponse(inventoryId, camelResponse));
  return camelResponse.inventoryAudits;
};
var updateAuditScheduleRequest = (inventoryId) => ({
  type: UPDATE_AUDIT_SCHEDULE_REQUEST,
  inventoryId,
});
var updateAuditScheduleResponse = (inventoryId, response) => ({
  type: UPDATE_AUDIT_SCHEDULE_RESPONSE,
  inventoryId,
  ...response,
});
var updateAuditSchedule = (inventoryId, auditSchedule) => async (dispatch) => {
  dispatch(updateAuditScheduleRequest(inventoryId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/inventories/${inventoryId}/product_data_audits/update_audit_schedule?audit_schedule=${auditSchedule}`,
    dataType: 'json',
  });
  var camelResponse = camelcaseKeys(response, { deep: true });
  dispatch(updateAuditScheduleResponse(inventoryId, camelResponse));
  return camelResponse.scheduleMessage;
};
var showHideAllAuditsModal = (show) => ({
  type: SHOW_HIDE_ALL_AUDITS_MODAL,
  show,
});

// src/actions/inventories/rules/action_types.jsx
var FETCH_RULE_ACTION_TYPES_REQUEST = 'FETCH_RULE_ACTION_TYPES_REQUEST';
var FETCH_RULE_ACTION_TYPES_RESPONSE = 'FETCH_RULE_ACTION_TYPES_RESPONSE';
var fetchRuleActionTypesRequest = () => ({
  type: FETCH_RULE_ACTION_TYPES_REQUEST,
});
var fetchRuleActionTypesResponse = (response) => ({
  type: FETCH_RULE_ACTION_TYPES_RESPONSE,
  ...response,
});
var fetchRuleActionTypes = () => async (dispatch) => {
  dispatch(fetchRuleActionTypesRequest());
  var response = await $.ajax({
    method: 'GET',
    url: '/ad_champion/inventories/rules/action_types',
    dataType: 'json',
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(fetchRuleActionTypesResponse(response));
  return response;
};

// src/actions/inventories/rules.jsx
var import_snakecase_keys20 = __toESM(require_snakecase_keys());
var FETCH_RULES_REQUEST = 'FETCH_RULES_REQUEST';
var FETCH_RULES_RESPONSE = 'FETCH_RULES_RESPONSE';
var UPDATE_ALL_RULES_REQUEST = 'UPDATE_ALL_RULES_REQUEST';
var UPDATE_ALL_RULES_RESPONSE = 'UPDATE_ALL_RULES_RESPONSE';
var PREVIEW_RULES_REQUEST = 'PREVIEW_RULES_REQUEST';
var PREVIEW_RULES_RESPONSE = 'PREVIEW_RULES_RESPONSE';
var EXPORT_RULES_PREVIEW_REQUEST = 'EXPORT_RULES_PREVIEW_REQUEST';
var EXPORT_RULES_PREVIEW_RESPONSE = 'EXPORT_RULES_PREVIEW_RESPONSE';
var fetchRulesRequest = (websiteId) => ({
  type: FETCH_RULES_REQUEST,
  websiteId,
});
var fetchRulesResponse = (websiteId, response) => ({
  type: FETCH_RULES_RESPONSE,
  websiteId,
  ...response,
});
var fetchRules = (websiteId) => async (dispatch) => {
  dispatch(fetchRulesRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/inventories/rules?website_id=${websiteId}`,
    dataType: 'json',
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(fetchRulesResponse(websiteId, response));
  return response;
};
var updateAllRulesRequest = (websiteId, rules) => ({
  type: UPDATE_ALL_RULES_REQUEST,
  websiteId,
  rules,
});
var updateAllRulesResponse = (websiteId, rules, response) => ({
  type: UPDATE_ALL_RULES_RESPONSE,
  websiteId,
  rules,
  ...response,
});
var updateAllRules = (websiteId, rules) => async (dispatch) => {
  dispatch(updateAllRulesRequest(websiteId, rules));
  var response = await $.ajax({
    method: 'POST',
    url: `/ad_champion/inventories/rules/1/update_all_rules?website_id=${websiteId}`,
    data: {
      rules: JSON.stringify(
        rules.map((rule) =>
          (0, import_snakecase_keys20.default)(rule, { deep: true })
        )
      ),
    },
    dataType: 'json',
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(updateAllRulesResponse(websiteId, rules, response));
  return response;
};
var previewRulesRequest = (websiteId, feedId, rules, search) => ({
  type: PREVIEW_RULES_REQUEST,
  websiteId,
  feedId,
  rules,
  search,
});
var previewRulesResponse = (websiteId, feedId, rules, search, response) => ({
  type: PREVIEW_RULES_RESPONSE,
  websiteId,
  feedId,
  rules,
  search,
  ...response,
});
var previewRules = (websiteId, feedId, rules, search) => async (dispatch) => {
  dispatch(previewRulesRequest(websiteId, feedId, rules, search));
  var data = {
    websiteId,
    feedId,
    rules: JSON.stringify(
      rules.map((rule) =>
        (0, import_snakecase_keys20.default)(rule, { deep: true })
      )
    ),
    search,
  };
  var response = await $.ajax({
    method: 'POST',
    url: `/ad_champion/inventories/rules/preview`,
    dataType: 'json',
    data: (0, import_snakecase_keys20.default)(data),
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(previewRulesResponse(websiteId, feedId, rules, search, response));
  return response;
};
var exportRulesPreviewRequest = (feedId, rules) => ({
  type: EXPORT_RULES_PREVIEW_REQUEST,
  feedId,
  rules,
});
var exportRulesPreviewResponse = (feedId, rules, response) => ({
  type: EXPORT_RULES_PREVIEW_RESPONSE,
  feedId,
  rules,
  ...response,
});
var exportRulesPreview = (feedId, rules) => async (dispatch) => {
  dispatch(exportRulesPreviewRequest(feedId, rules));
  var status2 = 202;
  var statusCode2 = {
    200: () => {
      status2 = 200;
    },
    202: () => {
      status2 = 202;
    },
  };
  var data = {
    feedId,
    rules: JSON.stringify(
      rules.map((r) => (0, import_snakecase_keys20.default)(r, { deep: true }))
    ),
  };
  var args = {
    method: 'POST',
    url: '/ad_champion/inventories/rules/preview/export',
    dataType: 'json',
    data: (0, import_snakecase_keys20.default)(data, { deep: true }),
    statusCode: statusCode2,
  };
  var response = await $.ajax(args);
  args.data.operation_id = response.operation_id;
  while (status2 === 202) {
    await sleep_default(1e3);
    response = await $.ajax(args);
  }
  response = camelcaseKeys(response, { deep: true });
  dispatch(exportRulesPreviewResponse(feedId, rules, response));
  return response;
};

// src/actions/inventories/vendors.jsx
var FETCH_VENDORS_REQUEST = 'FETCH_VENDORS_REQUEST';
var FETCH_VENDORS_RESPONSE = 'FETCH_VENDORS_RESPONSE';
var fetchVendorsRequest = () => ({
  type: FETCH_VENDORS_REQUEST,
});
var fetchVendorsResponse = (response) => ({
  type: FETCH_VENDORS_RESPONSE,
  ...response,
});
var fetchVendors = () => async (dispatch) => {
  dispatch(fetchVendorsRequest());
  var response = await $.ajax({
    method: 'GET',
    url: '/ad_champion/inventories/vendors',
    dataType: 'json',
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(fetchVendorsResponse(response));
  return response;
};

// src/actions/inventories.jsx
var import_snakecase_keys21 = __toESM(require_snakecase_keys());
var FETCH_INVENTORIES_LIST = 'FETCH_INVENTORIES_LIST';
var SAVE_SELECTED_INVENTORY_REQUEST = 'SAVE_SELECTED_INVENTORY_REQUEST';
var SAVE_SELECTED_INVENTORY_SUCCESS = 'SAVE_SELECTED_INVENTORY_SUCCESS';
var SAVE_SELECTED_INVENTORY_ERROR = 'SAVE_SELECTED_INVENTORY_ERROR';
var SAVE_NEW_FEED_REQUEST = 'SAVE_NEW_FEED_REQUEST';
var SAVE_NEW_FEED_SUCCESS = 'SAVE_NEW_FEED_SUCCESS';
var SAVE_NEW_FEED_ERROR = 'SAVE_NEW_FEED_ERROR';
var REQUEST_INVENTORY_STATUS = 'REQUEST_INVENTORY_STATUS';
var RECEIVE_INVENTORY_STATUS = 'RECEIVE_INVENTORY_STATUS';
var REQUEST_INVENTORY_DOWNLOAD = 'REQUEST_INVENTORY_DOWNLOAD';
var RECEIVE_INVENTORY_DOWNLOAD = 'RECEIVE_INVENTORY_DOWNLOAD';
var REQUEST_SAVE_INVENTORY_CURRENCY = 'REQUEST_SAVE_INVENTORY_CURRENCY';
var RECEIVE_SAVE_INVENTORY_CURRENCY = 'RECEIVE_SAVE_INVENTORY_CURRENCY';
var FETCH_INVENTORY_DETAIL_REQUEST = 'FETCH_INVENTORY_DETAIL_REQUEST';
var FETCH_INVENTORY_DETAIL_RESPONSE = 'FETCH_INVENTORY_DETAIL_RESPONSE';
var FETCH_FEED_CHAMPION_REQUEST = 'FETCH_FEED_CHAMPION_REQUEST';
var FETCH_FEED_CHAMPION_RESPONSE = 'FETCH_FEED_CHAMPION_REQUEST';
var UPDATE_INVENTORY_DETAIL_REQUEST = 'UPDATE_INVENTORY_DETAIL_REQUEST';
var UPDATE_INVENTORY_DETAIL_RESPONSE = 'UPDATE_INVENTORY_DETAIL_RESPONSE';
var DELETE_INVENTORY_REQUEST = 'DELETE_INVENTORY_REQUEST';
var DELETE_INVENTORY_RESPONSE = 'DELETE_INVENTORY_RESPONSE';
var DELETE_INVENTORY_ERROR = 'DELETE_INVENTORY_ERROR';
var OPEN_INVENTORY_SHEET_REQUEST = 'OPEN_INVENTORY_SHEET_REQUEST';
var OPEN_INVENTORY_SHEET_SUCCESS = 'OPEN_INVENTORY_SHEET_SUCCESS';
var ORDER_CUSTOM_INVENTORY_REQUEST = 'ORDER_CUSTOM_INVENTORY_REQUEST';
var ORDER_CUSTOM_INVENTORY_RESPONSE = 'ORDER_CUSTOM_INVENTORY_RESPONSE';
var FETCH_INVENTORY_CATEGORIES_REQUEST = 'FETCH_INVENTORY_CATEGORIES_REQUEST';
var FETCH_INVENTORY_CATEGORIES_RESPONSE = 'FETCH_INVENTORY_CATEGORIES_RESPONSE';
var REQUEST_INVENTORY_FIRST_RECONCILE_STATUS =
  'REQUEST_INVENTORY_FIRST_RECONCILE_STATUS';
var RECEIVE_INVENTORY_FIRST_RECONCILE_STATUS =
  'RECEIVE_INVENTORY_FIRST_RECONCILE_STATUS';
var REQUEST_INVENTORY_OUTBOUND_FEEDS_GENERATION_STATUS =
  'REQUEST_INVENTORY_OUTBOUND_FEEDS_GENERATION_STATUS';
var RECEIVE_INVENTORY_OUTBOUND_FEEDS_GENERATION_STATUS =
  'RECEIVE_INVENTORY_OUTBOUND_FEEDS_GENERATION_STATUS';
var FETCH_INVENTORY_FEED_CATEGORIES_REQUEST =
  'FETCH_INVENTORY_FEED_CATEGORIES_REQUEST';
var FETCH_INVENTORY_FEED_CATEGORIES_RESPONSE =
  'FETCH_INVENTORY_FEED_CATEGORIES_RESPONSE';
var SAVE_FEED_TAXONOMY_MAPPINGS_REQUEST = 'SAVE_FEED_TAXONOMY_MAPPINGS_REQUEST';
var SAVE_FEED_TAXONOMY_MAPPINGS_RESPONSE =
  'SAVE_FEED_TAXONOMY_MAPPINGS_RESPONSE';
var fetchInventoriesList = (scenarioId) => (dispatch) => {
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/website/inventories`,
    dataType: 'json',
    success: (response) => {
      dispatch(receiveInventoriesList(camelcaseKeys(response, { deep: true })));
    },
  });
};
var fetchInventoriesListByWebsiteId = (websiteId) => (dispatch) => {
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/inventories`,
    dataType: 'json',
    success: (response) => {
      dispatch(receiveInventoriesList(camelcaseKeys(response, { deep: true })));
    },
  });
};
var saveSelectedInventory = (scenarioId, data) => (dispatch) => {
  dispatch(saveInventoryRequest(data, 'existing'));
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/scenarios/${scenarioId}/inventory/assign_inventory`,
    data,
    dataType: 'json',
    success: (response) => {
      return dispatch(saveInventorySuccess(response.responseJSON, 'existing'));
    },
    error: (response) => {
      return dispatch(
        saveInventoryError(response.responseJSON.error, 'existing')
      );
    },
  });
};
var newFeedByScenarioApi = (scenarioId, data) => {
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/scenarios/${scenarioId}/inventory`,
    data: (0, import_snakecase_keys21.default)(data),
  });
};
var newFeedApi = (data) => {
  return $.ajax({
    method: 'POST',
    url: '/ad_champion/inventories',
    data: (0, import_snakecase_keys21.default)(data),
  });
};
var saveNewFeed = (scenarioId, data) => (dispatch) => {
  dispatch(saveInventoryRequest(data, 'new'));
  var promise = scenarioId
    ? newFeedByScenarioApi(scenarioId, data)
    : newFeedApi(data);
  return promise.then(
    (response) => dispatch(saveInventorySuccess(response, 'new')),
    (response) => dispatch(saveInventoryError(response.error, 'new'))
  );
};
var receiveInventoriesList = (response) => ({
  type: FETCH_INVENTORIES_LIST,
  inventories: response.inventories,
  availableVerticalFields: response.availableVerticalFields,
  feedChampionUrl: response.feedChampionUrl,
  feedChampionPlatform: response.feedChampionPlatform,
  feedChampionReference: response.feedChampionReference,
  feedChampionStatus: response.feedChampionStatus,
  inventoryId: response.inventoryId,
});
var saveInventoryRequest = (data, action_type) => ({
  type:
    action_type === 'new'
      ? SAVE_NEW_FEED_REQUEST
      : SAVE_SELECTED_INVENTORY_REQUEST,
  data,
});
var saveInventorySuccess = (data, actionType) => ({
  type:
    actionType === 'new'
      ? SAVE_NEW_FEED_SUCCESS
      : SAVE_SELECTED_INVENTORY_SUCCESS,
  data,
});
var saveInventoryError = (error, action_type) => ({
  type:
    action_type === 'new' ? SAVE_NEW_FEED_ERROR : SAVE_SELECTED_INVENTORY_ERROR,
  error,
});
var requestInventoryStatus = (scenarioId) => ({
  type: REQUEST_INVENTORY_STATUS,
  scenarioId,
});
var receiveInventoryStatus = (scenarioId, status2) => ({
  type: RECEIVE_INVENTORY_STATUS,
  scenarioId,
  status: status2,
});
var fetchInventoryStatus = (scenarioId) => (dispatch) => {
  dispatch(requestInventoryStatus(scenarioId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/inventory`,
    dataType: 'json',
    success: (response) => {
      dispatch(
        receiveInventoryStatus(
          scenarioId,
          camelcaseKeys(response || {}, { deep: true })
        )
      );
    },
  });
};
var requestInventoryDownload = (scenarioId, inventoryId) => ({
  type: REQUEST_INVENTORY_DOWNLOAD,
  scenarioId,
  inventoryId,
});
var receiveInventoryDownload = (scenarioId, inventoryId, download) => ({
  type: RECEIVE_INVENTORY_DOWNLOAD,
  scenarioId,
  inventoryId,
  download,
});
var triggerInventoryDownload = (scenarioId) => (dispatch) => {
  dispatch(requestInventoryDownload(scenarioId, ''));
  return $.ajax({
    url: `/ad_champion/scenarios/${scenarioId}/inventory/trigger_download`,
    method: 'POST',
    dataType: 'json',
    success: (response) => {
      dispatch(
        receiveInventoryDownload(camelcaseKeys(scenarioId, '', response))
      );
    },
  });
};
var triggerInventoryDownloadByInventoryId =
  (inventoryId, force = false) =>
  (dispatch) => {
    dispatch(requestInventoryDownload('', inventoryId));
    return $.ajax({
      url: `/ad_champion/inventories/${inventoryId}/trigger_download`,
      method: 'POST',
      dataType: 'json',
      data: { force },
      success: (response) => {
        dispatch(
          receiveInventoryDownload('', inventoryId, camelcaseKeys(response))
        );
      },
    });
  };
var requestSaveInventoryCurrency = (scenarioId, currency) => (dispatch) => ({
  type: REQUEST_SAVE_INVENTORY_CURRENCY,
  currency,
});
var receiveSaveInventoryCurrency = (scenarioId, currency) => (dispatch) => ({
  type: RECEIVE_SAVE_INVENTORY_CURRENCY,
  currency,
});
var setInventoryCurrency = (scenarioId, currency) => (dispatch) => {
  dispatch(requestSaveInventoryCurrency(scenarioId, currency));
  var payload = {
    currency,
  };
  return $.ajax({
    url: `/ad_champion/scenarios/${scenarioId}/inventory/currency`,
    method: 'PUT',
    dataType: 'json',
    data: payload,
    success: (response) => {
      dispatch(receiveSaveInventoryCurrency(scenarioId, currency));
    },
  });
};
var fetchInventoryDetailRequest = (inventoryId) => ({
  type: FETCH_INVENTORY_DETAIL_REQUEST,
  inventoryId,
});
var fetchInventoryDetailResponse = (inventoryId, inventoryDetail) => ({
  type: FETCH_INVENTORY_DETAIL_RESPONSE,
  inventoryId,
  inventoryDetail,
});
var fetchInventoryDetail = (inventoryId) => (dispatch) => {
  dispatch(fetchInventoryDetailRequest(inventoryId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/inventories/${inventoryId}`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        fetchInventoryDetailResponse(
          inventoryId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};
var updateInventoryDetailRequest = (inventoryId, inventoryDetail) => ({
  type: UPDATE_INVENTORY_DETAIL_REQUEST,
  inventoryId,
  inventoryDetail,
});
var updateInventoryDetailResponse = (inventoryId, inventoryDetail) => ({
  type: UPDATE_INVENTORY_DETAIL_RESPONSE,
  inventoryId,
  inventoryDetail,
});
var updateInventoryDetail = (inventoryId, inventoryDetail) => (dispatch) => {
  dispatch(updateInventoryDetailRequest(inventoryId, inventoryDetail));
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/inventories/${inventoryId}`,
    dataType: 'json',
    data: (0, import_snakecase_keys21.default)(inventoryDetail),
    success: () => {
      dispatch(updateInventoryDetailResponse(inventoryId, inventoryDetail));
      return fetchInventoryDetail(inventoryId);
    },
    error: (response) => {
      dispatch(updateInventoryDetailResponse(inventoryId, inventoryDetail));
      return camelcaseKeys(response, { deep: true });
    },
  });
};
var deleteInventoryRequest = (inventoryId) => ({
  type: DELETE_INVENTORY_REQUEST,
  inventoryId,
});
var deleteInventoryResponse = (inventoryId) => ({
  type: DELETE_INVENTORY_RESPONSE,
  inventoryId,
});
var deleteInventoryError = (inventoryId) => ({
  type: DELETE_INVENTORY_ERROR,
  inventoryId,
});
var deleteInventory = (inventoryId) => (dispatch) => {
  dispatch(deleteInventoryRequest(inventoryId));
  return $.ajax({
    method: 'DELETE',
    url: `/ad_champion/inventories/${inventoryId}`,
    dataType: 'json',
    success: () => {
      dispatch(deleteInventoryResponse(inventoryId));
    },
    error: () => {
      dispatch(deleteInventoryError(inventoryId));
    },
  });
};
var openErrorsSheetRequest = (inventoryId) => ({
  type: OPEN_INVENTORY_SHEET_REQUEST,
  inventoryId,
});
var openErrorsSheetResponse = (inventoryId, googleSheet) => ({
  type: OPEN_INVENTORY_SHEET_SUCCESS,
  inventoryId,
  googleSheet,
});
var openErrorsSheet = (inventoryId) => (dispatch) => {
  dispatch(openErrorsSheetRequest(inventoryId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/inventories/${inventoryId}/open_errors_sheet`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        openErrorsSheetResponse(
          inventoryId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};
var orderCustomInventoryRequest = (websiteId, formValues) => ({
  type: ORDER_CUSTOM_INVENTORY_REQUEST,
  websiteId,
  formValues,
});
var orderCustomInventoryResponse = (websiteId, formValues, response) => ({
  type: ORDER_CUSTOM_INVENTORY_RESPONSE,
  websiteId,
  formValues,
  response,
});
var orderCustomInventory = (websiteId, formValues) => async (dispatch) => {
  var data = (0, import_snakecase_keys21.default)({ ...formValues });
  dispatch(orderCustomInventoryRequest(websiteId, formValues));
  var response = await $.ajax({
    method: 'POST',
    url: `/ad_champion/websites/${websiteId}/inventories/order_custom`,
    data,
    dataType: 'json',
  });
  dispatch(orderCustomInventoryResponse(websiteId, formValues, response));
};
var fetchInventoryCategoriesRequest = (websiteId, feedId) => ({
  type: FETCH_INVENTORY_CATEGORIES_REQUEST,
  websiteId,
  feedId,
});
var fetchInventoryCategoriesResponse = (
  websiteId,
  categories,
  inventoryId
) => ({
  type: FETCH_INVENTORY_CATEGORIES_RESPONSE,
  websiteId,
  categories,
  inventoryId,
});
var getCategoriesApi = (websiteId, forceFetch, statusCode2, feedId) => {
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/inventories/categories`,
    data: (0, import_snakecase_keys21.default)({ forceFetch, feedId }),
    dataType: 'json',
    statusCode: statusCode2,
  });
};
var fetchInventoryCategories =
  (websiteId, feedId = null, forceFetch = false) =>
  async (dispatch) => {
    dispatch(fetchInventoryCategoriesRequest(websiteId, feedId));
    var status2 = 202;
    var response;
    var statusCode2 = {
      200: () => {
        status2 = 200;
      },
      202: () => {
        status2 = 202;
      },
    };
    var categories = [];
    while (status2 === 202) {
      response = await getCategoriesApi(
        websiteId,
        forceFetch,
        statusCode2,
        feedId
      );
      forceFetch = false;
      if (status2 === 202) {
        await sleep_default(1e3);
      }
    }
    categories = camelcaseKeys(JSON.parse(response.categories), { deep: true });
    var inventoryIdByFeed = response.inventory_id;
    dispatch(
      fetchInventoryCategoriesResponse(websiteId, categories, inventoryIdByFeed)
    );
    return categories;
  };
var requestInventoryFirstReconcileStatus = (websiteId) => ({
  type: REQUEST_INVENTORY_FIRST_RECONCILE_STATUS,
  websiteId,
});
var receiveInventoryFirstReconcileStatus = (websiteId, response) => ({
  type: RECEIVE_INVENTORY_FIRST_RECONCILE_STATUS,
  websiteId,
  ...response,
});
var fetchInventoryFirstReconcileStatus = (websiteId) => async (dispatch) => {
  dispatch(requestInventoryFirstReconcileStatus(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/inventories/initial_reconciled`,
    dataType: 'json',
  });
  var camelResponse = camelcaseKeys(response, { deep: true });
  dispatch(receiveInventoryFirstReconcileStatus(websiteId, camelResponse));
  return camelResponse.reconciled;
};
var requestInventoryOutboundFeedsGenerationStatus = (websiteId) => ({
  type: REQUEST_INVENTORY_OUTBOUND_FEEDS_GENERATION_STATUS,
  websiteId,
});
var receiveInventoryOutboundFeedsGenerationStatus = (websiteId, response) => ({
  type: RECEIVE_INVENTORY_OUTBOUND_FEEDS_GENERATION_STATUS,
  websiteId,
  ...response,
});
var fetchInventoryOutboundFeedsGenerationStatus =
  (websiteId) => async (dispatch) => {
    dispatch(requestInventoryOutboundFeedsGenerationStatus(websiteId));
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/websites/${websiteId}/inventories/shopping_feed_generated`,
      dataType: 'json',
    });
    var camelResponse = camelcaseKeys(response, { deep: true });
    dispatch(
      receiveInventoryOutboundFeedsGenerationStatus(websiteId, camelResponse)
    );
    return camelResponse.reconciled;
  };

// src/actions/keyword_ideas.jsx
var FETCH_KEYWORD_IDEAS_REQUEST = 'FETCH_KEYWORD_IDEAS_REQUEST';
var FETCH_KEYWORD_IDEAS_RESPONSE = 'FETCH_KEYWORD_IDEAS_RESPONSE';
var fetchKeywordIdeasRequest = (
  websiteId,
  feedId,
  geoTargetId,
  items,
  field
) => ({
  type: FETCH_KEYWORD_IDEAS_REQUEST,
  websiteId,
  feedId,
  geoTargetId,
  items,
  field,
});
var fetchKeywordIdeasResponse = (
  websiteId,
  feedId,
  geoTargetId,
  items,
  field,
  ideas
) => ({
  type: FETCH_KEYWORD_IDEAS_RESPONSE,
  websiteId,
  feedId,
  geoTargetId,
  items,
  field,
  ideas,
});
var getKeywordIdeasApi = async (websiteId, feedId, geoTargetId, items) => {
  var status2 = 202;
  var statusCode2 = {
    200: () => {
      status2 = 200;
    },
    202: () => {
      status2 = 202;
    },
  };
  const queryString = `?feed_id=${feedId}&geo_target_id=${geoTargetId}&items=${encodeURIComponent(
    JSON.stringify(items)
  )}`;
  const url2 = `/ad_champion/websites/${websiteId}/search_volume/generate_ideas${queryString}`;
  const apiCall = {
    method: 'GET',
    url: url2,
    dataType: 'json',
    statusCode: statusCode2,
  };
  var response = await $.ajax({ ...apiCall });
  while (status2 === 202) {
    await sleep_default(1e3);
    response = await $.ajax({ ...apiCall });
  }
  return response;
};
var fetchKeywordIdeas =
  (websiteId, feedId, geoTargetId, items, field) => async (dispatch) => {
    dispatch(
      fetchKeywordIdeasRequest(websiteId, feedId, geoTargetId, items, field)
    );
    const response = await getKeywordIdeasApi(
      websiteId,
      feedId,
      geoTargetId,
      items
    );
    var ideas = camelcaseKeys(JSON.parse(response.ideas), { deep: true });
    dispatch(
      fetchKeywordIdeasResponse(
        websiteId,
        feedId,
        geoTargetId,
        items,
        field,
        ideas
      )
    );
    return ideas;
  };

// src/actions/keyword_list.jsx
var SAVE_KEYWORD_LIST_ITEMS_REQUEST = 'SAVE_KEYWORD_LIST_ITEMS_REQUEST';
var SAVE_KEYWORD_LIST_ITEMS_SUCCESS = 'SAVE_KEYWORD_LIST_ITEMS_SUCCESS';
var SAVE_KEYWORD_LIST_ITEMS_ERROR = 'SAVE_KEYWORD_LIST_ITEMS_ERROR';
var LOAD_KEYWORD_LIST_ITEMS_REQUEST = 'LOAD_KEYWORD_LIST_ITEMS_REQUEST';
var LOAD_KEYWORD_LIST_ITEMS_SUCCESS = 'LOAD_KEYWORD_LIST_ITEMS_SUCCESS';
var LOAD_KEYWORD_LIST_ITEMS_ERROR = 'LOAD_KEYWORD_LIST_ITEMS_ERROR';
var updateAllKeywordListItems = (items) => ({
  type: LOAD_KEYWORD_LIST_ITEMS_SUCCESS,
  items,
});
var loadKeywordListItems = (scenarioId) => (dispatch) => {
  dispatch(setPendingKeywordListItems('load'));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/keyword_list/edit`,
    dataType: 'json',
    success: (response) => {
      var index = 0;
      var keywordListItems = response.keyword_list.map((x) => {
        index++;
        return { prefix: x.prefix, suffix: x.suffix, itemId: index };
      });
      return dispatch(updateAllKeywordListItems(keywordListItems));
    },
    error: () => dispatch(ajaxErrorMessage2('load')),
  });
};
var saveKeywordListItems = (scenarioId, keywordListItems) => (dispatch) => {
  dispatch(setPendingKeywordListItems('save'));
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/scenarios/${scenarioId}/keyword_list`,
    data: { keyword_list: JSON.stringify(keywordListItems) },
    dataType: 'json',
    success: () => dispatch(saveKeywordListItemsSuccess(keywordListItems)),
    error: () => dispatch(ajaxErrorMessage2('save')),
  });
};
var ajaxErrorMessage2 = (messageType) => ({
  type:
    messageType === 'save'
      ? SAVE_KEYWORD_LIST_ITEMS_ERROR
      : LOAD_KEYWORD_LIST_ITEMS_ERROR,
  errorMessage: `A connection error has occurred while trying to ${messageType} the keyword list items.`,
});
var setPendingKeywordListItems = (actionType) => ({
  type:
    actionType === 'save'
      ? SAVE_KEYWORD_LIST_ITEMS_REQUEST
      : LOAD_KEYWORD_LIST_ITEMS_REQUEST,
});
var saveKeywordListItemsSuccess = () => ({
  type: SAVE_KEYWORD_LIST_ITEMS_SUCCESS,
});

// node_modules/no-case/dist/index.js
var SPLIT_LOWER_UPPER_RE = /([\p{Ll}\d])(\p{Lu})/gu;
var SPLIT_UPPER_UPPER_RE = /(\p{Lu})([\p{Lu}][\p{Ll}])/gu;
var SPLIT_NUMBER_LOWER_RE = /(\d)(\p{Ll})/gu;
var SPLIT_LETTER_NUMBER_RE = /(\p{L})(\d)/gu;
var DEFAULT_STRIP_REGEXP = /[^\p{L}\d]+/giu;
var SPLIT_REPLACE_VALUE = '$1\0$2';
function split(input, options = {}) {
  let result2 = input
    .replace(SPLIT_LOWER_UPPER_RE, SPLIT_REPLACE_VALUE)
    .replace(SPLIT_UPPER_UPPER_RE, SPLIT_REPLACE_VALUE);
  if (options.separateNumbers) {
    result2 = result2
      .replace(SPLIT_NUMBER_LOWER_RE, SPLIT_REPLACE_VALUE)
      .replace(SPLIT_LETTER_NUMBER_RE, SPLIT_REPLACE_VALUE);
  }
  result2 = result2.replace(DEFAULT_STRIP_REGEXP, '\0');
  let start = 0;
  let end = result2.length;
  while (result2.charAt(start) === '\0') start++;
  if (start === end) return [];
  while (result2.charAt(end - 1) === '\0') end--;
  return result2.slice(start, end).split(/\0/g);
}
function toLower(locale) {
  return locale === false
    ? (input) => input.toLowerCase()
    : (input) => input.toLocaleLowerCase(locale);
}

// node_modules/snake-case/dist/index.js
function snakeCase(input, options) {
  const lower = toLower(options?.locale);
  return split(input, options).map(lower).join('_');
}

// src/actions/keyword_suggestions.jsx
var import_snakecase_keys22 = __toESM(require_snakecase_keys());
var FETCH_KEYWORD_SUGGESTIONS_REQUEST = 'FETCH_KEYWORD_SUGGESTIONS_REQUEST';
var FETCH_KEYWORD_SUGGESTIONS_SUCCESS = 'FETCH_KEYWORD_SUGGESTIONS_SUCCESS';
var FETCH_KEYWORD_SUGGESTIONS_ERROR = 'FETCH_KEYWORD_SUGGESTIONS_ERROR';
var UPDATE_KEYWORD_SUGGESTIONS_REQUEST = 'UPDATE_KEYWORD_SUGGESTIONS_REQUEST';
var UPDATE_KEYWORD_SUGGESTIONS_SUCCESS = 'UPDATE_KEYWORD_SUGGESTIONS_SUCCESS';
var UPDATE_KEYWORD_SUGGESTIONS_ERROR = 'UPDATE_KEYWORD_SUGGESTIONS_ERROR';
var APPLY_PENDING_KEYWORD_SUGGESTIONS_REQUEST =
  'APPLY_PENDING_KEYWORD_SUGGESTIONS_REQUEST';
var APPLY_PENDING_KEYWORD_SUGGESTIONS_SUCCESS =
  'APPLY_PENDING_KEYWORD_SUGGESTIONS_SUCCESS';
var APPLY_PENDING_KEYWORD_SUGGESTIONS_ERROR =
  'APPLY_PENDING_KEYWORD_SUGGESTIONS_ERROR';
var fetchKeywordSuggestionsRequest = (
  websiteId,
  actionFilter,
  page,
  perPage,
  searchText,
  orderBy,
  ascending
) => ({
  type: FETCH_KEYWORD_SUGGESTIONS_REQUEST,
  websiteId,
  actionFilter,
  page,
  perPage,
  searchText,
  orderBy,
  ascending,
});
var fetchKeywordSuggestionsSuccess = (
  websiteId,
  actionFilter,
  page,
  perPage,
  searchText,
  orderBy,
  ascending,
  keywordSuggestions
) => ({
  type: FETCH_KEYWORD_SUGGESTIONS_SUCCESS,
  websiteId,
  actionFilter,
  page,
  perPage,
  searchText,
  orderBy,
  ascending,
  ...keywordSuggestions,
});
var fetchKeywordSuggestionsError = (
  websiteId,
  actionFilter,
  page,
  perPage,
  searchText,
  orderBy,
  ascending,
  error
) => ({
  type: FETCH_KEYWORD_SUGGESTIONS_ERROR,
  websiteId,
  actionFilter,
  page,
  perPage,
  searchText,
  orderBy,
  ascending,
  error,
});
var fetchKeywordSuggestions =
  (websiteId, actionFilter, page, perPage, searchText, orderBy, ascending) =>
  async (dispatch) => {
    dispatch(
      fetchKeywordSuggestionsRequest(
        websiteId,
        actionFilter,
        page,
        perPage,
        searchText,
        orderBy,
        ascending
      )
    );
    try {
      var data = (0, import_snakecase_keys22.default)(
        {
          actionFilter,
          page,
          perPage,
          orderBy: snakeCase(orderBy),
          ascending,
          filter: searchText,
        },
        { deep: true }
      );
      var response = await $.ajax({
        method: 'GET',
        url: `/ad_champion/websites/${websiteId}/keyword_suggestions`,
        data,
        dataType: 'json',
      });
      dispatch(
        fetchKeywordSuggestionsSuccess(
          websiteId,
          actionFilter,
          page,
          perPage,
          searchText,
          orderBy,
          ascending,
          camelcaseKeys(response, { deep: true })
        )
      );
    } catch (error) {
      dispatch(
        fetchKeywordSuggestionsError(
          websiteId,
          actionFilter,
          page,
          perPage,
          searchText,
          orderBy,
          ascending,
          error.responseJSON.error
        )
      );
    }
  };
var refreshKeywordSuggestions =
  (websiteId, tableName) => async (dispatch, getState) => {
    const state = getState();
    const { page, perPage, orderBy, ascending, searchText } =
      state.keywordSuggestions[tableName];
    await fetchKeywordSuggestions(
      websiteId,
      tableName,
      page,
      perPage,
      searchText,
      orderBy,
      ascending
    )(dispatch);
  };
var updateKeywordSuggestionsRequest = (
  websiteId,
  action,
  keywordSuggestionChanges
) => ({
  type: UPDATE_KEYWORD_SUGGESTIONS_REQUEST,
  websiteId,
  action,
  ...keywordSuggestionChanges,
});
var updateKeywordSuggestionsSuccess = (websiteId) => ({
  type: UPDATE_KEYWORD_SUGGESTIONS_SUCCESS,
  websiteId,
});
var updateKeywordSuggestionsError = (websiteId, error) => ({
  type: UPDATE_KEYWORD_SUGGESTIONS_ERROR,
  websiteId,
  error,
});
var updateKeywordSuggestions =
  (websiteId, action, keywordSuggestionChanges) => async (dispatch) => {
    dispatch(
      updateKeywordSuggestionsRequest(
        websiteId,
        action,
        keywordSuggestionChanges
      )
    );
    try {
      var response = await $.ajax({
        method: 'PUT',
        url: `/ad_champion/websites/${websiteId}/keyword_suggestions`,
        data: {
          apply_pending: false,
          action_filter: action,
          keyword_suggestion_changes: JSON.stringify(keywordSuggestionChanges),
        },
        dataType: 'json',
      });
      dispatch(updateKeywordSuggestionsSuccess(websiteId));
    } catch (error) {
      dispatch(
        updateKeywordSuggestionsError(websiteId, error.responseJSON.error)
      );
    }
  };
var applyPendingKeywordSuggestionsRequest = (websiteId) => ({
  type: APPLY_PENDING_KEYWORD_SUGGESTIONS_REQUEST,
  websiteId,
});
var applyPendingKeywordSuggestionsSuccess = (websiteId) => ({
  type: APPLY_PENDING_KEYWORD_SUGGESTIONS_SUCCESS,
  websiteId,
});
var applyPendingKeywordSuggestionsError = (websiteId, error) => ({
  type: APPLY_PENDING_KEYWORD_SUGGESTIONS_ERROR,
  websiteId,
  error,
});
var applyPendingKeywordSuggestions = (websiteId) => async (dispatch) => {
  dispatch(applyPendingKeywordSuggestionsRequest(websiteId));
  try {
    var response = await $.ajax({
      method: 'PUT',
      url: `/ad_champion/websites/${websiteId}/keyword_suggestions`,
      data: {
        apply_pending: true,
      },
      dataType: 'json',
    });
    dispatch(applyPendingKeywordSuggestionsSuccess(websiteId));
  } catch (error) {
    dispatch(
      applyPendingKeywordSuggestionsError(websiteId, error.responseJSON.error)
    );
  }
};

// src/actions/merchant_center_feed.jsx
var REQUEST_MERCHANT_CENTER_FEED = 'REQUEST_MERCHANT_CENTER_FEED';
var RECEIVE_MERCHANT_CENTER_FEED = 'RECEIVE_MERCHANT_CENTER_FEED';
var requestMerchantCenterFeedData = (scenarioId) => ({
  type: REQUEST_MERCHANT_CENTER_FEED,
  scenarioId,
});
var receiveMerchantCenterFeedData = (scenarioId, data) => ({
  type: RECEIVE_MERCHANT_CENTER_FEED,
  scenarioId,
  data,
});
var fetchMerchantCenterFeedData = (scenarioId) => (dispatch) => {
  dispatch(requestMerchantCenterFeedData(scenarioId));
  $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/merchant_center_feed`,
    dataType: 'json',
    success: (response) => {
      dispatch(
        receiveMerchantCenterFeedData(
          scenarioId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};

// src/actions/merchant_center_product_errors.jsx
var FETCH_MERCHANT_CENTER_PRODUCT_ERRORS_REQUEST =
  'FETCH_MERCHANT_CENTER_PRODUCT_ERRS_REQUEST';
var FETCH_MERCHANT_CENTER_PRODUCT_ERRORS_SUCCESS =
  'FETCH_MERCHANT_CENTER_PRODUCT_ERRS_SUCCESS';
var REFRESH_MERCHANT_CENTER_PRODUCT_ERRORS_REQUEST =
  'REFRESH_MERCHANT_CENTER_PRODUCT_ERRORS_REQUEST';
var REFRESH_MERCHANT_CENTER_PRODUCT_ERRORS_SUCCESS =
  'REFRESH_MERCHANT_CENTER_PRODUCT_ERRORS_SUCCESS';
var FETCH_WEBSITE_MERCHANT_CENTER_ERROR_CATEGORIES_REQUEST =
  'FETCH_WEBSITE_MERCHANT_CENTER_ERROR_CATEGORIES_REQUEST';
var FETCH_WEBSITE_MERCHANT_CENTER_ERROR_CATEGORIES_RESPONSE =
  'FETCH_WEBSITE_MERCHANT_CENTER_ERROR_CATEGORIES_RESPONSE';
var FETCH_WEBSITE_MERCHANT_CENTER_ERRORS_REQUEST =
  'FETCH_WEBSITE_MERCHANT_CENTER_ERRORS_REQUEST';
var FETCH_WEBSITE_MERCHANT_CENTER_ERRORS_RESPONSE =
  'FETCH_WEBSITE_MERCHANT_CENTER_ERRORS_RESPONSE';
var FETCH_MERCHANT_CENTER_ERROR_TYPES_REQUEST =
  'FETCH_MERCHANT_CENTER_ERROR_TYPES_REQUEST';
var FETCH_MERCHANT_CENTER_ERROR_TYPES_RESPONSE =
  'FETCH_MERCHANT_CENTER_ERROR_TYPES_RESPONSE';
var FETCH_MERCHANT_CENTER_ERROR_CATEGORIES_REQUEST =
  'FETCH_MERCHANT_CENTER_ERROR_CATEGORIES_REQUEST';
var FETCH_MERCHANT_CENTER_ERROR_CATEGORIES_RESPONSE =
  'FETCH_MERCHANT_CENTER_ERROR_CATEGORIES_RESPONSE';
var fetchMerchantCenterProductErrorsRequest = (websiteId) => ({
  type: FETCH_MERCHANT_CENTER_PRODUCT_ERRORS_REQUEST,
  websiteId,
});
var fetchMerchantCenterProductErrorsSuccess = (websiteId, response) => ({
  type: FETCH_MERCHANT_CENTER_PRODUCT_ERRORS_SUCCESS,
  websiteId,
  merchantCenterProductErrors: response.mcAccountLevelProductErrors,
});
var fetchMerchantCenterProductErrors = (websiteId) => async (dispatch) => {
  dispatch(fetchMerchantCenterProductErrorsRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/merchant_center_product_errors`,
    dataType: 'json',
  });
  dispatch(
    fetchMerchantCenterProductErrorsSuccess(
      websiteId,
      camelcaseKeys(response, { deep: true })
    )
  );
};
var refreshMerchantCenterProductErrorsRequest = (websiteId) => ({
  type: REFRESH_MERCHANT_CENTER_PRODUCT_ERRORS_REQUEST,
  websiteId,
});
var refreshMerchantCenterProductErrorsSuccess = (
  websiteId,
  response,
  refreshAt
) => ({
  type: REFRESH_MERCHANT_CENTER_PRODUCT_ERRORS_SUCCESS,
  websiteId,
  ...response,
  refreshAt,
});
var refreshMerchantCenterProductErrors =
  (websiteId, refreshAt = /* @__PURE__ */ new Date().toLocaleString()) =>
  async (dispatch) => {
    dispatch(refreshMerchantCenterProductErrorsRequest(websiteId));
    var response = await $.ajax({
      method: 'PUT',
      url: `/ad_champion/websites/${websiteId}/merchant_center_product_errors/refresh_errors`,
      dataType: 'json',
    });
    dispatch(
      refreshMerchantCenterProductErrorsSuccess(
        websiteId,
        camelcaseKeys(response, { deep: true }),
        refreshAt
      )
    );
  };
var fetchWebsiteMerchantCenterErrorCategoriesRequest = (websiteId, scope) => ({
  type: FETCH_WEBSITE_MERCHANT_CENTER_ERROR_CATEGORIES_REQUEST,
  websiteId,
  scope,
});
var fetchWebsiteMerchantCenterErrorCategoriesResponse = (
  websiteId,
  scope,
  payload
) => ({
  type: FETCH_WEBSITE_MERCHANT_CENTER_ERROR_CATEGORIES_RESPONSE,
  websiteId,
  scope,
  ...payload,
});
var fetchWebsiteMerchantCenterErrorCategories =
  (websiteId, scope) => async (dispatch) => {
    dispatch(
      fetchWebsiteMerchantCenterErrorCategoriesRequest(websiteId, scope)
    );
    var response = await $.ajax({
      url: `/ad_champion/websites/${websiteId}/merchant_center/error_categories?scope=${scope}`,
    });
    var payload = camelcaseKeys(response, { deep: true });
    dispatch(
      fetchWebsiteMerchantCenterErrorCategoriesResponse(
        websiteId,
        scope,
        payload
      )
    );
    return payload;
  };
var fetchWebsiteMerchantCenterErrorsRequest = (websiteId, categoryId) => ({
  type: FETCH_WEBSITE_MERCHANT_CENTER_ERRORS_REQUEST,
  websiteId,
  categoryId,
});
var fetchWebsiteMerchantCenterErrorsResponse = (
  websiteId,
  categoryId,
  payload
) => ({
  type: FETCH_WEBSITE_MERCHANT_CENTER_ERRORS_RESPONSE,
  websiteId,
  categoryId,
  ...payload,
});
var fetchWebsiteMerchantCenterErrors =
  (websiteId, categoryId) => async (dispatch) => {
    dispatch(fetchWebsiteMerchantCenterErrorsRequest(websiteId, categoryId));
    var response = await $.ajax({
      url: `/ad_champion/websites/${websiteId}/merchant_center/errors?category_id=${categoryId}`,
    });
    var payload = camelcaseKeys(response, { deep: true });
    dispatch(
      fetchWebsiteMerchantCenterErrorsResponse(websiteId, categoryId, payload)
    );
    return payload;
  };
var fetchMerchantCenterErrorTypesRequest = (ids) => ({
  type: FETCH_MERCHANT_CENTER_ERROR_TYPES_REQUEST,
  ids,
});
var fetchMerchantCenterErrorTypesResponse = (ids, payload) => ({
  type: FETCH_MERCHANT_CENTER_ERROR_TYPES_RESPONSE,
  ids,
  ...payload,
});
var fetchMerchantCenterErrorTypes = (ids) => async (dispatch) => {
  dispatch(fetchMerchantCenterErrorTypesRequest(ids));
  var response = await $.ajax({
    url: `/ad_champion/google/merchant_center/error_types`,
    data: { ids },
  });
  var payload = camelcaseKeys(response, { deep: true });
  dispatch(fetchMerchantCenterErrorTypesResponse(ids, payload));
  return payload;
};
var fetchMerchantCenterErrorCategoriesRequest = (ids) => ({
  type: FETCH_MERCHANT_CENTER_ERROR_CATEGORIES_REQUEST,
  ids,
});
var fetchMerchantCenterErrorCategoriesResponse = (ids, payload) => ({
  type: FETCH_MERCHANT_CENTER_ERROR_CATEGORIES_RESPONSE,
  ids,
  ...payload,
});
var fetchMerchantCenterErrorCategories = (ids) => async (dispatch) => {
  if (!ids || ids.length === 0) {
    return;
  }
  dispatch(fetchMerchantCenterErrorCategoriesRequest(ids));
  var response = await $.ajax({
    url: `/ad_champion/google/merchant_center/error_categories`,
    data: { ids },
  });
  var payload = camelcaseKeys(response, { deep: true });
  dispatch(fetchMerchantCenterErrorCategoriesResponse(ids, payload));
  return payload;
};

// src/actions/merchant_center_product_info_and_measures.jsx
var FETCH_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_REQUEST =
  'FETCH_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_REQUEST';
var FETCH_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_SUCCESS =
  'FETCH_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_SUCCESS';
var FETCH_SYSTEM_WIDE_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_REQUEST =
  'FETCH_SYSTEM_WIDE_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_REQUEST';
var FETCH_SYSTEM_WIDE_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_SUCCESS =
  'FETCH_SYSTEM_WIDE_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_SUCCESS';
var FETCH_ACCOUNT_MERCHANT_CENTER_STATUS_REQUEST =
  'FETCH_ACCOUNT_MERCHANT_CENTER_STATUS_REQUEST';
var FETCH_ACCOUNT_MERCHANT_CENTER_STATUS_SUCCESS =
  'FETCH_ACCOUNT_MERCHANT_CENTER_STATUS_SUCCESS';
var fetchMerchantCenterProductInfoAndMeasuresRequest = (websiteId) => ({
  type: FETCH_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_REQUEST,
  websiteId,
});
var fetchMerchantCenterProductInfoAndMeasuresSuccess = (
  websiteId,
  websiteProductInfoAndMeasures
) => ({
  type: FETCH_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_SUCCESS,
  websiteId,
  websiteProductInfoAndMeasures:
    websiteProductInfoAndMeasures.mcProductInfoAndMeasure,
});
var fetchMerchantCenterProductInfoAndMeasures =
  (websiteId) => async (dispatch) => {
    dispatch(fetchMerchantCenterProductInfoAndMeasuresRequest(websiteId));
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/websites/${websiteId}/merchant_center_product_info_and_measure/`,
      dataType: 'json',
    });
    dispatch(
      fetchMerchantCenterProductInfoAndMeasuresSuccess(
        websiteId,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchSystemWideMerchantCenterProductInfoAndMeasuresRequest = () => ({
  type: FETCH_SYSTEM_WIDE_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_REQUEST,
});
var fetchSystemWideMerchantCenterProductInfoAndMeasuresSuccess = (
  systemWideProductInfoAndMeasures
) => ({
  type: FETCH_SYSTEM_WIDE_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_SUCCESS,
  systemWideProductInfoAndMeasures:
    systemWideProductInfoAndMeasures.systemWideMcDiagnostics,
});
var fetchSystemWideMerchantCenterProductInfoAndMeasures =
  () => async (dispatch) => {
    dispatch(fetchSystemWideMerchantCenterProductInfoAndMeasuresRequest());
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/system_wide_data/merchant_center_product_info_and_measure`,
      dataType: 'json',
    });
    dispatch(
      fetchSystemWideMerchantCenterProductInfoAndMeasuresSuccess(
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchAccountMerchantCenterStatusRequest = (accountId) => ({
  type: FETCH_ACCOUNT_MERCHANT_CENTER_STATUS_REQUEST,
  accountId,
});
var fetchAccountMerchantCenterStatusSuccess = (
  accountId,
  accountMerchantCenterStatus
) => ({
  type: FETCH_ACCOUNT_MERCHANT_CENTER_STATUS_SUCCESS,
  accountId,
  accountMerchantCenterStatus:
    accountMerchantCenterStatus.merchantCenterStatuses,
});
var fetchAccountMerchantCenterStatus = (accountId) => async (dispatch) => {
  dispatch(fetchAccountMerchantCenterStatusRequest(accountId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/accounts/${accountId}/status/get_merchant_center_statuses`,
    dataType: 'json',
  });
  dispatch(
    fetchAccountMerchantCenterStatusSuccess(
      accountId,
      camelcaseKeys(response, { deep: true })
    )
  );
};

// src/actions/microsoft/adwords.jsx
var import_snakecase_keys23 = __toESM(require_snakecase_keys());

// src/selectors/microsoft/user.jsx
var getMicrosoftUser = (getState) => {
  const state = getState();
  const { user } = state.microsoft;
  return user;
};
var getRefreshToken2 = (getState) => {
  const { refreshToken } = getMicrosoftUser(getState);
  return refreshToken;
};

// src/actions/microsoft/adwords.jsx
var LIST_MICROSOFT_ADS_ACCOUNTS_REQUEST = 'LIST_MICROSOFT_ADS_ACCOUNTS_REQUEST';
var LIST_MICROSOFT_ADS_ACCOUNTS_RESPONSE =
  'LIST_MICROSOFT_ADS_ACCOUNTS_RESPONSE';
var SELECT_MICROSOFT_ADS_ACCOUNT_REQUEST =
  'SELECT_MICROSOFT_ADS_ACCOUNT_REQUEST';
var SELECT_MICROSOFT_ADS_ACCOUNT_RESPONSE =
  'SELECT_MICROSOFT_ADS_ACCOUNT_RESPONSE';
var listAdsAccountsRequest = () => ({
  type: LIST_MICROSOFT_ADS_ACCOUNTS_REQUEST,
});
var listAdsAccountsResponse = (accounts) => ({
  type: LIST_MICROSOFT_ADS_ACCOUNTS_RESPONSE,
  accounts,
});
var listAdsAccounts = () => async (dispatch, getState) => {
  const refreshToken = getRefreshToken2(getState);
  dispatch(listAdsAccountsRequest());
  var response;
  var status2 = 202;
  var statusCallback = (_data, _statusText, jqXHR) => {
    status2 = jqXHR.status;
  };
  do {
    response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/microsoft/ads/accounts?refresh_token=${refreshToken}`,
      success: statusCallback,
      error: statusCallback,
    });
    if (status2 === 202) {
      await sleep_default(1e3);
    }
  } while (status2 === 202);
  return dispatch(
    listAdsAccountsResponse(
      response.accounts.map((a) => camelcaseKeys(a, { deep: true }))
    )
  );
};
var selectAdsAccountRequest = (websiteId, adsAccountId, accountName) => ({
  type: SELECT_MICROSOFT_ADS_ACCOUNT_REQUEST,
  websiteId,
  adsAccountId,
  accountName,
});
var selectAdsAccountResponse = (
  websiteId,
  adsAccountId,
  accountName,
  response
) => ({
  type: SELECT_MICROSOFT_ADS_ACCOUNT_RESPONSE,
  websiteId,
  adsAccountId,
  accountName,
  response,
});
var selectAdsAccount =
  (websiteId, adsAccountId, accountName) => (dispatch, getState) => {
    const { refreshToken, email, accessToken } = getMicrosoftUser(getState);
    dispatch(selectAdsAccountRequest(websiteId, adsAccountId, accountName));
    var data = (0, import_snakecase_keys23.default)({
      accessToken,
      oauthUser: email,
      refreshToken,
      websiteId,
      microsoftAdsCustomerId: null,
      microsoftAdsCustomerAccountId: adsAccountId,
      microsoftAdsAccountName: accountName,
    });
    return $.ajax({
      method: 'POST',
      url: `/ad_champion/microsoft/ads/accounts/select`,
      data,
      dataType: 'json',
      success: (response) => {
        return dispatch(
          selectAdsAccountResponse(
            websiteId,
            adsAccountId,
            accountName,
            response
          )
        );
      },
    });
  };

// src/actions/microsoft/merchant_center.jsx
var import_snakecase_keys24 = __toESM(require_snakecase_keys());
var LIST_MICROSOFT_MERCHANT_CENTER_ACCOUNTS_REQUEST =
  'LIST_MICROSOFT_MERCHANT_CENTER_ACCOUNTS_REQUEST';
var LIST_MICROSOFT_MERCHANT_CENTER_ACCOUNTS_RESPONSE =
  'LIST_MICROSOFT_MERCHANT_CENTER_ACCOUNTS_RESPONSE';
var LIST_MC_CATALOGS_REQUEST = 'LIST_MC_CATALOGS_REQUEST';
var LIST_MC_CATALOGS_RESPONSE = 'LIST_MC_CATALOGS_RESPONSE';
var SELECT_MICROSOFT_MERCHANT_CENTER_ACCOUNT_REQUEST =
  'SELECT_MICROSOFT_MERCHANT_CENTER_ACCOUNT_REQUEST';
var SELECT_MICROSOFT_MERCHANT_CENTER_ACCOUNT_RESPONSE =
  'SELECT_MICROSOFT_MERCHANT_CENTER_ACCOUNT_RESPONSE';
var DELETE_MICROSOFT_MERCHANT_CENTER_ACCOUNT_REQUEST =
  'DELETE_MICROSOFT_MERCHANT_CENTER_ACCOUNT_REQUEST';
var DELETE_MICROSOFT_MERCHANT_CENTER_ACCOUNT_RESPONSE =
  'DELETE_MICROSOFT_MERCHANT_CENTER_ACCOUNT_RESPONSE';
var listMcCatalogsRequest = () => ({
  type: LIST_MC_CATALOGS_REQUEST,
});
var listMcCatalogsResponse = (catalogs) => ({
  type: LIST_MC_CATALOGS_RESPONSE,
  catalogs,
});
var listMcCatalogs =
  (merchantCenterAccountId, customerId, customerAccountId) =>
  async (dispatch, getState) => {
    const refreshToken = getRefreshToken2(getState);
    dispatch(listMcCatalogsRequest());
    var data = (0, import_snakecase_keys24.default)({
      refreshToken,
      merchantCenterAccountId,
      customerId,
      customerAccountId,
    });
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/microsoft/merchant_center/accounts/catalogs`,
      data,
      dataType: 'json',
    });
    return dispatch(
      listMcCatalogsResponse(camelcaseKeys(response, { deep: true }))
    );
  };
var deleteMerchantCenterAccountRequest2 = (websiteId) => ({
  type: DELETE_MICROSOFT_MERCHANT_CENTER_ACCOUNT_REQUEST,
  websiteId,
});
var deleteMerchantCenterAccountResponse2 = (websiteId, response) => ({
  type: DELETE_MICROSOFT_MERCHANT_CENTER_ACCOUNT_RESPONSE,
  websiteId,
  response,
});
var deleteMerchantCenterAccount2 = (websiteId) => (dispatch) => {
  dispatch(deleteMerchantCenterAccountRequest2(websiteId));
  return $.ajax({
    url: `/ad_champion/microsoft/merchant_center/accounts/${websiteId}`,
    method: 'DELETE',
    dataType: 'json',
    success: (response) => {
      dispatch(
        deleteMerchantCenterAccountResponse2(websiteId, camelcaseKeys(response))
      );
    },
  });
};

// src/actions/microsoft/user.jsx
var SET_MICROSOFT_USER = 'SET_MICROSOFT_USER';
var setMicrosoftUser = (user) => ({
  type: SET_MICROSOFT_USER,
  user,
});

// src/actions/notifications.jsx
var GET_NOTIFICATIONS_REQUEST = 'GET_NOTIFICATIONS_REQUEST';
var GET_NOTIFICATIONS_RESPONSE = 'GET_NOTIFICATIONS_RESPONSE';
var ACKNOWLEDGE_NOTIFICATION_REQUEST = 'ACKNOWLEDGE_NOTIFICATION_REQUEST';
var ACKNOWLEDGE_NOTIFICATION_RESPONSE = 'ACKNOWLEDGE_NOTIFICATION_RESPONSE';
var getNotificationsRequest = () => ({
  type: GET_NOTIFICATIONS_REQUEST,
});
var getNotificationsResponse = (notifications) => ({
  type: GET_NOTIFICATIONS_RESPONSE,
  notifications,
});
var getNotifications = () => (dispatch) => {
  dispatch(getNotificationsRequest());
  return $.ajax({
    method: 'GET',
    url: '/ad_champion/notifications',
    success: (response) => {
      dispatch(
        getNotificationsResponse(camelcaseKeys(response, { deep: true }))
      );
    },
  });
};
var acknowledgeNotificationRequest = (id) => ({
  type: ACKNOWLEDGE_NOTIFICATION_REQUEST,
  id,
});
var acknowledgeNotificationResponse = (id, response) => ({
  type: ACKNOWLEDGE_NOTIFICATION_RESPONSE,
  id,
  response,
});
var acknowledgeNotification = (id) => (dispatch) => {
  dispatch(acknowledgeNotificationRequest(id));
  $.ajax({
    method: 'PUT',
    url: `/ad_champion/notifications/${id}`,
    dataType: 'json',
    data: { status: 'acknowledged' },
    success: (response) =>
      dispatch(acknowledgeNotificationResponse(id, response)),
  });
};

// src/actions/performance/accounts.jsx
var import_snakecase_keys27 = __toESM(require_snakecase_keys());

// src/actions/performance/master_accounts.jsx
var import_snakecase_keys25 = __toESM(require_snakecase_keys());
var fetchMasterAccountPerformanceByDayRequest = (
  accountType,
  masterAccountId,
  channel
) => ({
  type: FETCH_PERFORMANCE_BY_DAY_REQUEST,
  accountType,
  id: masterAccountId,
  channel,
});
var fetchMasterAccountPerformanceByDayRequestSuccess = (
  accountType,
  masterAccountId,
  channel,
  response
) => ({
  type: FETCH_PERFORMANCE_BY_DAY_SUCCESS,
  accountType,
  id: masterAccountId,
  channel,
  ...response,
});
var fetchMasterAccountPerformanceByDay =
  (accountType, masterAccountId, channel, dateRange) => async (dispatch) => {
    dispatch(
      fetchMasterAccountPerformanceByDayRequest(
        accountType,
        masterAccountId,
        channel
      )
    );
    var status2 = 202;
    var response;
    var statusCode2 = {
      200: () => {
        status2 = 200;
      },
      202: () => {
        status2 = 202;
      },
    };
    while (status2 === 202) {
      response = await $.ajax({
        method: 'GET',
        url: `/ad_champion/master_accounts/${masterAccountId}/performance`,
        data: (0, import_snakecase_keys25.default)(
          { channel, ...dateRange },
          { deep: true }
        ),
        dataType: 'json',
        statusCode: statusCode2,
      });
      if (status2 === 202) {
        await sleep_default(1e3);
      }
    }
    dispatch(
      fetchMasterAccountPerformanceByDayRequestSuccess(
        accountType,
        masterAccountId,
        channel,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchMasterAccountPerformanceByWebsiteRequest = (
  accountType,
  masterAccountId,
  channel,
  page,
  perPage
) => ({
  type: FETCH_PERFORMANCE_BY_SUB_ACCOUNT_TYPE_REQUEST,
  accountType,
  id: masterAccountId,
  channel,
  page,
  perPage,
});
var fetchMasterAccountPerformanceByWebsiteRequestSuccess = (
  accountType,
  masterAccountId,
  channel,
  page,
  perPage,
  response
) => ({
  type: FETCH_PERFORMANCE_BY_SUB_ACCOUNT_TYPE_SUCCESS,
  accountType,
  id: masterAccountId,
  channel,
  page,
  perPage,
  ...response,
});
var fetchMasterAccountPerformanceByWebsite =
  (accountType, masterAccountId, channel, dateRange, page, perPage) =>
  async (dispatch) => {
    dispatch(
      fetchMasterAccountPerformanceByWebsiteRequest(
        accountType,
        masterAccountId,
        channel,
        page,
        perPage
      )
    );
    var status2 = 202;
    var response;
    var statusCode2 = {
      200: () => {
        status2 = 200;
      },
      202: () => {
        status2 = 202;
      },
    };
    while (status2 === 202) {
      response = await $.ajax({
        method: 'GET',
        url: `/ad_champion/master_accounts/${masterAccountId}/performance/show_master_account_performance_by_website`,
        data: (0, import_snakecase_keys25.default)(
          { channel, ...dateRange, page, perPage },
          { deep: true }
        ),
        dataType: 'json',
        statusCode: statusCode2,
      });
      if (status2 === 202) {
        await sleep_default(1e3);
      }
    }
    dispatch(
      fetchMasterAccountPerformanceByWebsiteRequestSuccess(
        accountType,
        masterAccountId,
        channel,
        page,
        perPage,
        camelcaseKeys(response, { deep: true })
      )
    );
  };

// src/actions/performance/websites.jsx
var import_snakecase_keys26 = __toESM(require_snakecase_keys());

// src/selectors/performance.jsx
var import_reselect8 = __toESM(require_lib());

// node_modules/change-case/dist/index.js
var SPLIT_LOWER_UPPER_RE2 = /([\p{Ll}\d])(\p{Lu})/gu;
var SPLIT_UPPER_UPPER_RE2 = /(\p{Lu})([\p{Lu}][\p{Ll}])/gu;
var SPLIT_SEPARATE_NUMBER_RE = /(\d)\p{Ll}|(\p{L})\d/u;
var DEFAULT_STRIP_REGEXP2 = /[^\p{L}\d]+/giu;
var SPLIT_REPLACE_VALUE2 = '$1\0$2';
var DEFAULT_PREFIX_SUFFIX_CHARACTERS = '';
function split2(value) {
  let result2 = value.trim();
  result2 = result2
    .replace(SPLIT_LOWER_UPPER_RE2, SPLIT_REPLACE_VALUE2)
    .replace(SPLIT_UPPER_UPPER_RE2, SPLIT_REPLACE_VALUE2);
  result2 = result2.replace(DEFAULT_STRIP_REGEXP2, '\0');
  let start = 0;
  let end = result2.length;
  while (result2.charAt(start) === '\0') start++;
  if (start === end) return [];
  while (result2.charAt(end - 1) === '\0') end--;
  return result2.slice(start, end).split(/\0/g);
}
function splitSeparateNumbers(value) {
  const words = split2(value);
  for (let i = 0; i < words.length; i++) {
    const word = words[i];
    const match = SPLIT_SEPARATE_NUMBER_RE.exec(word);
    if (match) {
      const offset = match.index + (match[1] ?? match[2]).length;
      words.splice(i, 1, word.slice(0, offset), word.slice(offset));
    }
  }
  return words;
}
function camelCase2(input, options) {
  const [prefix, words, suffix] = splitPrefixSuffix(input, options);
  const lower = lowerFactory(options?.locale);
  const upper = upperFactory(options?.locale);
  const transform2 = options?.mergeAmbiguousCharacters
    ? capitalCaseTransformFactory(lower, upper)
    : pascalCaseTransformFactory(lower, upper);
  return (
    prefix +
    words
      .map((word, index) => {
        if (index === 0) return lower(word);
        return transform2(word, index);
      })
      .join(options?.delimiter ?? '') +
    suffix
  );
}
function capitalCase(input, options) {
  const [prefix, words, suffix] = splitPrefixSuffix(input, options);
  const lower = lowerFactory(options?.locale);
  const upper = upperFactory(options?.locale);
  return (
    prefix +
    words
      .map(capitalCaseTransformFactory(lower, upper))
      .join(options?.delimiter ?? ' ') +
    suffix
  );
}
function lowerFactory(locale) {
  return locale === false
    ? (input) => input.toLowerCase()
    : (input) => input.toLocaleLowerCase(locale);
}
function upperFactory(locale) {
  return locale === false
    ? (input) => input.toUpperCase()
    : (input) => input.toLocaleUpperCase(locale);
}
function capitalCaseTransformFactory(lower, upper) {
  return (word) => `${upper(word[0])}${lower(word.slice(1))}`;
}
function pascalCaseTransformFactory(lower, upper) {
  return (word, index) => {
    const char0 = word[0];
    const initial2 =
      index > 0 && char0 >= '0' && char0 <= '9' ? '_' + char0 : upper(char0);
    return initial2 + lower(word.slice(1));
  };
}
function splitPrefixSuffix(input, options = {}) {
  const splitFn =
    options.split ?? (options.separateNumbers ? splitSeparateNumbers : split2);
  const prefixCharacters =
    options.prefixCharacters ?? DEFAULT_PREFIX_SUFFIX_CHARACTERS;
  const suffixCharacters =
    options.suffixCharacters ?? DEFAULT_PREFIX_SUFFIX_CHARACTERS;
  let prefixIndex = 0;
  let suffixIndex = input.length;
  while (prefixIndex < input.length) {
    const char = input.charAt(prefixIndex);
    if (!prefixCharacters.includes(char)) break;
    prefixIndex++;
  }
  while (suffixIndex > prefixIndex) {
    const index = suffixIndex - 1;
    const char = input.charAt(index);
    if (!suffixCharacters.includes(char)) break;
    suffixIndex = index;
  }
  return [
    input.slice(0, prefixIndex),
    splitFn(input.slice(prefixIndex, suffixIndex)),
    input.slice(suffixIndex),
  ];
}

// src/selectors/advertising.jsx
var import_reselect6 = __toESM(require_lib());

// src/images/feed_ops/google/google-merchant-center.png
var google_merchant_center_default = './google-merchant-center-YV3ZNG7P.png';

// src/images/feed_ops/google/google-ads.png
var google_ads_default = './google-ads-OSVRU24B.png';

// src/images/feed_ops/facebook/meta.png
var meta_default = './meta-XEYIVF5E.png';

// src/images/feed_ops/microsoft/microsoft.png
var microsoft_default = './microsoft-IADBL2R7.png';

// src/images/feed_ops/bazaarvoice/bazaarvoice.png
var bazaarvoice_default = './bazaarvoice-SW6TV7OD.png';

// src/images/feed_ops/reebelo/reebelo.png
var reebelo_default = './reebelo-GFNSW6PS.png';

// src/images/feed_ops/pinterest/pinterest.png
var pinterest_default = './pinterest-KGC5KKOO.png';

// src/util/supported_channels.jsx
var CHANNEL_ALL = 'all channels';
var CHANNEL_GOOGLE = 'google';
var CHANNEL_FACEBOOK = 'facebook';
var CHANNEL_MICROSOFT = 'microsoft';
var CHANNEL_BAZAARVOICE = 'bazaarvoice';
var CHANNEL_REEBELO = 'reebelo';
var CHANNEL_PINTEREST = 'pinterest';
var CHANNEL_TIKTOK = 'tiktok';
var CHANNEL_EBAY = 'ebay';
var CHANNEL_AMAZON = 'amazon';
var CHANNEL_CATCH_AU = 'catch_au';
var CHANNEL_BUNNINGS = 'bunnings';
var CHANNEL_MY_DEAL = 'my_deal';
var CHANNEL_KOGAN = 'kogan';
var CHANNEL_MY_SALE = 'my_sale';
var PLAYBOOK_CHANNELS = [
  CHANNEL_ALL,
  CHANNEL_GOOGLE,
  CHANNEL_FACEBOOK,
  CHANNEL_MICROSOFT,
  CHANNEL_BAZAARVOICE,
  CHANNEL_REEBELO,
  CHANNEL_PINTEREST,
  CHANNEL_TIKTOK,
  CHANNEL_CATCH_AU,
  CHANNEL_BUNNINGS,
  CHANNEL_EBAY,
  CHANNEL_AMAZON,
  CHANNEL_MY_DEAL,
  CHANNEL_MY_SALE,
  CHANNEL_KOGAN,
];
var PROGRAMS = {
  [CHANNEL_GOOGLE]: [
    'Google Shopping Ads / Pmax',
    'Google Free Product Listings',
    'Google Dynamic Remarketing',
  ],
  [CHANNEL_MICROSOFT]: [
    'Bing Shopping Ads',
    'Bing Free Product Listings',
    'Microsoft MSAN',
  ],
  [CHANNEL_FACEBOOK]: [
    'Meta Advantage+ Catalog Ads',
    'Collection Ads',
    'Carousel Ads',
    'Ads With Product Tags',
  ],
  [CHANNEL_PINTEREST]: ['Pinterest Ads'],
  [CHANNEL_TIKTOK]: ['TikTok Shop Ads'],
};
var FEEDOPS_FEATURES = {
  [CHANNEL_GOOGLE]: [
    'Send product data updates to Google Merchant Center',
    'Activate a playbook for better product visibility in Google',
    'Detect critical Google Merchant Center errors',
  ],
  [CHANNEL_MICROSOFT]: [
    'Send product data updates to Microsoft Merchant Center',
    'Activate a playbook for better product visibility in Microsoft',
    'Detect critical Microsoft Merchant Center errors',
  ],
  [CHANNEL_FACEBOOK]: ['Generate an XML feed that you can upload to Meta'],
  [CHANNEL_PINTEREST]: [
    'Generate an XML feed that you can upload to Pinterest',
  ],
  [CHANNEL_TIKTOK]: [
    'Generate an XML feed that you can upload to TikTok Ads Manager as a Catalog',
  ],
};

// node_modules/query-string/base.js
var base_exports = {};
__export(base_exports, {
  exclude: () => exclude,
  extract: () => extract,
  parse: () => parse,
  parseUrl: () => parseUrl,
  pick: () => pick,
  stringify: () => stringify,
  stringifyUrl: () => stringifyUrl,
});

// node_modules/query-string/node_modules/decode-uri-component/index.js
var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');
function decodeComponents(components, split3) {
  try {
    return [decodeURIComponent(components.join(''))];
  } catch {}
  if (components.length === 1) {
    return components;
  }
  split3 = split3 || 1;
  const left = components.slice(0, split3);
  const right = components.slice(split3);
  return Array.prototype.concat.call(
    [],
    decodeComponents(left),
    decodeComponents(right)
  );
}
function decode(input) {
  try {
    return decodeURIComponent(input);
  } catch {
    let tokens = input.match(singleMatcher) || [];
    for (let i = 1; i < tokens.length; i++) {
      input = decodeComponents(tokens, i).join('');
      tokens = input.match(singleMatcher) || [];
    }
    return input;
  }
}
function customDecodeURIComponent(input) {
  const replaceMap = {
    '%FE%FF': '\uFFFD\uFFFD',
    '%FF%FE': '\uFFFD\uFFFD',
  };
  let match = multiMatcher.exec(input);
  while (match) {
    try {
      replaceMap[match[0]] = decodeURIComponent(match[0]);
    } catch {
      const result2 = decode(match[0]);
      if (result2 !== match[0]) {
        replaceMap[match[0]] = result2;
      }
    }
    match = multiMatcher.exec(input);
  }
  replaceMap['%C2'] = '\uFFFD';
  const entries = Object.keys(replaceMap);
  for (const key of entries) {
    input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
  }
  return input;
}
function decodeUriComponent(encodedURI) {
  if (typeof encodedURI !== 'string') {
    throw new TypeError(
      'Expected `encodedURI` to be of type `string`, got `' +
        typeof encodedURI +
        '`'
    );
  }
  try {
    return decodeURIComponent(encodedURI);
  } catch {
    return customDecodeURIComponent(encodedURI);
  }
}

// node_modules/filter-obj/index.js
function includeKeys(object2, predicate) {
  const result2 = {};
  if (Array.isArray(predicate)) {
    for (const key of predicate) {
      const descriptor = Object.getOwnPropertyDescriptor(object2, key);
      if (descriptor?.enumerable) {
        Object.defineProperty(result2, key, descriptor);
      }
    }
  } else {
    for (const key of Reflect.ownKeys(object2)) {
      const descriptor = Object.getOwnPropertyDescriptor(object2, key);
      if (descriptor.enumerable) {
        const value = object2[key];
        if (predicate(key, value, object2)) {
          Object.defineProperty(result2, key, descriptor);
        }
      }
    }
  }
  return result2;
}

// node_modules/split-on-first/index.js
function splitOnFirst(string, separator) {
  if (!(typeof string === 'string' && typeof separator === 'string')) {
    throw new TypeError('Expected the arguments to be of type `string`');
  }
  if (string === '' || separator === '') {
    return [];
  }
  const separatorIndex = string.indexOf(separator);
  if (separatorIndex === -1) {
    return [];
  }
  return [
    string.slice(0, separatorIndex),
    string.slice(separatorIndex + separator.length),
  ];
}

// node_modules/query-string/base.js
var isNullOrUndefined = (value) => value === null || value === void 0;
var strictUriEncode = (string) =>
  encodeURIComponent(string).replaceAll(
    /[!'()*]/g,
    (x) => `%${x.charCodeAt(0).toString(16).toUpperCase()}`
  );
var encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');
function encoderForArrayFormat(options) {
  switch (options.arrayFormat) {
    case 'index': {
      return (key) => (result2, value) => {
        const index = result2.length;
        if (
          value === void 0 ||
          (options.skipNull && value === null) ||
          (options.skipEmptyString && value === '')
        ) {
          return result2;
        }
        if (value === null) {
          return [...result2, [encode(key, options), '[', index, ']'].join('')];
        }
        return [
          ...result2,
          [
            encode(key, options),
            '[',
            encode(index, options),
            ']=',
            encode(value, options),
          ].join(''),
        ];
      };
    }
    case 'bracket': {
      return (key) => (result2, value) => {
        if (
          value === void 0 ||
          (options.skipNull && value === null) ||
          (options.skipEmptyString && value === '')
        ) {
          return result2;
        }
        if (value === null) {
          return [...result2, [encode(key, options), '[]'].join('')];
        }
        return [
          ...result2,
          [encode(key, options), '[]=', encode(value, options)].join(''),
        ];
      };
    }
    case 'colon-list-separator': {
      return (key) => (result2, value) => {
        if (
          value === void 0 ||
          (options.skipNull && value === null) ||
          (options.skipEmptyString && value === '')
        ) {
          return result2;
        }
        if (value === null) {
          return [...result2, [encode(key, options), ':list='].join('')];
        }
        return [
          ...result2,
          [encode(key, options), ':list=', encode(value, options)].join(''),
        ];
      };
    }
    case 'comma':
    case 'separator':
    case 'bracket-separator': {
      const keyValueSeparator =
        options.arrayFormat === 'bracket-separator' ? '[]=' : '=';
      return (key) => (result2, value) => {
        if (
          value === void 0 ||
          (options.skipNull && value === null) ||
          (options.skipEmptyString && value === '')
        ) {
          return result2;
        }
        value = value === null ? '' : value;
        if (result2.length === 0) {
          return [
            [
              encode(key, options),
              keyValueSeparator,
              encode(value, options),
            ].join(''),
          ];
        }
        return [
          [result2, encode(value, options)].join(options.arrayFormatSeparator),
        ];
      };
    }
    default: {
      return (key) => (result2, value) => {
        if (
          value === void 0 ||
          (options.skipNull && value === null) ||
          (options.skipEmptyString && value === '')
        ) {
          return result2;
        }
        if (value === null) {
          return [...result2, encode(key, options)];
        }
        return [
          ...result2,
          [encode(key, options), '=', encode(value, options)].join(''),
        ];
      };
    }
  }
}
function parserForArrayFormat(options) {
  let result2;
  switch (options.arrayFormat) {
    case 'index': {
      return (key, value, accumulator) => {
        result2 = /\[(\d*)]$/.exec(key);
        key = key.replace(/\[\d*]$/, '');
        if (!result2) {
          accumulator[key] = value;
          return;
        }
        if (accumulator[key] === void 0) {
          accumulator[key] = {};
        }
        accumulator[key][result2[1]] = value;
      };
    }
    case 'bracket': {
      return (key, value, accumulator) => {
        result2 = /(\[])$/.exec(key);
        key = key.replace(/\[]$/, '');
        if (!result2) {
          accumulator[key] = value;
          return;
        }
        if (accumulator[key] === void 0) {
          accumulator[key] = [value];
          return;
        }
        accumulator[key] = [...accumulator[key], value];
      };
    }
    case 'colon-list-separator': {
      return (key, value, accumulator) => {
        result2 = /(:list)$/.exec(key);
        key = key.replace(/:list$/, '');
        if (!result2) {
          accumulator[key] = value;
          return;
        }
        if (accumulator[key] === void 0) {
          accumulator[key] = [value];
          return;
        }
        accumulator[key] = [...accumulator[key], value];
      };
    }
    case 'comma':
    case 'separator': {
      return (key, value, accumulator) => {
        const isArray =
          typeof value === 'string' &&
          value.includes(options.arrayFormatSeparator);
        const isEncodedArray =
          typeof value === 'string' &&
          !isArray &&
          decode2(value, options).includes(options.arrayFormatSeparator);
        value = isEncodedArray ? decode2(value, options) : value;
        const newValue =
          isArray || isEncodedArray
            ? value
                .split(options.arrayFormatSeparator)
                .map((item) => decode2(item, options))
            : value === null
            ? value
            : decode2(value, options);
        accumulator[key] = newValue;
      };
    }
    case 'bracket-separator': {
      return (key, value, accumulator) => {
        const isArray = /(\[])$/.test(key);
        key = key.replace(/\[]$/, '');
        if (!isArray) {
          accumulator[key] = value ? decode2(value, options) : value;
          return;
        }
        const arrayValue =
          value === null
            ? []
            : decode2(value, options).split(options.arrayFormatSeparator);
        if (accumulator[key] === void 0) {
          accumulator[key] = arrayValue;
          return;
        }
        accumulator[key] = [...accumulator[key], ...arrayValue];
      };
    }
    default: {
      return (key, value, accumulator) => {
        if (accumulator[key] === void 0) {
          accumulator[key] = value;
          return;
        }
        accumulator[key] = [...[accumulator[key]].flat(), value];
      };
    }
  }
}
function validateArrayFormatSeparator(value) {
  if (typeof value !== 'string' || value.length !== 1) {
    throw new TypeError('arrayFormatSeparator must be single character string');
  }
}
function encode(value, options) {
  if (options.encode) {
    return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
  }
  return value;
}
function decode2(value, options) {
  if (options.decode) {
    return decodeUriComponent(value);
  }
  return value;
}
function keysSorter(input) {
  if (Array.isArray(input)) {
    return input.sort();
  }
  if (typeof input === 'object') {
    return keysSorter(Object.keys(input))
      .sort((a, b) => Number(a) - Number(b))
      .map((key) => input[key]);
  }
  return input;
}
function removeHash(input) {
  const hashStart = input.indexOf('#');
  if (hashStart !== -1) {
    input = input.slice(0, hashStart);
  }
  return input;
}
function getHash(url2) {
  let hash = '';
  const hashStart = url2.indexOf('#');
  if (hashStart !== -1) {
    hash = url2.slice(hashStart);
  }
  return hash;
}
function parseValue(value, options, type) {
  if (type === 'string' && typeof value === 'string') {
    return value;
  }
  if (typeof type === 'function' && typeof value === 'string') {
    return type(value);
  }
  if (
    options.parseBooleans &&
    value !== null &&
    (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')
  ) {
    return value.toLowerCase() === 'true';
  }
  if (
    type === 'number' &&
    !Number.isNaN(Number(value)) &&
    typeof value === 'string' &&
    value.trim() !== ''
  ) {
    return Number(value);
  }
  if (
    options.parseNumbers &&
    !Number.isNaN(Number(value)) &&
    typeof value === 'string' &&
    value.trim() !== ''
  ) {
    return Number(value);
  }
  return value;
}
function extract(input) {
  input = removeHash(input);
  const queryStart = input.indexOf('?');
  if (queryStart === -1) {
    return '';
  }
  return input.slice(queryStart + 1);
}
function parse(query, options) {
  options = {
    decode: true,
    sort: true,
    arrayFormat: 'none',
    arrayFormatSeparator: ',',
    parseNumbers: false,
    parseBooleans: false,
    types: /* @__PURE__ */ Object.create(null),
    ...options,
  };
  validateArrayFormatSeparator(options.arrayFormatSeparator);
  const formatter = parserForArrayFormat(options);
  const returnValue = /* @__PURE__ */ Object.create(null);
  if (typeof query !== 'string') {
    return returnValue;
  }
  query = query.trim().replace(/^[?#&]/, '');
  if (!query) {
    return returnValue;
  }
  for (const parameter of query.split('&')) {
    if (parameter === '') {
      continue;
    }
    const parameter_ = options.decode
      ? parameter.replaceAll('+', ' ')
      : parameter;
    let [key, value] = splitOnFirst(parameter_, '=');
    if (key === void 0) {
      key = parameter_;
    }
    value =
      value === void 0
        ? null
        : ['comma', 'separator', 'bracket-separator'].includes(
            options.arrayFormat
          )
        ? value
        : decode2(value, options);
    formatter(decode2(key, options), value, returnValue);
  }
  for (const [key, value] of Object.entries(returnValue)) {
    if (
      typeof value === 'object' &&
      value !== null &&
      options.types[key] !== 'string'
    ) {
      for (const [key2, value2] of Object.entries(value)) {
        const type = options.types[key]
          ? options.types[key].replace('[]', '')
          : void 0;
        value[key2] = parseValue(value2, options, type);
      }
    } else if (
      typeof value === 'object' &&
      value !== null &&
      options.types[key] === 'string'
    ) {
      returnValue[key] = Object.values(value).join(
        options.arrayFormatSeparator
      );
    } else {
      returnValue[key] = parseValue(value, options, options.types[key]);
    }
  }
  if (options.sort === false) {
    return returnValue;
  }
  return (
    options.sort === true
      ? Object.keys(returnValue).sort()
      : Object.keys(returnValue).sort(options.sort)
  ).reduce((result2, key) => {
    const value = returnValue[key];
    result2[key] =
      Boolean(value) && typeof value === 'object' && !Array.isArray(value)
        ? keysSorter(value)
        : value;
    return result2;
  }, /* @__PURE__ */ Object.create(null));
}
function stringify(object2, options) {
  if (!object2) {
    return '';
  }
  options = {
    encode: true,
    strict: true,
    arrayFormat: 'none',
    arrayFormatSeparator: ',',
    ...options,
  };
  validateArrayFormatSeparator(options.arrayFormatSeparator);
  const shouldFilter = (key) =>
    (options.skipNull && isNullOrUndefined(object2[key])) ||
    (options.skipEmptyString && object2[key] === '');
  const formatter = encoderForArrayFormat(options);
  const objectCopy = {};
  for (const [key, value] of Object.entries(object2)) {
    if (!shouldFilter(key)) {
      objectCopy[key] = value;
    }
  }
  const keys2 = Object.keys(objectCopy);
  if (options.sort !== false) {
    keys2.sort(options.sort);
  }
  return keys2
    .map((key) => {
      const value = object2[key];
      if (value === void 0) {
        return '';
      }
      if (value === null) {
        return encode(key, options);
      }
      if (Array.isArray(value)) {
        if (value.length === 0 && options.arrayFormat === 'bracket-separator') {
          return encode(key, options) + '[]';
        }
        return value.reduce(formatter(key), []).join('&');
      }
      return encode(key, options) + '=' + encode(value, options);
    })
    .filter((x) => x.length > 0)
    .join('&');
}
function parseUrl(url2, options) {
  options = {
    decode: true,
    ...options,
  };
  let [url_, hash] = splitOnFirst(url2, '#');
  if (url_ === void 0) {
    url_ = url2;
  }
  return {
    url: url_?.split('?')?.[0] ?? '',
    query: parse(extract(url2), options),
    ...(options && options.parseFragmentIdentifier && hash
      ? { fragmentIdentifier: decode2(hash, options) }
      : {}),
  };
}
function stringifyUrl(object2, options) {
  options = {
    encode: true,
    strict: true,
    [encodeFragmentIdentifier]: true,
    ...options,
  };
  const url2 = removeHash(object2.url).split('?')[0] || '';
  const queryFromUrl = extract(object2.url);
  const query = {
    ...parse(queryFromUrl, { sort: false }),
    ...object2.query,
  };
  let queryString = stringify(query, options);
  queryString &&= `?${queryString}`;
  let hash = getHash(object2.url);
  if (typeof object2.fragmentIdentifier === 'string') {
    const urlObjectForFragmentEncode = new URL(url2);
    urlObjectForFragmentEncode.hash = object2.fragmentIdentifier;
    hash = options[encodeFragmentIdentifier]
      ? urlObjectForFragmentEncode.hash
      : `#${object2.fragmentIdentifier}`;
  }
  return `${url2}${queryString}${hash}`;
}
function pick(input, filter2, options) {
  options = {
    parseFragmentIdentifier: true,
    [encodeFragmentIdentifier]: false,
    ...options,
  };
  const { url: url2, query, fragmentIdentifier } = parseUrl(input, options);
  return stringifyUrl(
    {
      url: url2,
      query: includeKeys(query, filter2),
      fragmentIdentifier,
    },
    options
  );
}
function exclude(input, filter2, options) {
  const exclusionFilter = Array.isArray(filter2)
    ? (key) => !filter2.includes(key)
    : (key, value) => !filter2(key, value);
  return pick(input, exclusionFilter, options);
}

// node_modules/query-string/index.js
var query_string_default = base_exports;

// src/selectors/channel.jsx
var import_reselect3 = __toESM(require_lib());
var noDefaultChannelSelector = (_state, props) => {
  if (props.location) {
    return query_string_default.parse(props.location.search).channel;
  } else {
    throw new Error('Missing location prop');
  }
};
var channelSelector = (0, import_reselect3.createSelector)(
  [noDefaultChannelSelector],
  (channel) => channel || CHANNEL_ALL
);
var defaultGoogleChannelSelector = (_state, props) => {
  return noDefaultChannelSelector(_state, props) || CHANNEL_GOOGLE;
};
var channelPresentSelector = (_state, props) => {
  const channel = noDefaultChannelSelector(_state, props);
  return (channel && channel.length > 0) || false;
};

// src/selectors/websites.jsx
var import_reselect5 = __toESM(require_lib());
var import_lodash2 = __toESM(require_lodash());

// src/selectors/user.jsx
var import_reselect4 = __toESM(require_lib());
var import_lodash = __toESM(require_lodash());

// src/util/website.jsx
var import_url = __toESM(require_url());
var stripProtocolFromWebsiteUrl = (websiteUrl) => {
  return import_url.default.parse(websiteUrl || '').hostname || websiteUrl;
};

// src/selectors/user.jsx
var usersSelector = (state) => state.users || {};
var currentUserSelector = (0, import_reselect4.createSelector)(
  usersSelector,
  (users) => users.currentUser || {}
);
var websiteListSelector = (state, props) =>
  (state.websites || {}).fullList || [];
var loggedInSelector = (0, import_reselect4.createSelector)(
  currentUserSelector,
  (currentUser) => currentUser.id > 0
);
var superUserSelector = (0, import_reselect4.createSelector)(
  currentUserSelector,
  (currentUser) => currentUser.superUser || false
);
var newUserSelector = (0, import_reselect4.createSelector)(
  currentUserSelector,
  (currentUser) => currentUser.newUser || false
);
var profileCompleteSelector = (0, import_reselect4.createSelector)(
  currentUserSelector,
  (currentUser) => currentUser.profileComplete || false
);
var canGenManualOptSuggestionsSelector = (0, import_reselect4.createSelector)(
  currentUserSelector,
  (currentUser) => currentUser.canGenManualOptSuggestions || false
);
var roleSelector = (0, import_reselect4.createSelector)(
  currentUserSelector,
  (currentUser) => currentUser.role || ''
);
var masterAccountListSelector = (0, import_reselect4.createSelector)(
  currentUserSelector,
  (currentUser) =>
    import_lodash.default.sortBy(currentUser.masterAccountList, ['label']) || []
);
var accountListSelector = (0, import_reselect4.createSelector)(
  currentUserSelector,
  (currentUser) =>
    import_lodash.default.sortBy(currentUser.accountList, ['label']) || []
);
var accountByAccountIdSelector = (accountId) =>
  (0, import_reselect4.createSelector)(accountListSelector, (accountList) =>
    accountList.find((account) => account.id === accountId)
  ) || {};
var emailSelector = (0, import_reselect4.createSelector)(
  currentUserSelector,
  (currentUser) => currentUser.email || ''
);
var currentUserProfileSelector = (0, import_reselect4.createSelector)(
  currentUserSelector,
  (currentUser) => currentUser.profile || {}
);
var workEmailSelector = (0, import_reselect4.createSelector)(
  currentUserProfileSelector,
  (profile) => profile.workEmail || ''
);
var currentUserAccountsOverviewSelector = (0, import_reselect4.createSelector)(
  currentUserSelector,
  (currentUser) => currentUser.accountsOverview || []
);
var currentUserAccountsOverviewFiltersSelector = (0,
import_reselect4.createSelector)(
  currentUserSelector,
  (currentUser) => currentUser.accountsOverviewFilters || []
);
var accountTypeSelector = (_state, props) =>
  props.match.params.accountType ||
  (props.match.params.budgetCategoryId ? 'budget_categories' : 'websites');
var accountTypeIdSelector = (0, import_reselect4.createSelector)(
  [accountTypeSelector, (_state, props) => props.match.params],
  (accountType, params) => {
    let lookupType;
    switch (accountType) {
      case 'master_accounts':
        lookupType = 'accountId';
        break;
      case 'accounts':
        lookupType = 'accountId';
        break;
      case 'websites':
        lookupType = 'websiteId';
        break;
      case 'budget_categories':
        lookupType = 'budgetCategoryId';
        break;
      default:
        lookupType = 'websiteId';
    }
    const result2 = parseInt(params[lookupType] || '0', 10);
    return isNaN(result2) ? 0 : result2;
  }
);
var userFriendlyAccountTypeSelector = (0, import_reselect4.createSelector)(
  accountTypeSelector,
  (accountType) => {
    switch (accountType) {
      case 'websites':
        return 'website';
      case 'accounts':
        return 'account';
      case 'master_accounts':
        return 'master account';
      case 'budget_categories':
        return 'budget category';
      default:
        return '';
    }
  }
);
var accountTypeLabelSelector = (0, import_reselect4.createSelector)(
  [
    accountTypeSelector,
    accountTypeIdSelector,
    currentUserSelector,
    websiteListSelector,
  ],
  (accountType, accountId, user, websitesList) => {
    switch (accountType) {
      case 'master_accounts':
        return (
          (user.masterAccountList.find((ma) => ma.id === accountId) || {})
            .label || ''
        );
      case 'accounts':
        return (
          (user.accountList.find((a) => a.id === accountId) || {}).label || ''
        );
      case 'websites':
        return (
          stripProtocolFromWebsiteUrl(
            (websitesList.find((w) => w.id === accountId) || {}).url
          ) || ''
        );
      case 'budget_categories':
        return (
          (
            websitesList.find((w) => w.budgetCategoryIds.includes(accountId)) ||
            {}
          ).url || ''
        );
      default:
        return '';
    }
  }
);

// src/selectors/websites.jsx
var websitesSelector = (state, _props) => state.websites || {};
var websiteListSelector2 = (0, import_reselect5.createSelector)(
  [websitesSelector],
  (websites) => import_lodash2.default.sortBy(websites.fullList, ['name']) || []
);
var budgetCategoryListSelector = (0, import_reselect5.createSelector)(
  [websitesSelector],
  (websites) => websites.budgetCategoryFullList || []
);
var websiteIdSelector = (_state, props) => {
  var id = parseInt((props && props.match.params.websiteId) || '0', 10);
  return !id || isNaN(id) ? 0 : id;
};
var websiteDetailsSelector = (0, import_reselect5.createSelector)(
  [websitesSelector],
  (websites) => websites.details || {}
);
var websiteDetailSelector = (0, import_reselect5.createSelector)(
  [websiteIdSelector, websiteDetailsSelector],
  (websiteId, details) => details[websiteId] || {}
);
var websiteWatchingSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => detail.watching || false
);
var websitePrimaryFeedsSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => detail.primaryFeeds || []
);
var websitePrimaryFeedCountSelector = (0, import_reselect5.createSelector)(
  [websitePrimaryFeedsSelector],
  (feeds) => (feeds || []).length
);
var websiteAccountIdSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => detail.accountId || 0
);
var websiteDefaultAdwordsIdSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => detail.defaultAdwordsId || ''
);
var websiteDefaultMicrosoftIdSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => detail.defaultMicrosoftId || ''
);
var websiteAdwordsSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => (detail && detail.adwords) || {}
);
var websiteAnalyticsSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => (detail && detail.analytics) || {}
);
var websiteMerchantCenterSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => (detail && detail.merchantCenter) || {}
);
var merchantCenterSetupCompleteSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => {
    return detail.merchantCenter.merchantCenterAccountId &&
      detail.merchantCenter.countryOfSale
      ? true
      : false;
  }
);
var websiteAdvertisingFeedIdsSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => (detail && detail.advertisingFeedIds) || []
);
var websiteMicrosoftMerchantCenterSelector = (0,
import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => (detail && detail.microsoftMerchantCenter) || {}
);
var websiteMicrosoftAdwordsSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => (detail && detail.microsoftAds) || {}
);
var websiteInventoryIdsSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => (detail && detail.inventoryIds) || []
);
var websiteRetailInventoryIdsSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => (detail && detail.retailInventoryIds) || []
);
var websiteBuildsIdsSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => (detail && detail.buildIds) || []
);
var websitePlanTypeSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => (detail && detail.planType) || 'free'
);
var websiteUrlSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => detail.url || ''
);
var websiteNameSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => detail.name || ''
);
var websiteFeedPerChannelSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => (detail && detail.feedPerChannel) || {}
);
var feedIdSelector = (_state, props) => {
  if (props.location) {
    var feedId = parseInt(
      query_string_default.parse(props.location.search).feedId,
      10
    );
    return isNaN(feedId) ? null : feedId;
  } else {
    throw new Error('Missing location prop');
  }
};
var websiteValidFeedsByChannelSelector = (0, import_reselect5.createSelector)(
  [websiteFeedPerChannelSelector, channelSelector],
  (feedPerChannel, channel) => {
    var validFeeds = [];
    channel = camelCase(channel);
    if (channel === CHANNEL_ALL) {
      Object.values(feedPerChannel).forEach((feeds) => {
        validFeeds = validFeeds.concat(feeds);
      });
    } else {
      validFeeds = feedPerChannel[channel] || [];
    }
    return validFeeds || [];
  }
);
var websiteFeedByInventoryIdAndChannelSelector = (inventoryId, channel) =>
  (0, import_reselect5.createSelector)(
    [websiteFeedPerChannelSelector],
    (feedPerChannel) => {
      channel = camelCase(channel);
      return (
        (feedPerChannel[channel] &&
          feedPerChannel[channel].find((f) => f.inventoryId === inventoryId)) ||
        {}
      );
    }
  );
var websiteFeedIdByChannelSelector = (0, import_reselect5.createSelector)(
  [websiteValidFeedsByChannelSelector, feedIdSelector, channelSelector],
  (validFeeds, feedId, channel) => {
    if (validFeeds && validFeeds.length > 0) {
      if (validFeeds.filter((f) => f.id === feedId).length > 0) {
        return feedId;
      } else if (validFeeds && validFeeds.length > 0) {
        return validFeeds[0].id;
      }
    }
    return feedId || 0;
  }
);
var websiteFeedDetailSelector = (0, import_reselect5.createSelector)(
  [
    websiteFeedPerChannelSelector,
    websiteFeedIdByChannelSelector,
    channelSelector,
  ],
  (feedPerChannel, feedId, channel) => {
    var detail = {};
    channel = camelCase(channel);
    if (feedPerChannel[channel] && feedPerChannel[channel].length > 0) {
      detail = feedPerChannel[channel].find((f) => f.id === feedId) || {};
    }
    return detail;
  }
);
var websiteInventoriesSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => detail.inventories || []
);
var websiteInventoryIdSelector = (state, props) => {
  const inventories = websiteInventoriesSelector(state, props);
  const defaultInventoryId = inventories[0] ? inventories[0].id : 0;
  if (props.location) {
    var { inventoryId } = query_string_default.parse(props.location.search);
    inventoryId = parseInt(inventoryId, 10);
    return isNaN(inventoryId) ? defaultInventoryId : inventoryId;
  } else {
    throw new Error('Missing location prop');
  }
};
var websiteInventoryIdWithDefaultSelector = (0,
import_reselect5.createSelector)(
  [websiteInventoriesSelector, websiteInventoryIdSelector],
  (inventories, inventoryId) =>
    inventoryId ? inventoryId : inventories[0] ? inventories[0].id : 0
);
var websiteRetailInventoryDataSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => (detail && detail.retailInventoryData) || {}
);
var constructedWebsiteListSelector = (0, import_reselect5.createSelector)(
  [masterAccountListSelector, accountListSelector, websiteListSelector2],
  (masterAccountList, accountList, websitesList) => {
    return accountTreeSelector(
      masterAccountList,
      accountList,
      websitesList,
      false
    );
  }
);
var accountsWithContactDetailsListSelector = (0,
import_reselect5.createSelector)(
  [masterAccountListSelector, accountListSelector, websiteListSelector2],
  (masterAccountList, accountList, websitesList) => {
    return accountTreeSelector(
      masterAccountList,
      accountList,
      websitesList,
      true
    );
  }
);
var accountTreeSelector = (
  masterAccountList,
  accountList,
  websitesList,
  filterNoContactDetails
) => {
  var accountAndWebsiteIndex = constructAccountList(
    accountList,
    websitesList,
    filterNoContactDetails
  );
  var accountIndex = accountAndWebsiteIndex[0];
  var websiteIndex = accountAndWebsiteIndex[1];
  var finalList = masterAccountList
    .map((ma) => {
      var accounts = ma.accountIds
        .map((id) => {
          return accountIndex[id];
        })
        .filter((a) => a && a.id);
      ma.accountIds.forEach((id) => delete accountIndex[id]);
      return (!filterNoContactDetails || !ma.hasContactDetails) &&
        accounts.length === 0
        ? null
        : {
            ...ma,
            accounts,
            disabled: filterNoContactDetails && !ma.hasContactDetails,
          };
    })
    .filter((ma) => ma !== null);
  if (Object.keys(accountIndex).length !== 0) {
    finalList.push({
      id: 0,
      label: 'accounts',
      disabled: true,
      accounts: Object.keys(accountIndex).map((key) => {
        return accountIndex[key];
      }),
    });
  }
  if (Object.keys(websiteIndex).length !== 0) {
    finalList.push({
      id: 1,
      label: 'websites',
      disabled: true,
      websites: Object.keys(websiteIndex).map((key) => {
        return websiteIndex[key];
      }),
    });
  }
  const sortedList = import_lodash2.default.sortBy(finalList, ['label']);
  import_lodash2.default.forEach(sortedList, (item) => {
    item.accounts = import_lodash2.default.orderBy(item.accounts, ['label']);
    item.accounts = import_lodash2.default.map(item.accounts, (account) => {
      account.websites = import_lodash2.default.orderBy(account.websites, [
        'name',
      ]);
      return account;
    });
  });
  return sortedList;
};
var constructAccountList = (
  accountList,
  websitesList,
  filterNoContactDetails
) => {
  var websiteIndex = {};
  websitesList.forEach((w) => {
    websiteIndex[w.id] = w;
  });
  var accountIndex = {};
  accountList
    .map((a) => {
      var websites = a.websiteIds
        .map((id) => websiteIndex[id])
        .filter((w) => w)
        .filter((w) => !filterNoContactDetails || w.hasContactDetails);
      a.websiteIds.forEach((id) => delete websiteIndex[id]);
      return (!filterNoContactDetails || !a.hasContactDetails) &&
        websites.length === 0
        ? null
        : {
            ...a,
            websites,
            disabled: filterNoContactDetails && !a.hasContactDetails,
          };
    })
    .filter((a) => a !== null)
    .forEach((a) => {
      accountIndex[a.id] = a;
    });
  return [accountIndex, websiteIndex];
};
var listSelector = (accountType, id) =>
  (0, import_reselect5.createSelector)(
    [
      masterAccountListSelector,
      accountListSelector,
      websiteListSelector2,
      budgetCategoryListSelector,
    ],
    (masterAccountList, accountList, websitesList, budgetCategoriesList) => {
      switch (accountType) {
        case 'budget_categories':
          return currentListFromBudgetCategory(
            id,
            masterAccountList,
            accountList,
            websitesList,
            budgetCategoriesList
          );
        case 'websites':
          return currentListFromWebsite(
            id,
            masterAccountList,
            accountList,
            websitesList
          );
        case 'accounts':
          return currentListFromAccount(id, masterAccountList, accountList);
        case 'master_accounts':
          return currentListFromMasterAccount(id, masterAccountList);
        default:
          return;
      }
    }
  );
var currentListFromBudgetCategory = (
  id,
  masterAccountList,
  accountList,
  websitesList,
  budgetCategoriesList
) => {
  const website = websitesList.find((w) => w.budgetCategoryIds.includes(id));
  const account = accountList.find((a) =>
    a.websiteIds.includes((website || {}).id)
  );
  return {
    budgetCategory: budgetCategoriesList.find((bc) => bc.id === id),
    website,
    account,
    masterAccount: masterAccountList.find((ma) =>
      ma.accountIds.includes((account || {}).id)
    ),
  };
};
var currentListFromWebsite = (
  id,
  masterAccountList,
  accountList,
  websitesList
) => {
  const account = accountList.find((a) => a.websiteIds.includes(id));
  return {
    website: websitesList.find((w) => w.id === id),
    account,
    masterAccount: masterAccountList.find((ma) =>
      ma.accountIds.includes((account || {}).id)
    ),
  };
};
var currentListFromAccount = (id, masterAccountList, accountList) => ({
  account: accountList.find((a) => a.id === id),
  masterAccount: masterAccountList.find((ma) => ma.accountIds.includes(id)),
});
var currentListFromMasterAccount = (id, masterAccountList) => ({
  masterAccount: masterAccountList.find((ma) => ma.id === id),
});
var feedopsShoppingSelector = (0, import_reselect5.createSelector)(
  [websiteDetailSelector],
  (detail) => detail.feedopsShopping || {}
);
var feedopsShoppingPublishedSelector = (0, import_reselect5.createSelector)(
  [feedopsShoppingSelector],
  (feedops) => feedops.campaignPublished || false
);

// src/selectors/advertising.jsx
var advertisingSelector = (state) => state.advertising || {};
var advertisingBudgetCategoriesSelector = (0, import_reselect6.createSelector)(
  [advertisingSelector],
  (a) => a.budgetCategories || {}
);
var advertisingBudgetCategorySelector = (budgetCategoryId) =>
  (0, import_reselect6.createSelector)(
    [advertisingBudgetCategoriesSelector],
    (budgetCategory) => budgetCategory[budgetCategoryId] || {}
  );
var budgetCategoryAdvertisingGoalsSelector = (budgetCategoryId) =>
  (0, import_reselect6.createSelector)(
    [advertisingBudgetCategorySelector(budgetCategoryId)],
    (a) => a.goals || []
  );
var budgetCategoryAdvertisingBudgetsSelector = (budgetCategoryId) =>
  (0, import_reselect6.createSelector)(
    [advertisingBudgetCategorySelector(budgetCategoryId)],
    (a) => a.budgets || []
  );
var advertisingWebsitesSelector = (0, import_reselect6.createSelector)(
  [advertisingSelector],
  (a) => a.websites || {}
);
var advertisingWebsiteSelector = (websiteId) =>
  (0, import_reselect6.createSelector)(
    [advertisingWebsitesSelector],
    (websites) => websites[websiteId] || {}
  );
var websiteAdvertisingPlanSelector = (websiteId) =>
  (0, import_reselect6.createSelector)(
    [advertisingWebsiteSelector(websiteId)],
    (a) => a.advertisingPlan || ''
  );
var websiteLatestAdvertisingGoalSelector = (websiteId) =>
  (0, import_reselect6.createSelector)(
    [advertisingGoalsSelector('websites', websiteId)],
    (goals) => (goals.find((g) => g.endDate === null) || {}).value || 0
  );
var websiteLatestAdvertisingBudgetSelector = (websiteId) =>
  (0, import_reselect6.createSelector)(
    [advertisingBudgetsSelector('websites', websiteId)],
    (budgets) => (budgets.find((b) => b.endDate === null) || {}).value || 0
  );
var advertisingAccountsSelector = (0, import_reselect6.createSelector)(
  [advertisingSelector],
  (a) => a.accounts || {}
);
var advertisingAccountSelector = (accountId) =>
  (0, import_reselect6.createSelector)(
    [advertisingAccountsSelector],
    (accounts) => accounts[accountId] || {}
  );
var advertisingMasterAccountsSelector = (0, import_reselect6.createSelector)(
  [advertisingSelector],
  (a) => a.masterAccounts || {}
);
var advertisingMasterAccountSelector = (masterAccountId) =>
  (0, import_reselect6.createSelector)(
    [advertisingMasterAccountsSelector],
    (masterAccounts) => masterAccounts[masterAccountId] || {}
  );
var advertisingAccountTypeSelector = (accountType) =>
  (0, import_reselect6.createSelector)(
    [advertisingSelector],
    (advertising) => advertising[camelCase2(accountType)] || {}
  );
var advertisingAccountTypeByIdSelector = (accountType, id) =>
  (0, import_reselect6.createSelector)(
    [advertisingAccountTypeSelector(accountType)],
    (accountType2) => accountType2[id] || {}
  );
var advertisingChannelSelector = (accountType, id) =>
  (0, import_reselect6.createSelector)(
    [
      advertisingAccountTypeByIdSelector(accountType, id),
      defaultGoogleChannelSelector,
    ],
    (accountTypeById, channel) => accountTypeById[channel] || {}
  );
var advertisingGoalsSelector = (accountType, id) => {
  switch (accountType) {
    case 'budget_categories':
      return budgetCategoryAdvertisingGoalsSelector(id);
    case 'websites':
      return (0, import_reselect6.createSelector)(
        [advertisingChannelSelector(accountType, id)],
        (channel) => channel.goals || []
      );
    case 'accounts':
      return (0, import_reselect6.createSelector)(
        [advertisingChannelSelector(accountType, id)],
        (channel) => channel.goals || []
      );
    case 'master_accounts':
      return (0, import_reselect6.createSelector)(
        [advertisingChannelSelector(accountType, id)],
        (channel) => channel.goals || []
      );
    default:
      return () => [];
  }
};
var advertisingBudgetsSelector = (accountType, id) => {
  switch (accountType) {
    case 'budget_categories':
      return budgetCategoryAdvertisingBudgetsSelector(id);
    case 'websites':
      return (0, import_reselect6.createSelector)(
        [advertisingChannelSelector(accountType, id)],
        (channel) => channel.budgets || []
      );
    case 'accounts':
      return (0, import_reselect6.createSelector)(
        [advertisingChannelSelector(accountType, id)],
        (channel) => channel.budgets || []
      );
    case 'master_accounts':
      return (0, import_reselect6.createSelector)(
        [advertisingChannelSelector(accountType, id)],
        (channel) => channel.budgets || []
      );
    default:
      return () => [];
  }
};
var hasBudgetCategoriesSelector = (websiteId) =>
  (0, import_reselect6.createSelector)(
    [advertisingWebsiteSelector(websiteId), defaultGoogleChannelSelector],
    (website, channel) =>
      channel === 'google' && (website.hasBudgetCategories || false)
  );
var hasGooglePublicationAccountSelector = (accountType, id) =>
  (0, import_reselect6.createSelector)(
    [advertisingAccountTypeByIdSelector(accountType, id)],
    (accountTypeById) => accountTypeById.hasGooglePublicationAccount || false
  );
var hasMicrosoftPublicationAccountSelector = (accountType, id) =>
  (0, import_reselect6.createSelector)(
    [advertisingAccountTypeByIdSelector(accountType, id)],
    (accountTypeById) => accountTypeById.hasMicrosoftPublicationAccount || false
  );
var advertisingStatusSelector = (buildType) =>
  (0, import_reselect6.createSelector)(
    [advertisingSelector, websiteIdSelector],
    (a, websiteId) =>
      a.status && a.status[websiteId] && buildType
        ? a.status[websiteId][buildType]
        : {}
  );
var websiteBudgetSelector = (buildType) =>
  (0, import_reselect6.createSelector)(
    [advertisingSelector, websiteIdSelector],
    (a, websiteId) =>
      a.budget && a.budget[websiteId] && buildType
        ? a.budget[websiteId][buildType]
        : 0
  );
var websiteCampaignIdsSelector = (buildType) =>
  (0, import_reselect6.createSelector)(
    [advertisingSelector, websiteIdSelector],
    (a, websiteId) =>
      a.campaignIds && a.campaignIds[websiteId] && buildType
        ? a.campaignIds[websiteId][buildType] || []
        : []
  );

// src/selectors/google/performance.jsx
var import_reselect7 = __toESM(require_lib());
var performanceSelector = (state) => (state.google || {}).performance || {};
var performanceWebsitesSelector = (0, import_reselect7.createSelector)(
  [performanceSelector],
  (p) => p.websites || {}
);
var performanceWebsiteSelector = (websiteId) =>
  (0, import_reselect7.createSelector)(
    [performanceWebsitesSelector],
    (websites) => websites[websiteId] || {}
  );
var performanceBudgetCategoriesSelector = (0, import_reselect7.createSelector)(
  [performanceSelector],
  (performance2) => performance2.budgetCategories || {}
);
var performanceBudgetCategorySelector = (budgetCategoryId) =>
  (0, import_reselect7.createSelector)(
    [performanceBudgetCategoriesSelector],
    (budgetCategories) => budgetCategories[budgetCategoryId] || { data: [] }
  );
var budgetCategoryPerformanceByCampaignTypeSelector = (budgetCategoryId) =>
  (0, import_reselect7.createSelector)(
    [performanceBudgetCategorySelector(budgetCategoryId)],
    (budgetCategory) => budgetCategory.performanceByCampaignType || []
  );
var budgetCategoryRecommendationSelector = (budgetCategoryId) =>
  (0, import_reselect7.createSelector)(
    [performanceBudgetCategorySelector(budgetCategoryId)],
    (budgetCategory) => budgetCategory.recommendations || {}
  );
var websitePerformanceByBudgetCategoryReportSelector = (websiteId) =>
  (0, import_reselect7.createSelector)(
    [performanceWebsiteSelector(websiteId)],
    (website) => website.websiteByBudgetCategory || {}
  );
var websitePerformanceByBudgetCategorySelector = (websiteId) =>
  (0, import_reselect7.createSelector)(
    [websitePerformanceByBudgetCategoryReportSelector(websiteId)],
    (websiteByBudgetCategory) =>
      websiteByBudgetCategory.budgetCategoryReports || []
  );

// src/selectors/performance.jsx
var performanceSelector2 = (state) => state.performance || {};
var performanceWebsitesSelector2 = (0, import_reselect8.createSelector)(
  [performanceSelector2],
  (p) => p.websites || {}
);
var performanceWebsiteSelector2 = (websiteId) =>
  (0, import_reselect8.createSelector)(
    [performanceWebsitesSelector2],
    (websites) => websites[websiteId] || {}
  );
var performanceWebsiteChannelSelector = (websiteId, channel) =>
  (0, import_reselect8.createSelector)(
    [performanceWebsiteSelector2(websiteId)],
    (website) => website[channel] || {}
  );
var websiteRecommendationSelector = (accountType, websiteId) =>
  (0, import_reselect8.createSelector)(
    [
      performanceChannelSelector(accountType, websiteId),
      hasBudgetCategoriesSelector(websiteId),
    ],
    (channel, hasBudgetCategories) => {
      const recommendations = channel.recommendations || [];
      if (hasBudgetCategories) {
        return formatRecommendations(recommendations);
      }
      return recommendations;
    }
  );
var recommendationSelector = (accountType, id) => {
  switch (accountType) {
    case 'budget_categories':
      return budgetCategoryRecommendationSelector(id);
    case 'websites':
      return websiteRecommendationSelector(accountType, id);
    case 'accounts':
      return formattedRecommendationList(accountType, id);
    case 'master_accounts':
      return formattedRecommendationList(accountType, id);
    default:
      return () => ({});
  }
};
var performanceAccountsSelector = (0, import_reselect8.createSelector)(
  [performanceSelector2],
  (p) => p.accounts || {}
);
var performanceAccountSelector = (accountId) =>
  (0, import_reselect8.createSelector)(
    [performanceAccountsSelector],
    (accounts) => accounts[accountId] || { data: [] }
  );
var performanceMasterAccountsSelector = (0, import_reselect8.createSelector)(
  [performanceSelector2],
  (p) => p.masterAccounts || {}
);
var performanceMasterAccountSelector = (masterAccountId) =>
  (0, import_reselect8.createSelector)(
    [performanceMasterAccountsSelector],
    (masterAccounts) => masterAccounts[masterAccountId] || { data: [] }
  );
var performanceRecommendationsSelector = (accountType, id) =>
  (0, import_reselect8.createSelector)(
    [performanceChannelSelector(accountType, id)],
    (channel) => channel.recommendations || []
  );
var formattedRecommendationList = (accountType, id) =>
  (0, import_reselect8.createSelector)(
    [performanceRecommendationsSelector(accountType, id)],
    (recommendations) => formatRecommendations(recommendations)
  );
function formatRecommendations(recommendations) {
  return recommendations.map((recommendation) => {
    const status2 =
      recommendation.type[0].toUpperCase() + recommendation.type.slice(1);
    return {
      website: recommendation.websiteName,
      budgetCategory: recommendation.budgetCategoryName,
      status: status2,
      id: recommendation.websiteId || recommendation.budgetCategoryId,
    };
  });
}
var performanceByCampaignTypeSelector = (accountType, id) =>
  (0, import_reselect8.createSelector)(
    [performanceChannelSelector(accountType, id)],
    (channel) => channel.performanceByCampaignType || []
  );
var performanceAccountTypeSelector = (accountType) =>
  (0, import_reselect8.createSelector)(
    [performanceSelector2],
    (performance2) => performance2[camelCase2(accountType)] || {}
  );
var performanceAccountTypeByIdSelector = (accountType, id) =>
  (0, import_reselect8.createSelector)(
    [performanceAccountTypeSelector(accountType)],
    (accountType2) => accountType2[id] || {}
  );
var performanceChannelSelector = (accountType, id) =>
  (0, import_reselect8.createSelector)(
    [
      performanceAccountTypeByIdSelector(accountType, id),
      defaultGoogleChannelSelector,
    ],
    (accountTypeById, channel) => accountTypeById[channel] || {}
  );
var performanceBySubAccountTypeSelector = (accountType, id) =>
  (0, import_reselect8.createSelector)(
    [performanceChannelSelector(accountType, id)],
    (channel) => channel.performanceBySubAccountType || []
  );
var performanceDataSelector = (accountType, id) =>
  (0, import_reselect8.createSelector)(
    [performanceChannelSelector(accountType, id)],
    (channel) => channel.data || []
  );
var performanceDownloadErrorsSelector = (accountType, id) =>
  (0, import_reselect8.createSelector)(
    [performanceChannelSelector(accountType, id)],
    (channel) => channel.errors || []
  );
var calculatedValues = (row, totalCost) => {
  const { cost, totalConvValue, conversions, clicks } = row;
  const conversionValuePerCost = cost === 0 ? 0 : totalConvValue / cost;
  const ROAS = cost === 0 ? 0 : (totalConvValue * 100) / cost;
  const CPA = cost === 0 ? 0 : cost / conversions;
  const CPC = cost === 0 ? 0 : cost / clicks;
  const percentageOfTotalCost = totalCost === 0 ? 0 : (cost * 100) / totalCost;
  return {
    conversionValuePerCost,
    ROAS,
    CPA,
    CPC,
    percentageOfTotalCost,
  };
};
var performanceReportWithCalculatedRows = (reportSelector) =>
  (0, import_reselect8.createSelector)([reportSelector], (rows) => {
    const totalCost = rows.reduce((total, row) => total + row.cost, 0);
    return rows.map((r) => ({
      ...r,
      ...calculatedValues(r, totalCost),
    }));
  });
var accountOrWebsiteBreakdownReportSelector = (accountType, groupType, id) => {
  var reportSelector;
  switch (accountType) {
    case 'budget_categories':
      reportSelector = budgetCategoryPerformanceByCampaignTypeSelector(id);
      break;
    case 'websites':
      if (groupType === 'campaign_types') {
        reportSelector = performanceByCampaignTypeSelector(accountType, id);
      } else {
        reportSelector = websitePerformanceByBudgetCategorySelector(id);
      }
      break;
    case 'accounts':
      reportSelector = performanceBySubAccountTypeSelector(accountType, id);
      break;
    case 'master_accounts':
      reportSelector = performanceBySubAccountTypeSelector(accountType, id);
      break;
    default:
      return () => {};
  }
  return performanceReportWithCalculatedRows(reportSelector);
};
var subAccountTypeCountSelector = (accountType, id) =>
  (0, import_reselect8.createSelector)(
    [performanceChannelSelector(accountType, id)],
    (channel) => channel.subAccountTypeCount || 0
  );
var performanceFeedopsAdvertisingSelector = (0,
import_reselect8.createSelector)(
  [performanceSelector2],
  (performance2) => performance2.feedopsAdvertising || {}
);
var feedopsAdvertisingByChannelAndWebsiteSelector = (0,
import_reselect8.createSelector)(
  [
    performanceFeedopsAdvertisingSelector,
    defaultGoogleChannelSelector,
    websiteIdSelector,
  ],
  (performance2, channel, websiteId) =>
    performance2[channel] &&
    Object.keys(performance2[channel]).length > 0 &&
    performance2[channel][websiteId]
      ? performance2[channel][websiteId]
      : {}
);
var feedopsAdvertisingAllTotals = (0, import_reselect8.createSelector)(
  [feedopsAdvertisingByChannelAndWebsiteSelector],
  (perf) => perf.totalValues || []
);
var feedopsAdvertisingTotals = (0, import_reselect8.createSelector)(
  [feedopsAdvertisingAllTotals],
  (allTotals) =>
    allTotals && allTotals.length > 0
      ? allTotals.find((values2) => values2.type === 'Total')
      : {}
);
var advertisingTotalsByType = (campaignType) =>
  (0, import_reselect8.createSelector)(
    [feedopsAdvertisingAllTotals],
    (allTotals) =>
      allTotals.find((values2) => values2.type === campaignType) || {}
  );
var feedopsAdvertisingGoalTypes = (0, import_reselect8.createSelector)(
  [feedopsAdvertisingByChannelAndWebsiteSelector],
  (perf) => perf.goalTypes || {}
);
var advertisingGoalTypeByType = (campaignType) =>
  (0, import_reselect8.createSelector)(
    [feedopsAdvertisingGoalTypes],
    (goals) => goals[campaignType] || { goalType: 'missing' }
  );
var feedopsAdvertisingRecommendations = (0, import_reselect8.createSelector)(
  [feedopsAdvertisingByChannelAndWebsiteSelector],
  (perf) => perf.recommendations || {}
);
var advertisingRecommendationsByType = (campaignType) =>
  (0, import_reselect8.createSelector)(
    [feedopsAdvertisingRecommendations],
    (recommendations) => recommendations[campaignType] || {}
  );

// src/actions/performance/websites.jsx
var FETCH_WEBSITE_PERFORMANCE_BY_BUDGET_CATEGORY_REQUEST =
  'FETCH_WEBSITE_PERFORMANCE_BY_BUDGET_CATEGORY_REQUEST';
var FETCH_WEBSITE_PERFORMANCE_BY_BUDGET_CATEGORY_SUCCESS =
  'FETCH_WEBSITE_PERFORMANCE_BY_BUDGET_CATEGORY_SUCCESS';
var FETCH_WEBSITE_PERFORMANCE_BY_FEEDOPS_CAMPAIGNS_REQUEST =
  'FETCH_WEBSITE_PERFORMANCE_BY_FEEDOPS_CAMPAIGNS_REQUEST';
var FETCH_WEBSITE_PERFORMANCE_BY_FEEDOPS_CAMPAIGNS_RESPONSE =
  'FETCH_WEBSITE_PERFORMANCE_BY_FEEDOPS_CAMPAIGNS_RESPONSE';
var fetchWebsiteDailyPerformanceRequest = (
  accountType,
  websiteId,
  channel,
  dateRange
) => ({
  type: FETCH_PERFORMANCE_BY_DAY_REQUEST,
  accountType,
  id: websiteId,
  channel,
  dateRange,
});
var fetchWebsiteDailyPerformanceSuccess = (
  accountType,
  websiteId,
  channel,
  dateRange,
  dailyAccountPerformance
) => ({
  type: FETCH_PERFORMANCE_BY_DAY_SUCCESS,
  accountType,
  id: websiteId,
  channel,
  dateRange,
  ...dailyAccountPerformance,
});
var compareDateRange = (incoming, existing) => {
  var incomingStart = JSON.stringify(incoming.startDate)
    .slice(1, 11)
    .replace(/-/g, '');
  var incomingEnd = JSON.stringify(incoming.endDate)
    .slice(1, 11)
    .replace(/-/g, '');
  return incomingStart === existing.start && incomingEnd === existing.end;
};
var checkPerformanceReportInRedux = (
  websiteId,
  getState,
  dateRange,
  channel
) => {
  var reportInStore =
    performanceWebsiteChannelSelector(websiteId, channel)(getState()) || {};
  return (
    Object.keys(reportInStore).length !== 0 &&
    reportInStore.constructor === Object &&
    compareDateRange(dateRange, reportInStore.dateRange)
  );
};
var fetchWebsiteDailyPerformance =
  (accountType, websiteId, channel, dateRange) =>
  async (dispatch, getState) => {
    if (
      checkPerformanceReportInRedux(websiteId, getState, dateRange, channel)
    ) {
      return;
    }
    dispatch(
      fetchWebsiteDailyPerformanceRequest(
        accountType,
        websiteId,
        channel,
        dateRange
      )
    );
    var status2 = 202;
    var response;
    var statusCode2 = {
      200: () => {
        status2 = 200;
      },
      202: () => {
        status2 = 202;
      },
    };
    while (status2 === 202) {
      response = await $.ajax({
        method: 'GET',
        url: `/ad_champion/websites/${websiteId}/performance/generate_daily_report`,
        data: (0, import_snakecase_keys26.default)(
          { channel, ...dateRange },
          { deep: true }
        ),
        dataType: 'json',
        statusCode: statusCode2,
      });
      if (status2 === 202) {
        await sleep_default(1e3);
      }
    }
    dispatch(
      fetchWebsiteDailyPerformanceSuccess(
        accountType,
        websiteId,
        channel,
        dateRange,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchWebsitePerformanceByBudgetCategoriesRequest = (
  websiteId,
  dateRange,
  page,
  perPage
) => ({
  type: FETCH_WEBSITE_PERFORMANCE_BY_BUDGET_CATEGORY_REQUEST,
  dateRange,
  websiteId,
  page,
  perPage,
});
var fetchWebsitePerformanceByBudgetCategoriesSuccess = (
  websiteId,
  dateRange,
  page,
  perPage,
  response
) => ({
  type: FETCH_WEBSITE_PERFORMANCE_BY_BUDGET_CATEGORY_SUCCESS,
  websiteId,
  dateRange,
  page,
  perPage,
  ...response,
});
var checkWebsitePerformanceByBudgetCategoriesInRedux = (
  websiteId,
  getState,
  dateRange,
  page,
  perPage
) => {
  var reportInStore = websitePerformanceByBudgetCategoryReportSelector(
    websiteId
  )(getState());
  return (
    reportInStore.budgetCategoryReports &&
    reportInStore.budgetCategoryReports.length > 0 &&
    reportInStore.page === page &&
    reportInStore.perPage === perPage &&
    compareDateRange(dateRange, reportInStore.dateRange)
  );
};
var fetchWebsitePerformanceByBudgetCategories =
  (websiteId, dateRange, page, perPage, force = false) =>
  async (dispatch, getState) => {
    if (
      !force &&
      checkWebsitePerformanceByBudgetCategoriesInRedux(
        websiteId,
        getState,
        dateRange,
        page,
        perPage
      )
    ) {
      return;
    }
    dispatch(
      fetchWebsitePerformanceByBudgetCategoriesRequest(
        websiteId,
        dateRange,
        page,
        perPage
      )
    );
    var status2 = 202;
    var response;
    var statusCode2 = {
      200: () => {
        status2 = 200;
      },
      202: () => {
        status2 = 202;
      },
    };
    while (status2 === 202) {
      response = await $.ajax({
        method: 'GET',
        url: `/ad_champion/websites/${websiteId}/performance/show_website_performance_by_budget_categories?page=${page}&per_page=${perPage}`,
        data: {
          ...(0, import_snakecase_keys26.default)(dateRange, { deep: true }),
        },
        dataType: 'json',
        statusCode: statusCode2,
      });
      if (status2 === 202) {
        await sleep_default(1e3);
      }
    }
    dispatch(
      fetchWebsitePerformanceByBudgetCategoriesSuccess(
        websiteId,
        dateRange,
        page,
        perPage,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchWebsitePerformanceByCampaignTypeRequest = (
  accountType,
  websiteId,
  channel
) => ({
  type: FETCH_PERFORMANCE_BY_CAMPAIGN_TYPE_REQUEST,
  accountType,
  id: websiteId,
  channel,
});
var fetchWebsitePerformanceByCampaignTypeSuccess = (
  accountType,
  websiteId,
  channel,
  campaignPerformance
) => ({
  type: FETCH_PERFORMANCE_BY_CAMPAIGN_TYPE_SUCCESS,
  accountType,
  id: websiteId,
  channel,
  ...campaignPerformance,
});
var fetchWebsitePerformanceByCampaignType =
  (accountType, websiteId, channel, dateRange) => async (dispatch) => {
    dispatch(
      fetchWebsitePerformanceByCampaignTypeRequest(
        accountType,
        websiteId,
        channel
      )
    );
    var status2 = 202;
    var response;
    var statusCode2 = {
      200: () => {
        status2 = 200;
      },
      202: () => {
        status2 = 202;
      },
    };
    while (status2 === 202) {
      response = await $.ajax({
        url: `/ad_champion/websites/${websiteId}/performance/show_website_performance_by_campaign_types`,
        data: (0, import_snakecase_keys26.default)(
          { channel, ...dateRange },
          { deep: true }
        ),
        dataType: 'json',
        statusCode: statusCode2,
      });
      if (status2 === 202) {
        await sleep_default(1e3);
      }
    }
    dispatch(
      fetchWebsitePerformanceByCampaignTypeSuccess(
        accountType,
        websiteId,
        channel,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var status = 202;
var statusCode = {
  200: () => {
    status = 200;
  },
  202: () => {
    status = 202;
  },
};
var fetchWebsitePerformanceByFeedopsCampaignsRequest = (
  websiteId,
  channel
) => ({
  type: FETCH_WEBSITE_PERFORMANCE_BY_FEEDOPS_CAMPAIGNS_REQUEST,
  websiteId,
  channel,
});
var fetchWebsitePerformanceByFeedopsCampaignsResponse = (
  websiteId,
  channel,
  campaignPerformance
) => ({
  type: FETCH_WEBSITE_PERFORMANCE_BY_FEEDOPS_CAMPAIGNS_RESPONSE,
  websiteId,
  channel,
  ...campaignPerformance,
});
var fetchWebsitePerformanceByFeedopsCampaigns =
  (websiteId, channel, dateRange) => async (dispatch) => {
    dispatch(
      fetchWebsitePerformanceByFeedopsCampaignsRequest(websiteId, channel)
    );
    status = 202;
    var response;
    while (status === 202) {
      response = await $.ajax({
        url: `/ad_champion/websites/${websiteId}/feed_ops_performance/show_website_performance_by_feedops_campaigns`,
        data: (0, import_snakecase_keys26.default)(
          { channel, ...dateRange },
          { deep: true }
        ),
        dataType: 'json',
        statusCode,
      });
      if (status === 202) {
        await sleep_default(1e3);
      }
    }
    dispatch(
      fetchWebsitePerformanceByFeedopsCampaignsResponse(
        websiteId,
        channel,
        camelcaseKeys(response, { deep: true })
      )
    );
  };

// src/actions/performance/general.jsx
var FETCH_PERFORMANCE_BY_DAY_REQUEST = 'FETCH_PERFORMANCE_BY_DAY_REQUEST';
var FETCH_PERFORMANCE_BY_DAY_SUCCESS = 'FETCH_PERFORMANCE_BY_DAY_SUCCESS';
var FETCH_PERFORMANCE_BY_SUB_ACCOUNT_TYPE_REQUEST =
  'FETCH_PERFORMANCE_BY_SUB_ACCOUNT_TYPE_REQUEST';
var FETCH_PERFORMANCE_BY_SUB_ACCOUNT_TYPE_SUCCESS =
  'FETCH_PERFORMANCE_BY_SUB_ACCOUNT_TYPE_SUCCESS';
var FETCH_PERFORMANCE_BY_CAMPAIGN_TYPE_REQUEST =
  'FETCH_PERFORMANCE_BY_CAMPAIGN_TYPE_REQUEST';
var FETCH_PERFORMANCE_BY_CAMPAIGN_TYPE_SUCCESS =
  'FETCH_PERFORMANCE_BY_CAMPAIGN_TYPE_SUCCESS';
var fetchDailyPerformance = (accountType, id, channel, dateRange) => {
  switch (accountType) {
    case 'budget_categories':
      return fetchBudgetCategoryPerformanceByDay(id, dateRange);
    case 'websites':
      return fetchWebsiteDailyPerformance(accountType, id, channel, dateRange);
    case 'accounts':
      return fetchAccountPerformanceByDay(accountType, id, channel, dateRange);
    case 'master_accounts':
      return fetchMasterAccountPerformanceByDay(
        accountType,
        id,
        channel,
        dateRange
      );
    default:
      return () => ({});
  }
};
var fetchPerformanceSummary = (
  accountType,
  groupType,
  id,
  channel,
  dateRange,
  page,
  perPage,
  force = false
) => {
  switch (accountType) {
    case 'budget_categories':
      return fetchBudgetCategoryPerformanceByCampaignType(id, dateRange);
    case 'websites':
      if (groupType === 'campaign_types') {
        return fetchWebsitePerformanceByCampaignType(
          accountType,
          id,
          channel,
          dateRange
        );
      } else {
        return fetchWebsitePerformanceByBudgetCategories(
          id,
          dateRange,
          page,
          perPage,
          force
        );
      }
    case 'accounts':
      return fetchAccountPerformanceByWebsite(
        accountType,
        id,
        channel,
        dateRange,
        page,
        perPage
      );
    case 'master_accounts':
      return fetchMasterAccountPerformanceByWebsite(
        accountType,
        id,
        channel,
        dateRange,
        page,
        perPage
      );
    default:
      return () => {};
  }
};

// src/actions/performance/accounts.jsx
var fetchAccountPerformanceByDayRequest = (
  accountType,
  accountId,
  channel
) => ({
  type: FETCH_PERFORMANCE_BY_DAY_REQUEST,
  accountType,
  id: accountId,
  channel,
});
var fetchAccountPerformanceByDayRequestSuccess = (
  accountType,
  accountId,
  channel,
  response
) => ({
  type: FETCH_PERFORMANCE_BY_DAY_SUCCESS,
  accountType,
  id: accountId,
  channel,
  ...response,
});
var fetchAccountPerformanceByDay =
  (accountType, accountId, channel, dateRange) => async (dispatch) => {
    dispatch(
      fetchAccountPerformanceByDayRequest(accountType, accountId, channel)
    );
    var status2 = 202;
    var response;
    var statusCode2 = {
      200: () => {
        status2 = 200;
      },
      202: () => {
        status2 = 202;
      },
    };
    while (status2 === 202) {
      response = await $.ajax({
        method: 'GET',
        url: `/ad_champion/accounts/${accountId}/performance`,
        data: (0, import_snakecase_keys27.default)(
          { channel, ...dateRange },
          { deep: true }
        ),
        dataType: 'json',
        statusCode: statusCode2,
      });
      if (status2 === 202) {
        await sleep_default(1e3);
      }
    }
    dispatch(
      fetchAccountPerformanceByDayRequestSuccess(
        accountType,
        accountId,
        channel,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchAccountPerformanceByWebsiteRequest = (
  accountType,
  accountId,
  channel,
  page,
  perPage
) => ({
  type: FETCH_PERFORMANCE_BY_SUB_ACCOUNT_TYPE_REQUEST,
  accountType,
  id: accountId,
  channel,
  page,
  perPage,
});
var fetchAccountPerformanceByWebsiteRequestSuccess = (
  accountType,
  accountId,
  channel,
  page,
  perPage,
  response
) => ({
  type: FETCH_PERFORMANCE_BY_SUB_ACCOUNT_TYPE_SUCCESS,
  accountType,
  id: accountId,
  channel,
  page,
  perPage,
  ...response,
});
var fetchAccountPerformanceByWebsite =
  (accountType, accountId, channel, dateRange, page, perPage) =>
  async (dispatch) => {
    dispatch(
      fetchAccountPerformanceByWebsiteRequest(
        accountType,
        accountId,
        channel,
        page,
        perPage
      )
    );
    var status2 = 202;
    var response;
    var statusCode2 = {
      200: () => {
        status2 = 200;
      },
      202: () => {
        status2 = 202;
      },
    };
    while (status2 === 202) {
      response = await $.ajax({
        method: 'GET',
        url: `/ad_champion/accounts/${accountId}/performance/show_account_performance_by_website`,
        data: (0, import_snakecase_keys27.default)(
          { channel, ...dateRange, page, perPage },
          { deep: true }
        ),
        dataType: 'json',
        statusCode: statusCode2,
      });
      if (status2 === 202) {
        await sleep_default(1e3);
      }
    }
    dispatch(
      fetchAccountPerformanceByWebsiteRequestSuccess(
        accountType,
        accountId,
        channel,
        page,
        perPage,
        camelcaseKeys(response, { deep: true })
      )
    );
  };

// src/actions/playbook/playbook_progress.jsx
var import_snakecase_keys28 = __toESM(require_snakecase_keys());
var FETCH_PLAYBOOK_PROGRESS_REQUEST = 'FETCH_PLAYBOOK_PROGRESS_REQUEST';
var FETCH_PLAYBOOK_PROGRESS_RESPONSE = 'FETCH_PLAYBOOK_PROGRESS_RESPONSE';
var FETCH_PLAYBOOK_PROGRESS_BY_ITEM_REQUEST =
  'FETCH_PLAYBOOK_PROGRESS_BY_ITEM_REQUEST';
var FETCH_PLAYBOOK_PROGRESS_BY_ITEM_RESPONSE =
  'FETCH_PLAYBOOK_PROGRESS_BY_ITEM_RESPONSE';
var DISMISS_PLAYBOOK_PROGRESS_REQUEST = 'DISMISS_PLAYBOOK_PROGRESS_REQUEST';
var DISMISS_PLAYBOOK_PROGRESS_RESPONSE = 'DISMISS_PLAYBOOK_PROGRESS_RESPONSE';
var SET_PLAYBOOK_DISMISS_SWITCH = 'SET_PLAYBOOK_DISMISS_SWITCH';
var FETCH_COMPLETED_PLAYBOOK_ITEMS_REQUEST =
  'FETCH_COMPLETED_PLAYBOOK_ITEMS_REQUEST';
var FETCH_COMPLETED_PLAYBOOK_ITEMS_RESPONSE =
  'FETCH_COMPLETED_PLAYBOOK_ITEMS_RESPONSE';
var COMPLETE_PLAYBOOK_ITEM_REQUEST = 'COMPLETE_PLAYBOOK_ITEM_REQUEST';
var COMPLETE_PLAYBOOK_ITEM_RESPONSE = 'COMPLETE_PLAYBOOK_ITEM_RESPONSE';
var UNDISMISS_PLAYBOOK_PROGRESS_REQUEST = 'UNDISMISS_PLAYBOOK_PROGRESS_REQUEST';
var UNDISMISS_PLAYBOOK_PROGRESS_RESPONSE =
  'UNDISMISS_PLAYBOOK_PROGRESS_RESPONSE';
var SET_PLAYBOOK_ACTIVE_TAB = 'SET_PLAYBOOK_ACTIVE_TAB';
var fetchPlaybookProgressRequest = (websiteId) => ({
  type: FETCH_PLAYBOOK_PROGRESS_REQUEST,
  websiteId,
});
var setPlaybookActiveTab = (activeTab, websiteId) => ({
  type: SET_PLAYBOOK_ACTIVE_TAB,
  activeTab,
  websiteId,
});
var fetchPlaybookProgressResponse = (websiteId, response) => ({
  type: FETCH_PLAYBOOK_PROGRESS_RESPONSE,
  websiteId,
  ...response,
});
var fetchPlaybookProgress = (websiteId) => async (dispatch) => {
  dispatch(fetchPlaybookProgressRequest(websiteId));
  var status2 = 202;
  var statusCode2 = {
    200: () => {
      status2 = 200;
    },
    202: () => {
      status2 = 202;
    },
  };
  const url2 = `/ad_champion/playbook/playbook_progress?website_id=${websiteId}`;
  var response = await $.ajax({
    method: 'GET',
    url: url2,
    statusCode: statusCode2,
  });
  var camelResponse = null;
  while (status2 === 202) {
    camelResponse = camelcaseKeys(response, { deep: true });
    dispatch(fetchPlaybookProgressResponse(websiteId, camelResponse));
    await sleep_default(1e3);
    response = await $.ajax({
      method: 'GET',
      url: url2,
      statusCode: statusCode2,
    });
  }
  camelResponse = camelcaseKeys(response, { deep: true });
  dispatch(fetchPlaybookProgressResponse(websiteId, camelResponse));
  return camelResponse.progressDetails;
};
var fetchPlaybookProgressByItemRequest = (
  websiteId,
  websitePlaybookItemId
) => ({
  type: FETCH_PLAYBOOK_PROGRESS_BY_ITEM_REQUEST,
  websiteId,
  websitePlaybookItemId,
});
var fetchPlaybookProgressByItemResponse = (
  websiteId,
  websitePlaybookItemId,
  response
) => ({
  type: FETCH_PLAYBOOK_PROGRESS_BY_ITEM_RESPONSE,
  websiteId,
  websitePlaybookItemId,
  ...response,
});
var fetchPlaybookProgressByItem =
  (websiteId, websitePlaybookItemId) => async (dispatch) => {
    dispatch(
      fetchPlaybookProgressByItemRequest(websiteId, websitePlaybookItemId)
    );
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/playbook/playbook_progress/progress_by_playbook_item?website_id=${websiteId}&website_playbook_item_id=${websitePlaybookItemId}`,
      dataType: 'json',
    });
    const camelCasedResponse = camelcaseKeys(response, { deep: true });
    dispatch(
      fetchPlaybookProgressByItemResponse(
        websiteId,
        websitePlaybookItemId,
        camelCasedResponse
      )
    );
    return camelCasedResponse;
  };
var dismissPlaybookProgressRequest = (websiteId, websitePlaybookItemId) => ({
  type: DISMISS_PLAYBOOK_PROGRESS_REQUEST,
  websiteId,
  websitePlaybookItemId,
});
var dismissPlaybookProgressResponse = (
  websiteId,
  websitePlaybookItemId,
  response
) => ({
  type: DISMISS_PLAYBOOK_PROGRESS_RESPONSE,
  websiteId,
  websitePlaybookItemId,
  response,
});
var dismissPlaybookProgress =
  (websiteId, websitePlaybookItemId) => async (dispatch) => {
    dispatch(dismissPlaybookProgressRequest(websiteId, websitePlaybookItemId));
    var response = await $.ajax({
      method: 'POST',
      url: `/ad_champion/playbook/playbook_progress/dismiss_website_playbook_item`,
      data: (0, import_snakecase_keys28.default)(
        { websiteId, websitePlaybookItemId },
        { deep: true }
      ),
      dataType: 'json',
    });
    dispatch(
      dismissPlaybookProgressResponse(
        websiteId,
        websitePlaybookItemId,
        response
      )
    );
    return response;
  };
var undismissPlaybookProgressRequest = (websiteId, websitePlaybookItemId) => ({
  type: UNDISMISS_PLAYBOOK_PROGRESS_REQUEST,
  websiteId,
  websitePlaybookItemId,
});
var undismissPlaybookProgressResponse = (
  websiteId,
  websitePlaybookItemId,
  response
) => ({
  type: UNDISMISS_PLAYBOOK_PROGRESS_RESPONSE,
  websiteId,
  websitePlaybookItemId,
  response,
});
var undismissPlaybookProgress =
  (websiteId, websitePlaybookItemId) => async (dispatch) => {
    dispatch(
      undismissPlaybookProgressRequest(websiteId, websitePlaybookItemId)
    );
    var response = await $.ajax({
      method: 'POST',
      url: `/ad_champion/playbook/playbook_progress/undismiss_dismissed_playbook_item`,
      data: (0, import_snakecase_keys28.default)(
        { websiteId, websitePlaybookItemId },
        { deep: true }
      ),
      dataType: 'json',
    });
    dispatch(
      undismissPlaybookProgressResponse(
        websiteId,
        websitePlaybookItemId,
        response
      )
    );
    return response;
  };
var setDismissSwitch = (show) => ({
  type: SET_PLAYBOOK_DISMISS_SWITCH,
  show,
});
var fetchCompletedPlaybookItemsRequest = (websiteId) => ({
  type: FETCH_COMPLETED_PLAYBOOK_ITEMS_REQUEST,
  websiteId,
});
var fetchCompletedPlaybookItemsResponse = (websiteId, response) => ({
  type: FETCH_COMPLETED_PLAYBOOK_ITEMS_RESPONSE,
  websiteId,
  ...response,
});
var fetchCompletedPlaybookItems = (websiteId) => async (dispatch) => {
  dispatch(fetchCompletedPlaybookItemsRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/playbook/playbook_progress/completed_playbook_items?website_id=${websiteId}`,
    dataType: 'json',
  });
  const camelCasedResponse = camelcaseKeys(response, { deep: true });
  dispatch(fetchCompletedPlaybookItemsResponse(websiteId, camelCasedResponse));
  return camelCasedResponse;
};
var completePlaybookItemRequest = (
  websiteId,
  websitePlaybookItemId,
  aiOptimisationBatchId
) => ({
  type: COMPLETE_PLAYBOOK_ITEM_REQUEST,
  websiteId,
  websitePlaybookItemId,
  aiOptimisationBatchId,
});
var completePlaybookItemResponse = (
  websiteId,
  websitePlaybookItemId,
  aiOptimisationBatchId,
  response
) => ({
  type: COMPLETE_PLAYBOOK_ITEM_RESPONSE,
  websiteId,
  websitePlaybookItemId,
  aiOptimisationBatchId,
  response,
});
var completePlaybookItem =
  (websiteId, websitePlaybookItemId, aiOptimisationBatchId) =>
  async (dispatch) => {
    dispatch(
      completePlaybookItemRequest(
        websiteId,
        websitePlaybookItemId,
        aiOptimisationBatchId
      )
    );
    var response = await $.ajax({
      method: 'POST',
      url: `/ad_champion/playbook/playbook_progress/complete_website_playbook_item`,
      data: (0, import_snakecase_keys28.default)(
        { websiteId, websitePlaybookItemId, aiOptimisationBatchId },
        { deep: true }
      ),
      dataType: 'json',
    });
    dispatch(
      completePlaybookItemResponse(
        websiteId,
        websitePlaybookItemId,
        aiOptimisationBatchId,
        response
      )
    );
    return camelcaseKeys(response, { deep: true });
  };

// src/actions/product_feeds/replacements/ai_suggestions.jsx
var import_snakecase_keys29 = __toESM(require_snakecase_keys());
var FETCH_AI_CREDITS_HISTORY_REQUEST = 'FETCH_AI_CREDITS_HISTORY_REQUEST';
var FETCH_AI_CREDITS_HISTORY_RESPONSE = 'FETCH_AI_CREDITS_HISTORY_RESPONSE';
var TRIGGER_AI_SUGGESTIONS_REQUEST = 'TRIGGER_AI_SUGGESTIONS_REQUEST';
var TRIGGER_AI_SUGGESTIONS_RESPONSE = 'TRIGGER_AI_SUGGESTIONS_RESPONSE';
var fetchAiCreditsHistoryRequest = (websiteId) => ({
  type: FETCH_AI_CREDITS_HISTORY_REQUEST,
  websiteId,
});
var fetchAiCreditsHistoryResponse = (websiteId, response) => ({
  type: FETCH_AI_CREDITS_HISTORY_RESPONSE,
  websiteId,
  ...response,
});
var fetchAiCreditsHistory = (websiteId) => async (dispatch) => {
  dispatch(fetchAiCreditsHistoryRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/replacements/ai_suggestions/credit_history`,
    dataType: 'json',
  });
  const camelCasedResponse = camelcaseKeys(response, { deep: true });
  dispatch(fetchAiCreditsHistoryResponse(websiteId, camelCasedResponse));
  return camelCasedResponse;
};
var triggerAiSuggestionsRequest = (
  websiteId,
  inventoryId,
  vendorId,
  creditsQuoted,
  filters
) => ({
  type: TRIGGER_AI_SUGGESTIONS_REQUEST,
  websiteId,
  inventoryId,
  vendorId,
  creditsQuoted,
  filters,
});
var triggerAiSuggestionsResponse = (
  websiteId,
  inventoryId,
  vendorId,
  creditsQuoted,
  filters,
  response
) => ({
  type: TRIGGER_AI_SUGGESTIONS_RESPONSE,
  websiteId,
  inventoryId,
  vendorId,
  creditsQuoted,
  filters,
  response,
});
var triggerAiSuggestions =
  (websiteId, inventoryId, vendorId, creditsQuoted, filters) =>
  async (dispatch) => {
    dispatch(
      triggerAiSuggestionsRequest(
        websiteId,
        inventoryId,
        vendorId,
        creditsQuoted,
        filters
      )
    );
    var response = await $.ajax({
      method: 'POST',
      url: `/ad_champion/websites/${websiteId}/replacements/ai_suggestions/trigger`,
      data: (0, import_snakecase_keys29.default)({
        inventoryId,
        vendorId,
        creditsQuoted,
        filters: JSON.stringify(
          filters.map((f) => (0, import_snakecase_keys29.default)(f))
        ),
      }),
      dataType: 'json',
    });
    const camelCasedResponse = camelcaseKeys(response, { deep: true });
    dispatch(
      triggerAiSuggestionsResponse(
        websiteId,
        inventoryId,
        vendorId,
        creditsQuoted,
        filters,
        camelCasedResponse
      )
    );
    return camelCasedResponse;
  };

// src/actions/product_feeds/replacements/attributes.jsx
var import_snakecase_keys30 = __toESM(require_snakecase_keys());
var FETCH_INVENTORY_ATTRIBUTES_REQUEST = 'FETCH_INVENTORY_ATTRIBUTES_REQUEST';
var FETCH_INVENTORY_ATTRIBUTES_RESPONSE = 'FETCH_INVENTORY_ATTRIBUTES_RESPONSE';
var FETCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST =
  'FETCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST';
var FETCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE =
  'FETCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE';
var SEARCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST =
  'SEARCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST';
var SEARCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE =
  'SEARCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE';
var UPDATE_INVENTORY_ATTRIBUTE_REPLACEMENTS =
  'UPDATE_INVENTORY_ATTRIBUTE_REPLACEMENTS';
var CLEAR_UPDATED_INVENTORY_ATTRIBUTE_REPLACEMENTS =
  'CLEAR_UPDATED_INVENTORY_ATTRIBUTE_REPLACEMENTS';
var CLEAR_INVENTORY_ATTRIBUTE_REPLACEMENTS =
  'CLEAR_INVENTORY_ATTRIBUTE_REPLACEMENTS';
var SAVE_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST =
  'SAVE_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST';
var SAVE_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE =
  'SAVE_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE';
var fetchInventoryAttributesRequest = (websiteId) => ({
  type: FETCH_INVENTORY_ATTRIBUTES_REQUEST,
  websiteId,
});
var fetchInventoryAttributesResponse = (websiteId, response) => ({
  type: FETCH_INVENTORY_ATTRIBUTES_RESPONSE,
  websiteId,
  ...response,
});
var fetchInventoryAttributes = (websiteId, available) => async (dispatch) => {
  dispatch(fetchInventoryAttributesRequest(websiteId));
  var response = {};
  while (true) {
    response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/websites/${websiteId}/replacements/attributes`,
      data: (0, import_snakecase_keys30.default)({ available }, { deep: true }),
      dataType: 'json',
    });
    if (response.attributes && response.attributes.length > 0) {
      break;
    }
    await sleep_default(500);
  }
  response['availableAttributes'] = available;
  dispatch(
    fetchInventoryAttributesResponse(
      websiteId,
      camelcaseKeys(response, { deep: true })
    )
  );
  return response;
};
var fetchInventoryAttributeReplacementsRequest = (websiteId, attributeId) => ({
  type: FETCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST,
  websiteId,
  attributeId,
});
var fetchInventoryAttributeReplacementsResponse = (
  websiteId,
  attributeId,
  response
) => ({
  type: FETCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE,
  websiteId,
  attributeId,
  ...response,
});
var fetchInventoryAttributeReplacements =
  (websiteId, attributeId) => async (dispatch) => {
    dispatch(
      fetchInventoryAttributeReplacementsRequest(websiteId, attributeId)
    );
    var camelResponse = null;
    var page = 1;
    var perPage = 50;
    var replacements = [];
    do {
      var response = await $.ajax({
        method: 'GET',
        url: `/ad_champion/websites/${websiteId}/replacements/attribute_replacements`,
        data: (0, import_snakecase_keys30.default)(
          { page, perPage, attributeId },
          { deep: true }
        ),
        dataType: 'json',
      });
      camelResponse = camelcaseKeys(response, { deep: true });
      replacements.push(camelResponse.replacements);
      page += 1;
    } while (!camelResponse.lastPage);
    replacements = { replacements: replacements.flat() };
    dispatch(
      fetchInventoryAttributeReplacementsResponse(
        websiteId,
        attributeId,
        replacements
      )
    );
    return replacements;
  };
var searchInventoryAttributeReplacementsRequest = (
  websiteId,
  attributes,
  searchTerm
) => ({
  type: SEARCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST,
  websiteId,
  attributes,
  searchTerm,
});
var searchInventoryAttributeReplacementsResponse = (
  websiteId,
  attributes,
  searchTerm,
  response
) => ({
  type: SEARCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE,
  websiteId,
  ...{ attributes, searchTerm },
  ...response,
});
var searchInventoryAttributeReplacements =
  (websiteId, attributes, searchTerm) => async (dispatch) => {
    dispatch(
      searchInventoryAttributeReplacementsRequest(
        websiteId,
        attributes,
        searchTerm
      )
    );
    var camelResponse = null;
    var page = 1;
    var perPage = 50;
    var replacements = [];
    do {
      var response = await $.ajax({
        method: 'GET',
        url: `/ad_champion/websites/${websiteId}/replacements/attribute_replacements_search`,
        data: (0, import_snakecase_keys30.default)(
          { page, perPage, searchTerm },
          { deep: true }
        ),
        dataType: 'json',
      });
      camelResponse = camelcaseKeys(response, { deep: true });
      replacements.push(camelResponse.replacements);
      page += 1;
    } while (!camelResponse.lastPage);
    replacements = { replacements: replacements.flat() };
    dispatch(
      searchInventoryAttributeReplacementsResponse(
        websiteId,
        attributes,
        searchTerm,
        replacements
      )
    );
    return replacements;
  };
var updateInventoryAttributeReplacements =
  (websiteId, payload) => (dispatch) => {
    dispatch({
      type: UPDATE_INVENTORY_ATTRIBUTE_REPLACEMENTS,
      websiteId,
      ...payload,
    });
  };
var saveInventoryAttributeReplacementsRequest = (websiteId, replacements) => ({
  type: SAVE_INVENTORY_ATTRIBUTE_REPLACEMENTS_REQUEST,
  websiteId,
  ...replacements,
});
var saveInventoryAttributeReplacementsResponse = (
  websiteId,
  replacements,
  response
) => ({
  type: SAVE_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE,
  websiteId,
  ...replacements,
  response,
});
var saveInventoryAttributeReplacements =
  (websiteId, replacements) => async (dispatch) => {
    dispatch(
      saveInventoryAttributeReplacementsRequest(websiteId, replacements)
    );
    var response = await $.ajax({
      method: 'POST',
      url: `/ad_champion/websites/${websiteId}/replacements/save_attribute_replacements`,
      data: {
        replacements: JSON.stringify(replacements),
      },
      dataType: 'json',
    });
    dispatch(
      saveInventoryAttributeReplacementsResponse(
        websiteId,
        replacements,
        response
      )
    );
    return response;
  };
var clearUpdatedInventoryAttributeReplacements =
  (websiteId, attributeReplacements) => (dispatch) => {
    dispatch({
      type: CLEAR_UPDATED_INVENTORY_ATTRIBUTE_REPLACEMENTS,
      websiteId,
      ...{ attributeReplacements },
    });
  };
var clearInventoryAttributeReplacements = (websiteId) => (dispatch) => {
  dispatch({
    type: CLEAR_INVENTORY_ATTRIBUTE_REPLACEMENTS,
    websiteId,
  });
};

// src/actions/product_feeds/replacements/category.jsx
var import_snakecase_keys31 = __toESM(require_snakecase_keys());

// src/selectors/inventory.jsx
var import_reselect9 = __toESM(require_lib());
var inventoriesSelector = (state) => state.inventories || {};
var inventoryDetailsSelector = (0, import_reselect9.createSelector)(
  [inventoriesSelector],
  (inventories) => inventories.details || {}
);
var inventoryDetailSelector = (inventoryId) =>
  (0, import_reselect9.createSelector)(
    inventoryDetailsSelector,
    (details) => details[inventoryId] || { errors: [] }
  );
var inventoryItemCountSelector = (inventoryId) =>
  (0, import_reselect9.createSelector)(
    [inventoryDetailSelector(inventoryId)],
    (detail) => detail.itemCount
  );
var firstInventoryInWebsiteSelector = (0, import_reselect9.createSelector)(
  [websiteDetailSelector, inventoryDetailsSelector],
  (websiteDetail, inventoryDetails) => {
    if (!inventoryDetails || !websiteDetail || !websiteDetail.inventoryIds) {
      return {};
    }
    return inventoryDetails[websiteDetail.inventoryIds[0]] || {};
  }
);
var inventoryFcAttributesSelector = (0, import_reselect9.createSelector)(
  [inventoriesSelector],
  (inventories) => inventories.fcAttributes || {}
);
var inventoryMappableAttributesSelector = (0, import_reselect9.createSelector)(
  [inventoryFcAttributesSelector],
  (fcAttributes) => fcAttributes.mappableAttributes || []
);
var inventoryStoreAttributesSelector = (0, import_reselect9.createSelector)(
  [inventoryFcAttributesSelector],
  (fcAttributes) => fcAttributes.storeAttributes || []
);
var inventoryExistingAttributesMappingSelector = (0,
import_reselect9.createSelector)(
  [inventoryFcAttributesSelector],
  (fcAttributes) => fcAttributes.existingMappings || []
);
var inventoryFeedOpsCategoryTreeSelector = (0, import_reselect9.createSelector)(
  [inventoriesSelector, websiteIdSelector],
  (inventories, websiteId) =>
    inventories.foCategoryTree &&
    Object.keys(inventories.foCategoryTree).length > 0
      ? inventories.foCategoryTree[websiteId]
      : []
);
var inventoryFeedOpsCategoryHierarchySelector = (0,
import_reselect9.createSelector)(
  [inventoriesSelector],
  (inventories) => inventories.foCategoryHierarchy || []
);
var inventoryCategoryTreeSelector = (0, import_reselect9.createSelector)(
  [inventoriesSelector, websiteIdSelector],
  (inventories, websiteId) =>
    inventories.categoryTree && Object.keys(inventories.categoryTree).length > 0
      ? inventories.categoryTree[websiteId]
      : []
);
var inventoryCategoryHierarchySelector = (0, import_reselect9.createSelector)(
  [inventoriesSelector],
  (inventories) => inventories.categoryHierarchy || []
);
var defaultCategoryDepthSelector = (0, import_reselect9.createSelector)(
  [inventoryCategoryHierarchySelector],
  (hierarchy) => hierarchy[0] || {}
);
var defaultCategorySelector = (0, import_reselect9.createSelector)(
  [defaultCategoryDepthSelector],
  (defaultCategoryDepth) => defaultCategoryDepth[0] || { depth: 0, id: 0 }
);
var hierarchyDepthSelector = (depth) =>
  (0, import_reselect9.createSelector)(
    [inventoryCategoryHierarchySelector],
    (hierarchy) => hierarchy[depth] || {}
  );
var hierarchyCategorySelector = (depth, categoryId) =>
  (0, import_reselect9.createSelector)(
    [hierarchyDepthSelector(depth)],
    (hierarchyDepth) => hierarchyDepth[categoryId] || {}
  );
var categoryDepthValueSelector = (_state, props) => props.categoryDepth;
var initialReconciledStatusSelector = (0, import_reselect9.createSelector)(
  [inventoriesSelector],
  (inventories) => inventories.initialReconciled || false
);
var outboundFeedsGeneratedStatusSelector = (0, import_reselect9.createSelector)(
  [inventoriesSelector],
  (inventories) => inventories.outboundFeedsGenerated || false
);
var inventoryProcessingSelector = (0, import_reselect9.createSelector)(
  [inventoriesSelector, websiteRetailInventoryIdsSelector],
  (inventories, retailInventoryIds) =>
    inventories.processingStatus &&
    Object.keys(inventories.processingStatus).length > 0 &&
    inventories.processingStatus[retailInventoryIds[0]]
      ? inventories.processingStatus[retailInventoryIds[0]] || {}
      : {}
);
var inventoryProcessingStatusSelector = (0, import_reselect9.createSelector)(
  [inventoryProcessingSelector],
  (processing) => processing.message || ''
);
var inventoryProcessingValueSelector = (0, import_reselect9.createSelector)(
  [inventoryProcessingSelector],
  (processing) => processing.value || 0
);
var inventoryProcessingTotalProductsSelector = (0,
import_reselect9.createSelector)(
  [inventoryProcessingSelector],
  (processing) => processing.totalProducts || 0
);
var inventoryProductDataAuditsSelector = (0, import_reselect9.createSelector)(
  [inventoriesSelector, websiteRetailInventoryIdsSelector],
  (inventories, retailInventoryIds) =>
    inventories.audits &&
    Object.keys(inventories.audits).length > 0 &&
    inventories.audits[retailInventoryIds[0]]
      ? inventories.audits[retailInventoryIds[0]].inventoryAudits || []
      : []
);
var inventoryAuditScheduleMessageSelector = (0,
import_reselect9.createSelector)(
  [inventoriesSelector, websiteRetailInventoryIdsSelector],
  (inventories, retailInventoryIds) =>
    inventories.audits &&
    Object.keys(inventories.audits).length > 0 &&
    inventories.audits[retailInventoryIds[0]]
      ? inventories.audits[retailInventoryIds[0]].scheduleMessage || ''
      : ''
);
var inventoryShowAllAuditsSelector = (0, import_reselect9.createSelector)(
  [inventoriesSelector],
  (inventories) =>
    inventories.audits && Object.keys(inventories.audits).length > 0
      ? inventories.audits.showAllAudits
      : false
);

// src/actions/product_feeds/replacements/category.jsx
var FETCH_INVENTORY_CATEGORY_REPLACEMENTS_REQUEST =
  'FETCH_INVENTORY_CATEGORY_REPLACEMENTS_REQUEST';
var FETCH_INVENTORY_CATEGORY_REPLACEMENTS_RESPONSE =
  'FETCH_INVENTORY_CATEGORY_REPLACEMENTS_RESPONSE';
var SAVE_INVENTORY_CATEGORY_REPLACEMENTS_REQUEST =
  'SAVE_INVENTORY_CATEGORY_REPLACEMENTS_REQUEST';
var SAVE_INVENTORY_CATEGORY_REPLACEMENTS_RESPONSE =
  'SAVE_INVENTORY_CATEGORY_REPLACEMENTS_RESPONSE';
var fetchInventoryCategoryReplacementsRequest = (websiteId) => ({
  type: FETCH_INVENTORY_CATEGORY_REPLACEMENTS_REQUEST,
  websiteId,
});
var fetchInventoryCategoryReplacementsResponse = (websiteId, response) => ({
  type: FETCH_INVENTORY_CATEGORY_REPLACEMENTS_RESPONSE,
  websiteId,
  ...response,
});
var getReplacementsApi = async (websiteId, data) => {
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/replacements/category_replacements`,
    data,
    dataType: 'json',
  });
  return camelcaseKeys(response, { deep: true });
};
var handleReplacementsResponse = (allReplacements, response, batch2) => {
  allReplacements.push(
    response.replacements.map((r) => ({
      ...r,
      fcId: batch2.find((c) => c[0] === r.id)[1],
    }))
  );
};
var categoriesInDepth = (hierarchyLevel) => {
  return Object.values(hierarchyLevel || {}).map((c) => [c.dcId, c.id]);
};
var fetchInventoryCategoryReplacements =
  (websiteId) => async (dispatch, getState) => {
    dispatch(fetchInventoryCategoryReplacementsRequest(websiteId));
    var allReplacements = [];
    var perPage = 50;
    var depth = 1;
    var hierarchy = inventoryFeedOpsCategoryHierarchySelector(getState());
    var categoryIds = categoriesInDepth(hierarchy[depth]);
    do {
      var batch2 = categoryIds.splice(0, perPage);
      var data = (0, import_snakecase_keys31.default)({
        depth,
        categoryIds: batch2.map((c) => c[0]),
      });
      var response = await getReplacementsApi(websiteId, data);
      handleReplacementsResponse(allReplacements, response, batch2);
      if (categoryIds.length === 0) {
        depth += 1;
        categoryIds = categoriesInDepth(hierarchy[depth]);
      }
    } while (categoryIds.length > 0 || depth < hierarchy.length);
    var replacements = { replacements: allReplacements.flat() };
    dispatch(
      fetchInventoryCategoryReplacementsResponse(websiteId, replacements)
    );
    return replacements;
  };
var saveInventoryCategoryReplacementsRequest = (websiteId, replacements) => ({
  type: SAVE_INVENTORY_CATEGORY_REPLACEMENTS_REQUEST,
  websiteId,
  ...replacements,
});
var saveInventoryCategoryReplacementsResponse = (
  websiteId,
  replacements,
  response
) => ({
  type: SAVE_INVENTORY_CATEGORY_REPLACEMENTS_RESPONSE,
  websiteId,
  ...replacements,
  response,
});
var generateObject = (content) => {
  var generatedObject = content.reduce((out, contentsAtDepth, depth) => {
    if (Object.entries(contentsAtDepth).length > 0) {
      out[depth] = contentsAtDepth;
    }
    return out;
  }, {});
  return generatedObject;
};
var generateApiData = (replacements, categories) => {
  var replacementObject = generateObject(replacements);
  return {
    replacements: JSON.stringify(replacementObject),
    categories: JSON.stringify(categories),
  };
};
var saveInventoryCategoryReplacements =
  (websiteId, replacements, categories) => async (dispatch) => {
    dispatch(saveInventoryCategoryReplacementsRequest(websiteId, replacements));
    var response = await $.ajax({
      method: 'POST',
      url: `/ad_champion/websites/${websiteId}/replacements/save_category_replacements`,
      data: generateApiData(replacements, categories),
      dataType: 'json',
    });
    dispatch(
      saveInventoryCategoryReplacementsResponse(
        websiteId,
        replacements,
        response
      )
    );
    return response;
  };

// src/actions/product_feeds/replacements/products/api_single_import.jsx
var import_snakecase_keys32 = __toESM(require_snakecase_keys());
var FETCH_API_IMPORT_SOURCE_HEADERS_REQUEST =
  'FETCH_API_IMPORT_SOURCE_HEADERS_REQUEST';
var FETCH_API_IMPORT_SOURCE_HEADERS_RESPONSE =
  'FETCH_API_IMPORT_SOURCE_HEADERS_RESPONSE';
var SAVE_API_IMPORT_PRODUCTS_REQUEST = 'SAVE_API_IMPORT_PRODUCTS_REQUEST';
var SAVE_API_IMPORT_PRODUCTS_RESPONSE = 'SAVE_API_IMPORT_PRODUCTS_RESPONSE';
var fetchApiImportSourceHeadersRequest = (websiteId, accessSettings) => ({
  type: FETCH_API_IMPORT_SOURCE_HEADERS_REQUEST,
  websiteId,
  accessSettings,
});
var fetchApiImportSourceHeadersResponse = (
  websiteId,
  accessSettings,
  response
) => ({
  type: FETCH_API_IMPORT_SOURCE_HEADERS_RESPONSE,
  websiteId,
  accessSettings,
  ...response,
});
var getApiImportSourceHeaders = async (websiteId, accessSettings) => {
  var status2 = 202;
  var statusCode2 = {
    200: () => {
      status2 = 200;
    },
    202: () => {
      status2 = 202;
    },
  };
  const settings = (0, import_snakecase_keys32.default)({ ...accessSettings });
  const url2 = `/ad_champion/websites/${websiteId}/replacements/import_products/fetch_api_headers?access_settings=${JSON.stringify(
    settings
  )}`;
  var response = await $.ajax({
    method: 'GET',
    url: url2,
    statusCode: statusCode2,
  });
  while (status2 === 202) {
    await sleep_default(1e3);
    response = await $.ajax({
      method: 'GET',
      url: url2,
      statusCode: statusCode2,
    });
  }
  return camelcaseKeys(response, { deep: true });
};
var fetchApiImportSourceHeaders =
  (websiteId, accessSettings) => async (dispatch) => {
    dispatch(fetchApiImportSourceHeadersRequest(websiteId, accessSettings));
    const camelCaseResponse = await getApiImportSourceHeaders(
      websiteId,
      accessSettings
    );
    dispatch(
      fetchApiImportSourceHeadersResponse(
        websiteId,
        accessSettings,
        camelCaseResponse
      )
    );
    return camelCaseResponse;
  };
var saveApiImportProductsRequest = (
  websiteId,
  accessSettings,
  attributesMapping,
  importSettings
) => ({
  type: SAVE_API_IMPORT_PRODUCTS_REQUEST,
  websiteId,
  accessSettings,
  attributesMapping,
  importSettings,
});
var saveApiImportProductsResponse = (
  websiteId,
  accessSettings,
  attributesMapping,
  importSettings,
  response
) => ({
  type: SAVE_API_IMPORT_PRODUCTS_RESPONSE,
  websiteId,
  accessSettings,
  attributesMapping,
  importSettings,
  ...response,
});
var apiImportPorducts = async (
  websiteId,
  accessSettings,
  attributesMapping,
  importSettings
) => {
  var status2 = 202;
  var statusCode2 = {
    200: () => {
      status2 = 200;
    },
    202: () => {
      status2 = 202;
    },
  };
  const data = (0, import_snakecase_keys32.default)({
    accessSettings: JSON.stringify(
      (0, import_snakecase_keys32.default)(accessSettings)
    ),
    attributesMapping: JSON.stringify(
      (0, import_snakecase_keys32.default)(attributesMapping)
    ),
    importSettings: JSON.stringify(
      (0, import_snakecase_keys32.default)(importSettings)
    ),
  });
  const url2 = `/ad_champion/websites/${websiteId}/replacements/import_products/import_api_products`;
  var response = await $.ajax({
    method: 'POST',
    url: url2,
    data,
    statusCode: statusCode2,
  });
  while (status2 === 202) {
    await sleep_default(1e3);
    response = await $.ajax({
      method: 'POST',
      url: url2,
      data,
      statusCode: statusCode2,
    });
  }
  return camelcaseKeys(response, { deep: true });
};
var saveApiImportProducts =
  (websiteId, accessSettings, attributesMapping, importSettings) =>
  async (dispatch) => {
    var args = [websiteId, accessSettings, attributesMapping, importSettings];
    dispatch(saveApiImportProductsRequest(...args));
    const camelCaseResponse = await apiImportPorducts(...args);
    dispatch(saveApiImportProductsResponse(...args, camelCaseResponse));
    return camelCaseResponse;
  };

// src/actions/product_feeds/replacements/products/file_single_import.jsx
var import_snakecase_keys33 = __toESM(require_snakecase_keys());
var UPLOAD_IMPORT_FILE_REQUEST = 'UPLOAD_IMPORT_FILE_REQUEST';
var UPLOAD_IMPORT_FILE_RESPONSE = 'UPLOAD_IMPORT_FILE_RESPONSE';
var FETCH_FILE_IMPORT_SOURCE_HEADERS_REQUEST =
  'FETCH_FILE_IMPORT_SOURCE_HEADERS_REQUEST';
var FETCH_FILE_IMPORT_SOURCE_HEADERS_RESPONSE =
  'FETCH_FILE_IMPORT_SOURCE_HEADERS_RESPONSE';
var SAVE_FILE_IMPORT_PRODUCTS_REQUEST = 'SAVE_FILE_IMPORT_PRODUCTS_REQUEST';
var SAVE_FILE_IMPORT_PRODUCTS_RESPONSE = 'SAVE_FILE_IMPORT_PRODUCTS_RESPONSE';
var uploadImportFileRequest = (websiteId, formData) => ({
  type: UPLOAD_IMPORT_FILE_REQUEST,
  websiteId,
  formData,
});
var uploadImportFileResponse = (websiteId, formData, response) => ({
  type: UPLOAD_IMPORT_FILE_RESPONSE,
  websiteId,
  formData,
  ...response,
});
var uploadImportFile = (websiteId, formData) => {
  return async (dispatch) => {
    dispatch(uploadImportFileRequest(websiteId, formData));
    const response = await $.ajax({
      method: 'POST',
      url: `/ad_champion/websites/${websiteId}/replacements/import_products/upload_import_file`,
      data: formData,
      processData: false,
      contentType: false,
    });
    const camelCaseResponse = camelcaseKeys(response, { deep: true });
    dispatch(uploadImportFileResponse(websiteId, formData, camelCaseResponse));
    return camelCaseResponse;
  };
};
var fetchFileImportSourceHeadersRequest = (websiteId, fileUrl) => ({
  type: FETCH_FILE_IMPORT_SOURCE_HEADERS_REQUEST,
  websiteId,
  fileUrl,
});
var fetchFileImportSourceHeadersResponse = (websiteId, fileUrl, response) => ({
  type: FETCH_FILE_IMPORT_SOURCE_HEADERS_RESPONSE,
  websiteId,
  fileUrl,
  ...response,
});
var getFileImportSourceHeaders = async (websiteId, fileUrl) => {
  var status2 = 202;
  var statusCode2 = {
    200: () => {
      status2 = 200;
    },
    202: () => {
      status2 = 202;
    },
  };
  const queryString = `?file_url=${encodeURIComponent(fileUrl)}`;
  const url2 = `/ad_champion/websites/${websiteId}/replacements/import_products/fetch_file_headers${queryString}`;
  var response = await $.ajax({
    method: 'GET',
    url: url2,
    statusCode: statusCode2,
  });
  while (status2 === 202) {
    await sleep_default(1e3);
    response = await $.ajax({
      method: 'GET',
      url: url2,
      statusCode: statusCode2,
    });
  }
  return camelcaseKeys(response, { deep: true });
};
var fetchFileImportSourceHeaders = (websiteId, fileUrl) => {
  return async (dispatch) => {
    dispatch(fetchFileImportSourceHeadersRequest(websiteId, fileUrl));
    const camelCaseResponse = await getFileImportSourceHeaders(
      websiteId,
      fileUrl
    );
    dispatch(
      fetchFileImportSourceHeadersResponse(
        websiteId,
        fileUrl,
        camelCaseResponse
      )
    );
    return camelCaseResponse;
  };
};
var saveFileImportProductsRequest = (
  websiteId,
  fileUrl,
  attributesMapping,
  importSettings
) => ({
  type: SAVE_FILE_IMPORT_PRODUCTS_REQUEST,
  websiteId,
  fileUrl,
  attributesMapping,
  importSettings,
});
var saveFileImportProductsResponse = (
  websiteId,
  fileUrl,
  attributesMapping,
  importSettings,
  response
) => ({
  type: SAVE_FILE_IMPORT_PRODUCTS_RESPONSE,
  websiteId,
  fileUrl,
  attributesMapping,
  importSettings,
  ...response,
});
var fileImportPorducts = async (
  websiteId,
  fileUrl,
  attributesMapping,
  importSettings
) => {
  var status2 = 202;
  var statusCode2 = {
    200: () => {
      status2 = 200;
    },
    202: () => {
      status2 = 202;
    },
  };
  const url2 = `/ad_champion/websites/${websiteId}/replacements/import_products/import_file_products`;
  const data = (0, import_snakecase_keys33.default)({
    fileUrl,
    attributesMapping: JSON.stringify(
      (0, import_snakecase_keys33.default)(attributesMapping)
    ),
    importSettings: JSON.stringify(
      (0, import_snakecase_keys33.default)(importSettings)
    ),
  });
  var response = await $.ajax({
    method: 'POST',
    url: url2,
    data,
    statusCode: statusCode2,
  });
  while (status2 === 202) {
    await sleep_default(1e3);
    response = await $.ajax({
      method: 'POST',
      url: url2,
      data,
      statusCode: statusCode2,
    });
  }
  return camelcaseKeys(response, { deep: true });
};
var saveFileImportProducts =
  (websiteId, fileUrl, attributesMapping, importSettings) =>
  async (dispatch) => {
    var args = [websiteId, fileUrl, attributesMapping, importSettings];
    dispatch(saveFileImportProductsRequest(...args));
    const camelCaseResponse = await fileImportPorducts(...args);
    dispatch(saveFileImportProductsResponse(...args, camelCaseResponse));
    return camelCaseResponse;
  };

// src/actions/product_feeds/replacements/products.jsx
var import_snakecase_keys34 = __toESM(require_snakecase_keys());
var FETCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST =
  'FETCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST';
var FETCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE =
  'FETCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE';
var UPDATE_PRODUCT_ATTRIBUTE_OPTIMISATION_SUGGESTIONS_REQUEST =
  'UPDATE_PRODUCT_ATTRIBUTE_OPTIMISATION_SUGGESTIONS_REQUEST';
var UPDATE_PRODUCT_ATTRIBUTE_OPTIMISATION_SUGGESTIONS_RESPONSE =
  'UPDATE_PRODUCT_ATTRIBUTE_OPTIMISATION_SUGGESTIONS_RESPONSE';
var UPDATE_PRODUCT_ATTRIBUTE_REPLACEMENTS =
  'UPDATE_PRODUCT_ATTRIBUTE_REPLACEMENTS';
var SAVE_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST =
  'SAVE_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST';
var SAVE_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE =
  'SAVE_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE';
var UPDATE_DISABLED_INVENTORY_ITEMS = 'UPDATE_DISABLED_INVENTORY_ITEMS';
var CLEAR_UPDATED_ITEMS_AND_REPLACEMENTS =
  'CLEAR_UPDATED_ITEMS_AND_REPLACEMENTS';
var UPDATE_ATTRIBUTE_FILTERS = 'UPDATE_ATTRIBUTE_FILTERS';
var CREATE_RULE_MODAL_STATUS = 'CREATE_RULE_MODAL_STATUS';
var UPDATE_SELECTED_SUGGESTION_COLUMNS = 'UPDATE_SELECTED_SUGGESTION_COLUMNS';
var SAVE_FEED_SETTINGS_REQUEST = 'SAVE_FEED_SETTINGS_REQUEST';
var SAVE_FEED_SETTINGS_RESPONSE = 'SAVE_FEED_SETTINGS_RESPONSE';
var PRODUCT_ATTRIBUTE_REPLACEMENTS_QUERY_CHANGED_STATUS =
  'PRODUCT_ATTRIBUTE_REPLACEMENTS_QUERY_CHANGED_STATUS';
var UPDATE_PRODUCT_ROW_SELECTION_STATUS = 'UPDATE_PRODUCT_ROW_SELECTION_STATUS';
var SEARCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST =
  'SEARCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST';
var SEARCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE =
  'SEARCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE';
var fetchProductAttributeReplacementsRequest = (
  websiteId,
  feedId,
  channel,
  page,
  perPage,
  filters,
  displayedColumns,
  batchIds,
  showAllSuggestions
) => ({
  type: FETCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST,
  websiteId,
  feedId,
  channel,
  page,
  perPage,
  filters,
  displayedColumns,
  batchIds,
  showAllSuggestions,
});
var fetchProductAttributeReplacementsResponse = (
  websiteId,
  feedId,
  channel,
  page,
  perPage,
  filters,
  displayedColumns,
  batchIds,
  showAllSuggestions,
  response
) => ({
  type: FETCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE,
  websiteId,
  feedId,
  channel,
  page,
  perPage,
  filters,
  displayedColumns,
  batchIds,
  showAllSuggestions,
  ...response,
});
var searchProductAttributeReplacementsRequest = (
  websiteId,
  feedId,
  channel,
  page,
  perPage,
  filters,
  displayedColumns,
  batchIds,
  showAllSuggestions
) => ({
  type: SEARCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST,
  websiteId,
  feedId,
  channel,
  page,
  perPage,
  filters,
  displayedColumns,
  batchIds,
  showAllSuggestions,
});
var searchProductAttributeReplacementsResponse = (
  websiteId,
  feedId,
  channel,
  page,
  perPage,
  filters,
  displayedColumns,
  batchIds,
  showAllSuggestions,
  response
) => ({
  type: SEARCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE,
  websiteId,
  feedId,
  channel,
  page,
  perPage,
  filters,
  displayedColumns,
  batchIds,
  showAllSuggestions,
  ...response,
});
var buildFilterPayload = (filters) =>
  JSON.stringify(filters.map((f) => (0, import_snakecase_keys34.default)(f)));
var getProductAttributeReplacements = async (
  websiteId,
  feedId,
  channel,
  page,
  perPage,
  filters = [],
  displayedColumns,
  batchIds,
  showAllSuggestions,
  method
) => {
  var status2 = 202;
  var statusCode2 = {
    200: () => {
      status2 = 200;
    },
    202: () => {
      status2 = 202;
    },
  };
  const endpointConfig = {
    POST: {
      url: `/ad_champion/websites/${websiteId}/replacements/products/search`,
      data: (0, import_snakecase_keys34.default)({
        feedId,
        channel,
        page,
        perPage,
        filters: buildFilterPayload(filters),
        displayedColumns: displayedColumns?.join(','),
        suggestionsBatchIds: batchIds?.join(','),
        showAllSuggestions,
      }),
    },
    GET: {
      url: `/ad_champion/websites/${websiteId}/replacements/products?feed_id=${feedId}&page=${page}&per_page=${perPage}&channel=${channel}&suggestions_batch_ids=${encodeURIComponent(
        batchIds
      )}&displayed_columns=${encodeURIComponent(
        displayedColumns
      )}&show_all_suggestions=${showAllSuggestions}`,
    },
  };
  const config = endpointConfig[method];
  var ajaxOptions = {
    method,
    url: config.url,
    statusCode: statusCode2,
    data: config.data ?? {},
  };
  var startTime = /* @__PURE__ */ new Date();
  var response;
  while (status2 === 202) {
    response = await $.ajax(ajaxOptions);
    var elapsedTime = /* @__PURE__ */ new Date() - startTime;
    if (response.replacements.length >= perPage && elapsedTime > 3e3) {
      break;
    }
    await sleep_default(500);
  }
  return camelcaseKeys(response, { deep: true });
};
var fetchProductAttributeReplacements =
  (
    websiteId,
    feedId,
    channel,
    page,
    perPage,
    filters,
    displayedColumns,
    batchIds = null,
    showAllSuggestions = false
  ) =>
  async (dispatch) => {
    var args = [
      websiteId,
      feedId,
      channel,
      page,
      perPage,
      filters,
      displayedColumns,
      batchIds,
      showAllSuggestions,
    ];
    dispatch(fetchProductAttributeReplacementsRequest(...args));
    var response = await getProductAttributeReplacements(...args, 'GET');
    dispatch(fetchProductAttributeReplacementsResponse(...args, response));
    return response;
  };
var searchProductAttributeReplacements =
  (
    websiteId,
    feedId,
    channel,
    page,
    perPage,
    filters,
    displayedColumns,
    batchIds = null,
    showAllSuggestions = false
  ) =>
  async (dispatch) => {
    var args = [
      websiteId,
      feedId,
      channel,
      page,
      perPage,
      filters,
      displayedColumns,
      batchIds,
      showAllSuggestions,
    ];
    dispatch(searchProductAttributeReplacementsRequest(...args));
    var response = await getProductAttributeReplacements(...args, 'POST');
    dispatch(searchProductAttributeReplacementsResponse(...args, response));
    return response;
  };
var exportProductAttributeReplacements =
  (websiteId, feedId, channel, filters, columns) => async (dispatch) => {
    var status2 = 202;
    var statusCode2 = {
      200: () => {
        status2 = 200;
      },
      202: () => {
        status2 = 202;
      },
    };
    var filterPayload = buildFilterPayload(filters);
    const url2 = `/ad_champion/websites/${websiteId}/replacements/products/export`;
    var data = (0, import_snakecase_keys34.default)({
      feedId,
      channel,
      filters: filterPayload,
      columns: JSON.stringify(columns),
    });
    var response = await $.ajax({
      url: url2,
      data,
      statusCode: statusCode2,
      method: 'POST',
    });
    while (status2 === 202) {
      await sleep_default(1e3);
      response = await $.ajax({
        url: url2,
        data,
        statusCode: statusCode2,
        method: 'POST',
      });
    }
    return camelcaseKeys(response, { deep: true });
  };
var updateProductAttributeOptimisationSuggestionsRequest = (
  websiteId,
  channel,
  feedId,
  filters,
  columns,
  applySuggestions,
  sources
) => ({
  type: UPDATE_PRODUCT_ATTRIBUTE_OPTIMISATION_SUGGESTIONS_REQUEST,
  websiteId,
  channel,
  feedId,
  filters,
  columns,
  applySuggestions,
  sources,
});
var updateProductAttributeOptimisationSuggestionsResponse = (
  websiteId,
  channel,
  feedId,
  filters,
  columns,
  applySuggestions,
  sources,
  response
) => ({
  type: UPDATE_PRODUCT_ATTRIBUTE_OPTIMISATION_SUGGESTIONS_RESPONSE,
  websiteId,
  channel,
  feedId,
  filters,
  columns,
  applySuggestions,
  sources,
  response,
});
var postUpdateProductAttributeOptimisationSuggestions = async (data) => {
  var status2 = 202;
  var statusCode2 = {
    200: () => {
      status2 = 200;
    },
    202: () => {
      status2 = 202;
    },
  };
  const { websiteId, filters, columns } = data;
  var response;
  while (status2 === 202) {
    response = await $.ajax({
      url: `/ad_champion/websites/${websiteId}/replacements/products/update_optimisation_suggestions`,
      data: (0, import_snakecase_keys34.default)({
        ...data,
        filters: buildFilterPayload(filters),
        columns: JSON.stringify(columns),
      }),
      method: 'POST',
      statusCode: statusCode2,
    });
    if (status2 === 202) {
      await sleep_default(500);
    }
  }
  return response;
};
var updateProductAttributeOptimisationSuggestions =
  (websiteId, channel, feedId, filters, columns, applySuggestions, sources) =>
  async (dispatch) => {
    var data = {
      websiteId,
      channel,
      feedId,
      filters,
      columns,
      applySuggestions,
      sources,
    };
    dispatch(
      updateProductAttributeOptimisationSuggestionsRequest(
        ...Object.values(data)
      )
    );
    var response = await postUpdateProductAttributeOptimisationSuggestions(
      data
    );
    dispatch(
      updateProductAttributeOptimisationSuggestionsResponse(
        ...Object.values(data),
        response
      )
    );
    return response;
  };
var updateProductAttributeReplacements =
  (websiteId, feedId, payload) => (dispatch) => {
    dispatch({
      type: UPDATE_PRODUCT_ATTRIBUTE_REPLACEMENTS,
      websiteId,
      feedId,
      payload,
    });
  };
var saveProductAttributeReplacementsRequest = (
  websiteId,
  feedId,
  channel,
  filters,
  replacements,
  generate,
  saveToAllChannels,
  saveOptimisationSuggestions
) => ({
  type: SAVE_PRODUCT_ATTRIBUTE_REPLACEMENTS_REQUEST,
  websiteId,
  feedId,
  channel,
  filters,
  replacements,
  generate,
  saveToAllChannels,
  saveOptimisationSuggestions,
});
var saveProductAttributeReplacementsResponse = (
  websiteId,
  feedId,
  channel,
  filters,
  replacements,
  generate,
  saveToAllChannels,
  saveOptimisationSuggestions,
  response
) => ({
  type: SAVE_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE,
  websiteId,
  feedId,
  channel,
  generate,
  saveToAllChannels,
  saveOptimisationSuggestions,
  filters,
  replacements,
  response,
});
var postProductReplacements = async (
  websiteId,
  feedId,
  channel,
  filters,
  replacements,
  generate,
  saveToAllChannels,
  saveOptimisationSuggestions
) => {
  var status2 = 202;
  var statusCode2 = {
    200: () => {
      status2 = 200;
    },
    202: () => {
      status2 = 202;
    },
  };
  var data = (0, import_snakecase_keys34.default)({
    channel,
    feedId,
    filters: buildFilterPayload(filters),
    replacements: JSON.stringify(
      (0, import_snakecase_keys34.default)(replacements)
    ),
    generate,
    saveToAllChannels,
    saveOptimisationSuggestions,
  });
  var response;
  while (status2 === 202) {
    response = await $.ajax({
      url: `/ad_champion/websites/${websiteId}/replacements/products`,
      data,
      statusCode: statusCode2,
      method: 'POST',
    });
    if (status2 === 202) {
      await sleep_default(500);
    }
  }
  return camelcaseKeys(response);
};
var saveProductAttributeReplacements =
  (
    websiteId,
    feedId,
    channel,
    filters,
    replacements,
    generate = false,
    saveToAllChannels = false,
    saveOptimisationSuggestions = false
  ) =>
  async (dispatch) => {
    var args = [
      websiteId,
      feedId,
      channel,
      filters,
      replacements,
      generate,
      saveToAllChannels,
      saveOptimisationSuggestions,
    ];
    dispatch(saveProductAttributeReplacementsRequest(...args));
    var response = await postProductReplacements(...args);
    dispatch(saveProductAttributeReplacementsResponse(...args, response));
    return response;
  };
var updateDisableInventoryItems = (websiteId, payload) => (dispatch) => {
  dispatch({
    type: UPDATE_DISABLED_INVENTORY_ITEMS,
    websiteId,
    payload,
  });
};
var clearUpdatedItemsAndReplacements = (websiteId) => (dispatch) => {
  dispatch({
    type: CLEAR_UPDATED_ITEMS_AND_REPLACEMENTS,
    websiteId,
  });
};
var updateRowSelectionStatus =
  (websiteId, isAllRowsSelected, selectedItems = []) =>
  (dispatch) => {
    dispatch({
      type: UPDATE_PRODUCT_ROW_SELECTION_STATUS,
      websiteId,
      isAllRowsSelected,
      selectedItems,
    });
  };
var updateAttributeFilters = (websiteId, filters) => (dispatch) => {
  dispatch({
    type: UPDATE_ATTRIBUTE_FILTERS,
    websiteId,
    filters,
  });
};
var updateSelectedSuggestionColumns =
  (websiteId, selectedColumns) => (dispatch) => {
    dispatch({
      type: UPDATE_SELECTED_SUGGESTION_COLUMNS,
      websiteId,
      selectedColumns,
    });
  };
var saveFeedSettingsRequest = (
  websiteId,
  channel,
  sourceChannel,
  copy,
  allowRichTextDescription
) => ({
  type: SAVE_FEED_SETTINGS_REQUEST,
  websiteId,
  channel,
  sourceChannel,
  copy,
  allowRichTextDescription,
});
var saveFeedSettingsResponse = (
  websiteId,
  channel,
  sourceChannel,
  copy,
  allowRichTextDescription,
  response
) => ({
  type: SAVE_FEED_SETTINGS_RESPONSE,
  websiteId,
  channel,
  sourceChannel,
  copy,
  response,
});
var saveFeedSettings =
  (websiteId, channel, sourceChannel, copy, allowRichTextDescription) =>
  async (dispatch) => {
    dispatch(
      saveFeedSettingsRequest(
        websiteId,
        channel,
        sourceChannel,
        copy,
        allowRichTextDescription
      )
    );
    var response = await $.post({
      url: `/ad_champion/websites/${websiteId}/replacements/products/settings`,
      data: (0, import_snakecase_keys34.default)({
        channel,
        sourceChannel,
        copy,
        allowRichTextDescription,
      }),
    });
    response = camelcaseKeys(response, { deep: true });
    dispatch(
      saveFeedSettingsResponse(
        websiteId,
        channel,
        sourceChannel,
        copy,
        allowRichTextDescription,
        response
      )
    );
    return response;
  };
var productAttributeReplacementsQueryChangedStatus =
  (websiteId, queryChangedStatus) => (dispatch) => {
    dispatch({
      type: PRODUCT_ATTRIBUTE_REPLACEMENTS_QUERY_CHANGED_STATUS,
      websiteId,
      queryChangedStatus,
    });
  };
var createRuleModalStatus = (websiteId, ruleModalStatus) => (dispatch) => {
  dispatch({
    type: CREATE_RULE_MODAL_STATUS,
    websiteId,
    ruleModalStatus,
  });
};

// src/actions/product_feeds/titles.jsx
var FETCH_PRODUCT_FEED_TITLES_REQUEST = 'FETCH_PRODUCT_FEED_TITLES_REQUEST';
var FETCH_PRODUCT_FEED_TITLES_RESPONSE = 'FETCH_PRODUCT_FEED_TITLES_RESPONSE';
var fetchProductTitlesRequest = (websiteId, feedId) => ({
  type: FETCH_PRODUCT_FEED_TITLES_REQUEST,
  websiteId,
  feedId,
});
var fetchProductTitlesResponse = (websiteId, feedId, data) => ({
  type: FETCH_PRODUCT_FEED_TITLES_RESPONSE,
  websiteId,
  feedId,
  ...data,
});
var fetchProductTitles = (websiteId, feedId) => async (dispatch) => {
  dispatch(fetchProductTitlesRequest(websiteId, feedId));
  var data = {};
  if (feedId > 0) {
    data.feed_id = feedId;
  }
  const response = await $.ajax({
    url: `/ad_champion/websites/${websiteId}/product_titles`,
    data,
  });
  var payload = camelcaseKeys(response, { deep: true });
  dispatch(fetchProductTitlesResponse(websiteId, feedId, payload));
  return payload;
};

// src/actions/product_url_settings.jsx
var import_snakecase_keys35 = __toESM(require_snakecase_keys());
var FETCH_PRODUCT_URL_SETTING_REQUEST = 'FETCH_PRODUCT_URL_SETTING_REQUEST';
var FETCH_PRODUCT_URL_SETTING_RESPONSE = 'FETCH_PRODUCT_URL_SETTING_RESPONSE';
var SAVE_PRODUCT_URL_SETTING_REQUEST = 'SAVE_PRODUCT_URL_SETTING_REQUEST';
var SAVE_PRODUCT_URL_SETTING_RESPONSE = 'SAVE_PRODUCT_URL_SETTING_RESPONSE';
var fetchProductUrlSettingRequest = (websiteId, feedId) => ({
  type: FETCH_PRODUCT_URL_SETTING_REQUEST,
  websiteId,
  feedId,
});
var fetchProductUrlSettingResponse = (websiteId, feedId, response) => ({
  type: FETCH_PRODUCT_URL_SETTING_RESPONSE,
  websiteId,
  feedId,
  ...response,
});
var fetchProductUrlSetting =
  (websiteId, feedId = null) =>
  async (dispatch) => {
    if (!feedId) {
      return {};
    }
    dispatch(fetchProductUrlSettingRequest(websiteId, feedId));
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/websites/${websiteId}/merchant_center_product_url_setting`,
      data: { feed_id: feedId },
      dataType: 'json',
    });
    var camelResponse = camelcaseKeys(response);
    camelResponse.productUrlSetting = camelcaseKeys(
      response.product_url_setting
    );
    dispatch(
      fetchProductUrlSettingResponse(
        websiteId,
        feedId,
        camelResponse.productUrlSetting
      )
    );
    return camelResponse.productUrlSetting;
  };
var saveProductUrlSettingRequest = (websiteId, feedId, productUrlSetting) => ({
  type: SAVE_PRODUCT_URL_SETTING_REQUEST,
  websiteId,
  feedId,
  productUrlSetting,
});
var saveProductUrlSettingResponse = (websiteId, feedId, response) => ({
  type: SAVE_PRODUCT_URL_SETTING_RESPONSE,
  websiteId,
  feedId,
  response,
});
var saveProductUrlSetting =
  (websiteId, feedId, productUrlSetting) => async (dispatch) => {
    dispatch(
      saveProductUrlSettingRequest(websiteId, feedId, productUrlSetting)
    );
    productUrlSetting.additionalTagging = JSON.stringify(
      productUrlSetting.additionalTagging
    );
    productUrlSetting.adsTagging = JSON.stringify(productUrlSetting.adsTagging);
    var response = await $.ajax({
      method: 'POST',
      url: `/ad_champion/websites/${websiteId}/merchant_center_product_url_setting`,
      data: {
        feed_id: feedId,
        product_url_setting: (0, import_snakecase_keys35.default)(
          productUrlSetting
        ),
      },
    });
    dispatch(saveProductUrlSettingResponse(websiteId, feedId, response));
    return response;
  };

// src/actions/promotions.jsx
var import_snakecase_keys36 = __toESM(require_snakecase_keys());
var LOAD_PROMOTIONS_REQUEST = 'LOAD_PROMOTIONS_REQUEST';
var LOAD_PROMOTIONS_SUCCESS = 'LOAD_PROMOTIONS_SUCCESS';
var LOAD_PROMOTIONS_ERROR = 'LOAD_PROMOTIONS_ERROR';
var SAVE_PROMOTIONS_REQUEST = 'SAVE_PROMOTIONS_REQUEST';
var SAVE_PROMOTIONS_SUCCESS = 'SAVE_PROMOTIONS_SUCCESS';
var SAVE_PROMOTIONS_ERROR = 'SAVE_PROMOTIONS_ERROR';
var LOAD_PROMOTION_DETAIL_REQUEST = 'LOAD_PROMOTION_DETAIL_REQUEST';
var LOAD_PROMOTION_DETAIL_SUCCESS = 'LOAD_PROMOTION_DETAIL_SUCCESS';
var LOAD_PROMOTION_DETAIL_ERROR = 'LOAD_PROMOTION_DETAIL_ERROR';
var LOAD_PROMOTION_FEED_URL_REQUEST = 'LOAD_PROMOTION_FEED_URL_REQUEST';
var LOAD_PROMOTION_FEED_URL_SUCCESS = 'LOAD_PROMOTION_FEED_URL_SUCCESS';
var LOAD_PROMOTION_FEED_URL_ERROR = 'LOAD_PROMOTION_FEED_URL_ERROR';
var SET_SORT_COLUMN = 'SET_SORT_COLUMN';
var SET_ITEM_SORT_COLUMN = 'SET_ITEM_SORT_COLUMN';
var loadPromotionFeedUrlRequest = () => ({
  type: LOAD_PROMOTION_FEED_URL_REQUEST,
});
var loadPromotionFeedUrlSuccess = (response) => ({
  type: LOAD_PROMOTION_FEED_URL_SUCCESS,
  promotionFeedUrl: response['promotionFeedUrl'],
});
var loadPromotionFeedUrlError = (response) => ({
  type: LOAD_PROMOTION_FEED_URL_ERROR,
  promotionFeedUrl: response['promotionFeedUrl'],
});
var fetchPromotionFeedUrl =
  (id, type = 'scenarios') =>
  (dispatch) => {
    dispatch(loadPromotionFeedUrlRequest());
    return $.ajax({
      method: 'GET',
      url: `/ad_champion/${type}/${id}/promotion_feed/url`,
      dataType: 'json',
      success: (response) => {
        return dispatch(loadPromotionFeedUrlSuccess(camelcaseKeys(response)));
      },
      error: (response) => {
        return dispatch(loadPromotionFeedUrlError(camelcaseKeys(response)));
      },
    });
  };
var loadPromotionsRequest = () => ({
  type: LOAD_PROMOTIONS_REQUEST,
});
var loadPromotionsSuccess = (response) => ({
  type: LOAD_PROMOTIONS_SUCCESS,
  list: response['inventoryPromotions'],
  activateNewPromotions: response['activateNewPromotions'],
  error: response['error'],
});
var loadPromotionsError = (response) => ({
  type: LOAD_PROMOTIONS_ERROR,
  list: response['inventoryPromotions'],
  activateNewPromotions: response['activateNewPromotions'],
  error: response['error'],
});
var fetchPromotionsSettings =
  (id, type = 'scenarios') =>
  (dispatch) => {
    dispatch(loadPromotionsRequest());
    return $.ajax({
      method: 'GET',
      url: `/ad_champion/${type}/${id}/promotion_feed/edit`,
      dataType: 'json',
      success: (response) => {
        return dispatch(
          loadPromotionsSuccess(camelcaseKeys(response, { deep: true }))
        );
      },
      error: (response) => {
        return dispatch(
          loadPromotionsError(camelcaseKeys(response, { deep: true }))
        );
      },
    });
  };
var loadPromotionDetailRequest = () => ({
  type: LOAD_PROMOTION_DETAIL_REQUEST,
});
var loadPromotionDetailSuccess = (response) => ({
  type: LOAD_PROMOTION_DETAIL_SUCCESS,
  promotionDetail: response,
});
var fetchPromotionDetails =
  (id, promotionId, type = 'scenarios') =>
  (dispatch) => {
    dispatch(loadPromotionDetailRequest());
    return $.ajax({
      method: 'GET',
      url: `/ad_champion/${type}/${id}/promotion_feed/promotion_detail/${promotionId}`,
      dataType: 'json',
      success: (response) => {
        return dispatch(loadPromotionDetailSuccess(camelcaseKeys(response)));
      },
    });
  };
var savePromotionsRequest = () => ({
  type: SAVE_PROMOTIONS_REQUEST,
});
var savePromotionsSuccess = (promotions, error) => ({
  type: SAVE_PROMOTIONS_SUCCESS,
  error,
  list: promotions,
});
var savePromotionsError = (promotions, error) => ({
  type: SAVE_PROMOTIONS_ERROR,
  error,
  list: promotions,
});
var savePromotionsSettings =
  (id, settings, type = 'scenarios') =>
  (dispatch) => {
    var payload = { promotion_feed_settings: settings };
    dispatch(savePromotionsRequest());
    return $.ajax({
      method: 'PUT',
      url: `/ad_champion/${type}/${id}/promotion_feed`,
      dataType: 'json',
      data: (0, import_snakecase_keys36.default)(payload),
      success: (response) => {
        return dispatch(
          savePromotionsSuccess(settings.promotions, response['error'])
        );
      },
      error: (response) => {
        return dispatch(savePromotionsError(camelcaseKeys(response)));
      },
    });
  };
var setSortColumn = (column) => ({
  type: SET_SORT_COLUMN,
  column: camelCase(column),
});
var setItemSortColumn = (column) => ({
  type: SET_ITEM_SORT_COLUMN,
  column: camelCase(column),
});

// src/actions/quality_score_components.jsx
var FETCH_AVERAGE_QUALITY_SCORE_COMPONENTS_REQUEST =
  'FETCH_AVERAGE_QUALITY_SCORE_COMPONENTS_REQUEST';
var FETCH_AVERAGE_QUALITY_SCORE_COMPONENTS_SUCCESS =
  'FETCH_AVERAGE_QUALITY_SCORE_COMPONENTS_SUCCESS';
var FETCH_SYSTEM_AVERAGE_QUALITY_SCORE_COMPONENTS_REQUEST =
  'FETCH_SYSTEM_AVERAGE_QUALITY_SCORE_COMPONENTS_REQUEST';
var FETCH_SYSTEM_AVERAGE_QUALITY_SCORE_COMPONENTS_SUCCESS =
  'FETCH_SYSTEM_AVERAGE_QUALITY_SCORE_COMPONENTS_SUCCESS';
var FETCH_WEBSITE_SAVINGS_VALUES_REQUEST =
  'FETCH_WEBSITE_SAVINGS_VALUES_REQUEST';
var FETCH_WEBSITE_SAVINGS_VALUES_RESPONSE =
  'FETCH_WEBSITE_SAVINGS_VALUES_RESPONSE';
var DOWNLOAD_WEBSITE_KEYWORD_REPORT_REQUEST =
  'DOWNLOAD_WEBSITE_KEYWORD_REPORT_REQUEST';
var DOWNLOAD_WEBSITE_KEYWORD_REPORT_RESPONSE =
  'DOWNLOAD_WEBSITE_KEYWORD_REPORT_RESPONSE';
var FETCH_WEBSITE_WIDE_QS_SCORES_REQUEST =
  'FETCH_WEBSITE_WIDE_QS_SCORES_REQUEST';
var FETCH_WEBSITE_WIDE_QS_SCORES_SUCCESS =
  'FETCH_WEBSITE_WIDE_QS_SCORES_SUCCESS';
var FETCH_SEARCH_DIAGNOSTICS_REPORT_URL_REQUEST =
  'FETCH_SEARCH_DIAGNOSTICS_REPORT_URL_REQUEST';
var FETCH_SEARCH_DIAGNOSTICS_REPORT_URL_RESPONSE =
  'FETCH_SEARCH_DIAGNOSTICS_REPORT_URL_RESPONSE';
var fetchAverageQualityScoreComponentsRequest = (websiteId) => ({
  type: FETCH_AVERAGE_QUALITY_SCORE_COMPONENTS_REQUEST,
  websiteId,
});
var fetchAverageQualityScoreComponentsSuccess = (
  websiteId,
  averageQualityScoreComponents
) => ({
  type: FETCH_AVERAGE_QUALITY_SCORE_COMPONENTS_SUCCESS,
  websiteId,
  ...averageQualityScoreComponents,
});
var fetchAverageQualityScoreComponents = (websiteId) => async (dispatch) => {
  dispatch(fetchAverageQualityScoreComponentsRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/quality_score_components/load_average_quality_score_components`,
    dataType: 'json',
  });
  dispatch(
    fetchAverageQualityScoreComponentsSuccess(
      websiteId,
      camelcaseKeys(response, { deep: true })
    )
  );
};
var fetchWebsiteSavingsValuesRequest = (websiteId) => ({
  type: FETCH_WEBSITE_SAVINGS_VALUES_REQUEST,
  websiteId,
});
var fetchWebsiteSavingsValuesResponse = (websiteId, response) => ({
  type: FETCH_WEBSITE_SAVINGS_VALUES_RESPONSE,
  websiteId,
  websiteSavingsValues: response.websiteSavingsValues,
});
var fetchWebsiteSavingsValues = (websiteId) => async (dispatch) => {
  dispatch(fetchWebsiteSavingsValuesRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/quality_score_components/load_website_savings_values`,
    dataType: 'json',
  });
  dispatch(
    fetchWebsiteSavingsValuesResponse(
      websiteId,
      camelcaseKeys(response, { deep: true })
    )
  );
};
var fetchSystemAverageQualityScoreComponentsRequest = (websiteId) => ({
  type: FETCH_SYSTEM_AVERAGE_QUALITY_SCORE_COMPONENTS_REQUEST,
  websiteId,
});
var fetchSystemAverageQualityScoreComponentsSuccess = (
  websiteId,
  systemAverageQualityScoreComponents
) => ({
  type: FETCH_SYSTEM_AVERAGE_QUALITY_SCORE_COMPONENTS_SUCCESS,
  websiteId,
  ...systemAverageQualityScoreComponents,
});
var fetchSystemAverageQualityScoreComponents =
  (websiteId) => async (dispatch) => {
    dispatch(fetchSystemAverageQualityScoreComponentsRequest(websiteId));
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/websites/${websiteId}/quality_score_components/load_system_average_quality_score_components`,
      dataType: 'json',
    });
    dispatch(
      fetchSystemAverageQualityScoreComponentsSuccess(
        websiteId,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchWebsiteWideQsScoresRequest = (websiteId) => ({
  type: FETCH_WEBSITE_WIDE_QS_SCORES_REQUEST,
  websiteId,
});
var fetchWebsiteWideQsScoresSuccess = (websiteId, websiteWideQsScores) => ({
  type: FETCH_WEBSITE_WIDE_QS_SCORES_SUCCESS,
  websiteId,
  websiteWideQsScores: websiteWideQsScores.websiteWideQsScores,
});
var fetchWebsiteWideQsScores = (websiteId) => async (dispatch) => {
  dispatch(fetchWebsiteWideQsScoresRequest(websiteId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}/quality_score_components/load_website_wide_qs_scores`,
    dataType: 'json',
  });
  dispatch(
    fetchWebsiteWideQsScoresSuccess(
      websiteId,
      camelcaseKeys(response, { deep: true })
    )
  );
};
var downloadWebsiteKeywordReportRequest = (websiteId) => ({
  type: DOWNLOAD_WEBSITE_KEYWORD_REPORT_REQUEST,
  websiteId,
});
var downloadWebsiteKeywordReportResponse = (websiteId, response) => ({
  type: DOWNLOAD_WEBSITE_KEYWORD_REPORT_RESPONSE,
  websiteId,
  error: response.error,
});
var downloadWebsiteKeywordReport =
  (websiteId, adwordsAccountId) => async (dispatch) => {
    dispatch(downloadWebsiteKeywordReportRequest(websiteId));
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/websites/${websiteId}/quality_score_components/download_keyword_report_and_populate_database?adwords_id=${adwordsAccountId}`,
      dataType: 'json',
    });
    dispatch(
      downloadWebsiteKeywordReportResponse(
        websiteId,
        camelcaseKeys(response, { deep: true })
      )
    );
  };
var fetchSearchDiagnosticsReportUrlRequest = (websiteId) => ({
  type: FETCH_SEARCH_DIAGNOSTICS_REPORT_URL_REQUEST,
  websiteId,
});
var fetchSearchDiagnosticsReportUrlResponse = (websiteId, response) => ({
  type: FETCH_SEARCH_DIAGNOSTICS_REPORT_URL_RESPONSE,
  websiteId,
  ...response,
});
var fetchSearchDiagnosticsReportUrl =
  (websiteId, adwordsAccountId) => async (dispatch) => {
    dispatch(fetchSearchDiagnosticsReportUrlRequest(websiteId));
    var response = await $.ajax({
      method: 'GET',
      url: `/ad_champion/websites/${websiteId}/quality_score_components/export_search_diagnostics_report?adwords_id=${adwordsAccountId}`,
      dataType: 'json',
    });
    var camelResponse = camelcaseKeys(response, { deep: true });
    dispatch(fetchSearchDiagnosticsReportUrlResponse(websiteId, camelResponse));
    return camelResponse;
  };

// src/actions/scenario/ads.jsx
var import_qs = __toESM(require_lib2());
var import_lodash3 = __toESM(require_lodash());
var REQUEST_LOAD_ADS = 'REQUEST_LOAD_ADS';
var RECEIVE_LOAD_ADS = 'RECEIVE_LOAD_ADS';
var SAMPLE_ADS_REQUEST = 'SAMPLE_ADS_REQUEST';
var SAMPLE_ADS_RESPONSE = 'SAMPLE_ADS_RESPONSE';
var requestLoadAds = (scenarioId, adIds) => ({
  type: REQUEST_LOAD_ADS,
  scenarioId,
  adIds,
});
var receiveLoadAds = (scenarioId, ads) => ({
  type: RECEIVE_LOAD_ADS,
  scenarioId,
  ads,
});
var BATCH_SIZE = 50;
var adIdsToFetch = (state, adIds) => {
  adIds = import_lodash3.default.difference(
    adIds,
    Object.keys(state.ads).map((id) => parseInt(id, 10))
  );
  adIds = import_lodash3.default.difference(adIds, state.ads.requestedIds);
  return adIds;
};
var loadAds = (scenarioId, adIds) => (dispatch, getState) => {
  const state = getState();
  adIds = adIdsToFetch(state, adIds);
  if (adIds.length > 0) {
    dispatch(requestLoadAds(scenarioId, adIds));
  }
  var promises = [];
  for (var i = 0; i < adIds.length; i += BATCH_SIZE) {
    promises.push(
      $.ajax({
        method: 'GET',
        url: `/ad_champion/scenarios/${scenarioId}/ads?${import_qs.default.stringify(
          { ids: adIds.slice(i, i + BATCH_SIZE) }
        )}`,
        dataType: 'json',
        success: (response) => {
          return dispatch(
            receiveLoadAds(scenarioId, camelcaseKeys(response, { deep: true }))
          );
        },
      })
    );
  }
  return Promise.all(promises);
};
var requestSampleAds = (scenarioId) => ({
  type: SAMPLE_ADS_REQUEST,
  scenarioId,
  ads: {},
});
var receiveSampleAds = (scenarioId, ads) => ({
  type: SAMPLE_ADS_RESPONSE,
  scenarioId,
  ads,
});
var loadSampleAds = (scenarioId) => (dispatch) => {
  dispatch(requestSampleAds(scenarioId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/ads/sample_ads`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        receiveSampleAds(scenarioId, camelcaseKeys(response, { deep: true }))
      );
    },
  });
};

// src/actions/scenario/inventory/products.jsx
var import_qs2 = __toESM(require_lib2());
var import_lodash4 = __toESM(require_lodash());
var REQUEST_LOAD_PRODUCT_IDS = 'LOAD_PRODUCT_IDS_REQUEST';
var RECEIVE_LOAD_PRODUCT_IDS = 'LOAD_PRODUCT_IDS_RESPONSE';
var REQUEST_LOAD_PRODUCTS = 'LOAD_PRODUCTS_REQUEST';
var RECEIVE_LOAD_PRODUCTS = 'LOAD_PRODUCTS_RESPONSE';
var SAMPLE_PRODUCTS_REQUEST = 'SAMPLE_PRODUCTS_REQUEST';
var SAMPLE_PRODUCTS_RESPONSE = 'SAMPLE_PRODUCTS_RESPONSE';
var requestLoadProductIds = (scenarioId, offset, count) => ({
  type: REQUEST_LOAD_PRODUCT_IDS,
  scenarioId,
  offset,
  count,
});
var receiveLoadProductIds = (scenarioId, available, productIds) => ({
  type: RECEIVE_LOAD_PRODUCT_IDS,
  scenarioId,
  available,
  productIds,
});
var requestLoadProducts = (scenarioId, productIds) => ({
  type: REQUEST_LOAD_PRODUCTS,
  scenarioId,
  productIds,
});
var receiveLoadProducts = (scenarioId, products) => ({
  type: RECEIVE_LOAD_PRODUCTS,
  scenarioId,
  products,
});
var BATCH_SIZE2 = 50;
var productIdsToFetch = (state, productIds) => {
  productIds = import_lodash4.default.difference(
    productIds,
    Object.keys(state.products).map((id) => parseInt(id, 10))
  );
  productIds = import_lodash4.default.difference(
    productIds,
    state.products.requestedIds
  );
  return productIds;
};
var loadProductsIds = (scenarioId, offset, count) => (dispatch, getState) => {
  dispatch(requestLoadProductIds(scenarioId, offset, count));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/inventory/items?offset=${offset}&count=${count}`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        receiveLoadProductIds(scenarioId, response.available, response.ids, {
          deep: true,
        })
      );
    },
  });
};
var loadProducts = (scenarioId, productIds) => (dispatch, getState) => {
  const state = getState();
  productIds = productIdsToFetch(state, productIds);
  if (productIds.length === 0) {
    return Promise.resolve();
  }
  var promises = [];
  for (var i = 0; i < productIds.length; i += BATCH_SIZE2) {
    var idsToLoad = productIds.slice(i, i + BATCH_SIZE2);
    dispatch(requestLoadProducts(scenarioId, idsToLoad));
    promises.push(
      $.ajax({
        method: 'GET',
        url: `/ad_champion/scenarios/${scenarioId}/inventory/items?${import_qs2.default.stringify(
          { ids: idsToLoad }
        )}`,
        dataType: 'json',
        success: (response) => {
          return dispatch(
            receiveLoadProducts(
              scenarioId,
              camelcaseKeys(response, { deep: true })
            )
          );
        },
      })
    );
  }
  return Promise.all(promises);
};
var requestSampleProducts = (scenarioId) => ({
  type: SAMPLE_PRODUCTS_REQUEST,
  scenarioId,
  products: {},
});
var receiveSampleProducts = (scenarioId, products) => ({
  type: SAMPLE_PRODUCTS_RESPONSE,
  scenarioId,
  products,
});
var loadSampleProducts = (scenarioId) => (dispatch) => {
  dispatch(requestSampleProducts(scenarioId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/inventory/items/sample_items`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        receiveSampleProducts(
          scenarioId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};

// src/actions/scenario/keywords.jsx
var import_qs3 = __toESM(require_lib2());
var import_lodash5 = __toESM(require_lodash());
var REQUEST_LOAD_KEYWORDS = 'REQUEST_LOAD_KEYWORDS';
var RECEIVE_LOAD_KEYWORDS = 'RECEIVE_LOAD_KEYWORDS';
var REQUEST_EXPORT_KEYWORDS = 'REQUEST_EXPORT_KEYWORDS';
var RECEIVE_EXPORT_KEYWORDS = 'RECEIVE_EXPORT_KEYWORDS';
var requestLoadKeywords = (scenarioId, keywordIds) => ({
  type: REQUEST_LOAD_KEYWORDS,
  scenarioId,
  keywordIds,
});
var receiveLoadKeywords = (scenarioId, keywords) => ({
  type: RECEIVE_LOAD_KEYWORDS,
  scenarioId,
  keywords,
});
var BATCH_SIZE3 = 50;
var keywordIdsToFetch = (state, keywordIds) => {
  keywordIds = import_lodash5.default.difference(
    keywordIds,
    Object.keys(state.keywords).map((id) => parseInt(id, 10))
  );
  keywordIds = import_lodash5.default.difference(
    keywordIds,
    state.keywords.requestedIds
  );
  return keywordIds;
};
var loadKeywords = (scenarioId, keywordIds) => (dispatch, getState) => {
  const state = getState();
  keywordIds = keywordIdsToFetch(state, keywordIds);
  dispatch(requestLoadKeywords(scenarioId, keywordIds));
  var promises = [];
  for (var i = 0; i < keywordIds.length; i += BATCH_SIZE3) {
    var url2 = `/ad_champion/scenarios/${scenarioId}/keywords?${import_qs3.default.stringify(
      { ids: keywordIds.slice(i, i + BATCH_SIZE3) }
    )}`;
    promises.push(
      $.ajax({
        method: 'GET',
        url: url2,
        dataType: 'json',
        success: (response) => {
          return dispatch(
            receiveLoadKeywords(
              scenarioId,
              camelcaseKeys(response, { deep: true })
            )
          );
        },
      })
    );
  }
  return Promise.all(promises);
};
var requestExportKeywords = (scenarioId) => ({
  type: REQUEST_EXPORT_KEYWORDS,
  scenarioId,
});
var receiveExportKeywords = (scenarioId, response) => ({
  type: RECEIVE_EXPORT_KEYWORDS,
  scenarioId,
  response,
});
var exportKeywords = (scenarioId) => (dispatch) => {
  dispatch(requestExportKeywords(scenarioId));
  $.ajax({
    method: 'POST',
    url: `/ad_champion/scenarios/${scenarioId}/keywords/export`,
    success: (response) =>
      dispatch(
        receiveExportKeywords(
          scenarioId,
          camelcaseKeys(response, { deep: true })
        )
      ),
  });
};

// src/actions/scenario.jsx
var import_snakecase_keys37 = __toESM(require_snakecase_keys());
var SELECT_SCENARIO = 'SELECT_SCENARIO';
var UPDATE_BID_SETTING_REQUEST = 'UPDATE_BID_SETTING_REQUEST';
var UPDATE_BID_SETTING_SUCCESS = 'UPDATE_BID_SETTING_SUCCESS';
var UPDATE_BID_SETTING_ERROR = 'UPDATE_BID_SETTING_ERROR';
var FETCH_SCENARIO_STATUS_REQUEST = 'FETCH_SCENARIO_STATUS_REQUEST';
var FETCH_SCENARIO_STATUS_SUCCESS = 'FETCH_SCENARIO_STATUS_SUCCESS';
var FETCH_SCENARIO_STATUS_ERROR = 'FETCH_SCENARIO_STATUS_ERROR';
var selectScenario = (id) => ({
  type: SELECT_SCENARIO,
  id,
});
var fetchScenarioStatus = (scenarioId) => (dispatch) => {
  dispatch(requestScenarioStatus());
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/status`,
    dataType: 'json',
    success: (response) => {
      dispatch(
        receiveScenarioStatusSuccess(camelcaseKeys(response, { deep: true }))
      );
    },
    error: (response) => {
      dispatch(receiveScenarioStatusError());
    },
  });
};
var updateScenarioSettings = (scenarioId, settings) => (dispatch) => {
  var payload = { buildSettings: settings };
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/scenarios/${scenarioId}/update_settings`,
    dataType: 'json',
    data: (0, import_snakecase_keys37.default)(payload, { deep: true }),
    success: (response) => {
      dispatch(
        receiveScenarioStatusSuccess(camelcaseKeys(response, { deep: true }))
      );
    },
    error: (response) => {
      dispatch(receiveScenarioStatusError());
    },
  });
};
var updateBidSettings = (scenarioId, setting) => (dispatch) => {
  dispatch(updateBidSettingRequest());
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/scenarios/${scenarioId}/settings`,
    dataType: 'json',
    data: (0, import_snakecase_keys37.default)(setting),
    success: (response) => {
      dispatch(updateBidSettingSuccess());
      dispatch(
        receiveScenarioStatusSuccess(camelcaseKeys(response, { deep: true }))
      );
    },
    error: (response) => {
      dispatch(updateBidSettingError());
    },
  });
};
var publishScenario = (websiteId, data) => (dispatch) => {
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/shopping/websites/${websiteId}/publication`,
    dataType: 'json',
    data: (0, import_snakecase_keys37.default)(data),
    error: (response) => {
      dispatch(responseError(camelcaseKeys(response, { deep: true })));
    },
  });
};
var generateScenario = (scenarioId) => (dispatch) => {
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/scenarios/${scenarioId}/trigger_generation`,
    dataType: 'json',
  });
};
var buildScenario = (scenarioId) => (dispatch) => {
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/scenarios/${scenarioId}/trigger_build`,
    dataType: 'json',
  });
};
var generateScenariobyBuildId = (buildId) => (dispatch) => {
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/builds/${buildId}/trigger_generation`,
    dataType: 'json',
  });
};
var updateBidSettingRequest = () => ({
  type: UPDATE_BID_SETTING_REQUEST,
});
var updateBidSettingSuccess = () => ({
  type: UPDATE_BID_SETTING_SUCCESS,
});
var updateBidSettingError = () => ({
  type: UPDATE_BID_SETTING_ERROR,
});
var requestScenarioStatus = () => ({
  type: FETCH_SCENARIO_STATUS_REQUEST,
});
var receiveScenarioStatusSuccess = (status2) => ({
  type: FETCH_SCENARIO_STATUS_SUCCESS,
  status: status2,
});
var receiveScenarioStatusError = () => ({
  type: FETCH_SCENARIO_STATUS_ERROR,
});

// src/actions/search_term_requests.jsx
var FETCH_SEARCH_TERM_REQUESTS_REQUEST = 'FETCH_SEARCH_TERM_REQS_REQUEST';
var FETCH_SEARCH_TERM_REQUESTS_SUCCESS = 'FETCH_SEARCH_TERM_REQS_SUCCESS';
var FETCH_SEARCH_TERM_REQUESTS_ERROR = 'FETCH_SEARCH_TERM_REQS_ERROR';
var APPLY_SEARCH_TERM_REQUESTS_ACTION_REQUEST =
  'APPLY_SEARCH_TERM_REQS_ACTION_REQUEST';
var APPLY_SEARCH_TERM_REQUESTS_ACTION_SUCCESS =
  'APPLY_SEARCH_TERM_REQS_ACTION_SUCCESS';
var APPLY_SEARCH_TERM_REQUESTS_ACTION_ERROR =
  'APPLY_SEARCH_TERM_REQS_ACTION_ERROR';
var fetchSearchTermRequestsRequest = (
  actionFilter,
  page,
  perPage,
  searchText,
  orderBy,
  ascending,
  showAnalysed
) => ({
  type: FETCH_SEARCH_TERM_REQUESTS_REQUEST,
  actionFilter,
  page,
  perPage,
  searchText,
  orderBy,
  ascending,
  showAnalysed,
});
var fetchSearchTermRequestsSuccess = (
  actionFilter,
  page,
  perPage,
  searchText,
  orderBy,
  ascending,
  showAnalysed,
  searchTermRequests
) => ({
  type: FETCH_SEARCH_TERM_REQUESTS_SUCCESS,
  actionFilter,
  page,
  perPage,
  searchText,
  orderBy,
  ascending,
  showAnalysed,
  ...searchTermRequests,
});
var fetchSearchTermRequestsError = (actionFilter, page, perPage, error) => ({
  type: FETCH_SEARCH_TERM_REQUESTS_ERROR,
  actionFilter,
  page,
  perPage,
  error,
});
var fetchSearchTermRequests =
  (
    actionFilter,
    page,
    perPage,
    searchText,
    orderBy,
    ascending,
    showAnalysed = false
  ) =>
  async (dispatch) => {
    dispatch(
      fetchSearchTermRequestsRequest(
        actionFilter,
        page,
        perPage,
        searchText,
        orderBy,
        ascending,
        showAnalysed
      )
    );
    try {
      var response = await $.ajax({
        method: 'GET',
        url: `/ad_champion/search_term_requests?action_filter=${actionFilter}&page=${page}&per_page=${perPage}&filter=${searchText}&order_by=${snakeCase(
          orderBy
        )}&ascending=${ascending}&show_analysed=${showAnalysed}`,
        dataType: 'json',
      });
      dispatch(
        fetchSearchTermRequestsSuccess(
          actionFilter,
          page,
          perPage,
          searchText,
          orderBy,
          ascending,
          showAnalysed,
          camelcaseKeys(response, { deep: true })
        )
      );
    } catch (error) {
      dispatch(
        fetchSearchTermRequestsError(
          actionFilter,
          page,
          perPage,
          camelcaseKeys(error)
        )
      );
    }
  };
var applySearchTermRequestsActionRequest = (action, searchTerms) => ({
  type: APPLY_SEARCH_TERM_REQUESTS_ACTION_REQUEST,
  action,
  ...searchTerms,
});
var applySearchTermRequestsActionSuccess = () => ({
  type: APPLY_SEARCH_TERM_REQUESTS_ACTION_SUCCESS,
});
var applySearchTermRequestsActionError = (error) => ({
  type: APPLY_SEARCH_TERM_REQUESTS_ACTION_ERROR,
  error,
});
var applySearchTermRequestsAction =
  (action, searchTerms) => async (dispatch) => {
    dispatch(applySearchTermRequestsActionRequest(action, searchTerms));
    try {
      var response = await $.ajax({
        method: 'PUT',
        url: `/ad_champion/search_term_requests`,
        data: {
          action_filter: action,
          search_terms: JSON.stringify(searchTerms),
        },
        dataType: 'json',
      });
      dispatch(applySearchTermRequestsActionSuccess());
    } catch (error) {
      dispatch(applySearchTermRequestsActionError(camelcaseKeys(error)));
    }
  };

// src/actions/settings.jsx
var UPDATE_SETTINGS = 'UPDATE_SETTINGS';
var createOrUpdateSettings = (settings) => ({
  type: UPDATE_SETTINGS,
  settings,
});

// src/actions/shopping_advertising.jsx
var import_snakecase_keys38 = __toESM(require_snakecase_keys());
var CREATE_WEBSITE_SHOPPING_BUDGET_REQUEST =
  'CREATE_WEBSITE_SHOPPING_BUDGET_REQUEST';
var CREATE_WEBSITE_SHOPPING_BUDGET_RESPONSE =
  'CREATE_WEBSITE_SHOPPING_BUDGET_RESPONSE';
var createWebsiteShoppingBudgetRequest = (websiteId, shoppingBudget) => ({
  type: CREATE_WEBSITE_SHOPPING_BUDGET_REQUEST,
  websiteId,
  shoppingBudget,
});
var createWebsiteShoppingBudgetResponse = (
  websiteId,
  shoppingBudget,
  response
) => ({
  type: CREATE_WEBSITE_SHOPPING_BUDGET_RESPONSE,
  websiteId,
  shoppingBudget,
  response,
});
var createWebsiteShoppingBudget =
  (websiteId, budgetValue) => async (dispatch) => {
    dispatch(createWebsiteShoppingBudgetRequest(websiteId, budgetValue));
    var response = await $.ajax({
      method: 'POST',
      url: `/ad_champion/websites/${websiteId}/advertising/create_shopping_budget`,
      data: (0, import_snakecase_keys38.default)(
        { budgetValue },
        { deep: true }
      ),
      dataType: 'json',
    });
    dispatch(
      createWebsiteShoppingBudgetResponse(websiteId, budgetValue, response)
    );
    return response;
  };

// src/actions/shopping_link.jsx
var import_snakecase_keys39 = __toESM(require_snakecase_keys());
var SAVE_MERCHANT_CENTER_SETTING_SUCCESS =
  'SAVE_MERCHANT_CENTER_SETTING_SUCCESS';
var LOAD_MERCHANT_CENTER_SETTING_SUCCESS =
  'LOAD_MERCHANT_CENTER_SETTING_SUCCESS';
var updateMerchantCenterSettings = (merchantCenterSetting) => ({
  type: LOAD_MERCHANT_CENTER_SETTING_SUCCESS,
  merchantCenterSetting,
});
var saveMerchantCenterSettingsSuccess = (merchantCenterSetting) => ({
  type: SAVE_MERCHANT_CENTER_SETTING_SUCCESS,
  merchantCenterSetting,
});
var loadMerchantCenterSetting = (scenarioId) => (dispatch) => {
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/merchant_center_setting/edit`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        updateMerchantCenterSettings(
          camelcaseKeys(response.merchant_center_setting)
        )
      );
    },
  });
};
var saveMerchantCenterSetting =
  (scenarioId, merchantCenterSetting) => (dispatch) => {
    return $.ajax({
      method: 'PUT',
      url: `/ad_champion/scenarios/${scenarioId}/merchant_center_setting`,
      data: (0, import_snakecase_keys39.default)({ merchantCenterSetting }),
      dataType: 'json',
      success: (response) => {
        return dispatch(
          saveMerchantCenterSettingsSuccess(merchantCenterSetting)
        );
      },
    });
  };

// src/actions/shopping_mappings_sheet.jsx
var CREATE_SHOPPING_MAPPING_SHEET_REQUEST =
  'CREATE_SHOPPING_MAPPING_SHEET_REQUEST';
var CREATE_SHOPPING_MAPPING_SHEET_SUCCESS =
  'CREATE_SHOPPING_MAPPING_SHEET_SUCCESS';
var APPLY_SHOPPING_MAPPING_SHEET_REQUEST =
  'APPLY_SHOPPING_MAPPING_SHEET_REQUEST';
var APPLY_SHOPPING_MAPPING_SHEET_SUCCESS =
  'APPLY_SHOPPING_MAPPING_SHEET_SUCCESS';
var APPLY_SHOPPING_MAPPING_SHEET_ERROR = 'APPLY_SHOPPING_MAPPING_SHEET_ERROR';
var createMappingSheetRequest = () => ({
  type: CREATE_SHOPPING_MAPPING_SHEET_REQUEST,
});
var createMappingSheetSuccess = (sheetId, feedUrl) => ({
  type: CREATE_SHOPPING_MAPPING_SHEET_SUCCESS,
  sheetId,
  feedUrl,
});
var createShoppingMappingsSheet = (scenarioId) => (dispatch) => {
  dispatch(createMappingSheetRequest());
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/feed_mappings_sheet/edit`,
    dataType: 'json',
    success: (response) => {
      dispatch(
        createMappingSheetSuccess(response.spreadsheet_id, response.feed_url)
      );
    },
  });
};
var createShoppingMappingsSheetByInventoryId = (inventoryId) => (dispatch) => {
  dispatch(createMappingSheetRequest());
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/inventories/${inventoryId}/feed_mappings_sheets/edit`,
    dataType: 'json',
    success: (response) => {
      dispatch(
        createMappingSheetSuccess(response.spreadsheet_id, response.feed_url)
      );
    },
  });
};
var applyMappingsSheetRequest = (sheetId) => ({
  type: APPLY_SHOPPING_MAPPING_SHEET_REQUEST,
  sheetId,
});
var applyMappingsSheetSuccess = (sheetId) => ({
  type: APPLY_SHOPPING_MAPPING_SHEET_SUCCESS,
  sheetId,
});
var applyMappingsSheetFailure = () => ({
  type: APPLY_SHOPPING_MAPPING_SHEET_ERROR,
});
var applyShoppingMappingsSheet = (scenarioId, sheetId) => (dispatch) => {
  dispatch(applyMappingsSheetRequest(sheetId));
  var payload = { spreadsheet_id: sheetId };
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/scenarios/${scenarioId}/feed_mappings_sheet`,
    dataType: 'json',
    data: payload,
    success: (response) => {
      dispatch(applyMappingsSheetSuccess(sheetId));
    },
  });
};
var checkStatus = async (operationId) => {
  var complete = false;
  var failed = false;
  var response;
  while (!complete) {
    await sleep_default(1e3);
    response = await $.ajax({
      url: `/ad_champion/async_operations/${operationId}`,
    });
    switch (response.state) {
      case 'Complete':
        complete = true;
        break;
      case 'Failed':
        failed = true;
        complete = true;
        break;
      default:
    }
  }
  return { failed, message: response.message };
};
var applyShoppingMappingsSheetByInventoryId =
  (inventoryId, sheetId) => async (dispatch) => {
    dispatch(applyMappingsSheetRequest(sheetId));
    var payload = { spreadsheet_id: sheetId };
    var response = await $.ajax({
      method: 'PUT',
      url: `/ad_champion/inventories/${inventoryId}/feed_mappings_sheets`,
      dataType: 'json',
      data: payload,
    });
    var operationId = response.operation_id;
    var status2 = await checkStatus(operationId);
    if (status2.failed) {
      dispatch(applyMappingsSheetFailure());
      throw Error(`${status2.message}`);
    }
    dispatch(applyMappingsSheetSuccess(sheetId));
  };

// src/actions/structured_snippet.jsx
var import_snakecase_keys40 = __toESM(require_snakecase_keys());
var LOAD_STRUCTURED_SNIPPETS = 'LOAD_STRUCTURED_SNIPPETS';
var SAVE_STRUCTURED_SNIPPETS = 'SAVE_STRUCTURED_SNIPPETS';
var loadAction = (snippets) => ({
  type: LOAD_STRUCTURED_SNIPPETS,
  snippets,
});
var saveAction = (snippets) => ({
  type: SAVE_STRUCTURED_SNIPPETS,
  snippets,
});
var loadStructuredSnippets = (scenarioId) => (dispatch) => {
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/scenarios/${scenarioId}/structured_snippet/edit`,
    dataType: 'json',
    success: (response) => {
      return dispatch(loadAction(camelcaseKeys(response.snippets)));
    },
  });
};
var saveStructuredSnippets = (scenarioId, data) => (dispatch) => {
  var payload = { snippets: data };
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/scenarios/${scenarioId}/structured_snippet`,
    dataType: 'json',
    data: (0, import_snakecase_keys40.default)(payload),
    success: (response) => {
      return dispatch(saveAction(camelcaseKeys(response.snippets)));
    },
  });
};

// src/actions/users/accounts.jsx
var FETCH_USER_ACCOUNTS_REQUEST = 'FETCH_USER_ACCOUNTS_REQUEST';
var FETCH_USER_ACCOUNTS_RESPONSE = 'FETCH_USER_ACCOUNTS_RESPONSE';
var UPDATE_ACCOUNT_OVERVIEW_FILTERS = 'UPDATE_ACCOUNT_OVERVIEW_FILTERS';
var fetchUserAccountsRequest = (userId) => ({
  type: FETCH_USER_ACCOUNTS_REQUEST,
  userId,
});
var fetchUserAccountsResponse = (userId, response) => ({
  type: FETCH_USER_ACCOUNTS_RESPONSE,
  userId,
  ...response,
});
var fetchUserAccounts = (userId) => async (dispatch) => {
  dispatch(fetchUserAccountsRequest(userId));
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/users/${userId}/accounts`,
    dataType: 'json',
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(fetchUserAccountsResponse(userId, response));
  return response;
};
var updateAccountOverviewFilters = (filters) => (dispatch) => {
  dispatch({
    type: UPDATE_ACCOUNT_OVERVIEW_FILTERS,
    filters,
  });
};

// src/actions/users.jsx
var import_snakecase_keys42 = __toESM(require_snakecase_keys());

// src/selectors/settings.jsx
var import_reselect10 = __toESM(require_lib());
var settingsSelector = (state) => state.settings;
var keySelector = (_state, key) => key;
var settingsValueSelector = (0, import_reselect10.createSelector)(
  [settingsSelector, keySelector],
  (s, key) => s[key]
);

// src/actions/websites.jsx
var import_snakecase_keys41 = __toESM(require_snakecase_keys());
var import_qs4 = __toESM(require_lib2());
var FETCH_WEBSITES_REQUEST = 'FETCH_WEBSITES_REQUEST';
var FETCH_WEBSITES_RESPONSE = 'FETCH_WEBSITES_RESPONSE';
var FETCH_FULL_WEBSITE_LIST_RESPONSE = 'FETCH_FULL_WEBSITE_LIST_RESPONSE';
var FETCH_FULL_WEBSITE_LIST_REQUEST = 'FETCH_FULL_WEBSITE_LIST_REQUEST';
var FETCH_WEBSITE_DETAIL_REQUEST = 'FETCH_WEBSITE_DETAIL_REQUEST';
var FETCH_WEBSITE_DETAIL_RESPONSE = 'FETCH_WEBSITE_DETAIL_RESPONSE';
var CREATE_WEBSITE_REQUEST = 'CREATE_WEBSITE_REQUEST';
var CREATE_WEBSITE_RESPONSE = 'CREATE_WEBSITE_RESPONSE';
var UPDATE_WEBSITE_REQUEST = 'UPDATE_WEBSITE_REQUEST';
var UPDATE_WEBSITE_RESPONSE = 'UPDATE_WEBSITE_RESPONSE';
var DELETE_WEBSITE_REQUEST = 'DELETE_WEBSITE_REQUEST';
var DELETE_WEBSITE_RESPONSE = 'DELETE_WEBSITE_RESPONSE';
var fetchWebsitesRequest = (masterAccountId, searchText, sortColumn) => ({
  type: FETCH_WEBSITES_REQUEST,
  masterAccountId,
  searchText,
  sortColumn,
});
var fetchWebsitesResponse = (
  masterAccountId,
  searchText,
  sortColumn,
  reset,
  websites
) => ({
  type: FETCH_WEBSITES_RESPONSE,
  masterAccountId,
  searchText,
  sortColumn,
  reset,
  websites,
});
var calculateNextPage = (getState, reset) => {
  var nextPage = 1;
  const state = getState();
  if (!reset) {
    nextPage = Math.floor(state.websites.list.length / 20) + 1;
  }
  return nextPage;
};
var buildQueryParam = (searchText, sortColumn) => {
  return import_qs4.default.stringify({
    q: {
      s: sortColumn,
      url_or_name_cont: searchText,
    },
  });
};
var buildUrl = (
  masterAccountId,
  searchText,
  sortColumn,
  reset,
  getState,
  notPaginate
) => {
  var nextPage = calculateNextPage(getState, reset);
  var queryParam = buildQueryParam(searchText, sortColumn);
  var paginate = notPaginate ? false : true;
  var masterAccountFilter = masterAccountId
    ? `&master_account_id=${masterAccountId}`
    : '';
  return `/ad_champion/websites?${queryParam}${masterAccountFilter}&page=${nextPage}&paginate=${paginate}`;
};
var fetchWebsites = (params) => (dispatch, getState) => {
  const { masterAccountId, searchText, sortColumn, notPaginate } = params;
  var reset = params.reset === void 0 ? true : params.reset;
  dispatch(fetchWebsitesRequest(masterAccountId, searchText, sortColumn));
  var url2 = buildUrl(
    masterAccountId,
    searchText,
    sortColumn,
    reset,
    getState,
    notPaginate
  );
  return $.ajax({
    method: 'GET',
    url: url2,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        fetchWebsitesResponse(
          masterAccountId,
          searchText,
          sortColumn,
          reset,
          camelcaseKeys(response)
        )
      );
    },
  });
};
var fetchfullWebsiteListRequest = () => ({
  type: FETCH_FULL_WEBSITE_LIST_REQUEST,
});
var fetchFullWebsiteListResponse = (websites) => ({
  type: FETCH_FULL_WEBSITE_LIST_RESPONSE,
  websites,
});
var fetchFullWebsiteList = () => (dispatch) => {
  dispatch(fetchfullWebsiteListRequest());
  return $.ajax({
    method: 'GET',
    url: '/ad_champion/websites?paginate=false',
    dataType: 'json',
    success: (response) => {
      dispatch(
        fetchFullWebsiteListResponse(camelcaseKeys(response, { deep: true }))
      );
    },
  });
};
var fetchWebsiteDetailRequest = (websiteId) => ({
  type: FETCH_WEBSITE_DETAIL_REQUEST,
  websiteId,
});
var fetchWebsiteDetailResponse = (websiteId, websiteDetail) => ({
  type: FETCH_WEBSITE_DETAIL_RESPONSE,
  websiteId,
  websiteDetail,
});
var fetchWebsiteDetail = (websiteId) => (dispatch) => {
  if (!websiteId) {
    return Promise.resolve();
  }
  dispatch(fetchWebsiteDetailRequest(websiteId));
  return $.ajax({
    method: 'GET',
    url: `/ad_champion/websites/${websiteId}`,
    dataType: 'json',
    success: (response) => {
      return dispatch(
        fetchWebsiteDetailResponse(
          websiteId,
          camelcaseKeys(response, { deep: true })
        )
      );
    },
  });
};
var createWebsiteRequest = (website) => ({
  type: CREATE_WEBSITE_REQUEST,
  website,
});
var createWebsiteResponse = (website, response) => ({
  type: CREATE_WEBSITE_RESPONSE,
  website,
  response,
});
var createWebsite = (payload) => async (dispatch) => {
  dispatch(createWebsiteRequest(payload));
  var response = await $.ajax({
    method: 'POST',
    url: `/ad_champion/websites`,
    dataType: 'json',
    data: (0, import_snakecase_keys41.default)(payload),
  });
  const camelCaseResponse = camelcaseKeys(response);
  dispatch(createWebsiteResponse(payload, camelCaseResponse));
  return camelCaseResponse;
};
var updateWebsiteRequest = (websiteId, payload) => ({
  type: UPDATE_WEBSITE_REQUEST,
  websiteId,
  payload,
});
var updateWebsiteResponse = (websiteId, payload, response) => ({
  type: UPDATE_WEBSITE_RESPONSE,
  websiteId,
  payload,
  response,
});
var updateWebsite = (websiteId, payload) => (dispatch) => {
  dispatch(updateWebsiteRequest(websiteId, payload));
  return $.ajax({
    method: 'PUT',
    url: `/ad_champion/websites/${websiteId}`,
    data: (0, import_snakecase_keys41.default)(payload),
    success: (response) => {
      return dispatch(
        updateWebsiteResponse(websiteId, payload, camelcaseKeys(response))
      );
    },
  });
};
var deleteWebsiteRequest = (websiteId, fullDelete) => ({
  type: DELETE_WEBSITE_REQUEST,
  websiteId,
  fullDelete,
});
var deleteWebsiteResponse = (websiteId, fullDelete, response) => ({
  type: DELETE_WEBSITE_RESPONSE,
  websiteId,
  fullDelete,
  response,
});
var deleteWebsite =
  (websiteId, fullDelete = false) =>
  (dispatch) => {
    dispatch(deleteWebsiteRequest(websiteId, fullDelete));
    return $.ajax({
      url: `/ad_champion/websites/${websiteId}?full_delete=${fullDelete}`,
      method: 'DELETE',
      success: (response) => {
        dispatch(
          deleteWebsiteResponse(websiteId, fullDelete, camelcaseKeys(response))
        );
      },
    });
  };

// src/actions/users.jsx
var INVITATION_REQUEST = 'INVITATION_REQUEST';
var INVITATION_RESPONSE = 'INVITATION_RESPONSE';
var INVITATION_ERROR = 'INVITATION_ERROR';
var USER_MASTER_ACCOUNT_LIST_REQUEST = 'USER_MASTER_ACCOUNT_LIST_REQUEST';
var USER_MASTER_ACCOUNT_LIST_RESPONSE = 'USER_MASTER_ACCOUNT_LIST_RESPONSE';
var SELECT_MASTER_ACCOUNT = 'SELECT_MASTER_ACCOUNT';
var UPDATE_USER_REQUEST = 'UPDATE_USER_REQUEST';
var UPDATE_USER_RESPONSE = 'UPDATE_USER_RESPONSE';
var LOGIN_USER_REQUEST = 'LOGIN_USER_REQUEST';
var LOGIN_USER_RESPONSE = 'LOGIN_USER_RESPONSE';
var LOGOUT_USER_REQUEST = 'LOGOUT_USER_REQUEST';
var LOGOUT_USER_RESPONSE = 'LOGOUT_USER_RESPONSE';
var ADD_MEMBERSHIP_REQUEST = 'ADD_MEMBERSHIP_REQUEST';
var ADD_MEMBERSHIP_RESPONSE = 'ADD_MEMBERSHIP_RESPONSE';
var REMOVE_MEMBERSHIP_REQUEST = 'REMOVE_MEMBERSHIP_REQUEST';
var REMOVE_MEMBERSHIP_RESPONSE = 'REMOVE_MEMBERSHIP_RESPONSE';
var REMOVE_INVITAION_REQUEST = 'REMOVE_INVITAION_REQUEST';
var REMOVE_INVITAION_RESPONSE = 'REMOVE_INVITAION_RESPONSE';
var invitationRequest = () => ({
  type: INVITATION_REQUEST,
});
var invitationResponse = (response) => ({
  type: INVITATION_RESPONSE,
});
var invitationError = (error) => ({
  type: INVITATION_ERROR,
  error: error.responseJson['error'],
});
var requestUserMasterAccounts = () => ({
  type: USER_MASTER_ACCOUNT_LIST_REQUEST,
});
var receiveUserMasterAccounts = (response) => ({
  type: USER_MASTER_ACCOUNT_LIST_RESPONSE,
  currentUser: response['user'],
});
var sendInvitation = (email, ownerType, ownerId, send) => (dispatch) => {
  dispatch(invitationRequest());
  var payload = {
    user: {
      email,
      memberships_attributes: JSON.stringify([
        { owner_id: ownerId, owner_type: ownerType },
      ]),
      send_invite: send,
    },
  };
  return $.ajax({
    method: 'POST',
    url: `/ad_champion/users`,
    dataType: 'json',
    data: payload,
    success: (response) => {
      return dispatch(
        invitationResponse(camelcaseKeys(response, { deep: true }))
      );
    },
    error: (response) => {
      return dispatch(invitationError(camelcaseKeys(response, { deep: true })));
    },
  });
};
var fetchUserMasterAccounts = () => async (dispatch) => {
  dispatch(requestUserMasterAccounts());
  var response = await $.ajax({
    method: 'GET',
    url: `/ad_champion/users`,
    dataType: 'json',
  });
  const payload = camelcaseKeys(response, { deep: true });
  var { id, email, profile } = payload.user;
  if (profile.workEmail) {
    email = profile.workEmail;
  }
  trackEvent(USER_IDENTIFIED, { id, email });
  dispatch(receiveUserMasterAccounts(payload));
  return payload;
};
var selectMasterAccount = (masterAccountId) => ({
  type: SELECT_MASTER_ACCOUNT,
  masterAccountId,
});
var updateUserRequest = (user) => ({
  type: UPDATE_USER_REQUEST,
  user,
});
var updateUserResponse = (user) => ({
  type: UPDATE_USER_RESPONSE,
  user,
  newUserFirstTimeSignIn: false,
});
var updateUser = (user) => async (dispatch, getState) => {
  dispatch(updateUserRequest(user));
  const state = getState();
  var response = await $.ajax({
    method: 'PUT',
    url: `/ad_champion/users/${user.id}`,
    dataType: 'json',
    data: {
      user: (0, import_snakecase_keys42.default)(
        {
          ...user,
          profile_attributes: user.profile,
          coupons: settingsValueSelector(state, 'coupon'),
        },
        { deep: true }
      ),
    },
  });
  response = camelcaseKeys(response, { deep: true });
  if (response.firstComplete) {
    trackEvent(USER_PROFILE_COMPLETED);
  }
  dispatch(updateUserResponse(user), response);
  return response;
};
var loginUserRequest = () => ({ type: LOGIN_USER_REQUEST });
var loginUserResponse = (response) => ({
  type: LOGIN_USER_RESPONSE,
  ...response,
});
var loginUser =
  (idToken, appId, profilePicture, platform = 'google') =>
  async (dispatch, getState) => {
    dispatch(loginUserRequest());
    const state = getState();
    var response = await $.ajax({
      url: '/ad_champion/users/login',
      method: 'POST',
      data: {
        id_token: idToken,
        app_id: appId,
        platform,
        image_url: profilePicture,
        invitation_token: settingsValueSelector(state, 'invitationToken'),
      },
      dataType: 'json',
    });
    response = camelcaseKeys(response, { deep: true });
    if (response.invitationExpired) {
      toastr.error(
        'Your invitation has expired. Please contact the person who invited you to resend the invitation.'
      );
      throw new Error('invitation_expired');
    }
    if (response.newUserFirstTimeSignIn) {
      trackEvent(FIRST_SIGN_IN);
    } else {
      trackEvent(USER_SIGN_IN);
    }
    if (profileCompleteSelector(state)) {
      await fetchFullWebsiteList()(dispatch);
    }
    await fetchUserMasterAccounts()(dispatch);
    dispatch(loginUserResponse(response));
    return response;
  };
var addMembershipRequest = (emailAddress, invitationToken) => ({
  type: ADD_MEMBERSHIP_REQUEST,
  emailAddress,
  invitationToken,
});
var addMembershipResponse = (emailAddress, invitationToken, response) => ({
  type: ADD_MEMBERSHIP_RESPONSE,
  emailAddress,
  invitationToken,
  ...response,
});
var addMembership =
  (emailAddress, invitationToken) => async (dispatch, getState) => {
    dispatch(addMembershipRequest(emailAddress, invitationToken));
    var response = await $.ajax({
      url: '/ad_champion/users/add_membership',
      method: 'POST',
      data: {
        email: emailAddress,
        invitation_token: invitationToken,
      },
      dataType: 'json',
    });
    response = camelcaseKeys(response, { deep: true });
    if (response.invitationExpired) {
      toastr.error(
        'Your invitation has expired. Please contact the person who invited you to resend the invitation.'
      );
      throw new Error('invitation_expired');
    }
    await fetchFullWebsiteList()(dispatch);
    await fetchUserMasterAccounts()(dispatch);
    dispatch(addMembershipResponse(emailAddress, invitationToken, response));
    return response;
  };
var logoutUserRequest = () => ({ type: LOGOUT_USER_REQUEST });
var logoutUserResponse = () => ({ type: LOGOUT_USER_RESPONSE });
var logoutUser = () => async (dispatch) => {
  dispatch(logoutUserRequest());
  try {
    await $.ajax({ url: '/ad_champion/users/logout', method: 'POST' });
  } catch (ex) {
    if (ex.status !== 422) {
      throw ex;
    }
  }
  await fetchUserMasterAccounts()(dispatch);
  dispatch(logoutUserResponse());
};
var removeMembershipRequest = (userId, accountId) => ({
  type: REMOVE_MEMBERSHIP_REQUEST,
  userId,
  accountId,
});
var removeMembershipResponse = (userId, accountId, response) => ({
  type: REMOVE_MEMBERSHIP_RESPONSE,
  userId,
  accountId,
  ...response,
});
var removeMembership = (userId, accountId) => async (dispatch) => {
  dispatch(removeMembershipRequest(userId, accountId));
  var response = await $.ajax({
    url: `/ad_champion/users/${userId}/remove_membership?account_id=${accountId}`,
    method: 'GET',
    dataType: 'json',
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(removeMembershipResponse(userId, accountId, response));
  return response;
};
var removeInvitationRequest = (userId, invitationId) => ({
  type: REMOVE_INVITAION_REQUEST,
  userId,
  invitationId,
});
var removeInvitationResponse = (userId, invitationId, response) => ({
  type: REMOVE_INVITAION_RESPONSE,
  userId,
  invitationId,
  ...response,
});
var removeInvitation = (userId, invitationId) => async (dispatch) => {
  dispatch(removeInvitationRequest(userId, invitationId));
  var response = await $.ajax({
    url: `/ad_champion/users/${userId}/remove_invitation?invitation_id=${invitationId}`,
    method: 'GET',
    dataType: 'json',
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(removeInvitationResponse(userId, invitationId, response));
  return response;
};

// src/actions/util.jsx
var fetchIfNeeded = (scenarioId, check, fetch, dispatch, getState) => {
  if (check(getState(), scenarioId)) {
    return dispatch(fetch(scenarioId));
  } else {
    return Promise.resolve();
  }
};

// src/actions/value/formats.jsx
var FETCH_VALUE_FORMATS_REQUEST = 'FETCH_VALUE_FORMATS_REQUEST';
var FETCH_VALUE_FORMATS_RESPONSE = 'FETCH_VALUE_FORMATS_RESPONSE';
var fetchValueFormatsRequest = () => ({
  type: FETCH_VALUE_FORMATS_REQUEST,
});
var fetchValueFormatsResponse = (response) => ({
  type: FETCH_VALUE_FORMATS_RESPONSE,
  ...response,
});
var fetchValueFormats = () => async (dispatch) => {
  dispatch(fetchValueFormatsRequest());
  var response = await $.ajax({
    method: 'GET',
    url: '/ad_champion/value/formats',
    dataType: 'json',
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(fetchValueFormatsResponse(response));
  return response;
};

// src/actions/value/operators.jsx
var FETCH_VALUE_OPERATORS_REQUEST = 'FETCH_VALUE_OPERATORS_REQUEST';
var FETCH_VALUE_OPERATORS_RESPONSE = 'FETCH_VALUE_OPERATORS_RESPONSE';
var fetchValueOperatorsRequest = () => ({
  type: FETCH_VALUE_OPERATORS_REQUEST,
});
var fetchValueOperatorsResponse = (response) => ({
  type: FETCH_VALUE_OPERATORS_RESPONSE,
  ...response,
});
var fetchValueOperators = () => async (dispatch) => {
  dispatch(fetchValueOperatorsRequest());
  var response = await $.ajax({
    method: 'GET',
    url: '/ad_champion/value/operators',
    dataType: 'json',
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(fetchValueOperatorsResponse(response));
  return response;
};

// src/actions/variations_sheet.jsx
var import_snakecase_keys43 = __toESM(require_snakecase_keys());
var CREATE_VARIATIONS_SHEET_REQUEST = 'CREATE_VARIATIONS_SHEET_REQUEST';
var CREATE_VARIATIONS_SHEET_SUCCESS = 'CREATE_VARIATIONS_SHEET_SUCCESS';
var APPLY_VARIATIONS_SHEET_REQUEST = 'APPLY_VARIATIONS_SHEET_REQUEST';
var APPLY_VARIATIONS_SHEET_SUCCESS = 'APPLY_VARIATIONS_SHEET_SUCCESS';
var createVariationsSheetRequest = (inventoryId) => ({
  type: CREATE_VARIATIONS_SHEET_REQUEST,
  inventoryId,
});
var createVariationsSheetSuccess = (inventoryId, sheetId) => ({
  type: CREATE_VARIATIONS_SHEET_SUCCESS,
  inventoryId,
  sheetId,
});
var createVariationsSheet = (inventoryId) => async (dispatch) => {
  dispatch(createVariationsSheetRequest(inventoryId));
  var response = await $.ajax({
    url: `/ad_champion/inventories/${inventoryId}/variations_sheets/edit`,
    dataType: 'json',
  });
  dispatch(createVariationsSheetSuccess(inventoryId, response.spreadsheet_id));
  return camelcaseKeys(response, { deep: true });
};
var applyVariationsSheetRequest = (inventoryId, spreadsheetId) => ({
  type: APPLY_VARIATIONS_SHEET_REQUEST,
  inventoryId,
  spreadsheetId,
});
var applyVariationsSheetSuccess = (inventoryId, spreadsheetId) => ({
  type: APPLY_VARIATIONS_SHEET_SUCCESS,
  inventoryId,
  spreadsheetId,
});
var applyVariationsSheet = (inventoryId, spreadsheetId) => async (dispatch) => {
  dispatch(applyVariationsSheetRequest(inventoryId, spreadsheetId));
  var response = await $.ajax({
    method: 'PUT',
    url: `/ad_champion/inventories/${inventoryId}/variations_sheets`,
    dataType: 'json',
    data: (0, import_snakecase_keys43.default)({ spreadsheetId }),
  });
  dispatch(applyVariationsSheetSuccess(inventoryId, spreadsheetId));
  return camelcaseKeys(response, { deep: true });
};

// src/actions/vertical/fields.jsx
var FETCH_VERTICAL_FIELDS_REQUEST = 'FETCH_VERTICAL_FIELDS_REQUEST';
var FETCH_VERTICAL_FIELDS_RESPONSE = 'FETCH_VERTICAL_FIELDS_RESPONSE';
var fetchVerticalFieldsRequest = () => ({
  type: FETCH_VERTICAL_FIELDS_REQUEST,
});
var fetchVerticalFieldsResponse = (response) => ({
  type: FETCH_VERTICAL_FIELDS_RESPONSE,
  ...response,
});
var fetchVerticalFields = () => async (dispatch) => {
  dispatch(fetchVerticalFieldsRequest());
  var response = await $.ajax({
    method: 'GET',
    url: '/ad_champion/vertical/fields',
    dataType: 'json',
  });
  response = camelcaseKeys(response, { deep: true });
  dispatch(fetchVerticalFieldsResponse(response));
  return response;
};

// src/actions/website_details.jsx
var import_snakecase_keys44 = __toESM(require_snakecase_keys());
var FETCH_WEBSITE_DETAILS_REQUEST = 'FETCH_WEBSITE_DETAILS_REQUEST';
var FETCH_WEBSITE_DETAILS_SUCCESS = 'FETCH_WEBSITE_DETAILS_SUCCESS';
var UPDATE_WEBSITE_DETAILS_REQUEST = 'UPDATE_WEBSITE_DETAILS_REQUEST';
var UPDATE_WEBSITE_DETAILS_SUCCESS = 'UPDATE_WEBSITE_DETAILS_SUCCESS';
var requestWebsiteDetails = (id, forScenario) => ({
  type: FETCH_WEBSITE_DETAILS_REQUEST,
  idType: forScenario ? 'scenario' : 'website',
  id,
});
var receiveWebsiteDetails = (id, json, forScenario) => ({
  type: FETCH_WEBSITE_DETAILS_SUCCESS,
  idType: forScenario ? 'scenario' : 'website',
  id,
  websiteDetails: json,
  receivedAt: Date.now(),
});
var fetchWebsiteDetails =
  (id, forScenario = true) =>
  (dispatch) => {
    var details = requestWebsiteDetails(id, forScenario);
    dispatch(details);
    return $.ajax({
      method: 'GET',
      url: `/ad_champion/${
        forScenario ? 'scenarios' : 'websites'
      }/${id}/website_detail/edit.json`,
      dataType: 'json',
      success: (response) => {
        dispatch(
          receiveWebsiteDetails(
            id,
            camelcaseKeys(
              forScenario ? response.campaign_order : response.website,
              {
                deep: true,
              }
            ),
            forScenario
          )
        );
      },
    });
  };
var shouldFetchWebsiteDetails = (state, scenarioId) => {
  return state.websiteDetails.website.url === '';
};
var fetchWebsiteDetailsIfNeeded = (scenarioId) => (dispatch, getState) => {
  return fetchIfNeeded(
    scenarioId,
    shouldFetchWebsiteDetails,
    fetchWebsiteDetails,
    dispatch,
    getState
  );
};
var saveWebsiteDetailsRequest = (id, forScenario) => ({
  type: UPDATE_WEBSITE_DETAILS_REQUEST,
  idType: forScenario ? 'scenario' : 'website',
  id,
});
var saveWebsiteDetailsSuccess = (id, websiteDetails, forScenario) => ({
  type: UPDATE_WEBSITE_DETAILS_SUCCESS,
  idType: forScenario ? 'scenario' : 'website',
  id,
  websiteDetails,
});
var saveWebsiteDetails =
  (id, details, forScenario = true) =>
  (dispatch) => {
    dispatch(saveWebsiteDetailsRequest(id, forScenario));
    const payload = forScenario
      ? { campaignOrder: details }
      : { website: details };
    var snakeCasePayload = (0, import_snakecase_keys44.default)(payload, {
      deep: true,
    });
    return $.ajax({
      method: 'PUT',
      url: `/ad_champion/${
        forScenario ? 'scenarios' : 'websites'
      }/${id}/website_detail`,
      contentType: 'application/json',
      data: JSON.stringify(snakeCasePayload),
      dataType: 'json',
      success: () => {
        if (forScenario) {
          dispatch(fetchScenarioStatus(id));
        }
        return dispatch(saveWebsiteDetailsSuccess(id, details, forScenario));
      },
    });
  };

// src/actions/websites/scenarios.jsx
var import_snakecase_keys45 = __toESM(require_snakecase_keys());
var CREATE_WEBSITE_RETAIL_SCENARIO_REQUEST =
  'CREATE_WEBSITE_RETAIL_SCENARIO_REQUEST';
var CREATE_WEBSITE_RETAIL_SCENARIO_RESPONSE =
  'CREATE_WEBSITE_RETAIL_SCENARIO_RESPONSE';
var createWebsiteRetailScenarioRequest = (websiteId, buildType, options) => ({
  type: CREATE_WEBSITE_RETAIL_SCENARIO_REQUEST,
  websiteId,
  buildType,
  options,
});
var createWebsiteRetailScenarioResponse = (
  websiteId,
  buildType,
  options,
  response
) => ({
  type: CREATE_WEBSITE_RETAIL_SCENARIO_RESPONSE,
  websiteId,
  buildType,
  options,
  response,
});
var createWebsiteRetailScenario =
  (websiteId, buildType, options, getSchemeId = schemeSelector) =>
  async (dispatch) => {
    const schemeId = getSchemeId({}, buildType);
    dispatch(createWebsiteRetailScenarioRequest(websiteId, buildType, options));
    var response = await $.ajax({
      method: 'POST',
      url: `/ad_champion/websites/${websiteId}/scenarios/create_retail_scenario?scheme_id=${schemeId}`,
      data: {
        options: JSON.stringify(
          (0, import_snakecase_keys45.default)({ ...options }, { deep: true })
        ),
      },
      dataType: 'json',
    });
    dispatch(
      createWebsiteRetailScenarioResponse(
        websiteId,
        buildType,
        options,
        response
      )
    );
    return response;
  };

// src/selectors/index.js
var selectors_exports = {};
__export(selectors_exports, {
  ALL_PLAN_FEATURES: () => ALL_PLAN_FEATURES,
  ANALYTICS_DEFAULT_AD_CHANNELS: () => ANALYTICS_DEFAULT_AD_CHANNELS,
  BIG_COMMERCE_APP_ID: () => BIG_COMMERCE_APP_ID,
  CUSTOMER_FEATURE_ADD_TEAM_MEMBERS: () => CUSTOMER_FEATURE_ADD_TEAM_MEMBERS,
  CUSTOMER_FEATURE_ADD_WEBSITES: () => CUSTOMER_FEATURE_ADD_WEBSITES,
  CUSTOMER_FEATURE_ASK_QUESTIONS: () => CUSTOMER_FEATURE_ASK_QUESTIONS,
  CUSTOMER_FEATURE_BOOK_MEETINGS: () => CUSTOMER_FEATURE_BOOK_MEETINGS,
  HEALTH_CRITICAL: () => HEALTH_CRITICAL,
  HEALTH_ERROR: () => HEALTH_ERROR,
  HEALTH_IN_ORDER: () => HEALTH_IN_ORDER,
  HEALTH_OK: () => HEALTH_OK,
  HEALTH_WARNING: () => HEALTH_WARNING,
  InventoryIdSelectors: () => InventoryIdSelectors,
  PLAN_FEATURE_BULK_OPTIMISATION: () => PLAN_FEATURE_BULK_OPTIMISATION,
  PLAN_FEATURE_CATEGORY_SEO_TITLES: () => PLAN_FEATURE_CATEGORY_SEO_TITLES,
  PLAN_FEATURE_DIY: () => PLAN_FEATURE_DIY,
  PLAN_FEATURE_GENERATE_FEEDS: () => PLAN_FEATURE_GENERATE_FEEDS,
  abbreviateAdChannelData: () => abbreviateAdChannelData,
  accountByAccountIdSelector: () => accountByAccountIdSelector,
  accountListSelector: () => accountListSelector,
  accountMerchantCenterStatusSelector: () =>
    accountMerchantCenterStatusSelector,
  accountOrWebsiteBreakdownReportSelector: () =>
    accountOrWebsiteBreakdownReportSelector,
  accountSelector: () => accountSelector,
  accountSubscriptionSelector: () => accountSubscriptionSelector,
  accountTypeIdSelector: () => accountTypeIdSelector,
  accountTypeLabelSelector: () => accountTypeLabelSelector,
  accountTypeSelector: () => accountTypeSelector,
  accountUsersSelector: () => accountUsersSelector,
  accountsSelector: () => accountsSelector,
  accountsWithContactDetailsListSelector: () =>
    accountsWithContactDetailsListSelector,
  actionTypeSelector: () => actionTypeSelector,
  actionTypesSelector: () => actionTypesSelector,
  activateNewPromotionsSelector: () => activateNewPromotionsSelector,
  adChannelDataSelector: () => adChannelDataSelector,
  adRelevanceSavingsValuesSelector: () => adRelevanceSavingsValuesSelector,
  addStaticRows: () => addStaticRows,
  advertisingAccountSelector: () => advertisingAccountSelector,
  advertisingBudgetCategorySelector: () => advertisingBudgetCategorySelector,
  advertisingBudgetsSelector: () => advertisingBudgetsSelector,
  advertisingChannelSelector: () => advertisingChannelSelector,
  advertisingGoalTypeByType: () => advertisingGoalTypeByType,
  advertisingGoalTypeSelector: () => advertisingGoalTypeSelector,
  advertisingGoalTypesSelector: () => advertisingGoalTypesSelector,
  advertisingGoalsSelector: () => advertisingGoalsSelector,
  advertisingMasterAccountSelector: () => advertisingMasterAccountSelector,
  advertisingRecommendationsByType: () => advertisingRecommendationsByType,
  advertisingSelector: () => advertisingSelector,
  advertisingStatusSelector: () => advertisingStatusSelector,
  advertisingTotalsByType: () => advertisingTotalsByType,
  advertisingWebsiteSelector: () => advertisingWebsiteSelector,
  adwordsAccountsSelectOptionsSelector: () =>
    adwordsAccountsSelectOptionsSelector,
  analyticsAccessTokenSelector: () => analyticsAccessTokenSelector,
  analyticsAccountIdSelector: () => analyticsAccountIdSelector,
  analyticsAccountNameSelector: () => analyticsAccountNameSelector,
  analyticsApiReadySelector: () => analyticsApiReadySelector,
  analyticsFeedopsReportSelector: () => analyticsFeedopsReportSelector,
  analyticsReportSelector: () => analyticsReportSelector,
  analyticsSelector: () => analyticsSelector,
  analyticsViewsSelector: () => analyticsViewsSelector,
  analyticsWebPropertyIdSelector: () => analyticsWebPropertyIdSelector,
  analyticsWebPropertyNameSelector: () => analyticsWebPropertyNameSelector,
  appIdSelector: () => appIdSelector,
  appSelector: () => appSelector,
  articleSelector: () => articleSelector,
  bazaarvoiceAccountSelector: () => bazaarvoiceAccountSelector,
  billingSelector: () => billingSelector,
  bookAMeetingJsonDataSelector: () => bookAMeetingJsonDataSelector,
  bookAMeetingMeetingTypeSelector: () => bookAMeetingMeetingTypeSelector,
  bookAMeetingModalOpenSelector: () => bookAMeetingModalOpenSelector,
  budgetCategoryAdvertisingBudgetsSelector: () =>
    budgetCategoryAdvertisingBudgetsSelector,
  budgetCategoryAdvertisingGoalsSelector: () =>
    budgetCategoryAdvertisingGoalsSelector,
  budgetCategoryClicksTotalSelector: () => budgetCategoryClicksTotalSelector,
  budgetCategoryConvValueTotalSelector: () =>
    budgetCategoryConvValueTotalSelector,
  budgetCategoryConversionsTotalSelector: () =>
    budgetCategoryConversionsTotalSelector,
  budgetCategoryCostActualSelector: () => budgetCategoryCostActualSelector,
  budgetCategoryCostTargetSelector: () => budgetCategoryCostTargetSelector,
  budgetCategoryCurrencySelector: () => budgetCategoryCurrencySelector,
  budgetCategoryGoalActualSelector: () => budgetCategoryGoalActualSelector,
  budgetCategoryGoalTargetSelector: () => budgetCategoryGoalTargetSelector,
  budgetCategoryGoalTypeSelector: () => budgetCategoryGoalTypeSelector,
  budgetCategoryListSelector: () => budgetCategoryListSelector,
  budgetCategoryPerformanceByCampaignTypeSelector: () =>
    budgetCategoryPerformanceByCampaignTypeSelector,
  budgetCategoryPerformanceWithGoalAndBudgetSelector: () =>
    budgetCategoryPerformanceWithGoalAndBudgetSelector,
  budgetCategoryRecommendationSelector: () =>
    budgetCategoryRecommendationSelector,
  budgetIssueFormatter: () => budgetIssueFormatter,
  buildDetailSelector: () => buildDetailSelector,
  calculateGoalTargetByGoalType: () => calculateGoalTargetByGoalType,
  canGenManualOptSuggestionsSelector: () => canGenManualOptSuggestionsSelector,
  categoriesSelector: () => categoriesSelector,
  categoryDepthValueSelector: () => categoryDepthValueSelector,
  channelFilterModalOpenSelector: () => channelFilterModalOpenSelector,
  channelHealthSelector: () => channelHealthSelector,
  channelOptimisationScoreSelector: () => channelOptimisationScoreSelector,
  channelPresentSelector: () => channelPresentSelector,
  channelSelector: () => channelSelector,
  channelSettingsModalOpenSelector: () => channelSettingsModalOpenSelector,
  channelSettingsSelector: () => channelSettingsSelector,
  clicksTotalSelector: () => clicksTotalSelector,
  completedPlaybookProgressWebsiteChannelSelector: () =>
    completedPlaybookProgressWebsiteChannelSelector,
  completedPlaybookProgressWebsiteSelector: () =>
    completedPlaybookProgressWebsiteSelector,
  configurationInProgressSelector: () => configurationInProgressSelector,
  constructedWebsiteListSelector: () => constructedWebsiteListSelector,
  convValueTotalSelector: () => convValueTotalSelector,
  conversionsTotalSelector: () => conversionsTotalSelector,
  costActualSelector: () => costActualSelector,
  costAndGoalSelector: () => costAndGoalSelector,
  costTargetSelector: () => costTargetSelector,
  countriesGeoTargetSelector: () => countriesGeoTargetSelector,
  cpaActualSelector: () => cpaActualSelector,
  cpcActualSelector: () => cpcActualSelector,
  createAdwordsAccountSelector: () => createAdwordsAccountSelector,
  createAnalyticsAccountSelector: () => createAnalyticsAccountSelector,
  createMerchantCenterAccountSelector: () =>
    createMerchantCenterAccountSelector,
  currencySelector: () => currencySelector,
  currentPlanIdSelector: () => currentPlanIdSelector,
  currentSubscriptionStatusSelector: () => currentSubscriptionStatusSelector,
  currentUserAccountsOverviewFiltersSelector: () =>
    currentUserAccountsOverviewFiltersSelector,
  currentUserAccountsOverviewSelector: () =>
    currentUserAccountsOverviewSelector,
  currentUserProfileSelector: () => currentUserProfileSelector,
  currentUserSelector: () => currentUserSelector,
  customerBillingAddressSelector: () => customerBillingAddressSelector,
  customerCountrySelector: () => customerCountrySelector,
  customerCurrencySelector: () => customerCurrencySelector,
  customerFeatures: () => customerFeatures,
  customerFeaturesSelector: () => customerFeaturesSelector,
  customerPreferredCurrencySelector: () => customerPreferredCurrencySelector,
  customerSelector: () => customerSelector,
  dateRangeSelector: () => dateRangeSelector,
  dateRangesSelector: () => dateRangesSelector,
  defaultCategoryDepthSelector: () => defaultCategoryDepthSelector,
  defaultCategorySelector: () => defaultCategorySelector,
  defaultGoogleChannelSelector: () => defaultGoogleChannelSelector,
  displayConversionValueOnCostSelector: () =>
    displayConversionValueOnCostSelector,
  displayPromotionsSelector: () => displayPromotionsSelector,
  divideWithDivideByZeroCheck: () => divideWithDivideByZeroCheck,
  driveDocsSelector: () => driveDocsSelector,
  editEnabled: () => editEnabled,
  emailSelector: () => emailSelector,
  enabledChannelSettingsSelector: () => enabledChannelSettingsSelector,
  enabledChannelsSelector: () => enabledChannelsSelector,
  enabledVendorsSelector: () => enabledVendorsSelector,
  errorCountSelector: () => errorCountSelector,
  errorSelector: () => errorSelector,
  errorTypeCategoryIdsSelector: () => errorTypeCategoryIdsSelector,
  errorTypeIdsSelector: () => errorTypeIdsSelector,
  existingAccountAccountTypeIdSelector: () =>
    existingAccountAccountTypeIdSelector,
  existingAccountAccountTypeSelector: () => existingAccountAccountTypeSelector,
  existingAccountCustomerSelector: () => existingAccountCustomerSelector,
  existingAccountForContactDetailsSelector: () =>
    existingAccountForContactDetailsSelector,
  existingAccountTypeLabelSelector: () => existingAccountTypeLabelSelector,
  expectedCTRSavingsValuesSelector: () => expectedCTRSavingsValuesSelector,
  facebookAccountSelector: () => facebookAccountSelector,
  featureEnabled: () => featureEnabled,
  features: () => features,
  feedDetailSelector: () => feedDetailSelector,
  feedIdSelector: () => feedIdSelector,
  feedopsAdvertisingAllTotals: () => feedopsAdvertisingAllTotals,
  feedopsAdvertisingByChannelAndWebsiteSelector: () =>
    feedopsAdvertisingByChannelAndWebsiteSelector,
  feedopsAdvertisingGoalTypes: () => feedopsAdvertisingGoalTypes,
  feedopsAdvertisingRecommendations: () => feedopsAdvertisingRecommendations,
  feedopsAdvertisingTotals: () => feedopsAdvertisingTotals,
  feedopsFeedbacksSelector: () => feedopsFeedbacksSelector,
  feedopsShoppingPublishedSelector: () => feedopsShoppingPublishedSelector,
  feedopsShoppingSelector: () => feedopsShoppingSelector,
  feedopsTestimonialsSelector: () => feedopsTestimonialsSelector,
  firstInventoryInWebsiteSelector: () => firstInventoryInWebsiteSelector,
  formattedRecommendationList: () => formattedRecommendationList,
  generalSelector: () => generalSelector,
  geoTargetsSelector: () => geoTargetsSelector,
  getAccessToken: () => getAccessToken,
  getDataUnit: () => getDataUnit,
  getDateString: () => getDateString2,
  getGoalSuffix: () => getGoalSuffix,
  getGoalTypeTitle: () => getGoalTypeTitle,
  getGoogleUser: () => getGoogleUser,
  getMicrosoftUser: () => getMicrosoftUser,
  goalActualSelector: () => goalActualSelector,
  goalTargetSelector: () => goalTargetSelector,
  goalTypeSelector: () => goalTypeSelector,
  googleAccountSelector: () => googleAccountSelector,
  googleUserAccessTokenSelector: () => googleUserAccessTokenSelector,
  hasActivePromotions: () => hasActivePromotions,
  hasBudgetCategoriesSelector: () => hasBudgetCategoriesSelector,
  hasGooglePublicationAccountSelector: () =>
    hasGooglePublicationAccountSelector,
  hasMicrosoftPublicationAccountSelector: () =>
    hasMicrosoftPublicationAccountSelector,
  headersSelector: () => headersSelector,
  hierarchyCategorySelector: () => hierarchyCategorySelector,
  hierarchyDepthSelector: () => hierarchyDepthSelector,
  initialReconciledStatusSelector: () => initialReconciledStatusSelector,
  inventoriesSelector: () => inventoriesSelector,
  inventoryAuditScheduleMessageSelector: () =>
    inventoryAuditScheduleMessageSelector,
  inventoryCategoryHierarchySelector: () => inventoryCategoryHierarchySelector,
  inventoryCategoryTreeSelector: () => inventoryCategoryTreeSelector,
  inventoryDetailSelector: () => inventoryDetailSelector,
  inventoryDetailsSelector: () => inventoryDetailsSelector,
  inventoryExistingAttributesMappingSelector: () =>
    inventoryExistingAttributesMappingSelector,
  inventoryFeedOpsCategoryHierarchySelector: () =>
    inventoryFeedOpsCategoryHierarchySelector,
  inventoryFeedOpsCategoryTreeSelector: () =>
    inventoryFeedOpsCategoryTreeSelector,
  inventoryItemCountSelector: () => inventoryItemCountSelector,
  inventoryMappableAttributesSelector: () =>
    inventoryMappableAttributesSelector,
  inventoryProcessingSelector: () => inventoryProcessingSelector,
  inventoryProcessingStatusSelector: () => inventoryProcessingStatusSelector,
  inventoryProcessingTotalProductsSelector: () =>
    inventoryProcessingTotalProductsSelector,
  inventoryProcessingValueSelector: () => inventoryProcessingValueSelector,
  inventoryProductDataAuditsSelector: () => inventoryProductDataAuditsSelector,
  inventoryShowAllAuditsSelector: () => inventoryShowAllAuditsSelector,
  inventoryStoreAttributesSelector: () => inventoryStoreAttributesSelector,
  isActionsPageSelector: () => isActionsPageSelector,
  isAllRowsSelectedSelector: () => isAllRowsSelectedSelector,
  isBigCommerceAppSelector: () => isBigCommerceAppSelector,
  isEmbeddedApp: () => isEmbeddedApp,
  isEmbeddedAppSelector: () => isEmbeddedAppSelector,
  isFeedAppSelector: () => isFeedAppSelector,
  isManagedPlanSelector: () => isManagedPlanSelector,
  keywordIdeasSelector: () => keywordIdeasSelector,
  landingPageExperienceSavingsValuesSelector: () =>
    landingPageExperienceSavingsValuesSelector,
  listSelector: () => listSelector,
  loggedInSelector: () => loggedInSelector,
  masterAccountListSelector: () => masterAccountListSelector,
  merchantCenterAccountIdSelector: () => merchantCenterAccountIdSelector,
  merchantCenterAccountNameSelector: () => merchantCenterAccountNameSelector,
  merchantCenterAccountOauthUserSelector: () =>
    merchantCenterAccountOauthUserSelector,
  merchantCenterAccountsSelector: () => merchantCenterAccountsSelector,
  merchantCenterCatalogsSelector: () => merchantCenterCatalogsSelector,
  merchantCenterDiagnosticsDataSelector: () =>
    merchantCenterDiagnosticsDataSelector,
  merchantCenterProductInfoAndMeasuresByIdSelector: () =>
    merchantCenterProductInfoAndMeasuresByIdSelector,
  merchantCenterSetupCompleteSelector: () =>
    merchantCenterSetupCompleteSelector,
  microsoftAccountSelector: () => microsoftAccountSelector,
  missingProductTypesPercent: () => missingProductTypesPercent,
  newUserSelector: () => newUserSelector,
  nextUploadRemoveExistingPrimaryFeedsSelector: () =>
    nextUploadRemoveExistingPrimaryFeedsSelector,
  noDefaultChannelSelector: () => noDefaultChannelSelector,
  outboundFeedsGeneratedStatusSelector: () =>
    outboundFeedsGeneratedStatusSelector,
  parseTargetsAsFloats: () => parseTargetsAsFloats,
  performanceAccountSelector: () => performanceAccountSelector,
  performanceBudgetCategorySelector: () => performanceBudgetCategorySelector,
  performanceByCampaignTypeSelector: () => performanceByCampaignTypeSelector,
  performanceDataSelector: () => performanceDataSelector,
  performanceDownloadErrorsSelector: () => performanceDownloadErrorsSelector,
  performanceMasterAccountSelector: () => performanceMasterAccountSelector,
  performanceWebsiteChannelSelector: () => performanceWebsiteChannelSelector,
  performanceWebsiteSelector: () => performanceWebsiteSelector2,
  performanceWithGoalAndBudgetSelector: () =>
    performanceWithGoalAndBudgetSelector,
  pinterestAccountSelector: () => pinterestAccountSelector,
  plan: () => plan,
  planCanDoCategoryLevelSeoTitlesSelector: () =>
    planCanDoCategoryLevelSeoTitlesSelector,
  planCanGenerateFeedsSelector: () => planCanGenerateFeedsSelector,
  planCurrencies: () => planCurrencies,
  planFeaturesSelector: () => planFeaturesSelector,
  plansArraySelector: () => plansArraySelector,
  plansSelector: () => plansSelector,
  playbookItemByIdSelector: () => playbookItemByIdSelector,
  playbookItemsByChannelSelector: () => playbookItemsByChannelSelector,
  playbookProgressWebsiteActiveItemsSelector: () =>
    playbookProgressWebsiteActiveItemsSelector,
  playbookProgressWebsiteChannelActiveItemsSelector: () =>
    playbookProgressWebsiteChannelActiveItemsSelector,
  playbookProgressWebsiteChannelDismissItemsSelector: () =>
    playbookProgressWebsiteChannelDismissItemsSelector,
  playbookProgressWebsiteChannelSelector: () =>
    playbookProgressWebsiteChannelSelector,
  playbookProgressWebsiteGeneratedAtSelector: () =>
    playbookProgressWebsiteGeneratedAtSelector,
  playbookProgressWebsiteSelector: () => playbookProgressWebsiteSelector,
  playbookSelector: () => playbookSelector,
  productFeedsReplacementsSelector: () => productFeedsReplacementsSelector,
  productIdsByScenario: () => productIdsByScenario,
  productInfoAndMeasuresDifferenceSelector: () =>
    productInfoAndMeasuresDifferenceSelector,
  productUrlSettingsSelector: () => productUrlSettingsSelector,
  productsAvailableSelector: () => productsAvailableSelector,
  productsSelector: () => productsSelector,
  productsWithPlaceholdersSelector: () => productsWithPlaceholdersSelector,
  profileCompleteSelector: () => profileCompleteSelector,
  promotionDetailItemsDisplaySelector: () =>
    promotionDetailItemsDisplaySelector,
  promotionDetailItemsListSelector: () => promotionDetailItemsListSelector,
  promotionDetailItemsSortColumnSelector: () =>
    promotionDetailItemsSortColumnSelector,
  promotionDetailSearchTextSelector: () => promotionDetailSearchTextSelector,
  promotionExistsSelectors: () => promotionExistsSelectors,
  promotionsExistsSelector: () => promotionsExistsSelector,
  promotionsSearchTextSelector: () => promotionsSearchTextSelector,
  promotionsSelector: () => promotionsSelector,
  promotionsSortColumnSelector: () => promotionsSortColumnSelector,
  promptForCreditCardSelector: () => promptForCreditCardSelector,
  recommendationSelector: () => recommendationSelector,
  reebeloAccountSelector: () => reebeloAccountSelector,
  roasActualSelector: () => roasActualSelector,
  roleSelector: () => roleSelector,
  rowsSelector: () => rowsSelector,
  rulesSelector: () => rulesSelector,
  schemeSelector: () => schemeSelector,
  searchQueryState: () => searchQueryState,
  selectDataUnit: () => selectDataUnit,
  selectedViewSelector: () => selectedViewSelector,
  settingsSelector: () => settingsSelector,
  settingsValueSelector: () => settingsValueSelector,
  showDismissPlaybookItemsSelector: () => showDismissPlaybookItemsSelector,
  showSecondaryHeaderSelector: () => showSecondaryHeaderSelector,
  showSideNavSelector: () => showSideNavSelector,
  subAccountTypeCountSelector: () => subAccountTypeCountSelector,
  subscriptionCurrencySelector: () => subscriptionCurrencySelector,
  subscriptionIdSelector: () => subscriptionIdSelector,
  subscriptionPlanAmountSelector: () => subscriptionPlanAmountSelector,
  subscriptionPlanNameSelector: () => subscriptionPlanNameSelector,
  subscriptionPlanSelector: () => subscriptionPlanSelector,
  subscriptionPlanUnitPriceSelector: () => subscriptionPlanUnitPriceSelector,
  subscriptionSelector: () => subscriptionSelector,
  subscriptionTrialEndSelector: () => subscriptionTrialEndSelector,
  suggestionBatchIdsSelector: () => suggestionBatchIdsSelector,
  superUserSelector: () => superUserSelector,
  systemAverageAdRelevanceSelector: () => systemAverageAdRelevanceSelector,
  systemAverageExpectedCTRSelector: () => systemAverageExpectedCTRSelector,
  systemAverageLandingPageExperienceSelector: () =>
    systemAverageLandingPageExperienceSelector,
  systemWideMerchantCenterProductInfoAndMeasuresSelector: () =>
    systemWideMerchantCenterProductInfoAndMeasuresSelector,
  targetSpendToHitDailyGoalTotalSelector: () =>
    targetSpendToHitDailyGoalTotalSelector,
  taxonomiesOptionsSelector: () => taxonomiesOptionsSelector,
  taxonomiesSelector: () => taxonomiesSelector,
  thirdPartyBillingDetailsSelector: () => thirdPartyBillingDetailsSelector,
  totalsSelector: () => totalsSelector,
  userFriendlyAccountTypeSelector: () => userFriendlyAccountTypeSelector,
  valueOperatorSelector: () => valueOperatorSelector,
  valueOperatorsSelector: () => valueOperatorsSelector,
  vendorsSelector: () => vendorsSelector,
  verticalFieldSelector: () => verticalFieldSelector,
  verticalFieldsSelector: () => verticalFieldsSelector,
  viewsSelector: () => viewsSelector,
  warningCountSelector: () => warningCountSelector,
  websiteAccountIdSelector: () => websiteAccountIdSelector,
  websiteAdvertisingFeedIdsSelector: () => websiteAdvertisingFeedIdsSelector,
  websiteAdvertisingPlanSelector: () => websiteAdvertisingPlanSelector,
  websiteAdwordsSelector: () => websiteAdwordsSelector,
  websiteAiCreditHistorySelector: () => websiteAiCreditHistorySelector,
  websiteAllAttributesSelector: () => websiteAllAttributesSelector,
  websiteAnalyticsSelector: () => websiteAnalyticsSelector,
  websiteAttributeReplacementsSelector: () =>
    websiteAttributeReplacementsSelector,
  websiteAttributesSelector: () => websiteAttributesSelector,
  websiteAvailableAiCreditsSelector: () => websiteAvailableAiCreditsSelector,
  websiteAverageAdRelevanceSelector: () => websiteAverageAdRelevanceSelector,
  websiteAverageExpectedCTRSelector: () => websiteAverageExpectedCTRSelector,
  websiteAverageLandingPageExperienceSelector: () =>
    websiteAverageLandingPageExperienceSelector,
  websiteBudgetSelector: () => websiteBudgetSelector,
  websiteBuildsIdsSelector: () => websiteBuildsIdsSelector,
  websiteCampaignIdsSelector: () => websiteCampaignIdsSelector,
  websiteCategoryReplacementsSelector: () =>
    websiteCategoryReplacementsSelector,
  websiteCurrencySelector: () => websiteCurrencySelector,
  websiteDefaultAdwordsIdSelector: () => websiteDefaultAdwordsIdSelector,
  websiteDefaultMicrosoftIdSelector: () => websiteDefaultMicrosoftIdSelector,
  websiteDetailSelector: () => websiteDetailSelector,
  websiteErrorCategoryDetailsSelector: () =>
    websiteErrorCategoryDetailsSelector,
  websiteErrorCategoryIdsSelector: () => websiteErrorCategoryIdsSelector,
  websiteFeedByInventoryIdAndChannelSelector: () =>
    websiteFeedByInventoryIdAndChannelSelector,
  websiteFeedDetailSelector: () => websiteFeedDetailSelector,
  websiteFeedIdByChannelSelector: () => websiteFeedIdByChannelSelector,
  websiteFeedPerChannelSelector: () => websiteFeedPerChannelSelector,
  websiteFieldKeywordIdeasSelector: () => websiteFieldKeywordIdeasSelector,
  websiteGoalTargetSelector: () => websiteGoalTargetSelector,
  websiteIdSelector: () => websiteIdSelector,
  websiteInventoriesSelector: () => websiteInventoriesSelector,
  websiteInventoryIdSelector: () => websiteInventoryIdSelector,
  websiteInventoryIdWithDefaultSelector: () =>
    websiteInventoryIdWithDefaultSelector,
  websiteInventoryIdsSelector: () => websiteInventoryIdsSelector,
  websiteIsRuleModalOpenSelector: () => websiteIsRuleModalOpenSelector,
  websiteKeywordIdeasSelector: () => websiteKeywordIdeasSelector,
  websiteLatestAdvertisingBudgetSelector: () =>
    websiteLatestAdvertisingBudgetSelector,
  websiteLatestAdvertisingGoalSelector: () =>
    websiteLatestAdvertisingGoalSelector,
  websiteListSelector: () => websiteListSelector2,
  websiteMerchantCenterProductErrorsSelector: () =>
    websiteMerchantCenterProductErrorsSelector,
  websiteMerchantCenterProductInfoAndMeasuresSelector: () =>
    websiteMerchantCenterProductInfoAndMeasuresSelector,
  websiteMerchantCenterSelector: () => websiteMerchantCenterSelector,
  websiteMerchantCenterStatusSelector: () =>
    websiteMerchantCenterStatusSelector,
  websiteMicrosoftAdwordsSelector: () => websiteMicrosoftAdwordsSelector,
  websiteMicrosoftMerchantCenterSelector: () =>
    websiteMicrosoftMerchantCenterSelector,
  websiteNameSelector: () => websiteNameSelector,
  websitePerformanceByBudgetCategoryReportSelector: () =>
    websitePerformanceByBudgetCategoryReportSelector,
  websitePerformanceByBudgetCategorySelector: () =>
    websitePerformanceByBudgetCategorySelector,
  websitePerformanceWithGoalAndBudgetSelector: () =>
    websitePerformanceWithGoalAndBudgetSelector,
  websitePlanTypeSelector: () => websitePlanTypeSelector,
  websitePlaybookItemIdSelector: () => websitePlaybookItemIdSelector,
  websitePrimaryFeedCountSelector: () => websitePrimaryFeedCountSelector,
  websitePrimaryFeedsSelector: () => websitePrimaryFeedsSelector,
  websiteProductOptimisationSuggestionsSelector: () =>
    websiteProductOptimisationSuggestionsSelector,
  websiteProductReplacementsFiltersSelector: () =>
    websiteProductReplacementsFiltersSelector,
  websiteProductReplacementsMetaDataSelector: () =>
    websiteProductReplacementsMetaDataSelector,
  websiteProductReplacementsPageSelector: () =>
    websiteProductReplacementsPageSelector,
  websiteProductReplacementsPerPageSelector: () =>
    websiteProductReplacementsPerPageSelector,
  websiteProductReplacementsSearchTermSelector: () =>
    websiteProductReplacementsSearchTermSelector,
  websiteProductReplacementsSelectedColumnsSelector: () =>
    websiteProductReplacementsSelectedColumnsSelector,
  websiteProductReplacementsSelector: () => websiteProductReplacementsSelector,
  websiteProductTitlesAllAvailableAttributesSelector: () =>
    websiteProductTitlesAllAvailableAttributesSelector,
  websiteProductTitlesAvailableFieldsSelector: () =>
    websiteProductTitlesAvailableFieldsSelector,
  websiteProductTitlesSelector: () => websiteProductTitlesSelector,
  websiteProductTitlesSortedAvailableFieldsSelector: () =>
    websiteProductTitlesSortedAvailableFieldsSelector,
  websiteProductUrlSettingsSelector: () => websiteProductUrlSettingsSelector,
  websiteQueryChangedStatusSelector: () => websiteQueryChangedStatusSelector,
  websiteRecommendationSelector: () => websiteRecommendationSelector,
  websiteReplacementsSelector: () => websiteReplacementsSelector,
  websiteRetailInventoryDataSelector: () => websiteRetailInventoryDataSelector,
  websiteRetailInventoryIdsSelector: () => websiteRetailInventoryIdsSelector,
  websiteRulesSelector: () => websiteRulesSelector,
  websiteSelectedItemsSelector: () => websiteSelectedItemsSelector,
  websiteSubscriptionSelector: () => websiteSubscriptionSelector,
  websiteUpdatedAttributeReplacementsSelector: () =>
    websiteUpdatedAttributeReplacementsSelector,
  websiteUpdatedItemsDisabledSelector: () =>
    websiteUpdatedItemsDisabledSelector,
  websiteUpdatedProductAttributesSelector: () =>
    websiteUpdatedProductAttributesSelector,
  websiteUrlSelector: () => websiteUrlSelector,
  websiteValidFeedsByChannelSelector: () => websiteValidFeedsByChannelSelector,
  websiteWatchingSelector: () => websiteWatchingSelector,
  websiteWideQsScoresSelector: () => websiteWideQsScoresSelector,
  websitesSelector: () => websitesSelector,
  workEmailModalOpenSelector: () => workEmailModalOpenSelector,
  workEmailSelector: () => workEmailSelector,
});

// src/selectors/accounts.jsx
var import_reselect11 = __toESM(require_lib());
var import_lodash6 = __toESM(require_lodash());
var accountsSelector = (state) => state.accounts || {};
var accountSelector = (accountId) =>
  (0, import_reselect11.createSelector)(
    [accountsSelector],
    (accounts) => accounts[accountId] || {}
  );
var accountUsersSelector = (accountId) =>
  (0, import_reselect11.createSelector)(
    [accountSelector(accountId)],
    (account) =>
      import_lodash6.default.orderBy(account.users || [], 'name', 'asc')
  );

// src/selectors/ad_groups.jsx
var import_reselect12 = __toESM(require_lib());
var paginationSearchState = (props) => {
  return props.adGroupStorePagination[
    paginationSearchParamsKey(props.searchParams)
  ];
};
var paginationSearchParamsKey = (searchParams) => {
  var result2 = '';
  Object.entries(searchParams)
    .sort()
    .forEach(([key, value]) => {
      result2 = result2.concat(key, '_', value, '_');
    });
  return result2;
};
var searchQueryState = (props) => {
  var cachedAdGroupResult = paginationSearchState(props);
  if (cachedAdGroupResult) {
    return cachedAdGroupResult['pages']['1'];
  }
  return null;
};

// src/selectors/advertising_goal_types.jsx
var import_reselect13 = __toESM(require_lib());
var advertisingGoalTypeSelector = (state) => state.advertisingGoalTypes || {};
var advertisingGoalTypesSelector = (0, import_reselect13.createSelector)(
  [advertisingGoalTypeSelector],
  (a) => a.types || []
);
var advertisingGoalTypeBudgetCategoriesSelector = (0,
import_reselect13.createSelector)(
  [advertisingGoalTypeSelector],
  (a) => a.budgetCategories || {}
);
var advertisingGoalTypeBudgetCategorySelector = (budgetCategoryId) =>
  (0, import_reselect13.createSelector)(
    [advertisingGoalTypeBudgetCategoriesSelector],
    (budgetCategories) => budgetCategories[budgetCategoryId] || {}
  );
var budgetCategoryGoalTypeSelector = (budgetCategoryId) =>
  (0, import_reselect13.createSelector)(
    [advertisingGoalTypeBudgetCategorySelector(budgetCategoryId)],
    (a) => a.goalType || ''
  );
var advertisingGoalTypesAccountTypeSelector = (accountType) =>
  (0, import_reselect13.createSelector)(
    [advertisingGoalTypeSelector],
    (advertisingGoalType) => advertisingGoalType[camelCase2(accountType)] || {}
  );
var advertisingGoalTypesAccountTypeByIdSelector = (accountType, id) =>
  (0, import_reselect13.createSelector)(
    [advertisingGoalTypesAccountTypeSelector(accountType)],
    (accountType2) => accountType2[id] || {}
  );
var advertisingGoalTypesChannelSelector = (accountType, id) =>
  (0, import_reselect13.createSelector)(
    [
      advertisingGoalTypesAccountTypeByIdSelector(accountType, id),
      defaultGoogleChannelSelector,
    ],
    (accountTypeById, channel) => accountTypeById[channel] || {}
  );
var displayConversionValueOnCostSelector = (0,
import_reselect13.createSelector)(
  [advertisingGoalTypeSelector],
  (advertisingGoalTypes) =>
    advertisingGoalTypes.displayConversionValueOnCost || false
);
var goalTypeSelector = (accountType, id) => {
  switch (accountType) {
    case 'budget_categories':
      return budgetCategoryGoalTypeSelector(id);
    case 'websites':
      return (0, import_reselect13.createSelector)(
        [advertisingGoalTypesChannelSelector(accountType, id)],
        (channel) => channel.goalType || ''
      );
    case 'accounts':
      return (0, import_reselect13.createSelector)(
        [advertisingGoalTypesChannelSelector(accountType, id)],
        (channel) => channel.goalType || ''
      );
    case 'master_accounts':
      return (0, import_reselect13.createSelector)(
        [advertisingGoalTypesChannelSelector(accountType, id)],
        (channel) => channel.goalType || ''
      );
    default:
      return () => '';
  }
};
var getGoalSuffix = (goalType, displayConversionValueOnCost) => {
  switch (goalType) {
    case 'roas':
      return displayConversionValueOnCost ? '' : '%';
    default:
      return '';
  }
};

// src/selectors/adwords_account.jsx
var import_reselect14 = __toESM(require_lib());
var reducerSelector = (state) => state.adwordsAccount;
var adwordsAccountsSelector = (0, import_reselect14.createSelector)(
  [reducerSelector],
  (reducer4) => reducer4.adwordsAccounts || []
);
var adwordsAccountsSelectOptionsSelector = (0,
import_reselect14.createSelector)([adwordsAccountsSelector], (accounts) =>
  accounts.map((a) => ({
    text: a.name ? `${a.name} (${a.id})` : `${a.id}`,
    value: a.id,
  }))
);

// src/selectors/app.jsx
var import_reselect15 = __toESM(require_lib());
var appSelector = (state) => state.app;
var matchSelector = (state, props) => props.match || {};
var paramsSelector = (0, import_reselect15.createSelector)(
  [matchSelector],
  (match) => match.params || {}
);
var appIdSelector = (0, import_reselect15.createSelector)(
  [paramsSelector],
  (params) => params.appId || ''
);
var BIG_COMMERCE_APP_ID = 'big_commerce';
var EMBEDDED_APPS = [BIG_COMMERCE_APP_ID, 'shopify_embedded', 'neto'];
var isEmbeddedApp = (appId) => EMBEDDED_APPS.includes(appId);
var isEmbeddedAppSelector = (0, import_reselect15.createSelector)(
  [appIdSelector],
  (appId) => isEmbeddedApp(appId)
);
var isBigCommerceAppSelector = (0, import_reselect15.createSelector)(
  [appIdSelector],
  (appId) => appId === BIG_COMMERCE_APP_ID
);
var isFeedAppSelector = (0, import_reselect15.createSelector)(
  [appIdSelector, isEmbeddedAppSelector],
  (appId, isEmbedded) => appId === 'feed_ops' || isEmbedded
);
var isActionsPageSelector = (_state, props) => {
  const pathNames = [
    'options',
    'new',
    'website_check',
    'feed_settings',
    'connect_',
    'ads_configurator',
    'add_user',
  ];
  return props.location && props.location.pathname
    ? pathNames.some((element) => props.location.pathname.includes(element))
    : false;
};
var showSecondaryHeaderSelector = (_state, props) => {
  const pathNames = ['ai_optimisation'];
  return props.location && props.location.pathname
    ? pathNames.some((element) => props.location.pathname.includes(element))
    : false;
};
var showSideNavSelector = (0, import_reselect15.createSelector)(
  [isActionsPageSelector, showSecondaryHeaderSelector],
  (isActionsPage, showSecondaryHeader) => !isActionsPage && !showSecondaryHeader
);
var bookAMeetingModalOpenSelector = (0, import_reselect15.createSelector)(
  [appSelector],
  (app) => app.bookAMeetingModalOpen
);
var bookAMeetingJsonDataSelector = (0, import_reselect15.createSelector)(
  [appSelector],
  (app) => app.bookAMeetingJsonData
);
var bookAMeetingMeetingTypeSelector = (0, import_reselect15.createSelector)(
  [appSelector],
  (app) => app.bookAMeetingMeetingType
);
var channelFilterModalOpenSelector = (0, import_reselect15.createSelector)(
  [appSelector],
  (app) => app.channelFilterModalOpen
);
var channelSettingsModalOpenSelector = (0, import_reselect15.createSelector)(
  [appSelector],
  (app) => app.channelSettingsModalOpen
);
var workEmailModalOpenSelector = (0, import_reselect15.createSelector)(
  [appSelector],
  (app) => app.workEmailModalOpen
);

// src/selectors/billing.jsx
var import_reselect16 = __toESM(require_lib());
var import_country_data = __toESM(require_country_data());
var billingSelector = (state) => state.billing || {};
var accountSubscriptionSelector = (0, import_reselect16.createSelector)(
  [billingSelector],
  (billing) => billing.accountSubscription || {}
);
var websiteSubscriptionSelector = (0, import_reselect16.createSelector)(
  [billingSelector],
  (billing) => billing.websiteSubscription || {}
);
var subscriptionSelector = (0, import_reselect16.createSelector)(
  [billingSelector],
  (billing) => billing.subscription || {}
);
var currentPlanIdSelector = (0, import_reselect16.createSelector)(
  [subscriptionSelector],
  (s) => s.planId || ''
);
var isManagedPlanSelector = (0, import_reselect16.createSelector)(
  [currentPlanIdSelector],
  (planId) => (planId ? planId.includes('managed') : false)
);
var currentSubscriptionStatusSelector = (0, import_reselect16.createSelector)(
  [subscriptionSelector],
  (s) => s.status || ''
);
var customerSelector = (0, import_reselect16.createSelector)(
  [billingSelector],
  (billing) => billing.customer || {}
);
var CUSTOMER_FEATURE_ASK_QUESTIONS = 'canAskQuestions';
var CUSTOMER_FEATURE_BOOK_MEETINGS = 'canBookMeetings';
var CUSTOMER_FEATURE_ADD_TEAM_MEMBERS = 'canAddTeamMembers';
var CUSTOMER_FEATURE_ADD_WEBSITES = 'canAddWebsites';
var ALL_CUSTOMER_FEATURES = [
  CUSTOMER_FEATURE_ASK_QUESTIONS,
  CUSTOMER_FEATURE_BOOK_MEETINGS,
  CUSTOMER_FEATURE_ADD_TEAM_MEMBERS,
  CUSTOMER_FEATURE_ADD_WEBSITES,
];
var customerFeaturesSelector = (0, import_reselect16.createSelector)(
  [customerSelector, superUserSelector],
  (c, s) =>
    s
      ? ALL_CUSTOMER_FEATURES.reduce((enabled, feature) => {
          enabled[feature] = true;
          return enabled;
        }, {})
      : (c.metaData && c.metaData.features) || {}
);
var customerBillingAddressSelector = (0, import_reselect16.createSelector)(
  customerSelector,
  (c) => c.billingAddress || {}
);
var customerCountrySelector = (0, import_reselect16.createSelector)(
  customerBillingAddressSelector,
  (ba) => ba.country
);
var plansSelector = (0, import_reselect16.createSelector)(
  [billingSelector],
  (billing) => billing.plans || {}
);
var plansArraySelector = (0, import_reselect16.createSelector)(
  plansSelector,
  (plans) => Object.values(plans)
);
var planCurrencies = (0, import_reselect16.createSelector)(
  plansArraySelector,
  (plans) => [...new Set(plans.map((p) => p.currencyCode))]
);
var customerCurrencySelector = (0, import_reselect16.createSelector)(
  [customerCountrySelector, subscriptionSelector, planCurrencies],
  (countryCode, subscription, currencies) => {
    var currencyForCountry =
      import_country_data.countries[countryCode] &&
      import_country_data.countries[countryCode].currencies[0];
    return (
      subscription.currencyCode ||
      (currencies.indexOf(currencyForCountry) >= 0 && currencyForCountry) ||
      'USD'
    );
  }
);
var customerPreferredCurrencySelector = (0, import_reselect16.createSelector)(
  [customerSelector],
  (customer) => {
    return customer.preferredCurrencyCode || 'USD';
  }
);
var existingAccountForContactDetailsSelector = (0,
import_reselect16.createSelector)(
  [billingSelector],
  (billing) => billing.existingAccountForContactDetails || {}
);
var existingAccountCustomerSelector = (0, import_reselect16.createSelector)(
  [existingAccountForContactDetailsSelector],
  (account) => account.customer
);
var existingAccountAccountTypeSelector = (0, import_reselect16.createSelector)(
  [existingAccountForContactDetailsSelector],
  (account) => account.accountType
);
var existingAccountAccountTypeIdSelector = (0,
import_reselect16.createSelector)(
  [existingAccountForContactDetailsSelector],
  (account) => account.accountTypeId
);
var existingAccountTypeLabelSelector = (0, import_reselect16.createSelector)(
  [
    existingAccountAccountTypeSelector,
    existingAccountAccountTypeIdSelector,
    currentUserSelector,
    websiteListSelector2,
  ],
  (accountType, accountId, user, websitesList) => {
    switch (accountType) {
      case 'master_accounts':
        return (
          (user.masterAccountList.find((ma) => ma.id === accountId) || {})
            .label || ''
        );
      case 'accounts':
        return (
          (user.accountList.find((a) => a.id === accountId) || {}).label || ''
        );
      case 'websites':
        return (
          stripProtocolFromWebsiteUrl(
            (websitesList.find((w) => w.id === accountId) || {}).url
          ) || ''
        );
      default:
        return '';
    }
  }
);
var subscriptionPlanSelector = (0, import_reselect16.createSelector)(
  [subscriptionSelector],
  (subscription) => subscription.plan || {}
);
var subscriptionPlanNameSelector = (0, import_reselect16.createSelector)(
  [subscriptionPlanSelector],
  (plan2) => plan2.name
);
var subscriptionTrialEndSelector = (0, import_reselect16.createSelector)(
  [subscriptionSelector],
  (subscription) => new Date(subscription.trialEnd * 1e3)
);
var subscriptionCurrencySelector = (0, import_reselect16.createSelector)(
  [subscriptionSelector],
  (subscription) => subscription.currencyCode || 'USD'
);
var subscriptionPlanAmountSelector = (0, import_reselect16.createSelector)(
  [subscriptionSelector],
  (subscription) => subscription.planAmount / 100
);
var subscriptionPlanUnitPriceSelector = (0, import_reselect16.createSelector)(
  [subscriptionSelector],
  (s) => (s ? s.planUnitPrice / 100 : 0)
);
var subscriptionIdSelector = (0, import_reselect16.createSelector)(
  [subscriptionSelector],
  (s) => (s ? s.id : '')
);
var PLAN_FEATURE_DIY = 'isDiy';
var PLAN_FEATURE_CATEGORY_SEO_TITLES = 'canDoCategoryLevelSeoTitles';
var PLAN_FEATURE_BULK_OPTIMISATION = 'canDoBulkOptimisation';
var PLAN_FEATURE_GENERATE_FEEDS = 'canGenerateFeeds';
var ALL_PLAN_FEATURES = [
  PLAN_FEATURE_DIY,
  PLAN_FEATURE_CATEGORY_SEO_TITLES,
  PLAN_FEATURE_BULK_OPTIMISATION,
  PLAN_FEATURE_GENERATE_FEEDS,
];
var planFeaturesSelector = (0, import_reselect16.createSelector)(
  [subscriptionPlanSelector, superUserSelector],
  (plan2, s) =>
    s
      ? ALL_PLAN_FEATURES.reduce((enabled, feature) => {
          enabled[feature] = true;
          return enabled;
        }, {})
      : plan2.features || {}
);
var createPlanFeatureSelector = (requiredFeature) =>
  (0, import_reselect16.createSelector)(
    [planFeaturesSelector],
    (features2) => features2[requiredFeature] || false
  );
var planCanDoCategoryLevelSeoTitlesSelector = createPlanFeatureSelector(
  PLAN_FEATURE_CATEGORY_SEO_TITLES
);
var planCanGenerateFeedsSelector = createPlanFeatureSelector(
  PLAN_FEATURE_GENERATE_FEEDS
);
var promptForCreditCardSelector = (0, import_reselect16.createSelector)(
  [customerSelector, isBigCommerceAppSelector],
  (customer, isBigCommerce) =>
    isBigCommerce && customer && customer.cardStatus === 'no_card'
);

// src/selectors/budget_error.jsx
var import_reselect17 = __toESM(require_lib());
var actualBudgetIssueSelector = (accountType, id) => {
  switch (accountType) {
    case 'budget_categories':
      return (0, import_reselect17.createSelector)(
        [performanceBudgetCategorySelector(id)],
        (data) => checkCorrectCurrency(data.data) || ''
      );
    default:
      return (0, import_reselect17.createSelector)(
        [performanceDataSelector(accountType, id)],
        (data) => checkCorrectCurrency(data) || ''
      );
  }
};
var targetBudgetIssueSelector = (accountType, id) =>
  (0, import_reselect17.createSelector)(
    [advertisingChannelSelector(accountType, id)],
    (channel) => channel.budgetIssue || ''
  );
var budgetIssueFormatter = (accountType, id) =>
  (0, import_reselect17.createSelector)(
    [
      actualBudgetIssueSelector(accountType, id),
      targetBudgetIssueSelector(accountType, id),
    ],
    (actualBudgetIssue, targetBudgetIssue) => {
      return actualBudgetIssue !== '' && targetBudgetIssue !== ''
        ? actualBudgetIssue + ' & ' + targetBudgetIssue
        : actualBudgetIssue + targetBudgetIssue;
    }
  );
var checkCorrectCurrency = (data) => {
  var unique = data
    .map((d) => {
      return d.currency;
    })
    .filter(onlyUnique);
  return unique.length === 1 && !unique.includes('mixed') ? unique[0] : 'mixed';
};
var onlyUnique = (value, index, self2) => {
  return self2.indexOf(value) === index && value != null;
};

// src/selectors/builds.jsx
var import_reselect18 = __toESM(require_lib());
var buildsSelector = (state) => state.builds;
var buildDetailSelector = (buildId) =>
  (0, import_reselect18.createSelector)(
    [buildsSelector],
    (builds) => builds.details[buildId] || {}
  );

// src/selectors/cost_and_goal/budget_category.jsx
var import_reselect19 = __toESM(require_lib());

// src/selectors/cost_and_goal/helper.jsx
var divideWithDivideByZeroCheck = (dividend, divisor) => {
  return divisor === 0 ? 0 : dividend / divisor;
};
var getDataUnit = (goalType, performance2) => {
  switch (goalType) {
    case 'roas':
      return performance2.totalConvValue;
    case 'cpa':
      return performance2.conversions;
    case 'cpc':
      return performance2.clicks;
    default:
      return 0;
  }
};
var selectDataUnit = (goalType, convValue, conversions, clicks) => {
  switch (goalType) {
    case 'roas':
      return convValue;
    case 'cpa':
      return conversions;
    case 'cpc':
      return clicks;
    default:
      return 0;
  }
};
var calculateGoalTargetByGoalType = (
  goalType,
  targetSpendToHitDailyGoal,
  dataUnit
) => {
  switch (goalType) {
    case 'roas':
      return divideWithDivideByZeroCheck(
        dataUnit * 100,
        targetSpendToHitDailyGoal
      );
    case 'cpa':
    case 'cpc':
      return divideWithDivideByZeroCheck(targetSpendToHitDailyGoal, dataUnit);
    default:
      return 0;
  }
};
var parseTargetsAsFloats = (
  websitePerformance,
  targets,
  targetType,
  currentTarget
) => {
  return websitePerformance.map((p) => {
    for (var i = 0; i < targets.length; i++) {
      if (dateIsLessOrEqualThan(p.day, targets[i].endDate)) {
        return { ...p, [targetType]: parseFloat(targets[i].value) };
      }
    }
    return { ...p, [targetType]: parseFloat((currentTarget || {}).value) };
  });
};
var roasActualSelector = (cost, convValue) => {
  return cost === 0 ? 0 : (convValue * 100) / cost;
};
var cpcActualSelector = (cost, clicks) => {
  return clicks === 0 ? 0 : cost / clicks;
};
var cpaActualSelector = (cost, conversions) => {
  return conversions === 0 ? 0 : cost / conversions;
};
var dateIsLessOrEqualThan = (date1, date2) => {
  const date1DMY = Date.parse(date1);
  const date2DMY = Date.parse(date2);
  return date1DMY <= date2DMY;
};

// src/selectors/cost_and_goal/budget_category.jsx
var budgetCategoryPerformanceWithGoalAndBudgetSelector = (budgetCategoryId) =>
  (0, import_reselect19.createSelector)(
    [
      budgetCategoryAdvertisingBudgetsSelector(budgetCategoryId),
      budgetCategoryAdvertisingGoalsSelector(budgetCategoryId),
      performanceBudgetCategorySelector(budgetCategoryId),
    ],
    (budgets, goals, budgetCategoryPerformanceByDay) => {
      const currentBudget = budgets[budgets.length - 1];
      const currentGoal = goals[goals.length - 1];
      var BudgetCategoryPerformanceWithGoalAndBudget = parseTargetsAsFloats(
        budgetCategoryPerformanceByDay.data || [],
        goals,
        'goal',
        currentGoal
      );
      BudgetCategoryPerformanceWithGoalAndBudget = parseTargetsAsFloats(
        BudgetCategoryPerformanceWithGoalAndBudget || [],
        budgets,
        'budget',
        currentBudget
      );
      return BudgetCategoryPerformanceWithGoalAndBudget;
    }
  );
var budgetCategoryCostTargetSelector = (budgetCategoryId) =>
  (0, import_reselect19.createSelector)(
    [budgetCategoryPerformanceWithGoalAndBudgetSelector(budgetCategoryId)],
    (budgetCategoryPerformanceWithGoalAndBudget) =>
      budgetCategoryPerformanceWithGoalAndBudget.reduce(
        (total, day) => (total += day.budget),
        0
      )
  );
var budgetCategoryConvValueTotalSelector = (budgetCategoryId) =>
  (0, import_reselect19.createSelector)(
    [performanceBudgetCategorySelector(budgetCategoryId)],
    (budgetCategoryPerformanceByDay) =>
      (budgetCategoryPerformanceByDay.data || []).reduce(
        (total, day) => (total += day.totalConvValue),
        0
      )
  );
var budgetCategoryConversionsTotalSelector = (budgetCategoryId) =>
  (0, import_reselect19.createSelector)(
    [performanceBudgetCategorySelector(budgetCategoryId)],
    (budgetCategoryPerformanceByDay) =>
      (budgetCategoryPerformanceByDay.data || []).reduce(
        (total, day) => (total += day.conversions),
        0
      )
  );
var budgetCategoryClicksTotalSelector = (budgetCategoryId) =>
  (0, import_reselect19.createSelector)(
    [performanceBudgetCategorySelector(budgetCategoryId)],
    (budgetCategoryPerformanceByDay) =>
      (budgetCategoryPerformanceByDay.data || []).reduce(
        (total, day) => (total += day.clicks),
        0
      )
  );
var budgetCategoryGoalTargetSelector = (budgetCategoryId) =>
  (0, import_reselect19.createSelector)(
    [budgetCategoryPerformanceWithGoalAndBudgetSelector(budgetCategoryId)],
    (budgetCategoryPerformanceWithGoalAndBudget) => {
      var totalGoal = budgetCategoryPerformanceWithGoalAndBudget.reduce(
        (total, day) => (total += day.goal),
        0
      );
      return totalGoal / budgetCategoryPerformanceWithGoalAndBudget.length;
    }
  );
var budgetCategoryCurrencySelector = (budgetCategoryId) =>
  (0, import_reselect19.createSelector)(
    [performanceBudgetCategorySelector(budgetCategoryId)],
    (budgetCategoryPerformanceByDay) =>
      (budgetCategoryPerformanceByDay.data[0] &&
        budgetCategoryPerformanceByDay.data[0].currency) ||
      '$'
  );
var budgetCategoryCostActualSelector = (budgetCategoryId) =>
  (0, import_reselect19.createSelector)(
    [performanceBudgetCategorySelector(budgetCategoryId)],
    (budgetCategoryPerformanceByDay) =>
      (budgetCategoryPerformanceByDay.data || []).reduce(
        (total, day) => (total += day.cost),
        0
      )
  );
var budgetCategoryGoalActualSelector = (budgetCategoryId) =>
  (0, import_reselect19.createSelector)(
    [
      budgetCategoryGoalTypeSelector(budgetCategoryId),
      budgetCategoryCostActualSelector(budgetCategoryId),
      budgetCategoryConvValueTotalSelector(budgetCategoryId),
      budgetCategoryClicksTotalSelector(budgetCategoryId),
      budgetCategoryConversionsTotalSelector(budgetCategoryId),
    ],
    (goalType, cost, convValue, clicks, conversions) => {
      switch (goalType) {
        case 'roas':
          return roasActualSelector(cost, convValue);
        case 'cpc':
          return cpcActualSelector(cost, clicks);
        case 'cpa':
          return cpaActualSelector(cost, conversions);
        default:
          return 0;
      }
    }
  );

// src/selectors/cost_and_goal/general.jsx
var import_reselect21 = __toESM(require_lib());

// src/selectors/cost_and_goal/website.jsx
var import_reselect20 = __toESM(require_lib());
var websitePerformanceWithGoalAndBudgetSelector = (websiteId) =>
  (0, import_reselect20.createSelector)(
    [
      advertisingBudgetsSelector('websites', websiteId),
      advertisingGoalsSelector('websites', websiteId),
      performanceDataSelector('websites', websiteId),
      goalTypeSelector('websites', websiteId),
      hasBudgetCategoriesSelector(websiteId),
    ],
    (budgets, goals, data, goalType, hasBudgetCategories) => {
      const currentBudget = budgets[budgets.length - 1];
      const currentGoal = goals[goals.length - 1];
      var websitePerformanceWithGoalAndBudget;
      if (hasBudgetCategories) {
        websitePerformanceWithGoalAndBudget = data.map(
          (websitePerformance) => ({
            ...websitePerformance,
            goal: calculateGoalTargetByGoalType(
              goalType,
              websitePerformance.targetSpendToHitDailyGoal,
              getDataUnit(goalType, websitePerformance)
            ),
          })
        );
      } else {
        websitePerformanceWithGoalAndBudget = parseTargetsAsFloats(
          data || [],
          goals,
          'goal',
          currentGoal
        );
      }
      websitePerformanceWithGoalAndBudget = parseTargetsAsFloats(
        websitePerformanceWithGoalAndBudget || [],
        budgets,
        'budget',
        currentBudget
      );
      return websitePerformanceWithGoalAndBudget;
    }
  );
var websiteGoalTargetSelector = (websiteId) =>
  (0, import_reselect20.createSelector)(
    [
      performanceWithGoalAndBudgetSelector('websites', websiteId),
      goalTypeSelector('websites', websiteId),
      convValueTotalSelector('websites', websiteId),
      conversionsTotalSelector('websites', websiteId),
      clicksTotalSelector('websites', websiteId),
      targetSpendToHitDailyGoalTotalSelector('websites', websiteId),
      hasBudgetCategoriesSelector(websiteId),
    ],
    (
      websitePerformanceWithGoalAndBudget,
      goalType,
      convValue,
      conversions,
      clicks,
      targetSpendToHitDailyGoal,
      hasBudgetCategories
    ) => {
      if (hasBudgetCategories) {
        return calculateGoalTargetByGoalType(
          goalType,
          targetSpendToHitDailyGoal,
          selectDataUnit(goalType, convValue, conversions, clicks)
        );
      }
      var totalGoal = websitePerformanceWithGoalAndBudget.reduce(
        (total, day) => (total += day.goal),
        0
      );
      return totalGoal / websitePerformanceWithGoalAndBudget.length;
    }
  );
var websiteCurrencySelector = (websiteId) =>
  (0, import_reselect20.createSelector)(
    [performanceDataSelector('websites', websiteId)],
    (data) => (data[0] && data[0].currency) || '$'
  );

// src/selectors/cost_and_goal/general.jsx
var costAndGoalSelector = (state) => state.costAndGoal;
var costTargetSelector = (accountType, id) =>
  (0, import_reselect21.createSelector)(
    [performanceWithGoalAndBudgetSelector(accountType, id)],
    (performance2) =>
      performance2.reduce((total, day) => (total += day.budget), 0)
  );
var costActualSelector = (accountType, id) => {
  switch (accountType) {
    case 'budget_categories':
      return budgetCategoryCostActualSelector(id);
    default:
      return (0, import_reselect21.createSelector)(
        [performanceDataSelector(accountType, id)],
        (data) => data.reduce((total, day) => (total += day.cost), 0)
      );
  }
};
var calculateGoalTargetSelector = (accountType, id) =>
  (0, import_reselect21.createSelector)(
    [
      goalTypeSelector(accountType, id),
      convValueTotalSelector(accountType, id),
      conversionsTotalSelector(accountType, id),
      clicksTotalSelector(accountType, id),
      targetSpendToHitDailyGoalTotalSelector(accountType, id),
    ],
    (goalType, convValue, conversions, clicks, targetSpendToHitDailyGoal) =>
      calculateGoalTargetByGoalType(
        goalType,
        targetSpendToHitDailyGoal,
        selectDataUnit(goalType, convValue, conversions, clicks)
      )
  );
var goalTargetSelector = (accountType, id) => {
  switch (accountType) {
    case 'budget_categories':
      return budgetCategoryGoalTargetSelector(id);
    case 'websites':
      return websiteGoalTargetSelector(id);
    case 'accounts':
      return calculateGoalTargetSelector(accountType, id);
    case 'master_accounts':
      return calculateGoalTargetSelector(accountType, id);
    default:
      return () => 0;
  }
};
var calculateGoalActualSelector = (accountType, id) =>
  (0, import_reselect21.createSelector)(
    [
      goalTypeSelector(accountType, id),
      costActualSelector(accountType, id),
      convValueTotalSelector(accountType, id),
      clicksTotalSelector(accountType, id),
      conversionsTotalSelector(accountType, id),
    ],
    (goalType, cost, convValue, clicks, conversions) => {
      switch (goalType) {
        case 'roas':
          return roasActualSelector(cost, convValue);
        case 'cpc':
          return cpcActualSelector(cost, clicks);
        case 'cpa':
          return cpaActualSelector(cost, conversions);
        default:
          return 0;
      }
    }
  );
var goalActualSelector = (accountType, id) => {
  switch (accountType) {
    case 'budget_categories':
      return budgetCategoryGoalActualSelector(id);
    case 'websites':
      return calculateGoalActualSelector(accountType, id);
    case 'accounts':
      return calculateGoalActualSelector(accountType, id);
    case 'master_accounts':
      return calculateGoalActualSelector(accountType, id);
    default:
      return () => 0;
  }
};
var getGoalTypeTitle = (goalType, displayConversionValueOnCost) => {
  switch (goalType) {
    case 'roas':
      return displayConversionValueOnCost ? 'Conv. value / cost' : 'ROAS';
    case 'cpc':
      return 'CPC';
    case 'cpa':
      return 'CPA';
    case 'max_conversion_value':
      return 'Conv. Value';
    case 'mixed':
      return 'Mixed';
    default:
      return '';
  }
};
var calculatePerformanceWithGoalAndBudgetSelector = (accountType, id) =>
  (0, import_reselect21.createSelector)(
    [
      performanceDataSelector(accountType, id),
      goalTypeSelector(accountType, id),
    ],
    (data, goalType) =>
      data.map((day) => ({
        ...day,
        goal: calculateGoalTargetByGoalType(
          goalType,
          day.targetSpendToHitDailyGoal,
          getDataUnit(goalType, day)
        ),
        budget: day.targetCost,
      }))
  );
var performanceWithGoalAndBudgetSelector = (accountType, id) => {
  switch (accountType) {
    case 'budget_categories':
      return budgetCategoryPerformanceWithGoalAndBudgetSelector(id);
    case 'websites':
      return websitePerformanceWithGoalAndBudgetSelector(id);
    case 'accounts':
      return calculatePerformanceWithGoalAndBudgetSelector(accountType, id);
    case 'master_accounts':
      return calculatePerformanceWithGoalAndBudgetSelector(accountType, id);
    default:
      return () => ({});
  }
};
var currencySelector = (accountType, id) => {
  switch (accountType) {
    case 'budget_categories':
      return budgetCategoryCurrencySelector(id);
    case 'websites':
      return websiteCurrencySelector(id);
    case 'accounts':
      return budgetIssueFormatter(accountType, id);
    case 'master_accounts':
      return budgetIssueFormatter(accountType, id);
    default:
      return () => '$';
  }
};
var convValueTotalSelector = (accountType, id) =>
  (0, import_reselect21.createSelector)(
    [performanceDataSelector(accountType, id)],
    (data) => data.reduce((total, day) => (total += day.totalConvValue), 0)
  );
var clicksTotalSelector = (accountType, id) =>
  (0, import_reselect21.createSelector)(
    [performanceDataSelector(accountType, id)],
    (data) => data.reduce((total, day) => (total += day.clicks), 0)
  );
var conversionsTotalSelector = (accountType, id) =>
  (0, import_reselect21.createSelector)(
    [performanceDataSelector(accountType, id)],
    (data) => data.reduce((total, day) => (total += day.conversions), 0)
  );
var targetSpendToHitDailyGoalTotalSelector = (accountType, id) =>
  (0, import_reselect21.createSelector)(
    [performanceDataSelector(accountType, id)],
    (data) =>
      data.reduce((total, day) => (total += day.targetSpendToHitDailyGoal), 0)
  );

// src/selectors/cost_and_goal.jsx
var import_reselect22 = __toESM(require_lib());
var configurationInProgressSelector = (accountType, id) =>
  (0, import_reselect22.createSelector)(
    [
      superUserSelector,
      goalTypeSelector(accountType, id),
      advertisingGoalsSelector(accountType, id),
      advertisingBudgetsSelector(accountType, id),
      () => accountType,
    ],
    (
      superUser,
      goalType,
      advertisingGoals,
      advertisingBudgets,
      accountType2
    ) => {
      if (!superUser) {
        if (
          !goalType ||
          advertisingGoals.length === 0 ||
          advertisingBudgets.length === 0
        ) {
          return true;
        }
      }
      return false;
    }
  );

// node_modules/date-fns/constants.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var minTime = -maxTime;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;
var constructFromSymbol = Symbol.for('constructDateFrom');

// node_modules/date-fns/constructFrom.js
function constructFrom(date, value) {
  if (typeof date === 'function') return date(value);
  if (date && typeof date === 'object' && constructFromSymbol in date)
    return date[constructFromSymbol](value);
  if (date instanceof Date) return new date.constructor(value);
  return new Date(value);
}

// node_modules/date-fns/toDate.js
function toDate(argument, context) {
  return constructFrom(context || argument, argument);
}

// node_modules/date-fns/addDays.js
function addDays(date, amount, options) {
  const _date = toDate(date, options?.in);
  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);
  if (!amount) return _date;
  _date.setDate(_date.getDate() + amount);
  return _date;
}

// src/selectors/date_ranges.jsx
var import_reselect23 = __toESM(require_lib());
var defaultDateRange = {
  startDate: addDays(/* @__PURE__ */ new Date(), -30),
  endDate: addDays(/* @__PURE__ */ new Date(), -1),
};
var dateRangesSelector = (state) => state.dateRanges;
var dateRangeSelector = (keyName) =>
  (0, import_reselect23.createSelector)(
    [dateRangesSelector],
    (dateRanges) => dateRanges[keyName] || defaultDateRange
  );
var getDateString2 = (dateInt) => {
  const date = new Date(dateInt);
  return !isNaN(date.getDate())
    ? `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`
    : '';
};

// src/selectors/features/edit.jsx
var import_reselect25 = __toESM(require_lib());

// src/selectors/features.jsx
var import_reselect24 = __toESM(require_lib());
var plan = (state) => {
  const { billing } = state;
  const { subscription } = billing || {};
  const { plan: plan2 } = subscription || {};
  return plan2 || {};
};
var customerFeatures = (state) => {
  const { billing } = state;
  const { customer } = billing || {};
  const { metaData } = customer || {};
  const { features: features2 } = metaData || {};
  return features2 || {};
};
var features = (0, import_reselect24.createSelector)(
  plan,
  customerFeatures,
  (p, customerFeatures2) => {
    const { features: features2 } = p || {};
    return { ...features2, ...customerFeatures2 };
  }
);
var featureEnabled = (feature) =>
  (0, import_reselect24.createSelector)(features, (fs) =>
    fs[feature] ? true : false
  );

// src/selectors/features/edit.jsx
var editEnabled = (0, import_reselect25.createSelector)(
  superUserSelector,
  featureEnabled('edit'),
  (su, edit) => edit || su
);

// src/selectors/feed_ops/feedbacks.jsx
var feedopsFeedbacksSelector = (state) => state.feedopsFeedbacks || {};

// src/selectors/feed_promotion_selectors.jsx
var import_reselect26 = __toESM(require_lib());
var getInventoryId = (state, props, formValues) => {
  var urlParamId = parseInt(props.match.params.inventoryId, 10);
  var formId = formValues && formValues['inventoryId'];
  return urlParamId || formId;
};
var InventoryIdSelectors = (0, import_reselect26.createSelector)(
  [getInventoryId],
  (selectors) => {
    return selectors;
  }
);
var promotionExists = (state, props, formValues) => {
  if (formValues) {
    return formValues['promotions'] > 0 ? true : false;
  } else {
    return true;
  }
};
var promotionExistsSelectors = (0, import_reselect26.createSelector)(
  [promotionExists],
  (selectors) => {
    return selectors;
  }
);

// src/selectors/feedops_testimonials.jsx
var feedopsTestimonialsSelector = (state, _props) =>
  state.feedopsTestimonials || [];

// src/selectors/feeds.jsx
var import_reselect27 = __toESM(require_lib());
var feedDetailsSelector = (state) => state.feeds.details || {};
var feedDetailSelector = (feedId) =>
  (0, import_reselect27.createSelector)(
    [feedDetailsSelector],
    (details) => details[feedId] || {}
  );

// src/selectors/geo_targets.jsx
var import_reselect28 = __toESM(require_lib());
var geoTargetsSelector = (state, _props) => state.geoTargets || {};
var countriesGeoTargetSelector = (0, import_reselect28.createSelector)(
  [geoTargetsSelector],
  (geoTargets) => geoTargets.countries || {}
);

// src/selectors/google/accounts.jsx
var import_reselect29 = __toESM(require_lib());
var adwordsAccountIdSelector = (0, import_reselect29.createSelector)(
  [websiteAdwordsSelector],
  (adwords) =>
    (adwords && adwords.adwordsAccountId) || (adwords && adwords.value) || ''
);
var createAdwordsAccountSelector = (0, import_reselect29.createSelector)(
  [websiteAdwordsSelector],
  (adwords) => adwords && adwords.createAccount
);
var merchantCenterAccountIdSelector = (0, import_reselect29.createSelector)(
  [websiteMerchantCenterSelector],
  (merchantCenter) =>
    (merchantCenter && merchantCenter.merchantCenterAccountId) || ''
);
var merchantCenterAccountNameSelector = (0, import_reselect29.createSelector)(
  [websiteMerchantCenterSelector],
  (merchantCenter) =>
    (merchantCenter && merchantCenter.merchantCenterAccountName) || ''
);
var merchantCenterAccountOauthUserSelector = (0,
import_reselect29.createSelector)(
  [websiteMerchantCenterSelector],
  (merchantCenter) => (merchantCenter && merchantCenter.oauthUser) || ''
);
var createMerchantCenterAccountSelector = (0, import_reselect29.createSelector)(
  [websiteMerchantCenterSelector],
  (merchantCenter) => merchantCenter && merchantCenter.newAccountRequired
);
var nextUploadRemoveExistingPrimaryFeedsSelector = (0,
import_reselect29.createSelector)(
  [websiteMerchantCenterSelector],
  (merchantCenter) => merchantCenter.nextUploadRemoveExistingPrimaryFeeds
);
var analyticsAccountIdSelector = (0, import_reselect29.createSelector)(
  [websiteAnalyticsSelector],
  (analytics) => (analytics && analytics.analyticsAccountId) || ''
);
var analyticsAccountNameSelector = (0, import_reselect29.createSelector)(
  [websiteAnalyticsSelector],
  (analytics) => (analytics && analytics.analyticsAccountName) || ''
);
var analyticsWebPropertyNameSelector = (0, import_reselect29.createSelector)(
  [websiteAnalyticsSelector],
  (analytics) => (analytics && analytics.webPropertyName) || ''
);
var analyticsWebPropertyIdSelector = (0, import_reselect29.createSelector)(
  [websiteAnalyticsSelector],
  (analytics) => (analytics && analytics.webPropertyId) || ''
);
var createAnalyticsAccountSelector = (0, import_reselect29.createSelector)(
  [websiteAnalyticsSelector],
  (analytics) => analytics && analytics.newAccountRequired
);

// src/selectors/google/analytics.jsx
var import_reselect30 = __toESM(require_lib());

// src/util/format_number.jsx
var formatNumber = (data, digits = 2) => {
  return data || data === 0
    ? data.toLocaleString('en-AU', {
        minimumFractionDigits: digits,
        maximumFractionDigits: digits,
      })
    : '-';
};
var getCurrencyPrefix = (currency) => {
  switch (currency) {
    case 'AUD':
      return 'A$';
    default:
      return '$';
  }
};

// src/selectors/google/analytics.jsx
var analyticsSelector = (state) => state.google.analytics || {};
var analyticsApiReadySelector = (0, import_reselect30.createSelector)(
  [analyticsSelector],
  (a) => a.analyticsApiReady || false
);
var analyticsViewsSelector = (0, import_reselect30.createSelector)(
  [analyticsSelector],
  (a) => a.analyticsViews || {}
);
var viewsSelector = (0, import_reselect30.createSelector)(
  [analyticsViewsSelector],
  (a) => a.views || []
);
var selectedViewSelector = (0, import_reselect30.createSelector)(
  [analyticsSelector],
  (a) => a.selectedView
);
var analyticsReportSelector = (0, import_reselect30.createSelector)(
  [analyticsSelector],
  (a) => a.analyticsReport || {}
);
var headersSelector = (0, import_reselect30.createSelector)(
  [analyticsReportSelector],
  (ar) => ar.headers || []
);
var rowsSelector = (0, import_reselect30.createSelector)(
  [analyticsReportSelector],
  (ar) => {
    return checkReportRows(ar.rows || []);
  }
);
var totalsSelector = (0, import_reselect30.createSelector)(
  [analyticsReportSelector],
  (analyticsReport) => analyticsReport.totals || {}
);
var calculatePercentage = (adChannelData, adChannelTotal) => {
  if (adChannelTotal === 0) {
    return null;
  }
  return (adChannelData / adChannelTotal) * 100;
};
var adChannelDataSelector = (0, import_reselect30.createSelector)(
  [rowsSelector, totalsSelector],
  (rows, totals) => {
    return rows.map((adChannelData) => {
      return {
        channel: adChannelData[0],
        sessions: parseInt(adChannelData[1], 10),
        percentageOfTotalSessions: calculatePercentage(
          parseInt(adChannelData[1], 10),
          parseInt(totals['ga:sessions'], 10)
        ),
        conversions: parseInt(adChannelData[2], 10),
        percentageOfTotalConversions: calculatePercentage(
          parseInt(adChannelData[2], 10),
          parseInt(totals['ga:transactions'], 10)
        ),
        revenue: parseFloat(adChannelData[3]),
        percentageOfTotalRevenue: calculatePercentage(
          parseFloat(adChannelData[3]),
          parseFloat(totals['ga:transactionRevenue'])
        ),
      };
    });
  }
);
var errorSelector = (0, import_reselect30.createSelector)(
  [analyticsReportSelector],
  (analyticsReport) => analyticsReport.error || null
);
var ANALYTICS_DEFAULT_AD_CHANNELS = [
  'Direct',
  'Organic Search',
  'Social',
  'Email',
  'Affiliates',
  'Referral',
  'Paid Search',
  'Other Advertising',
  'Display',
];
var checkReportRows = (rows) => {
  if (rows.length === 0) {
    return [];
  }
  let cur_rows = ANALYTICS_DEFAULT_AD_CHANNELS.reduce((prev, next) => {
    if (!rows.find((row) => row[0] === next)) {
      return prev.concat([[next, '0', '0', '0']]);
    }
    return prev;
  }, rows);
  return cur_rows.filter((row) => {
    return !(
      row[0] === '(Other)' &&
      parseFloat(row[1]) === 0 &&
      parseFloat(row[2]) === 0 &&
      parseFloat(row[3]) === 0
    );
  });
};
var abbreviateAdChannelData = (rows) => {
  return rows.map((row) => {
    const abbreviatedPercentageOfTotalSessions = formatNumber(
      row.percentageOfTotalSessions
    );
    const abbreviatedPercentageOfTotalConversions = formatNumber(
      row.percentageOfTotalConversions
    );
    const abbreviatedPercentageOfTotalRevenue = formatNumber(
      row.percentageOfTotalRevenue
    );
    return {
      channel: row.channel,
      sessions: formatNumber(row.sessions, 0),
      percentageOfTotalSessions: `${abbreviatedPercentageOfTotalSessions}${
        abbreviatedPercentageOfTotalSessions === '-'
          ? ''
          : '% of total sessions'
      }`,
      conversions: formatNumber(row.conversions),
      percentageOfTotalConversions: `${abbreviatedPercentageOfTotalConversions}${
        abbreviatedPercentageOfTotalConversions === '-'
          ? ''
          : '% of total conversions'
      }`,
      revenue: `${getCurrencyPrefix('AUD')}${formatNumber(row.revenue)}`,
      percentageOfTotalRevenue: `${abbreviatedPercentageOfTotalRevenue}${
        abbreviatedPercentageOfTotalRevenue === '-' ? '' : '% of total revenue'
      }`,
    };
  });
};
var addStaticRows = (sortedRows, adChannelTotals) => {
  sortedRows.push({
    channel: 'Total',
    sessions: formatNumber(parseInt(adChannelTotals['ga:sessions'], 10), 0),
    percentageOfTotalSessions: null,
    conversions: formatNumber(parseInt(adChannelTotals['ga:transactions'], 10)),
    percentageOfTotalConversions: null,
    revenue: `${getCurrencyPrefix('AUD')}${formatNumber(
      parseFloat(adChannelTotals['ga:transactionRevenue'])
    )}`,
    percentageOfTotalRevenue: null,
    total: true,
  });
  return sortedRows;
};
var analyticsFeedopsReportSelector = (0, import_reselect30.createSelector)(
  [analyticsSelector],
  (a) => a.analyticsFeedopsReport || {}
);

// src/selectors/google/drive_docs.jsx
var import_reselect31 = __toESM(require_lib());
var driveDocsSelector = (state) => state.driveDocs || {};
var articleSelector = (articleId) =>
  (0, import_reselect31.createSelector)(
    [driveDocsSelector],
    (driveDocs) => driveDocs[articleId] || {}
  );

// src/selectors/google/general.jsx
var import_reselect32 = __toESM(require_lib());
var generalSelector = (state) => state.google.general || {};
var analyticsAccessTokenSelector = (0, import_reselect32.createSelector)(
  [generalSelector],
  (g) => g.AnalyticsAccessToken || ''
);

// src/selectors/google/merchant_center_product_errors.jsx
var import_reselect33 = __toESM(require_lib());
var rootSelector = (state) =>
  (state.google || {}).merchantCenterProductErrors || {};
var websiteMerchantCenterProductErrorsSelector = (websiteId) =>
  (0, import_reselect33.createSelector)(
    [rootSelector],
    (root2) => root2[websiteId] || { itemCount: 0, errors: [] }
  );
var websiteDetailSelector2 = (websiteId) =>
  (0, import_reselect33.createSelector)(
    [rootSelector],
    (root2) => root2.websites[websiteId] || {}
  );
var websiteErrorCategoryIdsSelector = (websiteId, scope) =>
  (0, import_reselect33.createSelector)(
    [websiteDetailSelector2(websiteId)],
    (detail) => (detail.categoryIds || {})[scope] || []
  );
var categoriesSelector = () =>
  (0, import_reselect33.createSelector)(
    [rootSelector],
    (root2) => root2.categories || {}
  );
var websiteErrorCategoryDetailsSelector = (websiteId, scope) =>
  (0, import_reselect33.createSelector)(
    [categoriesSelector(), websiteErrorCategoryIdsSelector(websiteId, scope)],
    (categories, ids) => {
      return ids.map((id) => categories[id] || {});
    }
  );
var errorsSelector = () =>
  (0, import_reselect33.createSelector)(
    [rootSelector],
    (root2) => root2.errors || {}
  );
var errorsListSelector = () =>
  (0, import_reselect33.createSelector)(
    [errorsSelector()],
    (errors) => errors.errors || []
  );
var errorTypeIdsSelector = () =>
  (0, import_reselect33.createSelector)([errorsListSelector()], (errorsList) =>
    errorsList.map((error) => error.errorTypeId)
  );
var errorTypesSelector = () =>
  (0, import_reselect33.createSelector)(
    [rootSelector],
    (root2) => root2.errorTypes || {}
  );
var errorTypeCategoryIdsSelector = () =>
  (0, import_reselect33.createSelector)(
    [errorTypesSelector()],
    (errorTypes) => {
      var categoryIds = [];
      for (var id in errorTypes) {
        const errorType = errorTypes[id];
        categoryIds.push(errorType.categoryId);
      }
      return categoryIds;
    }
  );
var errorCountSelector = () =>
  (0, import_reselect33.createSelector)(
    [categoriesSelector(), errorTypeCategoryIdsSelector()],
    (categories, categoryIds) => {
      var errorCount = 0;
      for (var categoryId of categoryIds) {
        categories[categoryId].level === 'error' && errorCount++;
      }
      return errorCount;
    }
  );
var warningCountSelector = () =>
  (0, import_reselect33.createSelector)(
    [categoriesSelector(), errorTypeCategoryIdsSelector()],
    (categories, categoryIds) => {
      var warningCount = 0;
      for (var categoryId of categoryIds) {
        categories[categoryId].level === 'warning' && warningCount++;
      }
      return warningCount;
    }
  );

// src/selectors/google/merchant_center_product_info_and_measures.jsx
var import_reselect34 = __toESM(require_lib());
var merchantCenterProductInfoAndMeasuresSelector = (state) =>
  (state.google || {}).merchantCenterProductInfoAndMeasures || {};
var merchantCenterWebsitesSelector = (0, import_reselect34.createSelector)(
  [merchantCenterProductInfoAndMeasuresSelector],
  (merchantCenterProductInfoAndMeasures) =>
    merchantCenterProductInfoAndMeasures.websites || {}
);
var merchantCenterAccountTypeSelector = (accountType) =>
  (0, import_reselect34.createSelector)(
    [merchantCenterProductInfoAndMeasuresSelector],
    (merchantCenterProductInfoAndMeasures) =>
      merchantCenterProductInfoAndMeasures[accountType] || {}
  );
var websiteMerchantCenterProductInfoAndMeasuresSelector = (websiteId) =>
  (0, import_reselect34.createSelector)(
    [merchantCenterWebsitesSelector],
    (merchantCenterWebsites) => merchantCenterWebsites[websiteId] || {}
  );
var merchantCenterProductInfoAndMeasuresByIdSelector = (accountType, id) =>
  (0, import_reselect34.createSelector)(
    [merchantCenterAccountTypeSelector(accountType)],
    (merchantCenterAccountType) => merchantCenterAccountType[id] || {}
  );
var systemWideMerchantCenterProductInfoAndMeasuresSelector = (0,
import_reselect34.createSelector)(
  [merchantCenterProductInfoAndMeasuresSelector],
  (merchantCenterProductInfoAndMeasures) =>
    merchantCenterProductInfoAndMeasures.systemWideProductInfoAndMeasures || {}
);
var productInfoAndMeasuresDifferenceSelector = (websiteId) =>
  (0, import_reselect34.createSelector)(
    [
      websiteMerchantCenterProductInfoAndMeasuresSelector(websiteId),
      systemWideMerchantCenterProductInfoAndMeasuresSelector,
    ],
    (website, systemWide) => {
      if (
        Object.keys(website).length > 0 &&
        Object.keys(systemWide).length > 0
      ) {
        var difference = {};
        for (var key in website) {
          difference[key] = website[key] - systemWide[key];
        }
        return difference;
      }
      return {};
    }
  );
var rowData = [
  {
    rowName: 'Percentage of products approved',
    attribute: 'percentSkusApproved',
  },
  {
    rowName: 'Percentage of optimal product titles',
    attribute: 'percentTitlesWithKeyInfo',
  },
  {
    rowName: 'Percentage of products with all key attributes',
    attribute: 'percentProductsWithKeyAttrs',
  },
  {
    rowName: 'Category/Product type depth',
    attribute: 'avgCategoryAndProductTypeDepth',
  },
];
var conditionallyCalculatePercentage = (value, rowName) => {
  return value ? (rowName.includes('Percentage') ? value * 100 : value) : 0;
};
var merchantCenterDiagnosticsDataSelector = (websiteId) =>
  (0, import_reselect34.createSelector)(
    [
      websiteMerchantCenterProductInfoAndMeasuresSelector(websiteId),
      systemWideMerchantCenterProductInfoAndMeasuresSelector,
    ],
    (
      merchantCenterProductInfoAndMeasures,
      systemWideMerchantCenterProductInfoAndMeasures
    ) => {
      return rowData.map((row, index) => {
        return {
          rowName: row.rowName,
          yourAccount: conditionallyCalculatePercentage(
            merchantCenterProductInfoAndMeasures[rowData[index].attribute],
            row.rowName
          ).toFixed(),
          others: conditionallyCalculatePercentage(
            systemWideMerchantCenterProductInfoAndMeasures[
              rowData[index].attribute
            ],
            row.rowName
          ).toFixed(),
          difference: conditionallyCalculatePercentage(
            merchantCenterProductInfoAndMeasures[rowData[index].attribute] -
              systemWideMerchantCenterProductInfoAndMeasures[
                rowData[index].attribute
              ],
            row.rowName
          ).toFixed(),
        };
      });
    }
  );
var accountMerchantCenterStatusSelector = (accountId) =>
  (0, import_reselect34.createSelector)(
    [merchantCenterProductInfoAndMeasuresByIdSelector('accounts', accountId)],
    (merchantCenterProductInfoAndMeasuresById) =>
      merchantCenterProductInfoAndMeasuresById.accountMerchantCenterStatus || []
  );
var websiteMerchantCenterStatusSelector = (websiteId) =>
  (0, import_reselect34.createSelector)(
    [merchantCenterProductInfoAndMeasuresByIdSelector('websites', websiteId)],
    (merchantCenterProductInfoAndMeasuresById) =>
      merchantCenterProductInfoAndMeasuresById.merchantCenterStatus || {}
  );

// src/selectors/google/taxonomies.jsx
var import_reselect35 = __toESM(require_lib());
var taxonomiesSelector = (state, _props) =>
  (state.google || {}).taxonomies || {};
var taxonomiesOptionsSelector = (0, import_reselect35.createSelector)(
  [taxonomiesSelector],
  (taxonomies) => {
    var options = [];
    Object.entries(taxonomies).forEach(([id, fullName]) => {
      options.push({ label: fullName, value: id });
    });
    return options;
  }
);

// src/selectors/inventories/rules.jsx
var import_reselect36 = __toESM(require_lib());
var rulesSelector = (state) => state.rules || {};
var websiteRulesSelector = (0, import_reselect36.createSelector)(
  [rulesSelector, websiteIdSelector],
  (rules, websiteId) => rules[websiteId] || {}
);
var actionTypesSelector = (0, import_reselect36.createSelector)(
  [rulesSelector],
  (rules) => rules.actionTypes || {}
);
var actionTypeSelector = (actionTypeId) =>
  (0, import_reselect36.createSelector)(
    [actionTypesSelector],
    (actionTypes) => actionTypes[actionTypeId] || {}
  );

// src/selectors/inventories/vendors.jsx
var import_reselect38 = __toESM(require_lib());

// src/selectors/websites/channel_settings.jsx
var import_reselect37 = __toESM(require_lib());

// node_modules/redux/dist/redux.mjs
var $$observable = /* @__PURE__ */ (() =>
  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')();
var symbol_observable_default = $$observable;
var randomString = () =>
  Math.random().toString(36).substring(7).split('').join('.');
var ActionTypes = {
  INIT: `@@redux/INIT${/* @__PURE__ */ randomString()}`,
  REPLACE: `@@redux/REPLACE${/* @__PURE__ */ randomString()}`,
  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`,
};
var actionTypes_default = ActionTypes;
function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  let proto = obj;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return (
    Object.getPrototypeOf(obj) === proto || Object.getPrototypeOf(obj) === null
  );
}
function miniKindOf(val) {
  if (val === void 0) return 'undefined';
  if (val === null) return 'null';
  const type = typeof val;
  switch (type) {
    case 'boolean':
    case 'string':
    case 'number':
    case 'symbol':
    case 'function': {
      return type;
    }
  }
  if (Array.isArray(val)) return 'array';
  if (isDate(val)) return 'date';
  if (isError(val)) return 'error';
  const constructorName = ctorName(val);
  switch (constructorName) {
    case 'Symbol':
    case 'Promise':
    case 'WeakMap':
    case 'WeakSet':
    case 'Map':
    case 'Set':
      return constructorName;
  }
  return Object.prototype.toString
    .call(val)
    .slice(8, -1)
    .toLowerCase()
    .replace(/\s/g, '');
}
function ctorName(val) {
  return typeof val.constructor === 'function' ? val.constructor.name : null;
}
function isError(val) {
  return (
    val instanceof Error ||
    (typeof val.message === 'string' &&
      val.constructor &&
      typeof val.constructor.stackTraceLimit === 'number')
  );
}
function isDate(val) {
  if (val instanceof Date) return true;
  return (
    typeof val.toDateString === 'function' &&
    typeof val.getDate === 'function' &&
    typeof val.setDate === 'function'
  );
}
function kindOf(val) {
  let typeOfVal = typeof val;
  if (true) {
    typeOfVal = miniKindOf(val);
  }
  return typeOfVal;
}
function createStore(reducer4, preloadedState, enhancer) {
  if (typeof reducer4 !== 'function') {
    throw new Error(
      false
        ? formatProdErrorMessage(2)
        : `Expected the root reducer to be a function. Instead, received: '${kindOf(
            reducer4
          )}'`
    );
  }
  if (
    (typeof preloadedState === 'function' && typeof enhancer === 'function') ||
    (typeof enhancer === 'function' && typeof arguments[3] === 'function')
  ) {
    throw new Error(
      false
        ? formatProdErrorMessage(0)
        : 'It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.'
    );
  }
  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = void 0;
  }
  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error(
        false
          ? formatProdErrorMessage(1)
          : `Expected the enhancer to be a function. Instead, received: '${kindOf(
              enhancer
            )}'`
      );
    }
    return enhancer(createStore)(reducer4, preloadedState);
  }
  let currentReducer = reducer4;
  let currentState = preloadedState;
  let currentListeners = /* @__PURE__ */ new Map();
  let nextListeners = currentListeners;
  let listenerIdCounter = 0;
  let isDispatching = false;
  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = /* @__PURE__ */ new Map();
      currentListeners.forEach((listener2, key) => {
        nextListeners.set(key, listener2);
      });
    }
  }
  function getState() {
    if (isDispatching) {
      throw new Error(
        false
          ? formatProdErrorMessage(3)
          : 'You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.'
      );
    }
    return currentState;
  }
  function subscribe(listener2) {
    if (typeof listener2 !== 'function') {
      throw new Error(
        false
          ? formatProdErrorMessage(4)
          : `Expected the listener to be a function. Instead, received: '${kindOf(
              listener2
            )}'`
      );
    }
    if (isDispatching) {
      throw new Error(
        false
          ? formatProdErrorMessage(5)
          : 'You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.'
      );
    }
    let isSubscribed = true;
    ensureCanMutateNextListeners();
    const listenerId = listenerIdCounter++;
    nextListeners.set(listenerId, listener2);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }
      if (isDispatching) {
        throw new Error(
          false
            ? formatProdErrorMessage(6)
            : 'You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.'
        );
      }
      isSubscribed = false;
      ensureCanMutateNextListeners();
      nextListeners.delete(listenerId);
      currentListeners = null;
    };
  }
  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error(
        false
          ? formatProdErrorMessage(7)
          : `Actions must be plain objects. Instead, the actual type was: '${kindOf(
              action
            )}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`
      );
    }
    if (typeof action.type === 'undefined') {
      throw new Error(
        false
          ? formatProdErrorMessage(8)
          : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.'
      );
    }
    if (typeof action.type !== 'string') {
      throw new Error(
        false
          ? formatProdErrorMessage(17)
          : `Action "type" property must be a string. Instead, the actual type was: '${kindOf(
              action.type
            )}'. Value was: '${action.type}' (stringified)`
      );
    }
    if (isDispatching) {
      throw new Error(
        false ? formatProdErrorMessage(9) : 'Reducers may not dispatch actions.'
      );
    }
    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }
    const listeners = (currentListeners = nextListeners);
    listeners.forEach((listener2) => {
      listener2();
    });
    return action;
  }
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error(
        false
          ? formatProdErrorMessage(10)
          : `Expected the nextReducer to be a function. Instead, received: '${kindOf(
              nextReducer
            )}`
      );
    }
    currentReducer = nextReducer;
    dispatch({
      type: actionTypes_default.REPLACE,
    });
  }
  function observable() {
    const outerSubscribe = subscribe;
    return {
      /**
       * The minimal observable subscription method.
       * @param observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe(observer) {
        if (typeof observer !== 'object' || observer === null) {
          throw new Error(
            false
              ? formatProdErrorMessage(11)
              : `Expected the observer to be an object. Instead, received: '${kindOf(
                  observer
                )}'`
          );
        }
        function observeState() {
          const observerAsObserver = observer;
          if (observerAsObserver.next) {
            observerAsObserver.next(getState());
          }
        }
        observeState();
        const unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe,
        };
      },
      [symbol_observable_default]() {
        return this;
      },
    };
  }
  dispatch({
    type: actionTypes_default.INIT,
  });
  const store2 = {
    dispatch,
    subscribe,
    getState,
    replaceReducer,
    [symbol_observable_default]: observable,
  };
  return store2;
}
function warning(message) {
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (e) {}
}
function getUnexpectedStateShapeWarningMessage(
  inputState,
  reducers6,
  action,
  unexpectedKeyCache
) {
  const reducerKeys = Object.keys(reducers6);
  const argumentName =
    action && action.type === actionTypes_default.INIT
      ? 'preloadedState argument passed to createStore'
      : 'previous state received by the reducer';
  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.';
  }
  if (!isPlainObject(inputState)) {
    return `The ${argumentName} has unexpected type of "${kindOf(
      inputState
    )}". Expected argument to be an object with the following keys: "${reducerKeys.join(
      '", "'
    )}"`;
  }
  const unexpectedKeys = Object.keys(inputState).filter(
    (key) => !reducers6.hasOwnProperty(key) && !unexpectedKeyCache[key]
  );
  unexpectedKeys.forEach((key) => {
    unexpectedKeyCache[key] = true;
  });
  if (action && action.type === actionTypes_default.REPLACE) return;
  if (unexpectedKeys.length > 0) {
    return `Unexpected ${
      unexpectedKeys.length > 1 ? 'keys' : 'key'
    } "${unexpectedKeys.join(
      '", "'
    )}" found in ${argumentName}. Expected to find one of the known reducer keys instead: "${reducerKeys.join(
      '", "'
    )}". Unexpected keys will be ignored.`;
  }
}
function assertReducerShape(reducers6) {
  Object.keys(reducers6).forEach((key) => {
    const reducer4 = reducers6[key];
    const initialState51 = reducer4(void 0, {
      type: actionTypes_default.INIT,
    });
    if (typeof initialState51 === 'undefined') {
      throw new Error(
        false
          ? formatProdErrorMessage(12)
          : `The slice reducer for key "${key}" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`
      );
    }
    if (
      typeof reducer4(void 0, {
        type: actionTypes_default.PROBE_UNKNOWN_ACTION(),
      }) === 'undefined'
    ) {
      throw new Error(
        false
          ? formatProdErrorMessage(13)
          : `The slice reducer for key "${key}" returned undefined when probed with a random type. Don't try to handle '${actionTypes_default.INIT}' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`
      );
    }
  });
}
function combineReducers(reducers6) {
  const reducerKeys = Object.keys(reducers6);
  const finalReducers = {};
  for (let i = 0; i < reducerKeys.length; i++) {
    const key = reducerKeys[i];
    if (true) {
      if (typeof reducers6[key] === 'undefined') {
        warning(`No reducer provided for key "${key}"`);
      }
    }
    if (typeof reducers6[key] === 'function') {
      finalReducers[key] = reducers6[key];
    }
  }
  const finalReducerKeys = Object.keys(finalReducers);
  let unexpectedKeyCache;
  if (true) {
    unexpectedKeyCache = {};
  }
  let shapeAssertionError;
  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }
  return function combination(state = {}, action) {
    if (shapeAssertionError) {
      throw shapeAssertionError;
    }
    if (true) {
      const warningMessage = getUnexpectedStateShapeWarningMessage(
        state,
        finalReducers,
        action,
        unexpectedKeyCache
      );
      if (warningMessage) {
        warning(warningMessage);
      }
    }
    let hasChanged = false;
    const nextState = {};
    for (let i = 0; i < finalReducerKeys.length; i++) {
      const key = finalReducerKeys[i];
      const reducer4 = finalReducers[key];
      const previousStateForKey = state[key];
      const nextStateForKey = reducer4(previousStateForKey, action);
      if (typeof nextStateForKey === 'undefined') {
        const actionType = action && action.type;
        throw new Error(
          false
            ? formatProdErrorMessage(14)
            : `When called with an action of type ${
                actionType ? `"${String(actionType)}"` : '(unknown type)'
              }, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`
        );
      }
      nextState[key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    hasChanged =
      hasChanged || finalReducerKeys.length !== Object.keys(state).length;
    return hasChanged ? nextState : state;
  };
}
function compose2(...funcs) {
  if (funcs.length === 0) {
    return (arg) => arg;
  }
  if (funcs.length === 1) {
    return funcs[0];
  }
  return funcs.reduce(
    (a, b) =>
      (...args) =>
        a(b(...args))
  );
}
function applyMiddleware(...middlewares) {
  return (createStore2) => (reducer4, preloadedState) => {
    const store2 = createStore2(reducer4, preloadedState);
    let dispatch = () => {
      throw new Error(
        false
          ? formatProdErrorMessage(15)
          : 'Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.'
      );
    };
    const middlewareAPI = {
      getState: store2.getState,
      dispatch: (action, ...args) => dispatch(action, ...args),
    };
    const chain2 = middlewares.map((middleware) => middleware(middlewareAPI));
    dispatch = compose2(...chain2)(store2.dispatch);
    return {
      ...store2,
      dispatch,
    };
  };
}
function isAction(action) {
  return (
    isPlainObject(action) && 'type' in action && typeof action.type === 'string'
  );
}

// node_modules/redux-thunk/dist/redux-thunk.mjs
function createThunkMiddleware(extraArgument) {
  const middleware =
    ({ dispatch, getState }) =>
    (next) =>
    (action) => {
      if (typeof action === 'function') {
        return action(dispatch, getState, extraArgument);
      }
      return next(action);
    };
  return middleware;
}
var thunk = createThunkMiddleware();
var withExtraArgument = createThunkMiddleware;

// node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs
var composeWithDevTools =
  typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__
    : function () {
        if (arguments.length === 0) return void 0;
        if (typeof arguments[0] === 'object') return compose2;
        return compose2.apply(null, arguments);
      };
var devToolsEnhancer =
  typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__
    ? window.__REDUX_DEVTOOLS_EXTENSION__
    : function () {
        return function (noop3) {
          return noop3;
        };
      };
var hasMatchFunction = (v) => {
  return v && typeof v.match === 'function';
};
function createAction(type, prepareAction) {
  function actionCreator(...args) {
    if (prepareAction) {
      let prepared = prepareAction(...args);
      if (!prepared) {
        throw new Error(
          false
            ? formatProdErrorMessage(0)
            : 'prepareAction did not return an object'
        );
      }
      return {
        type,
        payload: prepared.payload,
        ...('meta' in prepared && {
          meta: prepared.meta,
        }),
        ...('error' in prepared && {
          error: prepared.error,
        }),
      };
    }
    return {
      type,
      payload: args[0],
    };
  }
  actionCreator.toString = () => `${type}`;
  actionCreator.type = type;
  actionCreator.match = (action) => isAction(action) && action.type === type;
  return actionCreator;
}
function isActionCreator(action) {
  return (
    typeof action === 'function' &&
    'type' in action && // hasMatchFunction only wants Matchers but I don't see the point in rewriting it
    hasMatchFunction(action)
  );
}
function getMessage(type) {
  const splitType = type ? `${type}`.split('/') : [];
  const actionName = splitType[splitType.length - 1] || 'actionCreator';
  return `Detected an action creator with type "${
    type || 'unknown'
  }" being dispatched. 
Make sure you're calling the action creator before dispatching, i.e. \`dispatch(${actionName}())\` instead of \`dispatch(${actionName})\`. This is necessary even if the action has no payload.`;
}
function createActionCreatorInvariantMiddleware(options = {}) {
  if (false) {
    return () => (next) => (action) => next(action);
  }
  const { isActionCreator: isActionCreator2 = isActionCreator } = options;
  return () => (next) => (action) => {
    if (isActionCreator2(action)) {
      console.warn(getMessage(action.type));
    }
    return next(action);
  };
}
function getTimeMeasureUtils(maxDelay, fnName) {
  let elapsed = 0;
  return {
    measureTime(fn) {
      const started = Date.now();
      try {
        return fn();
      } finally {
        const finished = Date.now();
        elapsed += finished - started;
      }
    },
    warnIfExceeded() {
      if (elapsed > maxDelay) {
        console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. 
If your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.
It is disabled in production builds, so you don't need to worry about that.`);
      }
    },
  };
}
var Tuple = class _Tuple extends Array {
  constructor(...items) {
    super(...items);
    Object.setPrototypeOf(this, _Tuple.prototype);
  }
  static get [Symbol.species]() {
    return _Tuple;
  }
  concat(...arr) {
    return super.concat.apply(this, arr);
  }
  prepend(...arr) {
    if (arr.length === 1 && Array.isArray(arr[0])) {
      return new _Tuple(...arr[0].concat(this));
    }
    return new _Tuple(...arr.concat(this));
  }
};
function isImmutableDefault(value) {
  return typeof value !== 'object' || value == null || Object.isFrozen(value);
}
function trackForMutations(isImmutable, ignorePaths, obj) {
  const trackedProperties = trackProperties(isImmutable, ignorePaths, obj);
  return {
    detectMutations() {
      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);
    },
  };
}
function trackProperties(
  isImmutable,
  ignorePaths = [],
  obj,
  path = '',
  checkedObjects = /* @__PURE__ */ new Set()
) {
  const tracked = {
    value: obj,
  };
  if (!isImmutable(obj) && !checkedObjects.has(obj)) {
    checkedObjects.add(obj);
    tracked.children = {};
    for (const key in obj) {
      const childPath = path ? path + '.' + key : key;
      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
        continue;
      }
      tracked.children[key] = trackProperties(
        isImmutable,
        ignorePaths,
        obj[key],
        childPath
      );
    }
  }
  return tracked;
}
function detectMutations(
  isImmutable,
  ignoredPaths = [],
  trackedProperty,
  obj,
  sameParentRef = false,
  path = ''
) {
  const prevObj = trackedProperty ? trackedProperty.value : void 0;
  const sameRef = prevObj === obj;
  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
    return {
      wasMutated: true,
      path,
    };
  }
  if (isImmutable(prevObj) || isImmutable(obj)) {
    return {
      wasMutated: false,
    };
  }
  const keysToDetect = {};
  for (let key in trackedProperty.children) {
    keysToDetect[key] = true;
  }
  for (let key in obj) {
    keysToDetect[key] = true;
  }
  const hasIgnoredPaths = ignoredPaths.length > 0;
  for (let key in keysToDetect) {
    const nestedPath = path ? path + '.' + key : key;
    if (hasIgnoredPaths) {
      const hasMatches = ignoredPaths.some((ignored) => {
        if (ignored instanceof RegExp) {
          return ignored.test(nestedPath);
        }
        return nestedPath === ignored;
      });
      if (hasMatches) {
        continue;
      }
    }
    const result2 = detectMutations(
      isImmutable,
      ignoredPaths,
      trackedProperty.children[key],
      obj[key],
      sameRef,
      nestedPath
    );
    if (result2.wasMutated) {
      return result2;
    }
  }
  return {
    wasMutated: false,
  };
}
function createImmutableStateInvariantMiddleware(options = {}) {
  if (false) {
    return () => (next) => (action) => next(action);
  } else {
    let stringify22 = function (obj, serializer, indent, decycler) {
        return JSON.stringify(obj, getSerialize2(serializer, decycler), indent);
      },
      getSerialize2 = function (serializer, decycler) {
        let stack = [],
          keys2 = [];
        if (!decycler)
          decycler = function (_15, value) {
            if (stack[0] === value) return '[Circular ~]';
            return (
              '[Circular ~.' +
              keys2.slice(0, stack.indexOf(value)).join('.') +
              ']'
            );
          };
        return function (key, value) {
          if (stack.length > 0) {
            var thisPos = stack.indexOf(this);
            ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
            ~thisPos ? keys2.splice(thisPos, Infinity, key) : keys2.push(key);
            if (~stack.indexOf(value)) value = decycler.call(this, key, value);
          } else stack.push(value);
          return serializer == null ? value : serializer.call(this, key, value);
        };
      };
    var stringify2 = stringify22,
      getSerialize = getSerialize2;
    let {
      isImmutable = isImmutableDefault,
      ignoredPaths,
      warnAfter = 32,
    } = options;
    const track = trackForMutations.bind(null, isImmutable, ignoredPaths);
    return ({ getState }) => {
      let state = getState();
      let tracker = track(state);
      let result2;
      return (next) => (action) => {
        const measureUtils = getTimeMeasureUtils(
          warnAfter,
          'ImmutableStateInvariantMiddleware'
        );
        measureUtils.measureTime(() => {
          state = getState();
          result2 = tracker.detectMutations();
          tracker = track(state);
          if (result2.wasMutated) {
            throw new Error(
              false
                ? formatProdErrorMessage(19)
                : `A state mutation was detected between dispatches, in the path '${
                    result2.path || ''
                  }'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`
            );
          }
        });
        const dispatchedAction = next(action);
        measureUtils.measureTime(() => {
          state = getState();
          result2 = tracker.detectMutations();
          tracker = track(state);
          if (result2.wasMutated) {
            throw new Error(
              false
                ? formatProdErrorMessage(20)
                : `A state mutation was detected inside a dispatch, in the path: ${
                    result2.path || ''
                  }. Take a look at the reducer(s) handling the action ${stringify22(
                    action
                  )}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`
            );
          }
        });
        measureUtils.warnIfExceeded();
        return dispatchedAction;
      };
    };
  }
}
function isPlain(val) {
  const type = typeof val;
  return (
    val == null ||
    type === 'string' ||
    type === 'boolean' ||
    type === 'number' ||
    Array.isArray(val) ||
    isPlainObject(val)
  );
}
function findNonSerializableValue(
  value,
  path = '',
  isSerializable = isPlain,
  getEntries,
  ignoredPaths = [],
  cache2
) {
  let foundNestedSerializable;
  if (!isSerializable(value)) {
    return {
      keyPath: path || '<root>',
      value,
    };
  }
  if (typeof value !== 'object' || value === null) {
    return false;
  }
  if (cache2?.has(value)) return false;
  const entries =
    getEntries != null ? getEntries(value) : Object.entries(value);
  const hasIgnoredPaths = ignoredPaths.length > 0;
  for (const [key, nestedValue] of entries) {
    const nestedPath = path ? path + '.' + key : key;
    if (hasIgnoredPaths) {
      const hasMatches = ignoredPaths.some((ignored) => {
        if (ignored instanceof RegExp) {
          return ignored.test(nestedPath);
        }
        return nestedPath === ignored;
      });
      if (hasMatches) {
        continue;
      }
    }
    if (!isSerializable(nestedValue)) {
      return {
        keyPath: nestedPath,
        value: nestedValue,
      };
    }
    if (typeof nestedValue === 'object') {
      foundNestedSerializable = findNonSerializableValue(
        nestedValue,
        nestedPath,
        isSerializable,
        getEntries,
        ignoredPaths,
        cache2
      );
      if (foundNestedSerializable) {
        return foundNestedSerializable;
      }
    }
  }
  if (cache2 && isNestedFrozen(value)) cache2.add(value);
  return false;
}
function isNestedFrozen(value) {
  if (!Object.isFrozen(value)) return false;
  for (const nestedValue of Object.values(value)) {
    if (typeof nestedValue !== 'object' || nestedValue === null) continue;
    if (!isNestedFrozen(nestedValue)) return false;
  }
  return true;
}
function createSerializableStateInvariantMiddleware(options = {}) {
  if (false) {
    return () => (next) => (action) => next(action);
  } else {
    const {
      isSerializable = isPlain,
      getEntries,
      ignoredActions = [],
      ignoredActionPaths = ['meta.arg', 'meta.baseQueryMeta'],
      ignoredPaths = [],
      warnAfter = 32,
      ignoreState = false,
      ignoreActions = false,
      disableCache = false,
    } = options;
    const cache2 =
      !disableCache && WeakSet ? /* @__PURE__ */ new WeakSet() : void 0;
    return (storeAPI) => (next) => (action) => {
      if (!isAction(action)) {
        return next(action);
      }
      const result2 = next(action);
      const measureUtils = getTimeMeasureUtils(
        warnAfter,
        'SerializableStateInvariantMiddleware'
      );
      if (
        !ignoreActions &&
        !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)
      ) {
        measureUtils.measureTime(() => {
          const foundActionNonSerializableValue = findNonSerializableValue(
            action,
            '',
            isSerializable,
            getEntries,
            ignoredActionPaths,
            cache2
          );
          if (foundActionNonSerializableValue) {
            const { keyPath, value } = foundActionNonSerializableValue;
            console.error(
              `A non-serializable value was detected in an action, in the path: \`${keyPath}\`. Value:`,
              value,
              '\nTake a look at the logic that dispatched this action: ',
              action,
              '\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)',
              '\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)'
            );
          }
        });
      }
      if (!ignoreState) {
        measureUtils.measureTime(() => {
          const state = storeAPI.getState();
          const foundStateNonSerializableValue = findNonSerializableValue(
            state,
            '',
            isSerializable,
            getEntries,
            ignoredPaths,
            cache2
          );
          if (foundStateNonSerializableValue) {
            const { keyPath, value } = foundStateNonSerializableValue;
            console.error(
              `A non-serializable value was detected in the state, in the path: \`${keyPath}\`. Value:`,
              value,
              `
Take a look at the reducer(s) handling this action type: ${action.type}.
(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`
            );
          }
        });
        measureUtils.warnIfExceeded();
      }
      return result2;
    };
  }
}
function isBoolean2(x) {
  return typeof x === 'boolean';
}
var buildGetDefaultMiddleware = () =>
  function getDefaultMiddleware(options) {
    const {
      thunk: thunk2 = true,
      immutableCheck = true,
      serializableCheck = true,
      actionCreatorCheck = true,
    } = options ?? {};
    let middlewareArray = new Tuple();
    if (thunk2) {
      if (isBoolean2(thunk2)) {
        middlewareArray.push(thunk);
      } else {
        middlewareArray.push(withExtraArgument(thunk2.extraArgument));
      }
    }
    if (true) {
      if (immutableCheck) {
        let immutableOptions = {};
        if (!isBoolean2(immutableCheck)) {
          immutableOptions = immutableCheck;
        }
        middlewareArray.unshift(
          createImmutableStateInvariantMiddleware(immutableOptions)
        );
      }
      if (serializableCheck) {
        let serializableOptions = {};
        if (!isBoolean2(serializableCheck)) {
          serializableOptions = serializableCheck;
        }
        middlewareArray.push(
          createSerializableStateInvariantMiddleware(serializableOptions)
        );
      }
      if (actionCreatorCheck) {
        let actionCreatorOptions = {};
        if (!isBoolean2(actionCreatorCheck)) {
          actionCreatorOptions = actionCreatorCheck;
        }
        middlewareArray.unshift(
          createActionCreatorInvariantMiddleware(actionCreatorOptions)
        );
      }
    }
    return middlewareArray;
  };
var SHOULD_AUTOBATCH = 'RTK_autoBatch';
var createQueueWithTimer = (timeout) => {
  return (notify) => {
    setTimeout(notify, timeout);
  };
};
var autoBatchEnhancer =
  (
    options = {
      type: 'raf',
    }
  ) =>
  (next) =>
  (...args) => {
    const store2 = next(...args);
    let notifying = true;
    let shouldNotifyAtEndOfTick = false;
    let notificationQueued = false;
    const listeners = /* @__PURE__ */ new Set();
    const queueCallback =
      options.type === 'tick'
        ? queueMicrotask
        : options.type === 'raf'
        ? // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.
          typeof window !== 'undefined' && window.requestAnimationFrame
          ? window.requestAnimationFrame
          : createQueueWithTimer(10)
        : options.type === 'callback'
        ? options.queueNotification
        : createQueueWithTimer(options.timeout);
    const notifyListeners = () => {
      notificationQueued = false;
      if (shouldNotifyAtEndOfTick) {
        shouldNotifyAtEndOfTick = false;
        listeners.forEach((l) => l());
      }
    };
    return Object.assign({}, store2, {
      // Override the base `store.subscribe` method to keep original listeners
      // from running if we're delaying notifications
      subscribe(listener2) {
        const wrappedListener = () => notifying && listener2();
        const unsubscribe = store2.subscribe(wrappedListener);
        listeners.add(listener2);
        return () => {
          unsubscribe();
          listeners.delete(listener2);
        };
      },
      // Override the base `store.dispatch` method so that we can check actions
      // for the `shouldAutoBatch` flag and determine if batching is active
      dispatch(action) {
        try {
          notifying = !action?.meta?.[SHOULD_AUTOBATCH];
          shouldNotifyAtEndOfTick = !notifying;
          if (shouldNotifyAtEndOfTick) {
            if (!notificationQueued) {
              notificationQueued = true;
              queueCallback(notifyListeners);
            }
          }
          return store2.dispatch(action);
        } finally {
          notifying = true;
        }
      },
    });
  };
var buildGetDefaultEnhancers = (middlewareEnhancer) =>
  function getDefaultEnhancers(options) {
    const { autoBatch = true } = options ?? {};
    let enhancerArray = new Tuple(middlewareEnhancer);
    if (autoBatch) {
      enhancerArray.push(
        autoBatchEnhancer(typeof autoBatch === 'object' ? autoBatch : void 0)
      );
    }
    return enhancerArray;
  };
function configureStore(options) {
  const getDefaultMiddleware = buildGetDefaultMiddleware();
  const {
    reducer: reducer4 = void 0,
    middleware,
    devTools = true,
    preloadedState = void 0,
    enhancers = void 0,
  } = options || {};
  let rootReducer;
  if (typeof reducer4 === 'function') {
    rootReducer = reducer4;
  } else if (isPlainObject(reducer4)) {
    rootReducer = combineReducers(reducer4);
  } else {
    throw new Error(
      false
        ? formatProdErrorMessage(1)
        : '`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers'
    );
  }
  if (middleware && typeof middleware !== 'function') {
    throw new Error(
      false
        ? formatProdErrorMessage(2)
        : '`middleware` field must be a callback'
    );
  }
  let finalMiddleware;
  if (typeof middleware === 'function') {
    finalMiddleware = middleware(getDefaultMiddleware);
    if (!Array.isArray(finalMiddleware)) {
      throw new Error(
        false
          ? formatProdErrorMessage(3)
          : 'when using a middleware builder function, an array of middleware must be returned'
      );
    }
  } else {
    finalMiddleware = getDefaultMiddleware();
  }
  if (finalMiddleware.some((item) => typeof item !== 'function')) {
    throw new Error(
      false
        ? formatProdErrorMessage(4)
        : 'each middleware provided to configureStore must be a function'
    );
  }
  let finalCompose = compose2;
  if (devTools) {
    finalCompose = composeWithDevTools({
      // Enable capture of stack traces for dispatched Redux actions
      trace: true,
      ...(typeof devTools === 'object' && devTools),
    });
  }
  const middlewareEnhancer = applyMiddleware(...finalMiddleware);
  const getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);
  if (enhancers && typeof enhancers !== 'function') {
    throw new Error(
      false ? formatProdErrorMessage(5) : '`enhancers` field must be a callback'
    );
  }
  let storeEnhancers =
    typeof enhancers === 'function'
      ? enhancers(getDefaultEnhancers)
      : getDefaultEnhancers();
  if (!Array.isArray(storeEnhancers)) {
    throw new Error(
      false
        ? formatProdErrorMessage(6)
        : '`enhancers` callback must return an array'
    );
  }
  if (storeEnhancers.some((item) => typeof item !== 'function')) {
    throw new Error(
      false
        ? formatProdErrorMessage(7)
        : 'each enhancer provided to configureStore must be a function'
    );
  }
  if (finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {
    console.error(
      'middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`'
    );
  }
  const composedEnhancer = finalCompose(...storeEnhancers);
  return createStore(rootReducer, preloadedState, composedEnhancer);
}
var matches = (matcher2, action) => {
  if (hasMatchFunction(matcher2)) {
    return matcher2.match(action);
  } else {
    return matcher2(action);
  }
};
function isAnyOf(...matchers) {
  return (action) => {
    return matchers.some((matcher2) => matches(matcher2, action));
  };
}
var urlAlphabet =
  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';
var nanoid = (size2 = 21) => {
  let id = '';
  let i = size2;
  while (i--) {
    id += urlAlphabet[(Math.random() * 64) | 0];
  }
  return id;
};
var commonProperties = ['name', 'message', 'stack', 'code'];
var RejectWithValue = class {
  constructor(payload, meta) {
    this.payload = payload;
    this.meta = meta;
  }
  /*
  type-only property to distinguish between RejectWithValue and FulfillWithMeta
  does not exist at runtime
  */
  _type;
};
var FulfillWithMeta = class {
  constructor(payload, meta) {
    this.payload = payload;
    this.meta = meta;
  }
  /*
  type-only property to distinguish between RejectWithValue and FulfillWithMeta
  does not exist at runtime
  */
  _type;
};
var miniSerializeError = (value) => {
  if (typeof value === 'object' && value !== null) {
    const simpleError = {};
    for (const property2 of commonProperties) {
      if (typeof value[property2] === 'string') {
        simpleError[property2] = value[property2];
      }
    }
    return simpleError;
  }
  return {
    message: String(value),
  };
};
var externalAbortMessage = 'External signal was aborted';
var createAsyncThunk = /* @__PURE__ */ (() => {
  function createAsyncThunk2(typePrefix, payloadCreator, options) {
    const fulfilled = createAction(
      typePrefix + '/fulfilled',
      (payload, requestId, arg, meta) => ({
        payload,
        meta: {
          ...(meta || {}),
          arg,
          requestId,
          requestStatus: 'fulfilled',
        },
      })
    );
    const pending = createAction(
      typePrefix + '/pending',
      (requestId, arg, meta) => ({
        payload: void 0,
        meta: {
          ...(meta || {}),
          arg,
          requestId,
          requestStatus: 'pending',
        },
      })
    );
    const rejected = createAction(
      typePrefix + '/rejected',
      (error, requestId, arg, payload, meta) => ({
        payload,
        error: ((options && options.serializeError) || miniSerializeError)(
          error || 'Rejected'
        ),
        meta: {
          ...(meta || {}),
          arg,
          requestId,
          rejectedWithValue: !!payload,
          requestStatus: 'rejected',
          aborted: error?.name === 'AbortError',
          condition: error?.name === 'ConditionError',
        },
      })
    );
    function actionCreator(arg, { signal } = {}) {
      return (dispatch, getState, extra) => {
        const requestId = options?.idGenerator
          ? options.idGenerator(arg)
          : nanoid();
        const abortController = new AbortController();
        let abortHandler;
        let abortReason;
        function abort(reason) {
          abortReason = reason;
          abortController.abort();
        }
        if (signal) {
          if (signal.aborted) {
            abort(externalAbortMessage);
          } else {
            signal.addEventListener(
              'abort',
              () => abort(externalAbortMessage),
              {
                once: true,
              }
            );
          }
        }
        const promise = (async function () {
          let finalAction;
          try {
            let conditionResult = options?.condition?.(arg, {
              getState,
              extra,
            });
            if (isThenable(conditionResult)) {
              conditionResult = await conditionResult;
            }
            if (conditionResult === false || abortController.signal.aborted) {
              throw {
                name: 'ConditionError',
                message: 'Aborted due to condition callback returning false.',
              };
            }
            const abortedPromise = new Promise((_15, reject2) => {
              abortHandler = () => {
                reject2({
                  name: 'AbortError',
                  message: abortReason || 'Aborted',
                });
              };
              abortController.signal.addEventListener('abort', abortHandler);
            });
            dispatch(
              pending(
                requestId,
                arg,
                options?.getPendingMeta?.(
                  {
                    requestId,
                    arg,
                  },
                  {
                    getState,
                    extra,
                  }
                )
              )
            );
            finalAction = await Promise.race([
              abortedPromise,
              Promise.resolve(
                payloadCreator(arg, {
                  dispatch,
                  getState,
                  extra,
                  requestId,
                  signal: abortController.signal,
                  abort,
                  rejectWithValue: (value, meta) => {
                    return new RejectWithValue(value, meta);
                  },
                  fulfillWithValue: (value, meta) => {
                    return new FulfillWithMeta(value, meta);
                  },
                })
              ).then((result2) => {
                if (result2 instanceof RejectWithValue) {
                  throw result2;
                }
                if (result2 instanceof FulfillWithMeta) {
                  return fulfilled(
                    result2.payload,
                    requestId,
                    arg,
                    result2.meta
                  );
                }
                return fulfilled(result2, requestId, arg);
              }),
            ]);
          } catch (err) {
            finalAction =
              err instanceof RejectWithValue
                ? rejected(null, requestId, arg, err.payload, err.meta)
                : rejected(err, requestId, arg);
          } finally {
            if (abortHandler) {
              abortController.signal.removeEventListener('abort', abortHandler);
            }
          }
          const skipDispatch =
            options &&
            !options.dispatchConditionRejection &&
            rejected.match(finalAction) &&
            finalAction.meta.condition;
          if (!skipDispatch) {
            dispatch(finalAction);
          }
          return finalAction;
        })();
        return Object.assign(promise, {
          abort,
          requestId,
          arg,
          unwrap() {
            return promise.then(unwrapResult);
          },
        });
      };
    }
    return Object.assign(actionCreator, {
      pending,
      rejected,
      fulfilled,
      settled: isAnyOf(rejected, fulfilled),
      typePrefix,
    });
  }
  createAsyncThunk2.withTypes = () => createAsyncThunk2;
  return createAsyncThunk2;
})();
function unwrapResult(action) {
  if (action.meta && action.meta.rejectedWithValue) {
    throw action.payload;
  }
  if (action.error) {
    throw action.error;
  }
  return action.payload;
}
function isThenable(value) {
  return (
    value !== null &&
    typeof value === 'object' &&
    typeof value.then === 'function'
  );
}
var asyncThunkSymbol = /* @__PURE__ */ Symbol.for('rtk-slice-createasyncthunk');
var asyncThunkCreator = {
  [asyncThunkSymbol]: createAsyncThunk,
};
var listener = 'listener';
var completed = 'completed';
var cancelled = 'cancelled';
var taskCancelled = `task-${cancelled}`;
var taskCompleted = `task-${completed}`;
var listenerCancelled = `${listener}-${cancelled}`;
var listenerCompleted = `${listener}-${completed}`;
var { assign } = Object;
var alm = 'listenerMiddleware';
var addListener = /* @__PURE__ */ assign(
  /* @__PURE__ */ createAction(`${alm}/add`),
  {
    withTypes: () => addListener,
  }
);
var clearAllListeners = /* @__PURE__ */ createAction(`${alm}/removeAll`);
var removeListener = /* @__PURE__ */ assign(
  /* @__PURE__ */ createAction(`${alm}/remove`),
  {
    withTypes: () => removeListener,
  }
);
var ORIGINAL_STATE = Symbol.for('rtk-state-proxy-original');

// node_modules/react-redux/es/index.js
var import_shim = __toESM(require_shim());
var import_with_selector = __toESM(require_with_selector());

// node_modules/react-redux/es/utils/reactBatchedUpdates.js
var import_react_dom = __toESM(require_react_dom());

// node_modules/react-redux/es/utils/batch.js
function defaultNoopBatch(callback) {
  callback();
}
var batch = defaultNoopBatch;
var setBatch = (newBatch) => (batch = newBatch);

// node_modules/react-redux/es/hooks/useSelector.js
var import_react2 = __toESM(require_react());

// node_modules/react-redux/es/hooks/useReduxContext.js
var import_react = __toESM(require_react());

// node_modules/react-redux/es/components/Context.js
var React2 = __toESM(require_react());
var ContextKey = Symbol.for(`react-redux-context`);

// node_modules/react-redux/es/utils/useSyncExternalStore.js
var notInitialized = () => {
  throw new Error('uSES not initialized!');
};

// node_modules/react-redux/es/hooks/useSelector.js
var useSyncExternalStoreWithSelector = notInitialized;
var initializeUseSelector = (fn) => {
  useSyncExternalStoreWithSelector = fn;
};

// node_modules/react-redux/es/components/connect.js
var import_hoist_non_react_statics = __toESM(
  require_hoist_non_react_statics_cjs()
);
var React4 = __toESM(require_react());
var import_react_is = __toESM(require_react_is2());

// node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js
var React3 = __toESM(require_react());
var canUseDOM = !!(
  typeof window !== 'undefined' &&
  typeof window.document !== 'undefined' &&
  typeof window.document.createElement !== 'undefined'
);

// node_modules/react-redux/es/components/connect.js
var useSyncExternalStore = notInitialized;
var initializeConnect = (fn) => {
  useSyncExternalStore = fn;
};

// node_modules/react-redux/es/components/Provider.js
var React5 = __toESM(require_react());

// node_modules/react-redux/es/index.js
initializeUseSelector(import_with_selector.useSyncExternalStoreWithSelector);
initializeConnect(import_shim.useSyncExternalStore);
setBatch(import_react_dom.unstable_batchedUpdates);

// src/reducers/campaign_types.jsx
var campaignTypesReducer = (state = { list: [], detail: [] }, action) => {
  switch (action.type) {
    case FETCH_CAMPAIGN_TYPES_SUCCESS:
      return {
        ...state,
        list: action.campaignTypes,
      };
    case FETCH_CAMPAIGN_TYPE_DETAIL_SUCCESS:
      return {
        ...state,
        detail: action.campaignTypeDetail,
      };
    case FETCH_CAMPAIGN_TYPE_DETAILS_SUCCESS:
      return {
        ...state,
        detail: action.campaignTypeDetails,
      };
    default:
      return state;
  }
};
var campaign_types_default = campaignTypesReducer;

// src/reducers/website_details.jsx
var initialState = {
  website: { url: '' },
  characterLimits: {},
  usps: [],
};
var websiteDetailsReducer = (state = initialState, action) => {
  switch (action.type) {
    case FETCH_WEBSITE_DETAILS_SUCCESS:
      return {
        ...state,
        ...action.websiteDetails,
      };
    case UPDATE_WEBSITE_DETAILS_SUCCESS:
      return {
        ...state,
        ...action.websiteDetails,
      };
    default:
      return state;
  }
};
var website_details_default = websiteDetailsReducer;

// src/reducers/keyword_list.jsx
var keywordListReducer = (state = { items: [] }, action) => {
  switch (action.type) {
    case LOAD_KEYWORD_LIST_ITEMS_SUCCESS:
      return {
        ...state,
        items: action.items,
        request: null,
      };
    case LOAD_KEYWORD_LIST_ITEMS_ERROR:
      return {
        ...state,
        errorMessage: action.errorMessage,
        request: null,
      };
    case SAVE_KEYWORD_LIST_ITEMS_SUCCESS:
      return {
        ...state,
        errorMessage: null,
        request: null,
      };
    case SAVE_KEYWORD_LIST_ITEMS_ERROR:
      return {
        ...state,
        errorMessage: action.errorMessage,
        request: null,
      };
    default:
      return state;
  }
};
var keyword_list_default = keywordListReducer;

// src/reducers/keyword_suggestions.jsx
var defaultState = {
  count: 0,
  values: [],
  searchText: '',
  page: 1,
  perPage: 20,
  orderBy: 'search_term',
  ascending: true,
};
var initialState2 = {
  unprocessed: defaultState,
  exact: defaultState,
  negative: defaultState,
  undecided: defaultState,
};
var keyword_suggestions_default = (state = initialState2, action) => {
  switch (action.type) {
    case FETCH_KEYWORD_SUGGESTIONS_SUCCESS:
      return {
        ...state,
        [action.actionFilter]: {
          count: action.count,
          values: action.values || [],
          searchText: action.searchText,
          page: action.page,
          perPage: action.perPage,
          orderBy: action.orderBy,
          ascending: action.ascending,
        },
      };
    default:
      return state;
  }
};

// src/reducers/search_term_requests.jsx
var defaultState2 = {
  count: 0,
  values: [],
  searchText: '',
  page: 1,
  perPage: 20,
  orderBy: 'search_term',
  ascending: true,
};
var initialState3 = {
  exact: defaultState2,
  negative: defaultState2,
};
var search_term_requests_default = (state = initialState3, action) => {
  switch (action.type) {
    case FETCH_SEARCH_TERM_REQUESTS_SUCCESS:
      return {
        ...state,
        [action.actionFilter]: {
          count: action.count,
          values: action.values || [],
          searchText: action.searchText,
          page: action.page,
          perPage: action.perPage,
          orderBy: action.orderBy,
          ascending: action.ascending,
        },
      };
    default:
      return state;
  }
};

// src/reducers/ad_headline_list.jsx
var adHeadlineListReducer = (state = { items: [] }, action) => {
  switch (action.type) {
    case LOAD_AD_HEADLINE_LIST_ITEMS_SUCCESS:
      return {
        ...state,
        items: action.items,
        errorMessage: action.errorMessage,
      };
    case LOAD_AD_HEADLINE_LIST_ITEMS_ERROR:
      return {
        ...state,
        errorMessage: action.errorMessage,
      };
    case SAVE_AD_HEADLINE_LIST_ITEMS_SUCCESS:
      return {
        ...state,
        items: action.items,
        errorMessage: action.errorMessage,
      };
    case SAVE_AD_HEADLINE_LIST_ITEMS_ERROR:
      return {
        ...state,
        errorMessage: action.errorMessage,
      };
    default:
      return state;
  }
};
var ad_headline_list_default = adHeadlineListReducer;

// src/reducers/shopping_mappings_sheet.jsx
var initialState4 = {
  sheetId: '',
  loading: true,
  saving: false,
  feedUrl: '',
};
var shoppingMappingsSheetReducer = (state = initialState4, action) => {
  switch (action.type) {
    case CREATE_SHOPPING_MAPPING_SHEET_REQUEST:
      return { ...state, loading: true };
    case CREATE_SHOPPING_MAPPING_SHEET_SUCCESS:
      return {
        ...state,
        sheetId: action.sheetId,
        feedUrl: action.feedUrl,
        loading: false,
      };
    case APPLY_SHOPPING_MAPPING_SHEET_REQUEST:
      return { ...state, saving: true };
    case APPLY_SHOPPING_MAPPING_SHEET_SUCCESS:
      return { ...state, sheetId: '', saving: false };
    case APPLY_SHOPPING_MAPPING_SHEET_ERROR:
      return { ...state, saving: false };
    default:
      return state;
  }
};
var shopping_mappings_sheet_default = shoppingMappingsSheetReducer;

// src/reducers/shopping_link.jsx
var INITIAL_STATE = {
  targetSalesCountry: '',
  merchantCenterId: '',
  linkStatus: '',
  countryCodes: [],
};
var shoppingLinkReducer = (
  state = { merchantCenterSetting: INITIAL_STATE },
  action
) => {
  switch (action.type) {
    case LOAD_MERCHANT_CENTER_SETTING_SUCCESS:
      return {
        ...state,
        merchantCenterSetting: action.merchantCenterSetting,
      };
    case SAVE_MERCHANT_CENTER_SETTING_SUCCESS:
      return {
        ...state,
        merchantCenterSetting: action.merchantCenterSetting,
      };
    default:
      return state;
  }
};
var shopping_link_default = shoppingLinkReducer;

// src/reducers/variations_sheet.jsx
var initialState5 = {
  sheetId: '',
};
var variationsSheetReducer = (state = initialState5, action) => {
  switch (action.type) {
    case CREATE_VARIATIONS_SHEET_SUCCESS:
      return { ...state, sheetId: action.sheetId };
    default:
      return state;
  }
};
var variations_sheet_default = variationsSheetReducer;

// src/reducers/scenario.jsx
var scenarioReducer = (state = { status: {} }, action) => {
  switch (action.type) {
    case SELECT_SCENARIO:
      return {
        ...state,
        id: action.id,
      };
    case FETCH_SCENARIO_STATUS_REQUEST:
      return {
        ...state,
      };
    case FETCH_SCENARIO_STATUS_SUCCESS:
      return {
        ...state,
        status: { ...action.status, statusFetched: Date() },
      };
    case FETCH_SCENARIO_STATUS_ERROR:
      return {
        ...state,
        status: { error: true },
      };
    default:
      return state;
  }
};
var scenario_default = scenarioReducer;

// src/reducers/inventories/attributes.jsx
var inventoryFcAttributesReducer = (state, action) => {
  switch (action.type) {
    case FETCH_INVENTORY_FC_ATTRIBUTES_RESPONSE:
      return {
        ...state,
        fcAttributes: action.fcAttributes,
        inventoryId: action.inventoryId,
      };
    default:
      return state;
  }
};

// src/reducers/inventories/processing_status.jsx
var inventoryProcessingStatusReducer = (state, action) => {
  switch (action.type) {
    case FETCH_INVENTORY_PROCESSING_STATUS_RESPONSE:
      return {
        ...state,
        processingStatus: {
          ...state.processingStatus,
          [action.inventoryId]: {
            message: action.processingStatus,
            value: action.processingValue,
          },
        },
      };
    default:
      return state;
  }
};

// src/reducers/inventories/product_data_audits.jsx
var inventoryProductDataAuditsReducer = (state, action) => {
  switch (action.type) {
    case GEN_PRODUCT_DATA_AUDIT_RESPONSE:
    case FETCH_PRODUCT_DATA_AUDITS_RESPONSE:
      return {
        ...state,
        audits: {
          ...state.audits,
          [action.inventoryId]: {
            inventoryAudits: action.inventoryAudits,
            scheduleMessage: action.scheduleMessage,
          },
        },
      };
    case UPDATE_AUDIT_SCHEDULE_RESPONSE:
      return {
        ...state,
        audits: {
          ...state.audits,
          [action.inventoryId]: {
            ...state.audits[action.inventoryId],
            scheduleMessage: action.scheduleMessage,
          },
        },
      };
    case SHOW_HIDE_ALL_AUDITS_MODAL:
      return {
        ...state,
        audits: {
          ...state.audits,
          showAllAudits: action.show,
        },
      };
    default:
      return state;
  }
};

// src/reducers/inventories.jsx
var import_moment = __toESM(require_moment());
var initialState6 = {
  list: [],
  availableVerticalFields: [],
  status: { currency: 'AUD' },
  download: {},
  details: {
    itemCount: 0,
    promotionCount: 0,
    currency: '',
  },
  feedChampionUrl: '',
  feedChampionReference: null,
  feedChampionStatus: null,
  inventoryId: 0,
  fcAttributes: {},
  processingStatus: {},
  audits: {},
  categoryHierarchy: [],
  categoryTree: {},
  initialReconciled: false,
  outboundFeedsGenerated: false,
};
var feedInfoFromAction = (action) => {
  const {
    availableVerticalFields,
    feedChampionUrl,
    feedChampionReference,
    feedChampionStatus,
    inventoryId,
  } = action;
  return {
    availableVerticalFields,
    feedChampionUrl,
    feedChampionReference,
    feedChampionStatus,
    inventoryId,
  };
};
var inventoryChangeReducer = (state, action) => {
  switch (action.type) {
    case FETCH_INVENTORIES_LIST:
      return {
        ...state,
        list: action.inventories,
        ...feedInfoFromAction(action),
      };
    case SAVE_SELECTED_INVENTORY_ERROR:
      return { ...state, busy: false, error: action.error };
    case SAVE_NEW_FEED_ERROR:
      return { ...state, busy: false, error: action.error };
    default:
      return state;
  }
};
var shouldClearDownload = (state, action) => {
  if (state.download) {
    var downloadRequestDate = state.download.requestedAt;
    var downloadDate = (0, import_moment.default)(
      action.status.lastDownloadTime,
      'YYYY-MM-DD hh:mm:ss ZZ'
    ).toDate();
    return downloadRequestDate && downloadRequestDate < downloadDate;
  } else {
    return false;
  }
};
var inventoryStatusReducer = (state, action) => {
  switch (action.type) {
    case RECEIVE_INVENTORY_STATUS:
      var clearDownload = shouldClearDownload(state, action);
      return {
        ...state,
        status: { ...action.status, lastChecked: /* @__PURE__ */ new Date() },
        download: clearDownload ? {} : state.download,
      };
    case REQUEST_INVENTORY_DOWNLOAD:
      return { ...state, download: {} };
    case RECEIVE_INVENTORY_DOWNLOAD:
      return {
        ...state,
        download: {
          ...action.download,
          requestedAt: /* @__PURE__ */ new Date(),
        },
      };
    default:
      return state;
  }
};
var inventoryDetailReducer = (state, action) => {
  switch (action.type) {
    case FETCH_INVENTORY_DETAIL_RESPONSE:
      return {
        ...state,
        details: {
          ...state.details,
          [action.inventoryDetail.id]: action.inventoryDetail,
        },
      };
    default:
      return state;
  }
};
var feedChampionReducer = (state, action) => {
  switch (action.type) {
    case FETCH_FEED_CHAMPION_RESPONSE:
      return {
        ...state,
        feedChampion: action.feedChampion,
      };
    default:
      return state;
  }
};
var inventoryErrorsReducer = (state, action) => {
  switch (action.type) {
    case OPEN_INVENTORY_SHEET_REQUEST:
    case OPEN_INVENTORY_SHEET_SUCCESS:
      return {
        ...state,
        details: {
          ...state.details,
          [action.inventoryId]: {
            ...state.details[action.inventoryId],
            sheetGenerating: action.type === OPEN_INVENTORY_SHEET_REQUEST,
          },
        },
      };
    default:
      return state;
  }
};
var addCategoryToHierarchy = (hierarchy, category) => {
  hierarchy[category.depth][category.id] = {
    ...category,
    hasChildren: false,
  };
  if (category.parentId && category.parentId !== 0) {
    hierarchy[category.depth - 1][category.parentId].hasChildren = true;
  }
};
var generateCategoryHierarchy = (action) => {
  var hierarchy = [];
  hierarchy.push({
    0: { id: 0, depth: 0, name: 'Default', parentId: null, hasChildren: false },
  });
  for (var category of action.categories) {
    while (category.depth > hierarchy.length - 1) {
      hierarchy.push({});
    }
    addCategoryToHierarchy(hierarchy, category);
  }
  return hierarchy;
};
var generateCategoryTree = (action) => {
  var treeData = [];
  var allTreeNodes = [];
  for (const category of action.categories) {
    allTreeNodes.push({
      ...category,
      key: `${category.id}${category.depth}`,
      label: category.name,
      nodes: [],
    });
  }
  for (const node of allTreeNodes) {
    if (node.parentId === 0) {
      treeData.push(node);
    } else {
      const parentKey = `${node.parentId}${node.depth - 1}`;
      var parentNode = allTreeNodes.find((n) => n.key === parentKey);
      parentNode.nodes.push(node);
    }
  }
  return treeData;
};
var inventoryFeedOpsCampaignsReducer = (state, action) => {
  switch (action.type) {
    case FETCH_INVENTORY_FO_CATEGORIES_RESPONSE:
      var generatedCategoryHierarchy = generateCategoryHierarchy(action);
      var generatedCategoryTree = generateCategoryTree(action);
      return {
        ...state,
        foCategoryHierarchy: generatedCategoryHierarchy,
        foCategoryTree: {
          ...state.foCategoryTree,
          [action.websiteId]: generatedCategoryTree,
        },
        inventoryId: action.inventoryId,
      };
    default:
      return state;
  }
};
var inventoryCampaignsReducer = (state, action) => {
  switch (action.type) {
    case FETCH_INVENTORY_CATEGORIES_RESPONSE:
      var generatedCategoryHierarchy = generateCategoryHierarchy(action);
      var generatedCategoryTree = generateCategoryTree(action);
      return {
        ...state,
        categoryHierarchy: generatedCategoryHierarchy,
        categoryTree: {
          ...state.categoryTree,
          [action.websiteId]: generatedCategoryTree,
        },
        inventoryId: action.inventoryId,
      };
    default:
      return state;
  }
};
var inventoryInitialReconciledReducer = (state, action) => {
  switch (action.type) {
    case RECEIVE_INVENTORY_FIRST_RECONCILE_STATUS:
      return {
        ...state,
        initialReconciled: action.reconciled,
      };
    default:
      return state;
  }
};
var inventoryOutboundFeedsGeneratedReducer = (state, action) => {
  switch (action.type) {
    case RECEIVE_INVENTORY_OUTBOUND_FEEDS_GENERATION_STATUS:
      return {
        ...state,
        outboundFeedsGenerated: action.generated,
      };
    default:
      return state;
  }
};
var inventoriesReducer = (state = initialState6, action) => {
  state = inventoryChangeReducer(state, action);
  state = inventoryStatusReducer(state, action);
  state = inventoryDetailReducer(state, action);
  state = inventoryErrorsReducer(state, action);
  state = feedChampionReducer(state, action);
  state = inventoryFcAttributesReducer(state, action);
  state = inventoryProcessingStatusReducer(state, action);
  state = inventoryProductDataAuditsReducer(state, action);
  state = inventoryFeedOpsCampaignsReducer(state, action);
  state = inventoryCampaignsReducer(state, action);
  state = inventoryInitialReconciledReducer(state, action);
  state = inventoryOutboundFeedsGeneratedReducer(state, action);
  return state;
};
var inventories_default = inventoriesReducer;

// src/reducers/currencies.jsx
var currenciesReducer = (
  state = {
    supported: [{ label: 'loading', value: 'loading' }],
    errorMessage: 'default',
  },
  action
) => {
  switch (action.type) {
    case FETCH_CURRENCIES_REQUEST:
      return {
        ...state,
        supported: [],
        errorMessage: null,
      };
    case FETCH_CURRENCIES_SUCCESS:
      return {
        ...state,
        supported: action.currencies,
        errorMessage: null,
      };
    case FETCH_CURRENCIES_ERROR:
      return {
        ...state,
        supported: [],
        errorMessage: action.errorMessage,
      };
    default:
      return state;
  }
};
var currencies_default = currenciesReducer;

// src/reducers/adwords_account.jsx
var initialState7 = {
  errors: {},
  adwordAccountClientIds: [],
  linked: false,
  invitationSent: false,
};
var adwordsAccountReducer = (state = initialState7, action) => {
  switch (action.type) {
    case LOAD_ADWORDS_ACCOUNT_SUCCESS:
      return { ...state, ...action.adwordsAccount };
    case UPDATE_ADWORDS_ACCOUNT_SUCCESS:
      return {
        ...state,
        errors: {},
        ...action.adwordsAccount,
      };
    case UPDATE_ADWORDS_ACCOUNT_ERROR:
      return { ...state, ...action.adwordsAccount };
    case SET_ADWORDS_ACCOUNT_ID_RESPONSE:
      return {
        ...state,
        adwordsAccountId: action.adwordsAccountId,
        connectedWebsitesIds: action.connectedWebsitesIds,
      };
    case LIST_ADWORDS_ACCOUNTS_RESPONSE:
      return { ...state, adwordsAccounts: action.adwordsAccounts };
    default:
      return state;
  }
};
var adwords_account_default = adwordsAccountReducer;

// src/reducers/builds.jsx
var initialState8 = {
  orders: [],
  links: {},
  error: null,
  totalOrders: 0,
  details: {},
};
var fetchReducer = (state, action) => {
  switch (action.type) {
    case FETCH_BUILDS:
      return {
        ...state,
        orders: action.orders,
        links: action.links,
        totalOrders: action.totalOrders,
      };
    default:
      return state;
  }
};
var buildsReducer = (state = initialState8, action) => {
  state = fetchReducer(state, action);
  switch (action.type) {
    case RESPONSE_ERROR:
    case DELETE_BUILD_ERROR:
      return {
        ...state,
        error: action.error,
      };
    case LOAD_BUILD_RESPONSE:
      return {
        ...state,
        details: {
          ...state.details,
          [action.build.id]: action.build,
        },
      };
    default:
      return state;
  }
};
var builds_default = buildsReducer;

// src/reducers/structured_snippet.jsx
var structuredSnippetReducer = (state = { snippets: {} }, action) => {
  switch (action.type) {
    case LOAD_STRUCTURED_SNIPPETS:
    case SAVE_STRUCTURED_SNIPPETS:
      return {
        ...state,
        snippets: action.snippets,
      };
    default:
      return state;
  }
};
var structured_snippet_default = structuredSnippetReducer;

// src/reducers/promotions.jsx
var DefaultState = {
  list: {},
  error: null,
  promotionDetail: {
    promotionId: '',
    description: '',
    code: '',
    promotionStartDate: '',
    promotionEndDate: '',
    promotionDisplayStartDate: '',
    promotionDisplayEndDate: '',
    productApplicability: '',
    percentOff: '',
    moneyOffAmount: '',
    minimumPurchaseAmount: '',
    items: {},
  },
  activateNewPromotions: false,
  promotionFeedUrl: null,
  sortColumn: '',
  itemSortColumn: '',
};
var newSortColumn = (currentColumn, newColumn) => {
  switch (currentColumn) {
    case newColumn:
      return `-${newColumn}`;
    case `-${newColumn}`:
      return '';
    default:
      return newColumn;
  }
};
var sortColumnReducer = (state, action) => {
  switch (action.type) {
    case SET_SORT_COLUMN:
      return {
        ...state,
        sortColumn: newSortColumn(state.sortColumn, action.column),
      };
    case SET_ITEM_SORT_COLUMN:
      return {
        ...state,
        itemSortColumn: newSortColumn(state.itemSortColumn, action.column),
      };
    default:
      return state;
  }
};
var loadPromotionReducer = (state, action) => {
  var list = {};
  switch (action.type) {
    case LOAD_PROMOTIONS_SUCCESS:
    case LOAD_PROMOTIONS_ERROR:
      action.list.forEach((v) => {
        list[v.id] = v;
      });
      return {
        ...state,
        list,
        activateNewPromotions: action.activateNewPromotions,
        error: action.error,
      };
    case SAVE_PROMOTIONS_SUCCESS:
    case SAVE_PROMOTIONS_ERROR:
      return {
        ...state,
        list: action.list,
        error: action.error,
      };
    default:
      return state;
  }
};
var promotionDetailReducer = (state, action) => {
  var items = {};
  switch (action.type) {
    case LOAD_PROMOTION_DETAIL_SUCCESS:
    case LOAD_PROMOTION_DETAIL_ERROR:
      action.promotionDetail.items.forEach((i) => {
        items[i.sku] = { ...i, id: i.sku };
      });
      return {
        ...state,
        promotionDetail: {
          ...action.promotionDetail,
          items,
        },
      };
    default:
      return state;
  }
};
var promotionsReducer = (state = DefaultState, action) => {
  state = loadPromotionReducer(state, action);
  state = promotionDetailReducer(state, action);
  switch (action.type) {
    case LOAD_PROMOTION_FEED_URL_SUCCESS:
    case LOAD_PROMOTION_FEED_URL_ERROR:
      return {
        ...state,
        promotionFeedUrl: action.promotionFeedUrl,
      };
    default:
      return sortColumnReducer(state, action);
  }
};
var promotions_default = promotionsReducer;

// src/reducers/merchant_center_feed.jsx
var defaultState3 = { feedUrl: null };
var reducer = (state = defaultState3, action) => {
  switch (action.type) {
    case RECEIVE_MERCHANT_CENTER_FEED:
      return {
        ...state,
        ...action.data,
      };
    default:
      return state;
  }
};
var merchant_center_feed_default = reducer;

// src/reducers/scenario/inventory/products.jsx
var import_lodash7 = __toESM(require_lodash());
var productsReducer = (
  state = { available: 0, productIds: {}, requestedIds: [], products: {} },
  action
) => {
  switch (action.type) {
    case RECEIVE_LOAD_PRODUCT_IDS:
      return {
        ...state,
        available: action.available,
        productIds: {
          ...state.productIds,
          [action.scenarioId]: action.productIds,
        },
      };
    case REQUEST_LOAD_PRODUCTS:
      return {
        ...state,
        requestedIds: action.productIds,
      };
    case RECEIVE_LOAD_PRODUCTS:
      var requestedIds = import_lodash7.default.difference(
        state.requestedIds,
        Object.keys(action.products).map((id) => parseInt(id, 10))
      );
      return {
        ...state,
        ...action.products,
        requestedIds,
      };
    case SAMPLE_PRODUCTS_RESPONSE:
      return {
        ...state,
        sample: action.products,
      };
    case SAMPLE_PRODUCTS_REQUEST:
      return {
        ...state,
      };
    default:
      return state;
  }
};
var products_default = productsReducer;

// src/reducers/scenario/ads.jsx
var import_lodash8 = __toESM(require_lodash());
var adsReducer = (
  state = { requestedIds: [], ads: {}, sample: {} },
  action
) => {
  switch (action.type) {
    case REQUEST_LOAD_ADS:
      return {
        ...state,
        requestedIds: action.adIds,
      };
    case RECEIVE_LOAD_ADS:
      var requestedIds = import_lodash8.default.difference(
        state.requestedIds,
        Object.keys(action.ads).map((id) => parseInt(id, 10))
      );
      return {
        ...state,
        ...action.ads,
        requestedIds,
      };
    case SAMPLE_ADS_RESPONSE:
      return {
        ...state,
        sample: { ...state.sample, [action.scenarioId]: action.ads },
      };
    default:
      return state;
  }
};
var ads_default = adsReducer;

// src/reducers/feeds.jsx
var initialState9 = {
  details: {},
  response: {},
};
var feedDetailReducer = (state, action) => {
  switch (action.type) {
    case FETCH_FEED_DETAIL_RESPONSE:
      return {
        ...state,
        details: {
          ...state.details,
          [action.feedDetail.id]: action.feedDetail,
        },
        id: null,
      };
    case FETCH_FEED_DETAILS_BY_ID_RESPONSE:
      return {
        ...state,
        details: action.feeds.reduce(
          (obj, feed) => ({ ...obj, [feed.id]: feed }),
          state.details
        ),
      };
    default:
      return state;
  }
};
var feedsReducer = (state = initialState9, action) => {
  switch (action.type) {
    case GENERATE_FEED_REQUEST:
      return {
        ...state,
        response: {},
      };
    case GENERATE_FEED_RESPONSE:
      return {
        ...state,
        response: {
          ...action.response,
          requestedAt: /* @__PURE__ */ new Date(),
        },
      };
    case CREATE_FEED_RESPONSE:
      return {
        ...state,
        id: action.response.feedId,
      };
    default:
      return feedDetailReducer(state, action);
  }
};
var feeds_default = feedsReducer;

// src/reducers/scenario/keywords.jsx
var import_lodash9 = __toESM(require_lodash());
var keywordsReducer = (state = { requestedIds: [] }, action) => {
  switch (action.type) {
    case REQUEST_LOAD_KEYWORDS:
      return {
        ...state,
        requestedIds: action.keywordIds,
      };
    case RECEIVE_LOAD_KEYWORDS:
      var requestedIds = import_lodash9.default.difference(
        state.requestedIds,
        Object.keys(action.keywords).map((id) => parseInt(id, 10))
      );
      return {
        ...state,
        ...action.keywords,
        requestedIds,
      };
    default:
      return state;
  }
};
var keywords_default = keywordsReducer;

// src/reducers/users.jsx
var initialState10 = {
  error: null,
  currentUser: {
    email: null,
    masterAccountList: [],
    accountList: [],
    newUser: true,
    newUserFirstTimeSignIn: null,
    accountsOverview: [],
    accountsOverviewFilters: [],
  },
};
var userAccountsOverviewReducer = (state, action) => {
  switch (action.type) {
    case FETCH_USER_ACCOUNTS_RESPONSE:
      return {
        ...state,
        currentUser: {
          ...state.currentUser,
          accountsOverview: action.userAccounts,
        },
      };
    case UPDATE_ACCOUNT_OVERVIEW_FILTERS:
      return {
        ...state,
        currentUser: {
          ...state.currentUser,
          accountsOverviewFilters: action.filters,
        },
      };
    default:
      return state;
  }
};
var userMasterAccountListReducer = (state, action) => {
  switch (action.type) {
    case USER_MASTER_ACCOUNT_LIST_RESPONSE:
      var currentMasterAccountId = state.currentMasterAccountId;
      if (
        currentMasterAccountId === 0 &&
        action.currentUser.masterAccountList.length === 1
      ) {
        currentMasterAccountId = action.currentUser.masterAccountList[0].id;
      }
      return {
        ...state,
        currentUser: { ...state.currentUser, ...action.currentUser },
        currentMasterAccountId,
      };
    case SELECT_MASTER_ACCOUNT:
      return {
        ...state,
        currentMasterAccountId: action.masterAccountId,
      };
    default:
      return state;
  }
};
var usersReducer = (state = initialState10, action) => {
  switch (action.type) {
    case INVITATION_ERROR:
      return {
        ...state,
        error: action.error,
      };
    case USER_MASTER_ACCOUNT_LIST_RESPONSE:
    case SELECT_MASTER_ACCOUNT:
      return userMasterAccountListReducer(state, action);
    case UPDATE_USER_RESPONSE:
      return {
        ...state,
        currentUser: {
          ...state.currentUser,
          ...action.user,
          newUserFirstTimeSignIn: action.newUserFirstTimeSignIn,
        },
      };
    case LOGOUT_USER_RESPONSE:
      return {
        ...state,
        currentUser: initialState10.currentUser,
        currentMasterAccountId: 0,
      };
    case LOGIN_USER_RESPONSE:
      return {
        ...state,
        currentUser: {
          ...state.currentUser,
          newUserFirstTimeSignIn: action.newUserFirstTimeSignIn,
        },
      };
    case FETCH_USER_ACCOUNTS_RESPONSE:
    case UPDATE_ACCOUNT_OVERVIEW_FILTERS:
      return userAccountsOverviewReducer(state, action);
    default:
      return state;
  }
};
var users_default = usersReducer;

// src/reducers/websites.jsx
var minimumDailyBudget = 300;
var initialState11 = {
  searchText: '',
  sortColumn: 'name_case_insensitive asc',
  list: [],
  fullList: [],
  budgetCategoryFullList: [],
  count: 0,
  details: {},
  budget: {
    id: null,
    goal: 'online-sales',
    dailyBudget: minimumDailyBudget,
  },
};
var getWebsiteList = (state, action) => {
  const fetchedWebsites = action.websites.list;
  if (action.reset === true) {
    return fetchedWebsites;
  }
  const stateWebsiteIds = state.list.map((site) => site.id);
  var website,
    list = state.list.slice(0);
  for (website of fetchedWebsites) {
    if (!stateWebsiteIds.includes(website.id)) {
      list.push(website);
    }
  }
  return list;
};
var fetchDetailReducer = (state, action) => {
  const websiteDetailData = state.details[action.websiteDetail.id] || {};
  switch (action.type) {
    case FETCH_WEBSITE_DETAIL_RESPONSE:
      return {
        ...state,
        details: {
          ...state.details,
          [action.websiteDetail.id]: {
            ...websiteDetailData,
            ...action.websiteDetail,
          },
        },
      };
    default:
      return state;
  }
};
var websiteListReducer = (state, action) => {
  var websiteList = [];
  switch (action.type) {
    case FETCH_WEBSITES_REQUEST:
      return {
        ...state,
        searchText: action.searchText,
        sortColumn: action.sortColumn,
      };
    case FETCH_WEBSITES_RESPONSE:
      websiteList = getWebsiteList(state, action);
      return {
        ...state,
        count: action.websites.count,
        list: websiteList,
      };
    case FETCH_FULL_WEBSITE_LIST_RESPONSE:
      return {
        ...state,
        fullList: action.websites.list,
        budgetCategoryFullList: action.websites.budgetCategoryList,
      };
    case DELETE_WEBSITE_RESPONSE:
      return {
        ...state,
        count: state.count - 1,
        list: state.list.filter((w) => w.id !== action.websiteId),
        details: {
          ...state.details,
          [action.websiteId]: null,
        },
      };
    case CREATE_BUDGET_CATEGORY_SUCCESS: {
      const website = state.fullList.find(
        (website2) => website2.id === action.websiteId
      );
      const newFullList = state.fullList.filter(
        (website2) => website2.id !== action.websiteId
      );
      const newBudgetCategoryIds = [
        ...website.budgetCategoryIds,
        ...action.budgetCategoryIds,
      ];
      const newBudgetCategory = {
        name: action.budgetCategoryName,
        label: action.budgetCategoryLabel,
        id: action.budgetCategoryIds[0],
      };
      const everythingElseBudgetCategory =
        action.budgetCategoryIds.length > 1
          ? [
              newBudgetCategory,
              {
                name: 'Everything else',
                label: 'Everything else',
                id: action.budgetCategoryIds[1],
              },
            ]
          : [newBudgetCategory];
      return {
        ...state,
        fullList: [
          ...newFullList,
          { ...website, budgetCategoryIds: newBudgetCategoryIds },
        ],
        budgetCategoryFullList: [
          ...state.budgetCategoryFullList,
          ...everythingElseBudgetCategory,
        ],
      };
    }
    case DESTROY_BUDGET_CATEGORY_SUCCESS: {
      const website = state.fullList.find(
        (website2) => website2.id === action.websiteId
      );
      const newFullList = state.fullList.filter(
        (website2) => website2.id !== action.websiteId
      );
      const newBudgetCategoryIds = website.budgetCategoryIds.filter(
        (id) => !action.budgetCategoryIds.includes(id)
      );
      return {
        ...state,
        fullList: [
          ...newFullList,
          { ...website, budgetCategoryIds: newBudgetCategoryIds },
        ],
        budgetCategoryFullList: state.budgetCategoryFullList.filter(
          (bc) => !action.budgetCategoryIds.includes(bc.id)
        ),
      };
    }
    default:
      return state;
  }
};
var websitesReducer = (state = initialState11, action) => {
  const websiteDetails = state.details || {};
  const websiteDetailData = websiteDetails[action.websiteId] || {};
  switch (action.type) {
    case FETCH_WEBSITE_DETAIL_RESPONSE:
      return fetchDetailReducer(state, action);
    case FETCH_WEBSITE_PRIMARY_FEEDS_RESPONSE:
      return {
        ...state,
        details: {
          ...state.details,
          [action.websiteId]: {
            ...websiteDetailData,
            primaryFeeds: action.primaryFeeds,
          },
        },
      };
    case FETCH_WEBSITE_BUDGET_RESPONSE2:
      return {
        ...state,
        budget: action.budget,
      };
    case FETCH_WEBSITE_CONTACTS_RESPONSE:
      return {
        ...state,
        contacts: action.contacts,
      };
    case ADWORDS_ACCOUNT_LINKING_STATUS_RESPONSE: {
      const adwordsData = websiteDetailData.adwords || {};
      return {
        ...state,
        details: {
          ...websiteDetails,
          [action.websiteId]: {
            ...websiteDetailData,
            adwords: {
              ...adwordsData,
              connected: action.linked,
            },
          },
        },
      };
    }
    default:
      return websiteListReducer(state, action);
  }
};
var websites_default = websitesReducer;

// src/reducers/notifications.jsx
var initialState12 = {
  list: [],
};
var reducer2 = (state = initialState12, action) => {
  switch (action.type) {
    case GET_NOTIFICATIONS_RESPONSE:
      return { ...state, list: action.notifications };
    case ACKNOWLEDGE_NOTIFICATION_RESPONSE:
      return {
        ...state,
        list: state.list.map((n) =>
          n.id === action.id ? { ...n, status: 'acknowledged' } : n
        ),
      };
    default:
      return state;
  }
};
var notifications_default = reducer2;

// src/reducers/google/analytics.jsx
var initialState13 = {
  analyticsReport: {},
  accounts: [],
  analyticsApiReady: false,
  analyticsViews: {},
  selectedView: {},
  analyticsFeedopsReport: {},
};
var formatFeedopsReportRows = (rows) => {
  return rows.map((data) => {
    var y = data[0].substr(0, 4),
      m = data[0].substr(4, 2),
      d = data[0].substr(6, 2);
    return [d + '/' + m + '/' + y, data[1], data[2]];
  });
};
var analytics_default = (state = initialState13, action) => {
  switch (action.type) {
    case LIST_ANALYTICS_ACCOUNTS_RESPONSE:
      return { ...state, accounts: action.accounts };
    case SELECT_ANALYTICS_PROPERTY_ERROR:
      return { ...state, error: action.error };
    case FETCH_ANALYTICS_REPORT_SUCCESS:
      return {
        ...state,
        analyticsReport: {
          error: null,
          headers: action.headers,
          totals: action.totals,
          rows: action.rows,
        },
      };
    case FETCH_ANALYTICS_REPORT_ERROR:
      return {
        ...state,
        analyticsReport: { error: action.error },
      };
    case FETCH_ANALYTICS_FEEDOPS_REPORT_SUCCESS:
      return {
        ...state,
        analyticsFeedopsReport: {
          error: null,
          rows: formatFeedopsReportRows(
            action.rows,
            action.utmSource,
            action.utmMedium
          ),
        },
      };
    case FETCH_ANALYTICS_FEEDOPS_REPORT_ERROR:
      return {
        ...state,
        analyticsFeedopsReport: { error: action.error },
      };
    case SET_ANALYTICS_API_READY:
      return {
        ...state,
        analyticsApiReady: action.analyticsApiReady,
      };
    case FETCH_ANALYTICS_VIEWS_SUCCESS:
      return {
        ...state,
        analyticsViews: { views: action.views },
      };
    case FETCH_ANALYTICS_VIEWS_ERROR:
      return {
        ...state,
        analyticsViews: { error: action.error },
      };
    case SET_SELECTED_VIEW_ACTION:
      return {
        ...state,
        selectedView: action.selectedView || {},
      };
    default:
      return state;
  }
};

// src/reducers/google/merchant_center.jsx
var initialState14 = {
  accounts: [],
};
var merchant_center_default = (state = initialState14, action) => {
  switch (action.type) {
    case LIST_MERCHANT_CENTER_ACCOUNTS_RESPONSE:
      return { ...state, accounts: action.accounts };
    default:
      return state;
  }
};

// src/reducers/google/user.jsx
var initialState15 = {
  email: '',
  scope: '',
  accessToken: '',
};
var user_default = (state = initialState15, action) => {
  switch (action.type) {
    case SET_GOOGLE_USER:
      return { ...state, ...action.user };
    default:
      return state;
  }
};

// src/reducers/google/performance.jsx
var initialState16 = {
  accounts: {},
  masterAccounts: {},
  websites: {},
  budgetCategories: {},
};
var performance_default = (state = initialState16, action) => {
  const budgetCategoryData =
    (action.budgetCategoryId &&
      state.budgetCategories[action.budgetCategoryId]) ||
    {};
  const websiteData =
    (action.websiteId && state.websites[action.websiteId]) || {};
  switch (action.type) {
    case FETCH_WEBSITE_PERFORMANCE_BY_BUDGET_CATEGORY_SUCCESS:
      return {
        ...state,
        websites: {
          ...state.websites,
          [action.websiteId]: {
            ...websiteData,
            websiteByBudgetCategory: {
              budgetCategoryReports: action.websiteReport,
              count: action.count,
              page: action.page,
              perPage: action.perPage,
              dateRange: action.dateRange,
            },
          },
        },
      };
    case FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_DAY_SUCCESS:
      return {
        ...state,
        budgetCategories: {
          ...state.budgetCategories,
          [action.budgetCategoryId]: {
            ...budgetCategoryData,
            ...action.budgetCategoryReport,
          },
        },
      };
    case FETCH_BUDGET_CATEGORY_PERFORMANCE_BY_CAMPAIGN_TYPE_SUCCESS:
      return {
        ...state,
        budgetCategories: {
          ...state.budgetCategories,
          [action.budgetCategoryId]: {
            ...budgetCategoryData,
            performanceByCampaignType: action.budgetCategoryReport,
          },
        },
      };
    default:
      return state;
  }
};

// src/reducers/google/taxonomies.jsx
var initialState17 = {};
var taxonomies_default = (state = initialState17, action) => {
  switch (action.type) {
    case FETCH_GOOGLE_TAXONOMIES_RESPONSE:
      return action.taxonomies || {};
    default:
      return state;
  }
};

// src/reducers/google/general.jsx
var initialState18 = {
  AnalyticsAccessToken: '',
};
var general_default = (state = initialState18, action) => {
  switch (action.type) {
    case FETCH_ANALYTICS_ACCESS_TOKEN_SUCCESS:
      return {
        ...state,
        AnalyticsAccessToken: action.accessToken,
      };
    default:
      return state;
  }
};

// src/reducers/google/merchant_center_product_info_and_measures.jsx
var initialState19 = {
  websites: {},
  accounts: {},
  systemWideProductInfoAndMeasures: {},
};
var merchantCenterProductInfoAndMeasuresReducer = (
  state = initialState19,
  action
) => {
  const websiteData =
    (state.websites && state.websites[action.websiteId]) || {};
  switch (action.type) {
    case FETCH_WEBSITE_MERCHANT_CENTER_STATUS_SUCCESS:
      return {
        ...state,
        websites: {
          ...state.websites,
          [action.websiteId]: {
            ...websiteData,
            merchantCenterStatus: action.websiteMerchantCenterStatus,
          },
        },
      };
    case FETCH_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_SUCCESS:
      return {
        ...state,
        websites: {
          ...state.websites,
          [action.websiteId]: {
            ...websiteData,
            ...action.websiteProductInfoAndMeasures,
          },
        },
      };
    case FETCH_SYSTEM_WIDE_MERCHANT_CENTER_PRODUCT_INFO_AND_MEASURES_SUCCESS:
      return {
        ...state,
        systemWideProductInfoAndMeasures: {
          ...action.systemWideProductInfoAndMeasures,
        },
      };
    case FETCH_ACCOUNT_MERCHANT_CENTER_STATUS_SUCCESS:
      return {
        ...state,
        accounts: {
          ...state.accounts,
          [action.accountId]: {
            ...state.accounts[action.accountId],
            accountMerchantCenterStatus: action.accountMerchantCenterStatus,
          },
        },
      };
    default:
      return state;
  }
};
var merchant_center_product_info_and_measures_default =
  merchantCenterProductInfoAndMeasuresReducer;

// src/reducers/google/merchant_center_product_errors.jsx
var initialState20 = {
  categories: {},
  errorTypes: {},
  errors: {},
  websites: {},
};
var storeWebsiteErrorCategories = (state, action) => {
  const existingWebsiteData = state.websites[action.websiteId] || {};
  return {
    ...state,
    websites: {
      ...state.websites,
      [action.websiteId]: {
        ...existingWebsiteData,
        categoryIds: {
          ...existingWebsiteData.categoryIds,
          [action.scope]: action.categoryIds,
        },
      },
    },
  };
};
var mergeData = (arr, base) =>
  arr.reduce((obj, arrayItem) => ({ ...obj, [arrayItem.id]: arrayItem }), base);
var storeErrorTypes = (state, action) => ({
  ...state,
  errorTypes: mergeData(action.types, state.errorTypes),
});
var storeErrorCategories = (state, action) => ({
  ...state,
  categories: mergeData(action.categories, state.categories),
});
var storeErrors = (state, action) => ({
  ...state,
  errors: { ...action },
});
var merchantCenterProductErrorsReducer = (state = initialState20, action) => {
  switch (action.type) {
    case FETCH_MERCHANT_CENTER_PRODUCT_ERRORS_SUCCESS:
      return {
        ...state,
        [action.websiteId]: action.merchantCenterProductErrors,
      };
    case FETCH_MERCHANT_CENTER_ERROR_CATEGORIES_RESPONSE:
      return storeErrorCategories(state, action);
    case FETCH_MERCHANT_CENTER_ERROR_TYPES_RESPONSE:
      return storeErrorTypes(state, action);
    case FETCH_WEBSITE_MERCHANT_CENTER_ERROR_CATEGORIES_RESPONSE:
      return storeWebsiteErrorCategories(state, action);
    case FETCH_WEBSITE_MERCHANT_CENTER_ERRORS_RESPONSE:
      return storeErrors(state, action);
    case REFRESH_MERCHANT_CENTER_PRODUCT_ERRORS_SUCCESS:
      return { ...state, refreshAt: action.refreshAt };
    default:
      return state;
  }
};
var merchant_center_product_errors_default = merchantCenterProductErrorsReducer;

// src/reducers/google.jsx
var reducers = {
  analytics: analytics_default,
  merchantCenter: merchant_center_default,
  user: user_default,
  performance: performance_default,
  taxonomies: taxonomies_default,
  general: general_default,
  merchantCenterProductInfoAndMeasures:
    merchant_center_product_info_and_measures_default,
  merchantCenterProductErrors: merchant_center_product_errors_default,
};
var google_default = combineReducers(reducers);

// src/reducers/microsoft/adwords.jsx
var initialState21 = {
  accounts: [],
};
var adwords_default = (state = initialState21, action) => {
  switch (action.type) {
    case LIST_MICROSOFT_ADS_ACCOUNTS_RESPONSE:
      return { ...state, accounts: action.accounts };
    default:
      return state;
  }
};

// src/reducers/microsoft/merchant_center.jsx
var initialState22 = {
  accounts: [],
};
var merchant_center_default2 = (state = initialState22, action) => {
  switch (action.type) {
    case LIST_MICROSOFT_MERCHANT_CENTER_ACCOUNTS_RESPONSE:
      return { ...state, accounts: action.accounts };
    case LIST_MC_CATALOGS_RESPONSE:
      return { ...state, catalogs: action.catalogs };
    default:
      return state;
  }
};

// src/reducers/microsoft/user.jsx
var initialState23 = {
  email: '',
  scope: '',
  accessToken: '',
};
var user_default2 = (state = initialState23, action) => {
  switch (action.type) {
    case SET_MICROSOFT_USER:
      return { ...state, ...action.user };
    default:
      return state;
  }
};

// src/reducers/microsoft.jsx
var reducers2 = {
  adwords: adwords_default,
  merchantCenter: merchant_center_default2,
  user: user_default2,
};
var microsoft_default2 = combineReducers(reducers2);

// src/reducers/app.jsx
var responseTypes = ['receive', 'response', 'error', 'success'];
var initialState24 = {
  pendingRequests: [],
  sideNavOpen: false,
  bookAMeetingModalOpen: false,
  bookAMeetingMeetingType: '',
  bookAMeetingJsonData: {},
  channelFilterModalOpen: false,
  workEmailModalOpen: false,
  channelSettingsModalOpen: false,
};
var updatePendingRequests = (state, action) => {
  var type = action.type.toLowerCase();
  var requests = state.pendingRequests.slice(0);
  if (type.indexOf('request') >= 0) {
    requests.push(type);
  } else {
    var requestType = type;
    responseTypes.forEach((rt) => {
      var responseType = requestType.replace(rt, 'request');
      var requestIndex = requests.findIndex((r) => r === responseType);
      if (requestIndex >= 0) {
        requests.splice(requestIndex, 1);
      }
    });
  }
  return { ...state, pendingRequests: requests };
};
var app_default = (state = initialState24, action) => {
  switch (action.type) {
    case CLEAR_REQUEST_QUEUE:
      return { ...state, pendingRequests: [] };
    case SET_SIDE_NAV_OPEN:
      return { ...state, sideNavOpen: action.open };
    case SET_BOOK_A_MEETING_MODAL_OPEN:
      return {
        ...state,
        bookAMeetingModalOpen: action.open,
        bookAMeetingMeetingType: action.meetingType,
        bookAMeetingJsonData: action.jsonData,
      };
    case SET_CHANNEL_FILTER_MODAL_OPEN:
      return {
        ...state,
        channelFilterModalOpen: action.open,
      };
    case SET_CHANNEL_SETTINGS_MODAL_OPEN:
      return {
        ...state,
        channelSettingsModalOpen: action.open,
      };
    case SET_WORK_EMAIL_MODAL_OPEN:
      return {
        ...state,
        workEmailModalOpen: action.open,
      };
    default:
      return updatePendingRequests(state, action);
  }
};

// src/util/array_to_object.jsx
var arrayToObject = (key, array) => {
  return array.reduce((map2, obj) => {
    map2[obj[key]] = obj;
    return map2;
  }, {});
};
var array_to_object_default = arrayToObject;

// src/reducers/billing.jsx
var initialState25 = {
  customer: {
    metaData: {
      features: {
        canAskQuestions: false,
        canBookMeetings: false,
        canAddTeamMembers: false,
        canAddWebsites: false,
      },
    },
  },
  existingAccountForContactDetails: {
    accountTypeId: 0,
    accountType: '',
    customer: {},
  },
  plans: {},
  addons: {},
  subscription: {},
  currency: 'AUD',
};
var plansReducer = (state, action) => {
  switch (action.type) {
    case FETCH_PLANS_RESPONSE:
      return {
        ...state,
        plans: array_to_object_default('id', action.plans),
        currency: action.currency,
      };
    case FETCH_PLAN_RESPONSE:
      return {
        ...state,
        plans: {
          ...state.plans,
          [action.planId]: action.plan,
        },
      };
    default:
      return state;
  }
};
var billingReducer = (state = initialState25, action) => {
  switch (action.type) {
    case FETCH_WEBSITE_CUSTOMER_RESPONSE:
      const customer = {
        ...action.customer,
        sharedDetails: action.sharedDetails,
      };
      customer.metaData = {
        ...(state.customer || {}).metaData,
        ...customer.metaData,
      };
      return {
        ...state,
        customer,
      };
    case FETCH_WEBSITE_SUBSCRIPTION_RESPONSE:
      return {
        ...state,
        subscription: action.subscription,
      };
    case FETCH_ACCOUNT_AND_WEBSITE_SUBSCRIPTION_RESPONSE:
      return {
        ...state,
        accountSubscription: action.accountSubscription,
        websiteSubscription: action.websiteSubscription,
      };
    case FETCH_ACCOUNT_SUBSCRIPTION_RESPONSE:
      return {
        ...state,
        accountSubscription: action.response.accountSubscription,
      };
    case FETCH_ADDON_RESPONSE:
      return {
        ...state,
        addons: {
          ...state.addons,
          [action.addonId]: action.addon,
        },
      };
    case SET_EXISTING_ACCOUNT_FOR_CONTACT_DETAILS:
      const { accountType, accountTypeId } = action;
      return {
        ...state,
        existingAccountForContactDetails: { accountType, accountTypeId },
      };
    case FETCH_EXISTING_WEBSITE_CUSTOMER_RESPONSE:
    case FETCH_EXISTING_ACCOUNT_CUSTOMER_RESPONSE:
    case FETCH_EXISTING_MASTER_ACCOUNT_CUSTOMER_RESPONSE:
      return {
        ...state,
        existingAccountForContactDetails: {
          ...state.existingAccountForContactDetails,
          ...action.customer,
        },
        ...action.customer,
      };
    default:
      return plansReducer(state, action);
  }
};
var billing_default = billingReducer;

// src/reducers/feed_app/api.jsx
var initialState26 = { feeds: {}, fields: {} };
var api_default = (state = initialState26, action) => {
  switch (action.type) {
    case LIST_FEEDS_RESPONSE:
      return { ...state, feeds: array_to_object_default('id', action.feeds) };
    case GET_FEED_FIELDS_RESPONSE:
      return { ...state, fields: action.payload };
    case GET_FEED_RESPONSE:
      return {
        ...state,
        feeds: { ...state.feeds, [action.id]: { ...action.feed } },
      };
    default:
      return state;
  }
};

// src/actions/workflow.jsx
var SET_STEP = 'SET_STEP';
var NEXT_STEP = 'NEXT_STEP';
var TOGGLE_ADVANCED = 'TOGGLE_ADVANCED';
var SET_ADVANCED = 'SET_ADVANCED';

// src/reducers/workflow.jsx
var initialState27 = {
  currentStepNum: 1,
  showAdvanced: false,
};
var workflow_default = (state = initialState27, action) => {
  const { currentStepNum } = state;
  switch (action.type) {
    case NEXT_STEP:
      return { ...state, currentStepNum: currentStepNum + 1 };
    case SET_STEP:
      return { ...state, currentStepNum: action.stepNum };
    case TOGGLE_ADVANCED:
      return { ...state, showAdvanced: !state.showAdvanced };
    case SET_ADVANCED:
      return { ...state, showAdvanced: action.showAdvanced };
    default:
      return state;
  }
};

// src/reducers/settings.jsx
var initialState28 = {
  platform: '',
};
var settingsReducer = (state = initialState28, action) => {
  switch (action.type) {
    case UPDATE_SETTINGS:
      return {
        ...state,
        ...action.settings,
      };
    default:
      return state;
  }
};
var settings_default = settingsReducer;

// src/reducers/advertising_goal_types.jsx
var initialState29 = {
  accounts: {},
  masterAccounts: {},
  websites: {},
  budgetCategories: {},
};
var advertising_goal_types_default = (state = initialState29, action) => {
  const accountTypeData =
    (action.accountType &&
      action.id &&
      state[action.accountType] &&
      state[action.accountType][action.id]) ||
    {};
  const accountTypeChannelData =
    (action.channel && accountTypeData[action.channel]) || {};
  switch (action.type) {
    case FETCH_ADVERTISING_GOAL_TYPES_SUCCESS:
      return {
        ...state,
        ...action.advertisingGoalTypes,
      };
    case FETCH_BUDGET_CATEGORY_ADVERTISING_GOAL_TYPE_SUCCESS:
      return {
        ...state,
        budgetCategories: {
          ...state.budgetCategories,
          [action.budgetCategoryId]: {
            ...action.advertisingGoalType,
          },
        },
      };
    case FETCH_ADVERTISING_GOAL_TYPE_SUCCESS:
      return {
        ...state,
        [action.accountType]: {
          ...state[action.accountType],
          [action.id]: {
            ...accountTypeData,
            [action.channel]: {
              ...accountTypeChannelData,
              ...action.advertisingGoalType,
            },
          },
        },
        displayConversionValueOnCost: false,
      };
    case TOGGLE_DISPLAY_CONVERSION_VALUE_ON_COST_SUCCESS:
      return {
        ...state,
        displayConversionValueOnCost: !state.displayConversionValueOnCost,
      };
    default:
      return state;
  }
};

// src/reducers/advertising.jsx
var initialState30 = {
  masterAccounts: {},
  accounts: {},
  websites: {},
  budgetCategories: {},
  status: {},
  budget: {},
  campaignIds: {},
};
var generateAdvertisingStatusDetails = (state, action) => {
  var statusDetails = state.status[action.websiteId]
    ? { ...state.status[action.websiteId] }
    : {};
  statusDetails[action.buildType] = {
    buildId: action.advertisingStatus.buildId || 0,
    lastPublishedAt: action.advertisingStatus.lastPublishedAt,
    generating: action.advertisingStatus.generating,
    publishing: action.advertisingStatus.publishing,
    status: action.advertisingStatus.status,
  };
  return statusDetails;
};
var generateWebsiteBudget = (state, action) => {
  var budget = state.budget[action.websiteId]
    ? { ...state.budget[action.websiteId] }
    : {};
  budget[action.buildType] = action.response.budget || 0;
  return budget;
};
var generateCampaignIds = (state, action) => {
  const websiteData = state.campaignIds[action.websiteId] || {};
  var campaignIds = {};
  campaignIds[action.buildType] = action.response.campaignIds || [];
  return {
    ...websiteData,
    ...campaignIds,
  };
};
var advertisingReducer = (state = initialState30, action) => {
  const accountTypeData =
    (action.accountType && action.id && state[action.accountType][action.id]) ||
    {};
  const accountTypeChannelData =
    (action.channel && accountTypeData[action.channel]) || {};
  const budgetCategoriesData =
    (action.budgetCategoryId &&
      state.budgetCategories[action.budgetCategoryId]) ||
    {};
  const websiteData =
    (action.websiteId && state.websites[action.websiteId]) || {};
  switch (action.type) {
    case FETCH_BUDGET_CATEGORY_ADVERTISING_BUDGETS_SUCCESS:
      return {
        ...state,
        budgetCategories: {
          ...state.budgetCategories,
          [action.budgetCategoryId]: {
            ...budgetCategoriesData,
            budgets: action.budget,
          },
        },
      };
    case FETCH_BUDGET_CATEGORY_ADVERTISING_GOALS_SUCCESS:
      return {
        ...state,
        budgetCategories: {
          ...state.budgetCategories,
          [action.budgetCategoryId]: {
            ...budgetCategoriesData,
            goals: action.goal,
          },
        },
      };
    case DESTROY_BUDGET_CATEGORY_SUCCESS:
      return {
        ...state,
        budgetCategories: {
          ...state.budgetCategories,
          [action.budgetCategoryId]: void 0,
        },
      };
    case FETCH_ADVERTISING_PLAN_SUCCESS:
      return {
        ...state,
        websites: {
          ...state.websites,
          [action.websiteId]: {
            ...websiteData,
            advertisingPlan: action.advertisingPlan,
          },
        },
      };
    case FETCH_ADVERTISING_GOALS_SUCCESS:
      return {
        ...state,
        [action.accountType]: {
          ...state[action.accountType],
          [action.id]: {
            ...accountTypeData,
            [action.channel]: {
              ...accountTypeChannelData,
              goals: action.goal,
            },
          },
        },
      };
    case FETCH_ADVERTISING_BUDGETS_SUCCESS:
      return {
        ...state,
        [action.accountType]: {
          ...state[action.accountType],
          [action.id]: {
            ...accountTypeData,
            [action.channel]: {
              ...accountTypeChannelData,
              budgets: action.budget,
            },
          },
        },
      };
    case FETCH_HAS_BUDGET_CATEGORIES_SUCCESS:
      return {
        ...state,
        websites: {
          ...state.websites,
          [action.websiteId]: {
            ...websiteData,
            hasBudgetCategories: action.hasBudgetCategories,
          },
        },
      };
    case CHECK_PUBLICATION_ACCOUNT_TYPES_SUCCESS:
      return {
        ...state,
        [action.accountType]: {
          ...state[action.accountType],
          [action.id]: {
            ...accountTypeData,
            ...action.publicationAccountTypes,
          },
        },
      };
    case FETCH_ADVERTISING_STATUS_SUCCESS:
      const generatedAdvertisingStatusDetails =
        generateAdvertisingStatusDetails(state, action);
      return {
        ...state,
        status: {
          ...state.status,
          [action.websiteId]: {
            ...state[action.websiteId],
            ...generatedAdvertisingStatusDetails,
          },
        },
      };
    case FETCH_WEBSITE_BUDGET_RESPONSE:
      const generatedWebsiteBudget = generateWebsiteBudget(state, action);
      return {
        ...state,
        budget: {
          ...state.budget,
          [action.websiteId]: {
            ...state[action.websiteId],
            ...generatedWebsiteBudget,
          },
        },
      };
    case FETCH_WEBSITE_CAMPAIGN_IDS_RESPONSE:
      const generatedCampaignIds = generateCampaignIds(state, action);
      return {
        ...state,
        campaignIds: {
          ...state.campaignIds,
          [action.websiteId]: generatedCampaignIds,
        },
      };
    default:
      return state;
  }
};
var advertising_default = advertisingReducer;

// src/reducers/date_ranges.jsx
var initialState31 = {};
var date_ranges_default = (state = initialState31, action) => {
  switch (action.type) {
    case SET_DATE_RANGE:
      return {
        ...state,
        [action.keyName]: action.dateRange,
      };
    default:
      return state;
  }
};

// src/reducers/quality_score_components.jsx
var initialState32 = {
  averageQualityScoreComponents: {},
  systemAverageQualityScoreComponents: {},
  websiteSavingsValues: {},
  websiteWideQsScores: {},
};
var qualityScoreComponentsReducer = (state = initialState32, action) => {
  switch (action.type) {
    case FETCH_AVERAGE_QUALITY_SCORE_COMPONENTS_SUCCESS:
      return {
        ...state,
        averageQualityScoreComponents: action.averageQualityScoreComponents,
      };
    case FETCH_SYSTEM_AVERAGE_QUALITY_SCORE_COMPONENTS_SUCCESS:
      return {
        ...state,
        systemAverageQualityScoreComponents:
          action.systemAverageQualityScoreComponents,
      };
    case FETCH_WEBSITE_SAVINGS_VALUES_RESPONSE:
      return { ...state, websiteSavingsValues: action.websiteSavingsValues };
    case FETCH_WEBSITE_WIDE_QS_SCORES_SUCCESS:
      return { ...state, websiteWideQsScores: action.websiteWideQsScores };
    default:
      return state;
  }
};
var quality_score_components_default = qualityScoreComponentsReducer;

// src/reducers/product_feeds/titles.jsx
var initialState33 = {};
var titles_default = (state = initialState33, action) => {
  const websiteData = state[action.websiteId] || {};
  switch (action.type) {
    case FETCH_PRODUCT_FEED_TITLES_RESPONSE:
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          availableFields: action.availableFields,
          allAvailableAttributes: action.allAvailableAttributes,
        },
      };
    default:
      return state;
  }
};

// src/reducers/product_feeds/replacements.jsx
var initialState34 = {};
var generateCategoryReplacementsHierarchy = (action) => {
  var hierarchy = {};
  hierarchy[0] = {};
  for (var replacement of action.replacements) {
    if (!(`${replacement.depth}` in hierarchy)) {
      hierarchy[replacement.depth] = {};
    }
    var categoryReplacement = hierarchy[replacement.depth];
    categoryReplacement[replacement.fcId] = replacement.replacement;
  }
  return Object.values(hierarchy);
};
var generateAttributeHierarchy = (action, websiteData) => {
  var hierarchy = {};
  for (var attribute of action.attributes) {
    hierarchy[attribute.id] = attribute;
  }
  if (action.availableAttributes) {
    return {
      ...websiteData,
      attributes: hierarchy,
    };
  } else {
    return {
      ...websiteData,
      allAttributes: hierarchy,
    };
  }
};
var generateAttributeReplacementHierarchy = (state, action) => {
  var attributeReplacements = state[action.websiteId].attributeReplacements
    ? { ...state[action.websiteId].attributeReplacements }
    : {};
  var newAttributeReplacements = {};
  for (const attribute of action.replacements) {
    newAttributeReplacements[attribute.id] = attribute;
  }
  attributeReplacements[action.attributeId] = newAttributeReplacements;
  return attributeReplacements;
};
var initialiseAttributesObject = (attributes) => {
  var attributeReplacements = {};
  for (const attribute of Object.keys(attributes)) {
    attributeReplacements[attribute] = {};
  }
  return attributeReplacements;
};
var generateSearchAttributeReplacementHierarchy = (state, action) => {
  var attributeReplacements = initialiseAttributesObject(action.attributes);
  for (const replacement of action.replacements) {
    var replacements = attributeReplacements[replacement.parentId] || {};
    if (Object.values(replacements).length > 0) {
      attributeReplacements[replacement.parentId][replacement.id] = replacement;
    } else {
      attributeReplacements[replacement.parentId] = {
        [replacement.id]: replacement,
      };
    }
  }
  return attributeReplacements;
};
var generateUpdatedAttributeReplacements = (state, action) => {
  var updatedAttributeReplacements = {
    ...state[action.websiteId].updatedAttributeReplacements,
  };
  var replacements = updatedAttributeReplacements[action.attributeId] || {};
  if (action.attribute.replacement || !action.attribute.remove) {
    replacements[action.attribute.id] = action.attribute.replacement;
  } else {
    delete replacements[action.attribute.id];
  }
  updatedAttributeReplacements[action.attributeId] = replacements;
  return updatedAttributeReplacements;
};
var findReplacementByItemId = (replacements, itemId) => {
  return replacements.find((r) => r.itemId === itemId);
};
var updateProductReplacements = (state, action) => {
  var updatedProductReplacements = [
    ...state[action.websiteId].productReplacements,
  ];
  action.payload.forEach((attribute) => {
    var replacementToUpdate = findReplacementByItemId(
      updatedProductReplacements,
      attribute.itemId
    );
    for (const [attributeName, value] of Object.entries(
      attribute.updatedAttributes
    )) {
      replacementToUpdate.override[attributeName] = value;
    }
  });
  return updatedProductReplacements;
};
var updateInventoryDisableStatus = (state, action) => {
  var updatedProductReplacements = [
    ...state[action.websiteId].productReplacements,
  ];
  action.payload.forEach((attribute) => {
    var replacementToUpdate = findReplacementByItemId(
      updatedProductReplacements,
      attribute.itemId
    );
    replacementToUpdate.itemDisabled = attribute.updatedItemDisabled;
  });
  return updatedProductReplacements;
};
var updateProductAttributes = (state, action) => {
  var updatedProductAttributes =
    state[action.websiteId].updatedProductAttributes || {};
  action.payload.forEach((attribute) => {
    var productAttributes = updatedProductAttributes[attribute.itemId] || {};
    updatedProductAttributes[attribute.itemId] = {
      ...productAttributes,
      ...attribute.updatedAttributes,
    };
  });
  return updatedProductAttributes;
};
var updateInventoryItems = (state, action) => {
  var lastUpdatedItems = { ...state[action.websiteId].updatedInventoryItems };
  action.payload.forEach((attribute) => {
    lastUpdatedItems[attribute.itemId] = attribute.updatedItemDisabled;
  });
  return lastUpdatedItems;
};
var replacements_default = (state = initialState34, action) => {
  const websiteData = state[action.websiteId] || {};
  switch (action.type) {
    case FETCH_INVENTORY_CATEGORY_REPLACEMENTS_RESPONSE:
      var generatedCategoryReplacementHierarchy =
        generateCategoryReplacementsHierarchy(action);
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          categoryReplacements: generatedCategoryReplacementHierarchy,
        },
      };
    case FETCH_INVENTORY_ATTRIBUTES_RESPONSE:
      var generatedAttributeHierarchy = generateAttributeHierarchy(
        action,
        websiteData
      );
      return {
        ...state,
        [action.websiteId]: generatedAttributeHierarchy,
      };
    case FETCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE:
      var generatedAttributeReplacementHierarchy =
        generateAttributeReplacementHierarchy(state, action);
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          attributeReplacements: generatedAttributeReplacementHierarchy,
        },
      };
    case SEARCH_INVENTORY_ATTRIBUTE_REPLACEMENTS_RESPONSE:
      var generatedSearchAttributeReplacementHierarchy =
        generateSearchAttributeReplacementHierarchy(state, action);
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          attributeReplacements: generatedSearchAttributeReplacementHierarchy,
        },
      };
    case UPDATE_INVENTORY_ATTRIBUTE_REPLACEMENTS:
      var generatedUpdatedAttributeReplacement =
        generateUpdatedAttributeReplacements(state, action);
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          updatedAttributeReplacements: generatedUpdatedAttributeReplacement,
        },
      };
    case CLEAR_UPDATED_INVENTORY_ATTRIBUTE_REPLACEMENTS:
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          attributeReplacements: action.attributeReplacements,
          updatedAttributeReplacements: {},
        },
      };
    case CLEAR_INVENTORY_ATTRIBUTE_REPLACEMENTS:
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          attributeReplacements: {},
        },
      };
    case FETCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE: {
      const { page, perPage, searchTerm, filters } = action;
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          page,
          perPage,
          searchTerm,
          filters,
          productReplacements: action.replacements,
          productOptimisationSuggestions: action.optimisationSuggestions,
          productReplacementsMetaData: action.metaData,
          updatedProductAttributes: {},
        },
      };
    }
    case SEARCH_PRODUCT_ATTRIBUTE_REPLACEMENTS_RESPONSE: {
      const { page, perPage, searchTerm, filters } = action;
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          page,
          perPage,
          searchTerm,
          filters,
          productReplacements: action.replacements,
          productOptimisationSuggestions: action.optimisationSuggestions,
          productReplacementsMetaData: action.metaData,
          updatedProductAttributes: {},
        },
      };
    }
    case UPDATE_PRODUCT_ATTRIBUTE_REPLACEMENTS:
      var updatedProductReplacements = updateProductReplacements(state, action);
      var updatedProductAttributes = updateProductAttributes(state, action);
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          productReplacements: updatedProductReplacements,
          updatedProductAttributes,
        },
      };
    case UPDATE_DISABLED_INVENTORY_ITEMS:
      var updatedProductReplacements = updateInventoryDisableStatus(
        state,
        action
      );
      var updatedInventoryItems = updateInventoryItems(state, action);
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          productReplacements: updatedProductReplacements,
          updatedInventoryItems,
        },
      };
    case CLEAR_UPDATED_ITEMS_AND_REPLACEMENTS:
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          updatedProductAttributes: {},
          updatedInventoryItems: {},
        },
      };
    case UPDATE_ATTRIBUTE_FILTERS:
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          filters: action.filters,
        },
      };
    case UPDATE_SELECTED_SUGGESTION_COLUMNS:
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          selectedSuggestionColumns: action.selectedColumns,
        },
      };
    case UPDATE_PRODUCT_ROW_SELECTION_STATUS:
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          isAllRowsSelected: action.isAllRowsSelected,
          selectedItems: action.selectedItems,
        },
      };
    case PRODUCT_ATTRIBUTE_REPLACEMENTS_QUERY_CHANGED_STATUS:
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          queryChanged: action.queryChangedStatus,
        },
      };
    case CREATE_RULE_MODAL_STATUS:
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          isRuleModalOpen: action.ruleModalStatus,
        },
      };
    default:
      return state;
  }
};

// src/reducers/product_feeds/ai_suggestions.jsx
var initialState35 = {};
var ai_suggestions_default = (state = initialState35, action) => {
  switch (action.type) {
    case FETCH_AI_CREDITS_HISTORY_RESPONSE:
      return {
        ...state,
        [action.websiteId]: {
          ...state[action.websiteId],
          totalMonthlyCredits: action.totalMonthlyCredits,
          creditsUsed: action.creditsUsed,
          creditHistory: action.creditHistory,
        },
      };
    default:
      return state;
  }
};

// src/reducers/product_url_settings.jsx
var initialState36 = {};
var product_url_settings_default = (state = initialState36, action) => {
  const websiteData = state[action.websiteId] || {};
  switch (action.type) {
    case FETCH_PRODUCT_URL_SETTING_RESPONSE:
      return {
        ...state,
        [action.websiteId]: {
          ...websiteData,
          feedId: action.feedId,
          utmSource: action.utmSource || '',
          utmMedium: action.utmMedium || '',
          additionalTagging: action.additionalTagging
            ? Object.entries(action.additionalTagging)
            : [],
          autoTracking:
            action.autoTracking === void 0 ? true : action.autoTracking,
          adsTagging: action.adsTagging
            ? Object.entries(action.adsTagging)
            : [],
        },
      };
    default:
      return state;
  }
};

// src/reducers/performance.jsx
var initialState37 = {
  accounts: {},
  masterAccounts: {},
  websites: {},
  budgetCategories: {},
  feedopsAdvertising: {},
};
var performance_default2 = (state = initialState37, action) => {
  const accountTypeData =
    (action.accountType &&
      action.id &&
      state[action.accountType] &&
      state[action.accountType][action.id]) ||
    {};
  const accountTypeChannelData =
    (action.channel && accountTypeData[action.channel]) || {};
  switch (action.type) {
    case FETCH_PERFORMANCE_BY_DAY_SUCCESS:
      return {
        ...state,
        [action.accountType]: {
          ...state[action.accountType],
          [action.id]: {
            ...accountTypeData,
            [action.channel]: {
              ...accountTypeChannelData,
              ...action.performanceByDay,
              error: action.error,
            },
          },
        },
      };
    case FETCH_PERFORMANCE_BY_SUB_ACCOUNT_TYPE_SUCCESS:
      return {
        ...state,
        [action.accountType]: {
          ...state[action.accountType],
          [action.id]: {
            ...accountTypeData,
            [action.channel]: {
              ...accountTypeChannelData,
              performanceBySubAccountType: action.performanceBySubAccountType,
              subAccountTypeCount: action.count,
            },
          },
        },
      };
    case FETCH_PERFORMANCE_BY_CAMPAIGN_TYPE_SUCCESS:
      return {
        ...state,
        [action.accountType]: {
          ...state[action.accountType],
          [action.id]: {
            ...accountTypeData,
            [action.channel]: {
              ...accountTypeChannelData,
              performanceByCampaignType: action.performanceByCampaignType,
            },
          },
        },
      };
    case FETCH_WEBSITE_PERFORMANCE_BY_FEEDOPS_CAMPAIGNS_RESPONSE:
      return {
        ...state,
        feedopsAdvertising: {
          ...state.feedopsAdvertising,
          [action.channel]: {
            [action.websiteId]: action.performanceByFeedopsCampaigns || {},
          },
        },
      };
    default:
      return state;
  }
};

// src/reducers/google/drive_docs.jsx
var initialState38 = {};
var drive_docs_default = (state = initialState38, action) => {
  switch (action.type) {
    case FETCH_DRIVE_DOC_RESPONSE:
      const splitTitle = action.title.split(' progress ');
      return {
        ...state,
        [action.articleId]: {
          title: splitTitle[0],
          description: action.description,
          progress: splitTitle[1],
        },
      };
    default:
      return state;
  }
};

// src/reducers/playbook/playbook_progress.jsx
var import_lodash10 = __toESM(require_lodash());
var initialState39 = {};
var dismissPlaybookProgress2 = (state, action) => {
  var updatedPlaybookProgressDetails = import_lodash10.default.cloneDeep(
    state[action.websiteId]
  );
  Object.values(updatedPlaybookProgressDetails.progressDetails).forEach(
    (channelPlaybookProgressDetails) => {
      channelPlaybookProgressDetails.forEach((playbookProgressDetails) => {
        if (playbookProgressDetails.id === action.websitePlaybookItemId) {
          playbookProgressDetails.isDismissed = true;
          playbookProgressDetails.score = 0;
          playbookProgressDetails.possibleScore = 0;
          playbookProgressDetails.opportunity = 0;
        }
      });
    }
  );
  return updatedPlaybookProgressDetails;
};
var undismissPlaybookProgress2 = (state, action) => {
  var updatedPlaybookProgressDetails = import_lodash10.default.cloneDeep(
    state[action.websiteId]
  );
  Object.values(updatedPlaybookProgressDetails.progressDetails).forEach(
    (channelPlaybookProgressDetails) => {
      channelPlaybookProgressDetails.forEach((playbookProgressDetails) => {
        if (playbookProgressDetails.id === action.websitePlaybookItemId) {
          playbookProgressDetails.isDismissed = false;
        }
      });
    }
  );
  return updatedPlaybookProgressDetails;
};
var playbook_progress_default = (state = initialState39, action) => {
  switch (action.type) {
    case FETCH_PLAYBOOK_PROGRESS_RESPONSE:
    case FETCH_PLAYBOOK_PROGRESS_BY_ITEM_RESPONSE:
      return {
        ...state,
        [action.websiteId]: {
          ...state[action.websiteId],
          progressDetails: action.progressDetails || {},
          generatedDetailsTime: action.generatedDetailsTime,
        },
      };
    case DISMISS_PLAYBOOK_PROGRESS_RESPONSE:
      var updatedPlaybookProgressDetails = dismissPlaybookProgress2(
        state,
        action
      );
      return {
        ...state,
        [action.websiteId]: updatedPlaybookProgressDetails,
      };
    case UNDISMISS_PLAYBOOK_PROGRESS_RESPONSE:
      var updatedPlaybookProgressDetails = undismissPlaybookProgress2(
        state,
        action
      );
      return {
        ...state,
        [action.websiteId]: updatedPlaybookProgressDetails,
      };
    case SET_PLAYBOOK_DISMISS_SWITCH:
      return {
        ...state,
        showDismissPlaybookItems: action.show,
      };
    case SET_PLAYBOOK_ACTIVE_TAB:
      return {
        ...state,
        [action.websiteId]: {
          ...state[action.websiteId],
          activeTab: action.activeTab,
        },
      };
    case FETCH_COMPLETED_PLAYBOOK_ITEMS_RESPONSE:
      return {
        ...state,
        [action.websiteId]: {
          ...state[action.websiteId],
          completedProgressDetails: action.completedProgressDetails || [],
        },
      };
    default:
      return state;
  }
};

// src/reducers/keyword_ideas.jsx
var initialState40 = {};
var keyword_ideas_default = (state = initialState40, action) => {
  switch (action.type) {
    case FETCH_KEYWORD_IDEAS_RESPONSE:
      return {
        ...state,
        [action.websiteId]: {
          ...state[action.websiteId],
          [action.field]: action.ideas.flat(),
        },
      };
    default:
      return state;
  }
};

// src/reducers/geo_targets.jsx
var initialState41 = {};
var geo_targets_default = (state = initialState41, action) => {
  switch (action.type) {
    case FETCH_COUNTRY_GEO_TARGET_RESPONSE:
      return {
        ...state,
        countries: action.countries || {},
      };
    default:
      return state;
  }
};

// src/reducers/feedops_testimonials.jsx
var initialState42 = [];
var feedops_testimonials_default = (state = initialState42, action) => {
  switch (action.type) {
    case FETCH_FEEDOPS_TESTIMONIALS_RESPONSE:
      return action.feedopsTestimonials || [];
    default:
      return state;
  }
};

// src/reducers/accounts.jsx
var initialState43 = {};
var accountsReducer = (state = initialState43, action) => {
  switch (action.type) {
    case FETCH_ACCOUNT_USERS_RESPONSE:
      return {
        ...state,
        [action.accountId]: {
          ...state[action.accountId],
          users: action.accountUsers,
        },
      };
    default:
      return state;
  }
};
var accounts_default = accountsReducer;

// src/reducers/value/formats.jsx
var initialState44 = {};
var formats_default = (state = initialState44, action) => {
  switch (action.type) {
    case FETCH_VALUE_FORMATS_RESPONSE:
      const formats = action.formats.reduce(
        (index, fmt) => ({ ...index, [fmt.id]: fmt }),
        {}
      );
      return {
        ...state,
        ...formats,
      };
    default:
      return state;
  }
};

// src/reducers/value/operators.jsx
var initialState45 = {};
var operators_default = (state = initialState45, action) => {
  switch (action.type) {
    case FETCH_VALUE_OPERATORS_RESPONSE:
      const operators = action.operators.reduce(
        (index, op) => ({ ...index, [op.id]: op }),
        {}
      );
      return {
        ...state,
        ...operators,
      };
    default:
      return state;
  }
};

// src/reducers/value/index.jsx
var reducers3 = {
  formats: formats_default,
  operators: operators_default,
};
var value_default = combineReducers(reducers3);

// src/reducers/inventories/rules/action_types.jsx
var initialState46 = {};
var action_types_default = (state = initialState46, action) => {
  switch (action.type) {
    case FETCH_RULE_ACTION_TYPES_RESPONSE:
      const actionTypes = action.actionTypes.reduce(
        (index, at) => ({ ...index, [at.id]: at }),
        {}
      );
      return {
        ...state,
        ...actionTypes,
      };
    default:
      return state;
  }
};

// src/reducers/inventories/rules.jsx
var initialState47 = { actionTypes: {} };
var rules_default = (state = initialState47, action) => {
  switch (action.type) {
    case FETCH_RULES_RESPONSE:
      return {
        ...state,
        [action.websiteId]: {
          rules: action.rules,
        },
      };
    case PREVIEW_RULES_RESPONSE:
      return {
        ...state,
        [action.websiteId]: {
          ...state[action.websiteId],
          previewData: action.preview,
        },
      };
    default:
      return {
        ...state,
        actionTypes: action_types_default(state.actionTypes || {}, action),
      };
  }
};

// src/reducers/vertical/fields.jsx
var initialState48 = {};
var fields_default = (state = initialState48, action) => {
  switch (action.type) {
    case FETCH_VERTICAL_FIELDS_RESPONSE:
      const fields = action.fields.reduce(
        (index, field) => ({
          ...index,
          [field.id]: field,
        }),
        {}
      );
      return {
        ...state,
        ...fields,
      };
    default:
      return state;
  }
};

// src/reducers/vertical/index.jsx
var reducers4 = {
  fields: fields_default,
};
var vertical_default = combineReducers(reducers4);

// src/reducers/inventories/vendors.jsx
var initialState49 = [];
var vendors_default = (state = initialState49, action) => {
  switch (action.type) {
    case FETCH_VENDORS_RESPONSE:
      return [...action.vendors];
    default:
      return state;
  }
};

// src/reducers/feed_ops/feedbacks.jsx
var initialState50 = {
  openModal: false,
  feedbackFor: null,
  feedbackForId: null,
};
var feedbacks_default = (state = initialState50, action) => {
  switch (action.type) {
    case SHOW_FEEDOPS_FEEDBACK_MODAL:
      return {
        ...state,
        openModal: true,
        feedbackFor: action.feedbackFor,
        feedbackForId: action.feedbackForId,
      };
    case HIDE_FEEDOPS_FEEDBACK_MODAL:
      return {
        ...state,
        openModal: false,
        feedbackFor: null,
        feedbackForId: null,
      };
    default:
      return state;
  }
};

// src/reducers/index.jsx
var reducers5 = {
  app: app_default,
  billing: billing_default,
  feedApp: api_default,
  adwordsAccount: adwords_account_default,
  websiteDetails: website_details_default,
  feeds: feeds_default,
  campaignTypes: campaign_types_default,
  keywordList: keyword_list_default,
  keywordSuggestions: keyword_suggestions_default,
  searchTermRequests: search_term_requests_default,
  adHeadlineList: ad_headline_list_default,
  scenario: scenario_default,
  inventories: inventories_default,
  shoppingMappingsSheet: shopping_mappings_sheet_default,
  shoppingLink: shopping_link_default,
  currencies: currencies_default,
  variationsSheet: variations_sheet_default,
  builds: builds_default,
  structuredSnippets: structured_snippet_default,
  promotions: promotions_default,
  merchantCenterFeed: merchant_center_feed_default,
  products: products_default,
  ads: ads_default,
  keywords: keywords_default,
  users: users_default,
  websites: websites_default,
  notifications: notifications_default,
  google: google_default,
  microsoft: microsoft_default2,
  performance: performance_default2,
  workflow: workflow_default,
  settings: settings_default,
  advertisingGoalTypes: advertising_goal_types_default,
  advertising: advertising_default,
  dateRanges: date_ranges_default,
  qualityScoreComponents: quality_score_components_default,
  productFeedsTitles: titles_default,
  productFeedsReplacements: replacements_default,
  productFeedsAISuggestions: ai_suggestions_default,
  productUrlSettings: product_url_settings_default,
  driveDocs: drive_docs_default,
  playbook: playbook_progress_default,
  keywordIdeas: keyword_ideas_default,
  geoTargets: geo_targets_default,
  feedopsTestimonials: feedops_testimonials_default,
  accounts: accounts_default,
  value: value_default,
  rules: rules_default,
  vertical: vertical_default,
  vendors: vendors_default,
  feedopsFeedbacks: feedbacks_default,
};
var reducer3 = combineReducers(reducers5);
var reducers_default = reducer3;

// src/providers/FeedOpsReduxProvider.jsx
var store = configureStore({ reducer: reducers_default });

// src/util/time_ago_in_words.jsx
var import_moment2 = __toESM(require_moment());
var timeAgoInWords = (timeStamp, format = 'YYYY-MM-DD hh:mm:ss ZZ') => {
  if (!timeStamp) {
    return 'Never';
  }
  return (0, import_moment2.default)(timeStamp, format).fromNow();
};
var time_ago_in_words_default = timeAgoInWords;

// src/selectors/websites/channel_settings.jsx
var channelSettingsSelector = (0, import_reselect37.createSelector)(
  [websiteDetailSelector],
  (websiteDetail) => websiteDetail.channelSettings || []
);
var enabledChannelSettingsSelector = (0, import_reselect37.createSelector)(
  [channelSettingsSelector],
  (channelSettings) => channelSettings.filter((channel) => channel.enabled)
);
var enabledChannelsSelector = (0, import_reselect37.createSelector)(
  [enabledChannelSettingsSelector],
  (channelSettings) => channelSettings.map((channel) => channel.channel)
);
var getFeedStatusByChannelSelector = (0, import_reselect37.createSelector)(
  [websiteFeedDetailSelector],
  (feedDetail) =>
    feedDetail && feedDetail.updatedAt
      ? time_ago_in_words_default(feedDetail.updatedAt)
      : 'Generating'
);
var googleAccountSelector = (0, import_reselect37.createSelector)(
  [
    websiteMerchantCenterSelector,
    websiteAdwordsSelector,
    getFeedStatusByChannelSelector,
  ],
  (merchantCenterAccount, adwordsAccount, feedStatus) => {
    const { merchantCenterAccountId, merchantCenterAccountName, oauthUser } =
      merchantCenterAccount || {};
    const { adwordsAccountId } = adwordsAccount || {};
    return [
      {
        title: 'Google Merchant Center',
        image: google_merchant_center_default,
        accountId: merchantCenterAccountId,
        accountName: merchantCenterAccountName,
        connectedBy: oauthUser,
        updatedAt: feedStatus,
        connectPath: 'website/connect_merchant_center_account',
        disconnect: (websiteId) =>
          store.dispatch(deleteMerchantCenterAccount(websiteId)),
        disabled: false,
      },
      {
        title: 'Google Ads',
        image: google_ads_default,
        accountId: adwordsAccountId,
        connectedBy: oauthUser,
        connectPath: 'website/connect_ads_account',
        disabled: !!!merchantCenterAccountId,
      },
    ];
  }
);
var facebookAccountSelector = (0, import_reselect37.createSelector)(
  [getFeedStatusByChannelSelector],
  (feedStatus) => [
    {
      title: 'Facebook Catalogue',
      image: meta_default,
      updatedAt: feedStatus,
      showAccessFeed: true,
    },
  ]
);
var microsoftAccountSelector = (0, import_reselect37.createSelector)(
  [websiteMicrosoftMerchantCenterSelector, websiteMicrosoftAdwordsSelector],
  (merchantCenterAccount, adwordsAccount) => {
    const { merchantCenterAccountId, merchantCenterAccountName, oauthUser } =
      merchantCenterAccount || {};
    const { customerAccountId } = adwordsAccount || {};
    return [
      {
        title: 'Microsoft Merchant Center',
        image: microsoft_default,
        accountId: merchantCenterAccountId,
        accountName: merchantCenterAccountName,
        connectedBy: oauthUser,
        connectPath:
          'website/connect_merchant_center_account?channel=microsoft',
        disabled: false,
        disconnect: (websiteId) =>
          store.dispatch(deleteMerchantCenterAccount2(websiteId)),
      },
      {
        title: 'Microsoft Ads',
        image: microsoft_default,
        accountId: customerAccountId,
        connectedBy: oauthUser,
        connectPath: 'website/connect_ads_account?channel=microsoft',
        disabled: !!!merchantCenterAccountId,
      },
    ];
  }
);
var bazaarvoiceAccountSelector = (0, import_reselect37.createSelector)(
  [getFeedStatusByChannelSelector],
  (feedStatus) => [
    {
      title: 'Bazaarvoice',
      image: bazaarvoice_default,
      updatedAt: feedStatus,
      showAccessFeed: true,
    },
  ]
);
var reebeloAccountSelector = (0, import_reselect37.createSelector)(
  [getFeedStatusByChannelSelector],
  (feedStatus) => [
    {
      title: 'Reebelo',
      image: reebelo_default,
      updatedAt: feedStatus,
      showAccessFeed: true,
    },
  ]
);
var pinterestAccountSelector = (0, import_reselect37.createSelector)(
  [getFeedStatusByChannelSelector],
  (feedStatus) => [
    {
      title: 'Pinterest',
      image: pinterest_default,
      updatedAt: feedStatus,
      showAccessFeed: true,
    },
  ]
);

// src/selectors/inventories/vendors.jsx
var vendorsSelector = (state) => state.vendors || [];
var enabledVendorsSelector = (0, import_reselect38.createSelector)(
  [vendorsSelector, enabledChannelSettingsSelector],
  (vendors, channelSettings) =>
    vendors.filter((v) => channelSettings.find((cs) => cs.vendorId === v.id))
);

// src/selectors/keyword_ideas.jsx
var import_reselect39 = __toESM(require_lib());
var keywordIdeasSelector = (state) => state.keywordIdeas || {};
var websiteKeywordIdeasSelector = (0, import_reselect39.createSelector)(
  [keywordIdeasSelector, websiteIdSelector],
  (keywordIdeas, websiteId) =>
    keywordIdeas && Object.keys(keywordIdeas).length > 0
      ? keywordIdeas[websiteId]
      : {}
);
var websiteFieldKeywordIdeasSelector = (field) =>
  (0, import_reselect39.createSelector)(
    [websiteKeywordIdeasSelector],
    (websiteKeywordIdeas) =>
      websiteKeywordIdeas && Object.keys(websiteKeywordIdeas).length > 0
        ? websiteKeywordIdeas[field]
        : []
  );

// src/selectors/microsoft/adwords.jsx
var import_reselect40 = __toESM(require_lib());
var microsoftSelector = (state) => state.microsoft || {};
var adwordsSelector = (0, import_reselect40.createSelector)(
  [microsoftSelector],
  (microsoft) => microsoft.adwords || {}
);
var adwordsAccountsSelector2 = (0, import_reselect40.createSelector)(
  [adwordsSelector],
  (adwords) => adwords.accounts || []
);

// src/selectors/microsoft/merchant_center.jsx
var import_reselect41 = __toESM(require_lib());
var microsoftSelector2 = (state) => state.microsoft || {};
var merchantCenterSelector = (0, import_reselect41.createSelector)(
  [microsoftSelector2],
  (microsoft) => microsoft.merchantCenter || {}
);
var merchantCenterAccountsSelector = (0, import_reselect41.createSelector)(
  [merchantCenterSelector],
  (merchantCenter) => merchantCenter.accounts || []
);
var merchantCenterCatalogsSelector = (0, import_reselect41.createSelector)(
  [merchantCenterSelector],
  (merchantCenter) => merchantCenter.catalogs || []
);

// src/selectors/platform_features.jsx
var import_reselect42 = __toESM(require_lib());
var thirdPartyBillingDetailsSelector = (0, import_reselect42.createSelector)(
  [firstInventoryInWebsiteSelector, websiteDetailSelector],
  (inventoryDetail, websiteDetail) =>
    inventoryDetail.feedChampionEmbedded && websiteDetail.platform === 'shopify'
      ? { hasBilling: true, currency: 'USD' }
      : { hasBilling: false }
);

// src/selectors/playbook/playbook_progress.jsx
var import_reselect43 = __toESM(require_lib());
var import_lodash11 = __toESM(require_lodash());
var playbookSelector = (state, _props) => state.playbook || {};
var showDismissPlaybookItemsSelector = (0, import_reselect43.createSelector)(
  [playbookSelector],
  (playbookProgress) => playbookProgress.showDismissPlaybookItems || false
);
var completedPlaybookProgressWebsiteSelector = (0,
import_reselect43.createSelector)(
  [playbookSelector, websiteIdSelector],
  (playbookProgress, websiteId) =>
    !import_lodash11.default.isEmpty(playbookProgress[websiteId])
      ? playbookProgress[websiteId].completedProgressDetails || []
      : []
);
var completedPlaybookProgressWebsiteChannelSelector = (0,
import_reselect43.createSelector)(
  [completedPlaybookProgressWebsiteSelector, channelSelector],
  (allCompletedItems, channel) => {
    return channel === CHANNEL_ALL
      ? allCompletedItems
      : allCompletedItems.filter((item) => item.channel === channel) || [];
  }
);
var playbookProgressWebsiteSelector = (0, import_reselect43.createSelector)(
  [playbookSelector, websiteIdSelector],
  (playbookProgress, websiteId) =>
    !import_lodash11.default.isEmpty(playbookProgress[websiteId])
      ? playbookProgress[websiteId].progressDetails || {}
      : {}
);
var playbookProgressWebsiteGeneratedAtSelector = (0,
import_reselect43.createSelector)(
  [playbookSelector, websiteIdSelector],
  (playbookProgress, websiteId) =>
    !import_lodash11.default.isEmpty(playbookProgress[websiteId])
      ? playbookProgress[websiteId].generatedDetailsTime
      : null
);
var playbookProgressWebsiteActiveItemsSelector = (0,
import_reselect43.createSelector)(
  [playbookProgressWebsiteSelector],
  (websiteProgress) =>
    (Object.values(websiteProgress).flat(1) || []).filter(
      (item) => !item.isDismissed && item.display
    )
);
var playbookProgressWebsiteChannelActiveItemsSelector = (0,
import_reselect43.createSelector)(
  [playbookProgressWebsiteActiveItemsSelector, channelSelector],
  (allActiveItems, channel) => {
    return channel === CHANNEL_ALL
      ? allActiveItems
      : allActiveItems.filter((item) => item.channel === channel) || [];
  }
);
var playbookProgressWebsiteChannelDismissItemsSelector = (0,
import_reselect43.createSelector)(
  [playbookProgressWebsiteSelector, channelSelector],
  (websiteProgress, channel) => {
    var allDismissedItems = (
      Object.values(websiteProgress).flat(1) || []
    ).filter((item) => item.isDismissed && item.display);
    return channel === CHANNEL_ALL
      ? allDismissedItems
      : allDismissedItems.filter((item) => item.channel === channel) || [];
  }
);
var playbookItemByIdSelector = (websitePlaybookItemId) =>
  (0, import_reselect43.createSelector)(
    [playbookProgressWebsiteSelector],
    (websiteProgress) => {
      return (Object.values(websiteProgress).flat(1) || []).filter(
        (item) => item.id === websitePlaybookItemId
      )[0];
    }
  );
var playbookProgressWebsiteChannelSelector = (0,
import_reselect43.createSelector)(
  [
    playbookProgressWebsiteSelector,
    noDefaultChannelSelector,
    showDismissPlaybookItemsSelector,
  ],
  (websiteProgress, channel, showDismiss) => {
    var allItems =
      !channel || channel === CHANNEL_ALL
        ? PLAYBOOK_CHANNELS.map(
            (orderedChannel) =>
              websiteProgress[
                import_lodash11.default.camelCase(orderedChannel)
              ] || []
          ).flat(1)
        : websiteProgress[channel] || [];
    allItems = allItems
      .map((i) => ({
        ...i,
        channelOrder: PLAYBOOK_CHANNELS.findIndex((c) => c === i.channel),
      }))
      .filter((i) => (showDismiss ? i.isDismissed : !i.isDismissed));
    return import_lodash11.default.orderBy(
      allItems.filter((i) => i.enabled && i.display),
      ['channelOrder', 'opportunity'],
      ['asc', 'desc']
    );
  }
);
var playbookItemsByChannelSelector = (channel) =>
  (0, import_reselect43.createSelector)(
    [playbookProgressWebsiteSelector],
    (websiteProgress) => {
      var items;
      if (channel === CHANNEL_ALL) {
        items = Object.values(websiteProgress).flat(1) || [];
      } else {
        items = websiteProgress[channel] || [];
      }
      return items;
    }
  );
var channelOptimisationScoreSelector = (channel) =>
  (0, import_reselect43.createSelector)(
    [playbookItemsByChannelSelector(channel)],
    (items) => {
      var possibleScore = items.reduce(
        (accumulator, item) => accumulator + item.possibleScore,
        0
      );
      if (possibleScore <= 0) {
        return 0;
      }
      var score = items.reduce(
        (accumulator, item) => accumulator + item.score,
        0
      );
      return parseInt((score * 100) / possibleScore);
    }
  );
var HEALTH_CRITICAL = 'Critical';
var HEALTH_ERROR = 'Error';
var HEALTH_WARNING = 'Warning';
var HEALTH_OK = 'OK';
var HEALTH_IN_ORDER = [
  HEALTH_OK,
  HEALTH_WARNING,
  HEALTH_ERROR,
  HEALTH_CRITICAL,
];
var channelHealthSelector = (channel) =>
  (0, import_reselect43.createSelector)(
    [playbookItemsByChannelSelector(channel)],
    (items) => {
      var healths = items.map((i) =>
        HEALTH_IN_ORDER.findIndex((h) => h === i.health)
      );
      var index = Math.max(...healths);
      return index > 0 ? HEALTH_IN_ORDER[index] : HEALTH_OK;
    }
  );

// src/selectors/product_feeds/ai_suggestions.jsx
var import_reselect44 = __toESM(require_lib());
var aiSuggestionsDataSelector = (state) =>
  state.productFeedsAISuggestions || {};
var websiteAiSuggestionsSelector = (0, import_reselect44.createSelector)(
  [aiSuggestionsDataSelector, websiteIdSelector],
  (aiSuggestionsData, websiteId) => aiSuggestionsData[websiteId] || {}
);
var websiteAiCreditHistorySelector = (0, import_reselect44.createSelector)(
  [websiteAiSuggestionsSelector],
  (aiSuggestionsForWebsite) => aiSuggestionsForWebsite.creditHistory || {}
);
var websiteAvailableAiCreditsSelector = (0, import_reselect44.createSelector)(
  [websiteAiCreditHistorySelector],
  (creditHistory) =>
    creditHistory.totalMonthlyCredits - creditHistory.creditsUsed || 0
);

// src/selectors/product_feeds/replacements.jsx
var import_reselect45 = __toESM(require_lib());
var productFeedsReplacementsSelector = (state, _props) =>
  state.productFeedsReplacements || {};
var websiteReplacementsSelector = (0, import_reselect45.createSelector)(
  [productFeedsReplacementsSelector, websiteIdSelector],
  (productFeedsReplacements, websiteId) =>
    productFeedsReplacements[websiteId] || {}
);
var websiteCategoryReplacementsSelector = (0, import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.categoryReplacements || []
);
var websiteAttributesSelector = (0, import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.attributes || {}
);
var columnCompareFunction = (a, b) => {
  if (b.columnCategoryPosition < a.columnCategoryPosition) {
    return 1;
  } else if (
    b.columnCategoryPosition === a.columnCategoryPosition ||
    b.columnPosition < a.columnPosition
  ) {
    return 1;
  } else if (
    b.columnCategoryPosition === a.columnCategoryPosition &&
    b.columnPosition === a.columnPosition
  ) {
    return 0;
  } else {
    return -1;
  }
};
var websiteAllAttributesSelector = (0, import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) =>
    Object.values(website.allAttributes || {}).sort(columnCompareFunction)
);
var websiteAttributeReplacementsSelector = (0,
import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.attributeReplacements || {}
);
var websiteUpdatedAttributeReplacementsSelector = (0,
import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.updatedAttributeReplacements || {}
);
var websiteProductReplacementsSelector = (0, import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.productReplacements || []
);
var websiteProductOptimisationSuggestionsSelector = (0,
import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.productOptimisationSuggestions || []
);
var websiteProductReplacementsMetaDataSelector = (0,
import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.productReplacementsMetaData || {}
);
var websiteProductReplacementsPageSelector = (0,
import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.page || 1
);
var websiteProductReplacementsPerPageSelector = (0,
import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.perPage || 50
);
var websiteProductReplacementsSearchTermSelector = (0,
import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.searchTerm || ''
);
var websiteProductReplacementsFiltersSelector = (0,
import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.filters || []
);
var websiteProductReplacementsSelectedColumnsSelector = (0,
import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.selectedSuggestionColumns || []
);
var websiteUpdatedProductAttributesSelector = (0,
import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.updatedProductAttributes || {}
);
var websiteUpdatedItemsDisabledSelector = (0, import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.updatedInventoryItems || {}
);
var parseQueryParams = (location, paramName) => {
  if (location) {
    const qsAttributes = query_string_default.parse(location.search);
    const paramValue = qsAttributes[paramName];
    if (paramValue) {
      return paramValue.split(',').map((id) => parseInt(id, 10));
    }
  }
  return null;
};
var suggestionBatchIdsSelector = (_state, props) => {
  return parseQueryParams(props.location, 'batch_ids');
};
var missingProductTypesPercent = (_state, props) => {
  return parseQueryParams(props.location, 'missing_types');
};
var websitePlaybookItemIdSelector = (_state, props) => {
  return parseQueryParams(props.location, 'website_playbook_item_id')[0];
};
var isAllRowsSelectedSelector = (0, import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.isAllRowsSelected || false
);
var websiteSelectedItemsSelector = (0, import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.selectedItems || []
);
var websiteQueryChangedStatusSelector = (0, import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.queryChanged || false
);
var websiteIsRuleModalOpenSelector = (0, import_reselect45.createSelector)(
  [websiteReplacementsSelector],
  (website) => website.isRuleModalOpen || false
);

// src/selectors/product_feeds/titles.jsx
var import_reselect46 = __toESM(require_lib());
var import_lodash12 = __toESM(require_lodash());
var titlesSelector = (state, _props) => state.productFeedsTitles || {};
var websiteProductTitlesSelector = (websiteId) =>
  (0, import_reselect46.createSelector)(
    [titlesSelector],
    (titles) => titles[websiteId] || {}
  );
var websiteProductTitlesAvailableFieldsSelector = (websiteId) =>
  (0, import_reselect46.createSelector)(
    [websiteProductTitlesSelector(websiteId)],
    (titles) => titles.availableFields || []
  );
var sortedFieldsWithDisplayNames = (availableFields, attributes) => {
  var allDisplayFields = {};
  availableFields.forEach((field) => {
    const attribute = attributes.find(
      (attribute2) => attribute2.name === capitalCase(field)
    );
    allDisplayFields[
      !import_lodash12.default.isEmpty(attribute)
        ? attribute.columnName
        : capitalCase(field)
    ] = field;
  });
  var sortedDisplayFields = {};
  (0, import_lodash12.default)(allDisplayFields)
    .keys()
    .sort()
    .each((key) => {
      sortedDisplayFields[key] = allDisplayFields[key];
    });
  return sortedDisplayFields;
};
var websiteProductTitlesSortedAvailableFieldsSelector = (websiteId) =>
  (0, import_reselect46.createSelector)(
    [
      websiteProductTitlesAvailableFieldsSelector(websiteId),
      websiteAllAttributesSelector,
    ],
    (availableFields, attributes) => {
      return sortedFieldsWithDisplayNames(availableFields, attributes);
    }
  );
var websiteProductTitlesAllAvailableAttributesSelector = (websiteId) =>
  (0, import_reselect46.createSelector)(
    [websiteProductTitlesSelector(websiteId)],
    (titles) => titles.allAvailableAttributes || []
  );

// src/selectors/product_url_settings.jsx
var import_reselect47 = __toESM(require_lib());
var productUrlSettingsSelector = (state, _props) =>
  state.productUrlSettings || {};
var websiteProductUrlSettingsSelector = (websiteId) =>
  (0, import_reselect47.createSelector)(
    [productUrlSettingsSelector],
    (productUrlSettings) => productUrlSettings[websiteId] || {}
  );

// src/selectors/products.jsx
var import_reselect48 = __toESM(require_lib());
var productsSelector = (state) => state.products || {};
var productIdsByScenario = (scenarioId) =>
  (0, import_reselect48.createSelector)(
    [productsSelector],
    (products) => products.productIds[scenarioId] || []
  );
var productsAvailableSelector = (0, import_reselect48.createSelector)(
  [productsSelector],
  (products) => products.available
);
var productsWithPlaceholdersSelector = (0, import_reselect48.createSelector)(
  [productsSelector, (_state, ids) => ids],
  (products, ids) => ids.map((id) => products[id] || { id, fetching: true })
);

// src/selectors/promotions.jsx
var import_reselect49 = __toESM(require_lib());
var import_sort_by = __toESM(require_sort_by());
var promotionsListSelector = (state) => state.promotions.list;
var promotionsSelector = (0, import_reselect49.createSelector)(
  promotionsListSelector,
  (list) => Object.values(list)
);
var promotionsListExistsSelector = (state) => {
  var promotionCount = Object.values(state.promotions.list).length;
  return promotionCount > 0 ? true : false;
};
var promotionsExistsSelector = (0, import_reselect49.createSelector)(
  promotionsListExistsSelector,
  (selectors) => {
    return selectors;
  }
);
var promotionsSearchTextSelector = (state) =>
  state.search['promotions.list'].text;
var promotionsSearchIdsSelector = (state) =>
  state.search['promotions.list'].result;
var promotionsSortColumnSelector = (state) => state.promotions.sortColumn;
var displayPromotionsSelector = (0, import_reselect49.createSelector)(
  [
    promotionsListSelector,
    promotionsSearchIdsSelector,
    promotionsSortColumnSelector,
  ],
  (list, ids, sortColumn) => {
    return Object.values(list)
      .filter((p) => ids.indexOf(p.id) >= 0)
      .sort((0, import_sort_by.default)(sortColumn));
  }
);
var activateNewPromotionsSelector = (state) =>
  state.promotions.activateNewPromotions;
var promotionDetailItemsSelector = (state) =>
  state.promotions.promotionDetail.items;
var promotionDetailItemsListSelector = (0, import_reselect49.createSelector)(
  promotionDetailItemsSelector,
  (list) => Object.values(list)
);
var promotionDetailItemsSearchSelector = (state) =>
  state.search['promotions.promotionDetail.items'];
var promotionDetailItemsSearchResultSelector = (state) =>
  promotionDetailItemsSearchSelector(state).result;
var promotionDetailItemsSortColumnSelector = (state) =>
  state.promotions.itemSortColumn;
var promotionDetailItemsDisplaySelector = (0, import_reselect49.createSelector)(
  [
    promotionDetailItemsSelector,
    promotionDetailItemsSearchResultSelector,
    promotionDetailItemsSortColumnSelector,
  ],
  (list, ids, sortColumn) =>
    ids.map((id) => list[id]).sort((0, import_sort_by.default)(sortColumn))
);
var hasActivePromotions = (0, import_reselect49.createSelector)(
  [promotionsListSelector],
  (list) => Object.values(list).some((promotion) => promotion.status === true)
);
var promotionDetailSearchTextSelector = (state) =>
  promotionDetailItemsSearchSelector(state).text;

// src/selectors/quality_score_components.jsx
var import_reselect50 = __toESM(require_lib());
var qualityScoreComponentsSelector = (state) => state.qualityScoreComponents;
var averageQualityScoreComponentsSelector = (0,
import_reselect50.createSelector)(
  [qualityScoreComponentsSelector],
  (qualityScoreComponents) =>
    qualityScoreComponents.averageQualityScoreComponents || {}
);
var websiteAverageAdRelevanceSelector = (0, import_reselect50.createSelector)(
  [averageQualityScoreComponentsSelector],
  (averageQualityScoreComponents) =>
    averageQualityScoreComponents.adRelevance || 0
);
var websiteAverageExpectedCTRSelector = (0, import_reselect50.createSelector)(
  [averageQualityScoreComponentsSelector],
  (averageQualityScoreComponents) =>
    averageQualityScoreComponents.expectedCtr || 0
);
var websiteAverageLandingPageExperienceSelector = (0,
import_reselect50.createSelector)(
  [averageQualityScoreComponentsSelector],
  (averageQualityScoreComponents) =>
    averageQualityScoreComponents.landingPageExperience || 0
);
var websiteSavingsValuesSelector = (0, import_reselect50.createSelector)(
  [qualityScoreComponentsSelector],
  (qualityScoreComponents) => qualityScoreComponents.websiteSavingsValues || {}
);
var landingPageExperienceSavingsValuesSelector = (0,
import_reselect50.createSelector)(
  [websiteSavingsValuesSelector],
  (websiteSavingsValues) => websiteSavingsValues.landingPageExperience || {}
);
var expectedCTRSavingsValuesSelector = (0, import_reselect50.createSelector)(
  [websiteSavingsValuesSelector],
  (websiteSavingsValues) => websiteSavingsValues.expectedCtr || {}
);
var adRelevanceSavingsValuesSelector = (0, import_reselect50.createSelector)(
  [websiteSavingsValuesSelector],
  (websiteSavingsValues) => websiteSavingsValues.adRelevance || {}
);
var systemAverageQualityScoreComponentsSelector = (0,
import_reselect50.createSelector)(
  [qualityScoreComponentsSelector],
  (qualityScoreComponents) =>
    qualityScoreComponents.systemAverageQualityScoreComponents || {}
);
var systemAverageAdRelevanceSelector = (0, import_reselect50.createSelector)(
  [systemAverageQualityScoreComponentsSelector],
  (systemAverageQualityScoreComponents) =>
    systemAverageQualityScoreComponents.adRelevance || {}
);
var systemAverageExpectedCTRSelector = (0, import_reselect50.createSelector)(
  [systemAverageQualityScoreComponentsSelector],
  (systemAverageQualityScoreComponents) =>
    systemAverageQualityScoreComponents.expectedCtr || {}
);
var systemAverageLandingPageExperienceSelector = (0,
import_reselect50.createSelector)(
  [systemAverageQualityScoreComponentsSelector],
  (systemAverageQualityScoreComponents) =>
    systemAverageQualityScoreComponents.landingPageExperience || {}
);
var websiteWideQsScoresSelector = (0, import_reselect50.createSelector)(
  [qualityScoreComponentsSelector],
  (qualityScoreComponents) => qualityScoreComponents.websiteWideQsScores || 0
);

// src/selectors/value/operators.jsx
var import_reselect51 = __toESM(require_lib());
var valueOperatorsSelector = (state) => state.value.operators || {};
var valueOperatorSelector = (operatorId) =>
  (0, import_reselect51.createSelector)(
    [valueOperatorsSelector],
    (operators) => operators[operatorId] || {}
  );

// src/selectors/vertical/fields.jsx
var import_reselect52 = __toESM(require_lib());
var verticalFieldsSelector = (state) =>
  (state.vertical && state.vertical.fields) || {};
var verticalFieldSelector = (verticalFieldId) =>
  (0, import_reselect52.createSelector)(
    [verticalFieldsSelector],
    (fields) => fields[verticalFieldId] || {}
  );

// src/index.js
var index_default = {};
export {
  actions_exports as actions,
  index_default as default,
  reducers_default as reducer,
  selectors_exports as selectors,
};
/*! Bundled license information:

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

punycode/punycode.js:
  (*! https://mths.be/punycode v1.4.1 by @mathias *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

moment/moment.js:
  (*! moment.js *)
  (*! version : 2.30.1 *)
  (*! authors : Tim Wood, Iskren Chernev, Moment.js contributors *)
  (*! license : MIT *)
  (*! momentjs.com *)
*/
